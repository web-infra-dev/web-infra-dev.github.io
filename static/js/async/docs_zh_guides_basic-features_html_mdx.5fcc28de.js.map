{"version":3,"file":"static/js/async/docs_zh_guides_basic-features_html_mdx.5fcc28de.js","sources":["./docs/zh/guides/basic-features/html.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fbasic-features%2Fhtml.mdx\"] = {\"toc\":[{\"text\":\"JSX 语法\",\"id\":\"jsx-语法\",\"depth\":2},{\"text\":\"HTML 组件\",\"id\":\"html-组件\",\"depth\":3},{\"text\":\"模板参数\",\"id\":\"模板参数\",\"depth\":3},{\"text\":\"基础示例\",\"id\":\"基础示例\",\"depth\":3},{\"text\":\"Scripts 组件示例\",\"id\":\"scripts-组件示例\",\"depth\":3},{\"text\":\"Html 语法\",\"id\":\"html-语法\",\"depth\":2},{\"text\":\"自定义 HTML 片段\",\"id\":\"自定义-html-片段\",\"depth\":3},{\"text\":\"完全自定义 HTML 模板\",\"id\":\"完全自定义-html-模板\",\"depth\":3},{\"text\":\"模板参数\",\"id\":\"模板参数-1\",\"depth\":3},{\"text\":\"按入口设置\",\"id\":\"按入口设置\",\"depth\":3}],\"title\":\"HTML 模板\",\"frontmatter\":{\"title\":\"HTML 模板\",\"sidebar_position\":9}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        strong: \"strong\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        h3: \"h3\",\n        ul: \"ul\",\n        li: \"li\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"html-模板\">{\"HTML 模板\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#html-模板\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js 提供了 \"}<_components.strong>{\"JSX 语法\"}</_components.strong>{\"和 \"}<_components.strong>{\"HTML(EJS) 语法\"}</_components.strong>{\"两种方式用于自定义 HTML 模板。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"jsx-语法\">{\"JSX 语法\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#jsx-语法\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 约定，在 \"}<_components.code>{\"src/\"}</_components.code>{\" 或入口目录下，可以创建 \"}<_components.code>{\"Document.[jt]sx\"}</_components.code>{\" 文件并默认导出组件，该组件的渲染结果可以作为入口的 HTML 模板。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如以下目录结构：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── src\\n    ├── Document.tsx\\n    ├── entry-a\\n    │   ├── Document.tsx\\n    │   └── routes\\n    ├── entry-b\\n    │    └── routes\\n    └── modern-app-env.d.ts\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"entry-a\"}</_components.code>{\" 会优先使用当前入口下的 \"}<_components.code>{\"Docoument.[jt]sx\"}</_components.code>{\" 文件。如果当前入口没有 \"}<_components.code>{\"Document.[jt]sx\"}</_components.code>{\" 文件，例如 \"}<_components.code>{\"entry-b\"}</_components.code>{\"，则会查找根目录下的 \"}<_components.code>{\"Document.[jt]sx\"}</_components.code>{\" 文件。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果未找到，将会使用 Modern.js 的默认模板。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"html-组件\">{\"HTML 组件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#html-组件\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Modern.js 提供了一些列渲染页面的组件，用来帮助开发者生成模板，可以从 \"}<_components.code>{\"@modern-js/runtime/document\"}</_components.code>{\" 中使用这些组件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { Html, Body, Root, Head, Scripts } from '@modern-js/runtime/document';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这些组件分别用于渲染：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Html\"}</_components.code>{\"：提供原生 HTML Element 的能力，并能默认渲染开发者未添加的必须的组件。\"}<_components.code>{\"<Head>\"}</_components.code>{\" 和 \"}<_components.code>{\"<Body>\"}</_components.code>{\" 是必须要存在的，其它组件可以按需选择合适的组件进行组装。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Body\"}</_components.code>{\"：提供原生 Body Element 的能力，内部需要包含 \"}<_components.code>{\"<Root>\"}</_components.code>{\" 组件，也支持其它元素同时作为子元素，例如添加页脚。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Root\"}</_components.code>{\"：渲染的根节点 \"}<_components.code>{\"<div id='root'></div>\"}</_components.code>{\"。默认根节点的 \"}<_components.code>{\"id = 'root'\"}</_components.code>{\"。可以设置 \"}<_components.code>{\"props.rootId\"}</_components.code>{\" 来更改 id 属性。可以添加子组件，也会被渲染到 HTML 模板中，当 React 渲染完成后会被覆盖，一般用来实现全局 Loading。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Head\"}</_components.code>{\"：提供原生 Head Element 的能力，并会自动填充 \"}<_components.code>{\"<meta>\"}</_components.code>{\"，以及 \"}<_components.code>{\"<Scripts>\"}</_components.code>{\" 组件。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Scripts\"}</_components.code>{\"：用于控制构建生成的 \"}<_components.code>{\"<script>\"}</_components.code>{\" 标签的位置，默认放在 \"}<_components.code>{\"<Head>\"}</_components.code>{\" 组件中。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p><_components.code>{\"Comment\"}</_components.code>{\"：将用户编写的 \"}<_components.code>{\"<!-- gateway -->\"}</_components.code>{\" 这种注释，保留输出到最新渲染的 html 中。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h3 id=\"模板参数\">{\"模板参数\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#模板参数\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"因为是 JSX 形式，\"}<_components.code>{\"Document.[jt]sx\"}</_components.code>{\" 里，可以比较自由的在组件内使用各种变量去赋值给各种自定义组件。\"}</_components.p>{\"\\n\"}<_components.p>{\"Modern.js 也提供了 \"}<_components.code>{\"DocumentContext\"}</_components.code>{\" 来提供一些配置、环境参数，方便直接获取。主要以下参数：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"processEnv\"}</_components.code>{\"：提供构建时的 \"}<_components.code>{\"process.env\"}</_components.code>{\"。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"config\"}</_components.code>{\"：Modern.js 项目的配置。目前只暴露出 output 相关的配置。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"entryName\"}</_components.code>{\"：当前的入口名。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"templateParams\"}</_components.code>{\"：HTML 模板的参数（为了兼容传统模板，不推荐使用）。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h3 id=\"基础示例\">{\"基础示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#基础示例\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import React, { useContext } from 'react';\\nimport {\\n  Html,\\n  Root,\\n  Head,\\n  Body,\\n  Comment,\\n  DocumentContext,\\n} from '@modern-js/runtime/document';\\n\\nexport default function Document(): React.ReactElement {\\n  // DocumentContext 提供一些构建时的参数\\n  const {\\n    config: { output: htmlConfig },\\n    entryName,\\n    templateParams,\\n  } = useContext(DocumentContext);\\n\\n  return (\\n    <Html>\\n      <Head>\\n        <link href=\\\"https://modernjs.dev\\\" />\\n        <Comment>{'<!-- Need a Comment -->'}</Comment>\\n      </Head>\\n      <Body>\\n        <Root rootId=\\\"root\\\">\\n          <h1 style={{ color: 'red' }}>以下为构建时传过来的参数：</h1>\\n          <h2>entryName: {entryName}</h2>\\n          <h2>title: {htmlConfig.title}</h2>\\n          <h2>rootId: {templateParams.mountId}</h2>\\n        </Root>\\n        <h1>bottom</h1>\\n      </Body>\\n    </Html>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"以上 JSX 组件，将会生成以下 HTML 模板：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-html\">{'<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\"utf-8\" />\\n    <meta\\n      name=\"viewport\"\\n      content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no, viewport-fit=cover, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\"\\n    />\\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" />\\n    <meta name=\"renderer\" content=\"webkit\" />\\n    <meta name=\"layoutmode\" content=\"standard\" />\\n    <meta name=\"imagemode\" content=\"force\" />\\n    <meta name=\"wap-font-scale\" content=\"no\" />\\n    <meta name=\"format-detection\" content=\"telephone=no\" />\\n    <link rel=\"icon\" href=\"/a.icon\" />\\n    <script defer src=\"/static/js/builder-runtime.js\"></script>\\n    <script defer src=\"/static/js/lib-react.js\"></script>\\n    <script defer src=\"/static/js/lib-polyfill.js\"></script>\\n    <script defer src=\"/static/js/lib-router.js\"></script>\\n    <script defer src=\"/static/js/sub.js\"></script>\\n    <link href=\"https://modernjs.dev\" />\\n    <!-- Need a Comment -->\\n  </head>\\n\\n  <body>\\n    <div id=\"root\">\\n      <!--<?- html ?>-->\\n      <h1 style=\"color:red\">以下为构建时传过来的参数：</h1>\\n      <h2>entryName: sub</h2>\\n      <h2>title: </h2>\\n      <h2>rootId: root</h2>\\n    </div>\\n    <h1>bottom</h1>\\n    <!--<?- chunksMap.js ?>-->\\n    <!--<?- SSRDataScript ?>-->\\n  </body>\\n</html>\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"scripts-组件示例\">{\"Scripts 组件示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#scripts-组件示例\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"你可以使用 \"}<_components.code>{\"<Scripts>\"}</_components.code>{\" 组件，将构建生成的 \"}<_components.code>{\"<script>\"}</_components.code>{\" 标签插入到 \"}<_components.code>{\"<body>\"}</_components.code>{\" 标签内：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import React, { useContext } from 'react';\\nimport { Html, Root, Head, Body, Scripts } from '@modern-js/runtime/document';\\n\\nexport default function Document(): React.ReactElement {\\n  return (\\n    <Html>\\n      <Head></Head>\\n      <Body>\\n        <Root rootId=\\\"root\\\"></Root>\\n        <Scripts />\\n      </Body>\\n    </Html>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"html-语法\">{\"Html 语法\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#html-语法\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 也支持 HTML 语法。默认情况下，Modern.js 的应用工程中会内置一份 HTML 模板，用于生成 HTML 代码。\"}</_components.p>{\"\\n\"}<_components.p>{\"基于 HTML 语法的模板，Modern.js 提供了\"}<_components.strong>{\"自定义 HTML 片段\"}</_components.strong>{\"和\"}<_components.strong>{\"完全自定义 HTML 模板\"}</_components.strong>{\"两种方式来自定义模板。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"自定义-html-片段\">{\"自定义 HTML 片段\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#自定义-html-片段\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在应用根目录下，创建 \"}<_components.code>{\"config/html/\"}</_components.code>{\" 目录，该目录下支持创建四种 HTML 片段。\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"top.html\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"head.html\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"body.html\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"bottom.html\"}</_components.code></_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p><_components.strong>{\"这些片段将按位置注入到默认的 HTML 模板中。\"}</_components.strong></_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-xml\">{\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <%= meta %>\\n    <title><%= title %></title>\\n    <%= topTemplate %>\\n    <%= headTemplate %>\\n    {/* webpack inject css  */}\\n  </head>\\n  <body>\\n    <noscript>\\n      We're sorry but react app doesn't work properly without JavaScript\\n      enabled. Please enable it to continue.\\n    </noscript>\\n    <div id=\\\"<%= mountId %>\\\"></div>\\n    <%= bodyTemplate %>\\n    {/* webpack inject js  */}\\n    {/* <?- bottomTemplate ?> */}\\n  </body>\\n</html>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"代码片段支持使用 \"}<_components.a href=\"https://lodash.com/docs/4.17.15#template\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Lodash template\"}</_components.a>{\" 语法。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如在 \"}<_components.code>{\"body.html\"}</_components.code>{\" 里插入一个外链脚本：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-html\" meta='title=\"config/html/body.html\"'>{'<script src=\"//example.com/assets/a.js\"></script>\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"自定义 HTML 片段的实现方式是将片段与框架内置的模板进行合并，由于框架的默认模板中已经存在 \"}<_components.code>{\"<title>\"}</_components.code>{\"，因此自定义 HTML 模板中的 title 标签无法生效，请通过 \"}<_components.a href=\"/configure/app/html/title\">{\"html.title\"}</_components.a>{\" 来修改页面标题。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"完全自定义-html-模板\">{\"完全自定义 HTML 模板\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#完全自定义-html-模板\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"某些情况下，HTML 片段无法满足自定义需求，Modern.js 提供了完全自定义方式。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive caution\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"通常不建议直接覆盖默认的 HTML 模板，可能会失去一部分功能选项。即使需要替换，建议以内置模板为基础，按需修改。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"在 \"}<_components.code>{\"config/html/\"}</_components.code>{\" 目录下，创建 \"}<_components.code>{\"index.html\"}</_components.code>{\" 文件,该文件将替代默认的 HTML 模板。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"内部默认 HTML 模板可以在 \"}<_components.code>{\"node_modules/.modern-js/${entryName}/index.html\"}</_components.code>{\" 中查看。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"模板参数-1\">{\"模板参数\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#模板参数-1\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"模板中使用的参数可以通过 \"}<_components.a href=\"/configure/app/html/template-parameters\">{\"html.templateParameters\"}</_components.a>{\" 配置项来定义。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"按入口设置\">{\"按入口设置\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#按入口设置\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.code>{\"config/html/\"}</_components.code>{\" 目录中的 HTML 片段对应用中的所有入口都生效。如果希望按入口自定义 HTML 片段，可以在 \"}<_components.code>{\"config/html/\"}</_components.code>{\" 目录下新建一个以\"}<_components.strong>{\"入口名\"}</_components.strong>{\"命名的目录，然后在这个目录中自定义 HTML 片段。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如，如下设置的 HTML 片段仅对入口 \"}<_components.code>{\"entry1\"}</_components.code>{\" 生效：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n├── config/\\n│   └── html/\\n│       └── entry1\\n│           ├── head.html\\n│           └── body.html\\n└── src/\\n    ├── entry1/\\n    │   └── routes\\n    └── entry2/\\n        └── routes\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","strong","h2","code","pre","h3","ul","li","div","components","id","className","href","target","rel","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"sNAAA,E,mDAGA,SAASA,EAAkBC,CAAK,EAC5B,IAAMC,EAAcC,OAAOC,MAAM,CAAC,CAC9BC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,OAAQ,SACRC,GAAI,KACJC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,IAAK,KACT,EAAG,yBAAsBd,EAAMe,UAAU,EACzC,MAAO,uB,UAAE,WAACd,EAAYG,EAAE,EAACY,GAAG,U,UAAW,UAAU,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,W,SAAY,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,iBAAiB,UAACL,EAAYM,MAAM,E,SAAE,Q,GAA+B,KAAK,UAACN,EAAYM,MAAM,E,SAAE,c,GAAqC,qB,GAAsC,KAAK,WAACN,EAAYO,EAAE,EAACQ,GAAG,S,UAAU,SAAS,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,U,SAAW,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,kBAAkB,UAACL,EAAYQ,IAAI,E,SAAE,M,GAA2B,gBAAgB,UAACR,EAAYQ,IAAI,E,SAAE,iB,GAAsC,sC,GAAuD,KAAK,UAACR,EAAYK,CAAC,E,SAAE,W,GAA6B,KAAK,UAACL,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,gB,SAAiB,sK,KAA6M,KAAK,WAAChB,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,S,GAA8B,gBAAgB,UAACR,EAAYQ,IAAI,E,SAAE,kB,GAAuC,gBAAgB,UAACR,EAAYQ,IAAI,E,SAAE,iB,GAAsC,UAAU,UAACR,EAAYQ,IAAI,E,SAAE,S,GAA8B,cAAc,UAACR,EAAYQ,IAAI,E,SAAE,iB,GAAsC,O,GAAwB,KAAK,UAACR,EAAYK,CAAC,E,SAAE,6B,GAA+C,KAAK,WAACL,EAAYU,EAAE,EAACK,GAAG,U,UAAW,UAAU,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,W,SAAY,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,2CAA2C,UAACL,EAAYQ,IAAI,E,SAAE,6B,GAAkD,Y,GAA6B,KAAK,UAACR,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,e,SAAgB,kF,KAAyH,KAAK,UAAChB,EAAYK,CAAC,E,SAAE,a,GAA+B,KAAK,WAACL,EAAYW,EAAE,E,UAAE,KAAK,WAACX,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,M,GAA2B,6CAA6C,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,MAAM,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,gC,GAAiD,K,GAAuB,KAAK,WAACR,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,M,GAA2B,iCAAiC,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,6B,GAA8C,K,GAAuB,KAAK,WAACR,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,M,GAA2B,WAAW,UAACR,EAAYQ,IAAI,E,SAAE,uB,GAA4C,WAAW,UAACR,EAAYQ,IAAI,E,SAAE,a,GAAkC,SAAS,UAACR,EAAYQ,IAAI,E,SAAE,c,GAAmC,yE,GAA0F,K,GAAuB,KAAK,WAACR,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,M,GAA2B,iCAAiC,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,OAAO,UAACR,EAAYQ,IAAI,E,SAAE,W,GAAgC,O,GAAwB,K,GAAuB,KAAK,WAACR,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,S,GAA8B,cAAc,UAACR,EAAYQ,IAAI,E,SAAE,U,GAA+B,eAAe,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,Q,GAAyB,K,GAAuB,KAAK,WAACR,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,S,GAA8B,WAAW,UAACR,EAAYQ,IAAI,E,SAAE,kB,GAAuC,2B,GAA4C,K,GAAuB,K,GAAuB,KAAK,WAACR,EAAYU,EAAE,EAACK,GAAG,O,UAAQ,OAAO,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,cAAc,UAACL,EAAYQ,IAAI,E,SAAE,iB,GAAsC,mC,GAAoD,KAAK,WAACR,EAAYK,CAAC,E,UAAE,kBAAkB,UAACL,EAAYQ,IAAI,E,SAAE,iB,GAAsC,+B,GAAgD,KAAK,WAACR,EAAYW,EAAE,E,UAAE,KAAK,WAACX,EAAYY,EAAE,E,UAAC,UAACZ,EAAYQ,IAAI,E,SAAE,Y,GAAiC,WAAW,UAACR,EAAYQ,IAAI,E,SAAE,a,GAAkC,I,GAAsB,KAAK,WAACR,EAAYY,EAAE,E,UAAC,UAACZ,EAAYQ,IAAI,E,SAAE,Q,GAA6B,wC,GAA0D,KAAK,WAACR,EAAYY,EAAE,E,UAAC,UAACZ,EAAYQ,IAAI,E,SAAE,W,GAAgC,W,GAA6B,KAAK,WAACR,EAAYY,EAAE,E,UAAC,UAACZ,EAAYQ,IAAI,E,SAAE,gB,GAAqC,+B,GAAiD,K,GAAuB,KAAK,WAACR,EAAYU,EAAE,EAACK,GAAG,O,UAAQ,OAAO,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,UAACjB,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,e,SAAgB,81B,KAAq4B,KAAK,UAAChB,EAAYK,CAAC,E,SAAE,2B,GAA6C,KAAK,UAACL,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,gB,SAAiB,wxC,KAA+zC,KAAK,WAAChB,EAAYU,EAAE,EAACK,GAAG,e,UAAgB,eAAe,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,gB,SAAiB,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,SAAS,UAACL,EAAYQ,IAAI,E,SAAE,W,GAAgC,cAAc,UAACR,EAAYQ,IAAI,E,SAAE,U,GAA+B,UAAU,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,Q,GAAyB,KAAK,UAACR,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,e,SAAgB,sV,KAA6X,KAAK,WAAChB,EAAYO,EAAE,EAACQ,GAAG,U,UAAW,UAAU,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,W,SAAY,G,MAAsC,KAAK,UAACjB,EAAYK,CAAC,E,SAAE,yE,GAA2F,KAAK,WAACL,EAAYK,CAAC,E,UAAE,8BAA8B,UAACL,EAAYM,MAAM,E,SAAE,a,GAAoC,IAAI,UAACN,EAAYM,MAAM,E,SAAE,e,GAAsC,c,GAA+B,KAAK,WAACN,EAAYU,EAAE,EAACK,GAAG,c,UAAe,cAAc,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,e,SAAgB,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,cAAc,UAACL,EAAYQ,IAAI,E,SAAE,c,GAAmC,0B,GAA2C,KAAK,WAACR,EAAYW,EAAE,E,UAAE,KAAK,UAACX,EAAYY,EAAE,E,SAAC,UAACZ,EAAYQ,IAAI,E,SAAE,U,KAAgD,KAAK,UAACR,EAAYY,EAAE,E,SAAC,UAACZ,EAAYQ,IAAI,E,SAAE,W,KAAiD,KAAK,UAACR,EAAYY,EAAE,E,SAAC,UAACZ,EAAYQ,IAAI,E,SAAE,W,KAAiD,KAAK,UAACR,EAAYY,EAAE,E,SAAC,UAACZ,EAAYQ,IAAI,E,SAAE,a,KAAmD,K,GAAuB,KAAK,UAACR,EAAYK,CAAC,E,SAAC,UAACL,EAAYM,MAAM,E,SAAE,0B,KAAiE,KAAK,UAACN,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,e,SAAgB,8e,KAAqhB,KAAK,WAAChB,EAAYK,CAAC,E,UAAE,YAAY,UAACL,EAAYI,CAAC,EAACa,KAAK,2CAA2CC,OAAO,SAASC,IAAI,sB,SAAuB,iB,GAAmC,O,GAAwB,KAAK,WAACnB,EAAYK,CAAC,E,UAAE,OAAO,UAACL,EAAYQ,IAAI,E,SAAE,W,GAAgC,c,GAA+B,KAAK,UAACR,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,gBAAgBI,KAAK,gC,SAAiC,qD,KAA4F,KAAK,WAACpB,EAAYa,GAAG,EAACG,UAAU,wB,UAAwB,UAAChB,EAAYa,GAAG,EAACG,UAAU,yB,SAA0B,M,GAAyB,WAAChB,EAAYa,GAAG,EAACG,UAAU,2B,UAA2B,WAAChB,EAAYK,CAAC,E,UAAE,mDAAmD,UAACL,EAAYQ,IAAI,E,SAAE,S,GAA8B,qCAAqC,UAACR,EAAYI,CAAC,EAACa,KAAK,4B,SAA6B,Y,GAA8B,Y,GAA6B,K,MAA0C,KAAK,WAACjB,EAAYU,EAAE,EAACK,GAAG,gB,UAAiB,gBAAgB,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,iB,SAAkB,G,MAAsC,KAAK,UAACjB,EAAYK,CAAC,E,SAAE,8C,GAAgE,KAAK,WAACL,EAAYa,GAAG,EAACG,UAAU,2B,UAA2B,UAAChB,EAAYa,GAAG,EAACG,UAAU,yB,SAA0B,I,GAAuB,WAAChB,EAAYa,GAAG,EAACG,UAAU,2B,UAA2B,UAAChB,EAAYK,CAAC,E,SAAE,2D,GAA6E,K,MAA0C,KAAK,WAACL,EAAYK,CAAC,E,UAAE,KAAK,UAACL,EAAYQ,IAAI,E,SAAE,c,GAAmC,WAAW,UAACR,EAAYQ,IAAI,E,SAAE,Y,GAAiC,yB,GAA0C,KAAK,WAACR,EAAYa,GAAG,EAACG,UAAU,wB,UAAwB,UAAChB,EAAYa,GAAG,EAACG,UAAU,yB,SAA0B,M,GAAyB,WAAChB,EAAYa,GAAG,EAACG,UAAU,2B,UAA2B,WAAChB,EAAYK,CAAC,E,UAAE,mBAAmB,UAACL,EAAYQ,IAAI,E,SAAE,iD,GAAsE,Q,GAAyB,K,MAA0C,KAAK,WAACR,EAAYU,EAAE,EAACK,GAAG,S,UAAU,OAAO,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,U,SAAW,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,gBAAgB,UAACL,EAAYI,CAAC,EAACa,KAAK,0C,SAA2C,yB,GAA2C,W,GAA4B,KAAK,WAACjB,EAAYU,EAAE,EAACK,GAAG,Q,UAAS,QAAQ,UAACf,EAAYI,CAAC,EAACY,UAAU,gBAAgB,cAAY,OAAOC,KAAK,S,SAAU,G,MAAsC,KAAK,WAACjB,EAAYK,CAAC,E,UAAC,UAACL,EAAYQ,IAAI,E,SAAE,c,GAAmC,oDAAoD,UAACR,EAAYQ,IAAI,E,SAAE,c,GAAmC,YAAY,UAACR,EAAYM,MAAM,E,SAAE,K,GAA4B,6B,GAA8C,KAAK,WAACN,EAAYK,CAAC,E,UAAE,wBAAwB,UAACL,EAAYQ,IAAI,E,SAAE,Q,GAA6B,O,GAAwB,KAAK,UAACR,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACQ,UAAU,gB,SAAiB,+L,OACh7Z,CAlBA,GAAAK,UAAA,EAAWC,mBAAmB,EAA9B,GAAWA,mBAAmB,CAAK,CAAC,GACpCD,WAAWC,mBAAmB,CAAC,0CAA0C,CAAG,CAAC,IAAM,CAAC,CAAC,KAAO,SAAS,GAAK,SAAS,MAAQ,CAAC,EAAE,CAAC,KAAO,UAAU,GAAK,UAAU,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,eAAe,GAAK,eAAe,MAAQ,CAAC,EAAE,CAAC,KAAO,UAAU,GAAK,UAAU,MAAQ,CAAC,EAAE,CAAC,KAAO,cAAc,GAAK,cAAc,MAAQ,CAAC,EAAE,CAAC,KAAO,gBAAgB,GAAK,gBAAgB,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,SAAS,MAAQ,CAAC,EAAE,CAAC,KAAO,QAAQ,GAAK,QAAQ,MAAQ,CAAC,EAAE,CAAC,MAAQ,UAAU,YAAc,CAAC,MAAQ,UAAU,iBAAmB,CAAC,CAAC,EAsB7lB,MAJA,W,IAAoBvB,EAAQ,UAAR,6CAAQ,CAAC,EACRwB,EAAc,AAAAtB,OAAOC,MAAM,CAAC,CAAC,EAAG,yBAAsBH,EAAMe,UAAU,EAA/EU,OAAO,CACf,OAAOD,EAAY,UAACA,EAAA,mBAAcxB,GAAA,C,SAAO,UAACD,EAAA,KAAA2B,CAAA,AAAAA,EAAA,GAAsB1B,G,IAAuBD,EAAkBC,EAC7G,C"}