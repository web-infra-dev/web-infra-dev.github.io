{"version":3,"file":"static/js/async/docs_zh_guides_basic-features_data-fetch_mdx.b9790d54.js","sources":["./docs/zh/guides/basic-features/data-fetch.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fbasic-features%2Fdata-fetch.mdx\"] = {\"toc\":[{\"text\":\"Data Loader(推荐)\",\"id\":\"data-loader推荐\",\"depth\":2},{\"text\":\"基础示例\",\"id\":\"基础示例\",\"depth\":3},{\"text\":\"loader 函数\",\"id\":\"loader-函数\",\"depth\":3},{\"text\":\"params\",\"id\":\"params\",\"depth\":4},{\"text\":\"request\",\"id\":\"request\",\"depth\":4},{\"text\":\"返回值\",\"id\":\"返回值\",\"depth\":4},{\"text\":\"请求 API\",\"id\":\"请求-api\",\"depth\":3},{\"text\":\"错误处理\",\"id\":\"错误处理\",\"depth\":3},{\"text\":\"获取上层组件的数据\",\"id\":\"获取上层组件的数据\",\"depth\":3},{\"text\":\"(WIP)Loading UI\",\"id\":\"wiploading-ui\",\"depth\":3},{\"text\":\"错误用法\",\"id\":\"错误用法\",\"depth\":3},{\"text\":\"常见问题\",\"id\":\"常见问题\",\"depth\":3},{\"text\":\"useLoader（旧版）\",\"id\":\"useloader旧版\",\"depth\":2}],\"title\":\"数据获取\",\"frontmatter\":{\"sidebar_position\":4}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        code: \"code\",\n        div: \"div\",\n        h3: \"h3\",\n        pre: \"pre\",\n        h4: \"h4\",\n        ol: \"ol\",\n        li: \"li\",\n        strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"数据获取\">{\"数据获取\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#数据获取\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js 中提供了开箱即用的数据获取能力，开发者可以通过这些 API，在 CSR 和 SSR 环境同构的进行开发。\"}</_components.p>{\"\\n\"}<_components.p>{\"需要注意的是，这些 API 并不帮助应用发起请求，而是帮助开发者更好地管理数据，提升项目的性能。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"data-loader推荐\">{\"Data Loader(推荐)\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#data-loader推荐\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 推荐使用约定式路由做路由的管理，通过 Modern.js 的\"}<_components.a href=\"/guides/basic-features/routes#%E7%BA%A6%E5%AE%9A%E5%BC%8F%E8%B7%AF%E7%94%B1\">{\"约定式（嵌套）路由\"}</_components.a>{\"，每个路由组件(\"}<_components.code>{\"layout.ts\"}</_components.code>{\" 或 \"}<_components.code>{\"page.ts\"}</_components.code>{\")可以有一个同名的 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件，该 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件需要导出一个函数，函数会在组件渲染之前执行，为路由组件提供数据。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"Modern.js v1 支持通过 \"}<_components.a href=\"#useloader%EF%BC%88%E6%97%A7%E7%89%88%EF%BC%89\">{\"useLoader\"}</_components.a>{\" 获取数据，这已经不是我们推荐的用法，除迁移过程外，不推荐两者混用。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"基础示例\">{\"基础示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#基础示例\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"路由组件如 \"}<_components.code>{\"layout.ts\"}</_components.code>{\" 或 \"}<_components.code>{\"page.ts\"}</_components.code>{\"，可以定义同名的 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件，\"}<_components.code>{\"loader\"}</_components.code>{\" 文件中导出一个函数，该函数提供组件所需的数据，然后在路由组件中通过 \"}<_components.code>{\"useLoaderData\"}</_components.code>{\" 函数获取数据，如下面示例：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── layout.tsx\\n    └── user\\n        ├── layout.tsx\\n        ├── layout.loader.ts\\n        ├── page.tsx\\n        └── page.loader.ts\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在文件中定义以下代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/user/page.tsx\"'>{\"import { useLoaderData } from '@modern-js/runtime/router';\\nimport type { ProfileData } from './page.loader.ts';\\n\\nexport default function UserPage() {\\n  const profileData = useLoaderData() as ProfileData;\\n  return <div>{profileData}</div>;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/user/page.loader.ts\"'>{\"export type ProfileData = {\\n  /*  some types */\\n};\\n\\nexport default async (): Promise<ProfileData> => {\\n  const res = await fetch('https://api/user/profile');\\n  return await res.json();\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive caution\"><_components.div className=\"modern-directive-title\">{\"CAUTION\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"这里路由组件和 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件共享类型，要使用 \"}<_components.code>{\"import type\"}</_components.code>{\" 语法。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"在 CSR 环境下，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数会在客户端执行，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数内可以使用浏览器的 API（但通常不需要，也不推荐）。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 SSR 环境下，不管是首屏，还是在客户端的导航，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数只会在服务端执行，这里可以调用任意的 Node.js API，同时这里使用的任何依赖和代码都不会包含在客户端的 bundle 中。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"在以后的版本中，Modern.js 可能会支持在 CSR 环境下，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数也在服务端运行，以提高性能和安全性，所以这里建议尽可能地保证 \"}<_components.code>{\"loader\"}</_components.code>{\" 的纯粹，只做数据获取的场景。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"当在客户端导航时，基于 Modern.js 的\"}<_components.a href=\"/guides/basic-features/routes\">{\"约定式路由\"}</_components.a>{\"，所有的 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数会并行执行（请求），即当访问 \"}<_components.code>{\"/user/profile\"}</_components.code>{\" 时，\"}<_components.code>{\"/user\"}</_components.code>{\" 和 \"}<_components.code>{\"/user/profile\"}</_components.code>{\" 下的 loader 函数都会并行执行（请求），以提高客户端的性能。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"loader-函数\"><_components.code>{\"loader\"}</_components.code>{\" 函数\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#loader-函数\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.code>{\"loader\"}</_components.code>{\" 函数有两个入参：\"}</_components.p>{\"\\n\"}<_components.h4 id=\"params\"><_components.code>{\"params\"}</_components.code><_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#params\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"当路由文件通过 \"}<_components.code>{\"[]\"}</_components.code>{\" 时，会作为\"}<_components.a href=\"/guides/basic-features/routes#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1\">{\"动态路由\"}</_components.a>{\"，动态路由片段会作为参数传入 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"// routes/user/[id]/page.loader.ts\\nimport { LoaderFunctionArgs } from '@modern-js/runtime/router';\\n\\nexport default async ({ params }: LoaderFunctionArgs) => {\\n  const { id } = params;\\n  const res = await fetch(`https://api/user/${id}`);\\n  return res.json();\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当访问 \"}<_components.code>{\"/user/123\"}</_components.code>{\" 时，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数的参数为 \"}<_components.code>{\"{ params: { id: '123' } }\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.h4 id=\"request\"><_components.code>{\"request\"}</_components.code><_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#request\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p><_components.code>{\"request\"}</_components.code>{\" 是一个 \"}<_components.a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Fetch Request\"}</_components.a>{\" 实例。\"}</_components.p>{\"\\n\"}<_components.p>{\"一个常见的使用场景是通过 \"}<_components.code>{\"request\"}</_components.code>{\" 获取查询参数：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"// routes/user/[id]/page.loader.ts\\nimport { LoaderFunctionArgs } from '@modern-js/runtime/router';\\n\\nexport default async ({ request }: LoaderFunctionArgs) => {\\n  const url = new URL(request.url);\\n  const userId = url.searchParams.get('id');\\n  return queryUser(userId);\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h4 id=\"返回值\">{\"返回值\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#返回值\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p><_components.code>{\"loader\"}</_components.code>{\" 函数的返回值可以是任何可序列化的内容，也可以是一个 \"}<_components.a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Response\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Fetch Response\"}</_components.a>{\" 实例：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"const loader = async (): Promise<ProfileData> => {\\n  return {\\n    message: 'hello world',\\n  };\\n};\\nexport default loader;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"默认情况下，\"}<_components.code>{\"loader\"}</_components.code>{\" 返回的响应 \"}<_components.code>{\"Content-type\"}</_components.code>{\" 是 \"}<_components.code>{\"application/json\"}</_components.code>{\"，\"}<_components.code>{\"status\"}</_components.code>{\" 为 200，你可以通过自定义 \"}<_components.code>{\"Response\"}</_components.code>{\" 来设置：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"const loader = async (): Promise<ProfileData> => {\\n  const data = { message: 'hello world' };\\n  return new Response(JSON.stringify(data), {\\n    status: 200,\\n    headers: {\\n      'Content-Type': 'application/json; utf-8',\\n    },\\n  });\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"请求-api\">{\"请求 API\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#请求-api\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Modern.js 对 \"}<_components.code>{\"fetch\"}</_components.code>{\" API 做了 polyfill, 用于发起请求，该 API 与浏览器的 \"}<_components.code>{\"fetch\"}</_components.code>{\" API 一致，但是在服务端也能使用该 API 发起请求，这意味着不管是 CSR 还是 SSR，都可以使用统一的 \"}<_components.code>{\"fetch\"}</_components.code>{\" API 进行数据获取：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"async function loader() {\\n  const res = await fetch('https://api/user/profile');\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"错误处理\">{\"错误处理\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#错误处理\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数中，可以通过 \"}<_components.code>{\"throw error\"}</_components.code>{\" 或者 \"}<_components.code>{\"throw response\"}</_components.code>{\" 的方式处理错误，当 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数中有错误被抛出时，Modern.js 会停止执行当前 \"}<_components.code>{\"loader\"}</_components.code>{\" 中的代码，并将前端 UI 切换到定义的 \"}<_components.a href=\"/guides/basic-features/routes#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><_components.code>{\"ErrorBoundary\"}</_components.code></_components.a>{\" 组件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"// routes/user/profile/page.loader.ts\\nexport default async function loader() {\\n  const res = await fetch('https://api/user/profile');\\n  if (!res.ok) {\\n    throw res;\\n  }\\n  return res.json();\\n}\\n\\n// routes/user/profile/error.tsx\\nimport { useRouteError } from '@modern-js/runtime/router';\\nconst ErrorBoundary = () => {\\n  const error = useRouteError() as Response;\\n  return (\\n    <div>\\n      <h1>{error.status}</h1>\\n      <h2>{error.statusText}</h2>\\n    </div>\\n  );\\n};\\n\\nexport default ErrorBoundary;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"获取上层组件的数据\">{\"获取上层组件的数据\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#获取上层组件的数据\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"很多场景下，子组件需要获取到祖先组件 \"}<_components.code>{\"loader\"}</_components.code>{\" 中的数据，你可以通过 \"}<_components.code>{\"useRouteLoaderData\"}</_components.code>{\" 方便地获取到祖先组件的数据：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"// routes/user/profile/page.tsx\\nimport { useRouteLoaderData } from '@modern-js/runtime/router';\\n\\nexport default function UserLayout() {\\n  // 获取 routes/user/layout.loader.ts 中 `loader` 返回的数据\\n  const data = useRouteLoaderData('user/layout');\\n  return (\\n    <div>\\n      <h1>{data.name}</h1>\\n      <h2>{data.age}</h2>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"userRouteLoaderData\"}</_components.code>{\" 接受一个参数 \"}<_components.code>{\"routeId\"}</_components.code>{\"，在使用约定式路由时，Modern.js 会为你自动生成\"}<_components.code>{\"routeId\"}</_components.code>{\"，\"}<_components.code>{\"routeId\"}</_components.code>{\" 的值是对应组件相对于 \"}<_components.code>{\"src/routes\"}</_components.code>{\" 的路径，如上面的例子中，子组件想要获取 \"}<_components.code>{\"routes/user/layout.tsx\"}</_components.code>{\" 中 loader 返回的数据，\"}<_components.code>{\"routeId\"}</_components.code>{\" 的值就是 \"}<_components.code>{\"user/layout\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"在多入口（MPA） 场景下，\"}<_components.code>{\"routeId\"}</_components.code>{\" 的值需要加上对应入口的名称，入口名称非指定情况下一般是入口的目录名，如以下目录结构：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── src\\n    ├── entry1\\n    │     └── routes\\n    │           └── layout.tsx\\n    └── entry2\\n          └── routes\\n                └── layout.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果想获取 \"}<_components.code>{\"entry1/routes/layout.tsx\"}</_components.code>{\" 中 \"}<_components.code>{\"loader\"}</_components.code>{\" 返回的数据，\"}<_components.code>{\"routeId\"}</_components.code>{\" 的值就是 \"}<_components.code>{\"entry1_layout\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"wiploading-ui\">{\"(WIP)Loading UI\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#wiploading-ui\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"此功能目前是实验性质，后续 API 可能有调整。\"}</_components.p><_components.p>{\"目前仅支持 CSR，敬请期待 Streaming SSR。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"创建 \"}<_components.code>{\"user/layout.loader.ts\"}</_components.code>{\"，并添加以下代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/user/layout.loader.ts\"'>{\"import { defer } from \\\"@modern-js/runtime/router\\\"\\n\\nconst loader = () =>\\ndefer({\\n  userInfo: new Promise((resolve) => {\\n      setTimeout(() => {\\n        resolve({\\n          age: 1,\\n          name: 'user layout'\\n        })\\n      }, 1000)\\n    })\\n  })\\n\\nexport default loader;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在 \"}<_components.code>{\"user/layout.tsx\"}</_components.code>{\" 中添加以下代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"routes/user/layout.tsx\"'>{\"import { Await, defer, useLoaderData, Outlet } from '@modern-js/runtime/router';\\n\\nexport default function UserLayout() {\\n  const { userInfo } = useLoaderData() as { userInfo: Promise<UserInfo> };\\n  return (\\n    <div>\\n      <React.Suspense fallback={<p>Loading...</p>}>\\n        <Await\\n          resolve={userInfo}\\n          children={userInfo => (\\n            <div>\\n              <span>{userInfo.name}</span>\\n              <span>{userInfo.age}</span>\\n              <Outlet />\\n            </div>\\n          )}\\n        ></Await>\\n      </React.Suspense>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"Await 组件的具体用法请查看 \"}<_components.a href=\"https://reactrouter.com/en/main/components/await\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Await\"}</_components.a></_components.p>{\"\\n\"}<_components.p>{\"defer 的具体用法请查看 \"}<_components.a href=\"https://reactrouter.com/en/main/guides/deferred\" target=\"_blank\" rel=\"noopener noreferrer\">{\"defer\"}</_components.a></_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}{}{\"\\n\"}<_components.h3 id=\"错误用法\">{\"错误用法\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#错误用法\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li><_components.code>{\"loader\"}</_components.code>{\" 中只能返回可序列化的数据，在 SSR 环境下，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数的返回值会被序列化为 JSON 字符串，然后在客户端被反序列化为对象。因此，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数中不能返回不可序列化的数据（如函数）。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.div className=\"modern-directive warning\"><_components.div className=\"modern-directive-title\">{\"WARNING\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"目前 CSR 下没有这个限制，但我们强烈推荐你遵循该限制，且未来我们可能在 CSR 下也加上该限制。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// This won't work!\\nexport default () => {\\n  return {\\n    user: {},\\n    method: () => {},\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol start=\"2\">{\"\\n\"}<_components.li>{\"Modern.js 会帮你调用 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数，你不应该自己调用 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数：\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// This won't work!\\nexport default async () => {\\n  const res = fetch('https://api/user/profile');\\n  return res.json();\\n};\\n\\nimport loader from './page.loader.ts';\\nexport default function RouteComp() {\\n  const data = loader();\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol start=\"3\">{\"\\n\"}<_components.li>{\"不能从路由组件中引入 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件，也不能从 \"}<_components.code>{\"loader\"}</_components.code>{\" 文件引入路由组件中的变量，如果需要共享类型的话，应该使用 \"}<_components.code>{\"import type\"}</_components.code></_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// Not allowed\\n// routes/layout.tsx\\nimport { useLoaderData } from '@modern-js/runtime/router';\\nimport { ProfileData } from './page.loader.ts'; // should use \\\"import type\\\" instead\\n\\nexport const fetch = wrapFetch(fetch);\\n\\nexport default function UserPage() {\\n  const profileData = useLoaderData() as ProfileData;\\n  return <div>{profileData}</div>;\\n}\\n\\n// routes/layout.loader.ts\\nimport { fetch } from './layout.tsx'; // should not be imported from the routing component\\nexport type ProfileData = {\\n  /*  some types */\\n};\\n\\nexport default async (): Promise<ProfileData> => {\\n  const res = await fetch('https://api/user/profile');\\n  return await res.json();\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol start=\"4\">{\"\\n\"}<_components.li>{\"在服务端运行时，\"}<_components.code>{\"loader\"}</_components.code>{\" 函数会被打包为一个统一的 bundle，所以我们不推荐服务端的代码使用 \"}<_components.code>{\"__filename\"}</_components.code>{\" 和 \"}<_components.code>{\"__dirname\"}</_components.code>{\"。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.h3 id=\"常见问题\">{\"常见问题\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#常见问题\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li><_components.code>{\"loader\"}</_components.code>{\" 和 BFF 函数的关系\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.p>{\"在 CSR 项目中，\"}<_components.code>{\"loader\"}</_components.code>{\" 在客户端执行，在 \"}<_components.code>{\"loader\"}</_components.code>{\" 可以直接调用 BFF 函数进行接口请求。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 SSR 项目中，每个 \"}<_components.code>{\"loader\"}</_components.code>{\" 也是一个服务端接口，我们推荐使用 \"}<_components.code>{\"loader\"}</_components.code>{\" 替代 http method 为 \"}<_components.code>{\"get\"}</_components.code>{\" 的 BFF 函数，作为接口层，避免多一层转发和执行。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"useloader旧版\">{\"useLoader（旧版）\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#useloader旧版\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p><_components.strong><_components.code>{\"useLoader\"}</_components.code></_components.strong>{\" 是 Modern.js 老版本中的 API。该 API 是一个 React Hook，专门提供给 SSR 应用使用，让开发者能同构的在组件中获取数据。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive tip\"><_components.div className=\"modern-directive-title\">{\"TIP\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"CSR 的项目没有必要使用 \"}<_components.code>{\"useLoader\"}</_components.code>{\" 获取数据。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"以下是一个最简单的例子：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { useLoader } from '@modern-js/runtime';\\n\\nexport default () => {\\n  const { data } = useLoader(async () => {\\n    console.log('fetch in useLoader');\\n\\n    // 这里没有发送真实的请求，只是返回了一个写死的数据。\\n    // 真实项目中，应该返回从远端获取的数据。\\n    return {\\n      name: 'Modern.js',\\n    };\\n  });\\n\\n  return <div>Hello, {data?.name}</div>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"上述代码启动后，访问页面。可以看到在终端输出了日志，而在浏览器终端却没有打印日志。\"}</_components.p>{\"\\n\"}<_components.p>{\"这是因为 Modern.js 在服务端渲染时，在会收集 \"}<_components.code>{\"useLoader\"}</_components.code>{\" 返回的数据，并将数据注入到响应的 HTML 中。如果 SSR 渲染成功，在 HTML 中可以看到如下代码片段：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-html\">{\"<script>\\n  window._SSR_DATA = {};\\n</script>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在这全局变量中，记录了每一份数据，而在浏览器端渲染的过程中，会优先使用这份数据。如果数据不存在，则会重新执行 \"}<_components.code>{\"useLoader\"}</_components.code>{\" 函数。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"在构建阶段，Modern.js 会自动为每个 \"}<_components.code>{\"useLoader\"}</_components.code>{\" 生成一个 Loader ID，并注入到 SSR 和 CSR 的 JS Bundle 中，用来关联 Loader 和数据。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"相比于 Next.js 中的 \"}<_components.code>{\"getServerSideProps\"}</_components.code>{\"，在渲染前预先获取数据。使用 \"}<_components.code>{\"useLoader\"}</_components.code>{\"，可以在组件中获取局部 UI 所需要的数据，而不用将数据层层传递。同样，也不会因为不同路由需要不同数据请求，而在最外层的数据获取函数中添加冗余的逻辑。当然 \"}<_components.code>{\"useLoader\"}</_components.code>{\" 也存在一些问题，例如服务端代码 Treeshaking 困难，服务端需要多一次预渲染等。\"}</_components.p>{\"\\n\"}<_components.p>{\"Modern.js 在新版本中，设计了全新的 Loader 方案。新方案解决了这些问题，并能够配合\"}<_components.strong>{\"嵌套路由\"}</_components.strong>{\"，对页面性能做优化。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"详细 API 可以查看 \"}<_components.a href=\"/apis/app/runtime/core/use-loader\">{\"useLoader\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","code","div","h3","pre","h4","ol","li","strong","components","id","className","href","meta","target","rel","start","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"4NAAA,E,mDAGA,SAASA,EAAkBC,CAAK,EAC5B,IAAMC,EAAcC,OAAOC,MAAM,CAAC,CAC9BC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,IAAK,MACLC,GAAI,KACJC,IAAK,MACLC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,OAAQ,QACZ,EAAG,yBAAsBf,EAAMgB,UAAU,EACzC,MAAO,uB,UAAE,WAACf,EAAYG,EAAE,EAACa,GAAG,O,UAAQ,OAAO,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,UAAClB,EAAYK,CAAC,E,SAAE,gE,GAAkF,KAAK,UAACL,EAAYK,CAAC,E,SAAE,kD,GAAoE,KAAK,WAACL,EAAYM,EAAE,EAACU,GAAG,gB,UAAiB,kBAAkB,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,iB,SAAkB,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,2CAA2C,UAACL,EAAYI,CAAC,EAACc,KAAK,8E,SAA+E,W,GAA6B,WAAW,UAAClB,EAAYO,IAAI,E,SAAE,W,GAAgC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,aAAa,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,SAAS,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,sC,GAAuD,KAAK,WAACP,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,qBAAqB,UAACL,EAAYI,CAAC,EAACc,KAAK,iD,SAAkD,W,GAA6B,qC,GAAsD,K,MAA0C,KAAK,WAAClB,EAAYS,EAAE,EAACO,GAAG,O,UAAQ,OAAO,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,SAAS,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,YAAY,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,OAAO,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,sCAAsC,UAACP,EAAYO,IAAI,E,SAAE,e,GAAoC,iB,GAAkC,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,gB,SAAiB,2J,KAAkM,KAAK,UAACjB,EAAYK,CAAC,E,SAAE,a,GAA+B,KAAK,UAACL,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,cAAcE,KAAK,+B,SAAgC,0P,KAAiS,KAAK,UAACnB,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,cAAcE,KAAK,qC,SAAsC,sM,KAA6O,KAAK,WAACnB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,S,GAA4B,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,WAAW,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,eAAe,UAACP,EAAYO,IAAI,E,SAAE,a,GAAkC,O,GAAwB,K,MAA0C,KAAK,WAACP,EAAYK,CAAC,E,UAAE,aAAa,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,cAAc,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,iC,GAAkD,KAAK,WAACP,EAAYK,CAAC,E,UAAE,6BAA6B,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,uE,GAAwF,KAAK,WAACP,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,oCAAoC,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,qCAAqC,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,kB,GAAmC,K,MAA0C,KAAK,WAACP,EAAYK,CAAC,E,UAAE,0BAA0B,UAACL,EAAYI,CAAC,EAACc,KAAK,gC,SAAiC,O,GAAyB,QAAQ,UAAClB,EAAYO,IAAI,E,SAAE,Q,GAA6B,qBAAqB,UAACP,EAAYO,IAAI,E,SAAE,e,GAAoC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,O,GAA4B,MAAM,UAACP,EAAYO,IAAI,E,SAAE,e,GAAoC,qC,GAAsD,KAAK,WAACP,EAAYS,EAAE,EAACO,GAAG,Y,UAAY,UAAChB,EAAYO,IAAI,E,SAAE,Q,GAA6B,MAAM,UAACP,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,a,SAAc,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAC,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,Y,GAA6B,KAAK,WAACP,EAAYW,EAAE,EAACK,GAAG,S,UAAS,UAAChB,EAAYO,IAAI,E,SAAE,Q,GAA4B,UAACP,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,U,SAAW,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,WAAW,UAACL,EAAYO,IAAI,E,SAAE,I,GAAyB,SAAS,UAACP,EAAYI,CAAC,EAACc,KAAK,qE,SAAsE,M,GAAwB,kBAAkB,UAAClB,EAAYO,IAAI,E,SAAE,Q,GAA6B,O,GAAwB,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,+Q,KAAsT,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,OAAO,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,WAAW,UAACP,EAAYO,IAAI,E,SAAE,2B,GAAgD,I,GAAqB,KAAK,WAACP,EAAYW,EAAE,EAACK,GAAG,U,UAAU,UAAChB,EAAYO,IAAI,E,SAAE,S,GAA6B,UAACP,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,W,SAAY,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAC,UAACL,EAAYO,IAAI,E,SAAE,S,GAA8B,QAAQ,UAACP,EAAYI,CAAC,EAACc,KAAK,2DAA2DE,OAAO,SAASC,IAAI,sB,SAAuB,e,GAAiC,O,GAAwB,KAAK,WAACrB,EAAYK,CAAC,E,UAAE,gBAAgB,UAACL,EAAYO,IAAI,E,SAAE,S,GAA8B,W,GAA4B,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,0R,KAAiU,KAAK,WAACjB,EAAYW,EAAE,EAACK,GAAG,M,UAAO,MAAM,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,O,SAAQ,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAC,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,8BAA8B,UAACP,EAAYI,CAAC,EAACc,KAAK,4DAA4DE,OAAO,SAASC,IAAI,sB,SAAuB,gB,GAAkC,O,GAAwB,KAAK,UAACrB,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,iI,KAAwK,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,SAAS,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,UAAU,UAACP,EAAYO,IAAI,E,SAAE,c,GAAmC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,kB,GAAuC,IAAI,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,mBAAmB,UAACP,EAAYO,IAAI,E,SAAE,U,GAA+B,Q,GAAyB,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,wP,KAA+R,KAAK,WAACjB,EAAYS,EAAE,EAACO,GAAG,S,UAAU,SAAS,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,U,SAAW,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,eAAe,UAACL,EAAYO,IAAI,E,SAAE,O,GAA4B,wCAAwC,UAACP,EAAYO,IAAI,E,SAAE,O,GAA4B,4DAA4D,UAACP,EAAYO,IAAI,E,SAAE,O,GAA4B,e,GAAgC,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,wF,KAA+H,KAAK,WAACjB,EAAYS,EAAE,EAACO,GAAG,O,UAAQ,OAAO,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,KAAK,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,aAAa,UAACP,EAAYO,IAAI,E,SAAE,a,GAAkC,OAAO,UAACP,EAAYO,IAAI,E,SAAE,gB,GAAqC,cAAc,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,iCAAiC,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,wBAAwB,UAACP,EAAYI,CAAC,EAACc,KAAK,qE,SAAqE,UAAClB,EAAYO,IAAI,E,SAAE,e,KAAoD,O,GAAwB,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,wgB,KAA+iB,KAAK,WAACjB,EAAYS,EAAE,EAACO,GAAG,Y,UAAa,YAAY,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,a,SAAc,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAE,sBAAsB,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,eAAe,UAACP,EAAYO,IAAI,E,SAAE,oB,GAAyC,kB,GAAmC,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,2V,KAAkY,KAAK,WAACjB,EAAYK,CAAC,E,UAAC,UAACL,EAAYO,IAAI,E,SAAE,qB,GAA0C,WAAW,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,+BAA+B,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,IAAI,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,eAAe,UAACP,EAAYO,IAAI,E,SAAE,Y,GAAiC,wBAAwB,UAACP,EAAYO,IAAI,E,SAAE,wB,GAA6C,mBAAmB,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,SAAS,UAACP,EAAYO,IAAI,E,SAAE,a,GAAkC,I,GAAqB,KAAK,WAACP,EAAYK,CAAC,E,UAAE,iBAAiB,UAACL,EAAYO,IAAI,E,SAAE,S,GAA8B,8C,GAA+D,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,gB,SAAiB,0J,KAAiM,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,SAAS,UAACL,EAAYO,IAAI,E,SAAE,0B,GAA+C,MAAM,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,UAAU,UAACP,EAAYO,IAAI,E,SAAE,S,GAA8B,SAAS,UAACP,EAAYO,IAAI,E,SAAE,e,GAAoC,I,GAAqB,KAAK,WAACP,EAAYS,EAAE,EAACO,GAAG,gB,UAAiB,kBAAkB,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,iB,SAAkB,G,MAAsC,KAAK,WAAClB,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,UAACjB,EAAYK,CAAC,E,SAAE,0B,GAA2C,UAACL,EAAYK,CAAC,E,SAAE,+B,GAAiD,K,MAA0C,KAAK,WAACL,EAAYK,CAAC,E,UAAE,MAAM,UAACL,EAAYO,IAAI,E,SAAE,uB,GAA4C,Y,GAA6B,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,cAAcE,KAAK,uC,SAAwC,mS,KAA0U,KAAK,WAACnB,EAAYK,CAAC,E,UAAE,KAAK,UAACL,EAAYO,IAAI,E,SAAE,iB,GAAsC,Y,GAA6B,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,eAAeE,KAAK,iC,SAAkC,8kB,KAAqnB,KAAK,WAACnB,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,oBAAoB,UAACL,EAAYI,CAAC,EAACc,KAAK,mDAAmDE,OAAO,SAASC,IAAI,sB,SAAuB,O,MAAyC,KAAK,WAACrB,EAAYK,CAAC,E,UAAE,kBAAkB,UAACL,EAAYI,CAAC,EAACc,KAAK,kDAAkDE,OAAO,SAASC,IAAI,sB,SAAuB,O,MAAyC,K,MAA0C,KAAQ,KAAK,WAACrB,EAAYS,EAAE,EAACO,GAAG,O,UAAQ,OAAO,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,WAAClB,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYa,EAAE,E,UAAC,UAACb,EAAYO,IAAI,E,SAAE,Q,GAA6B,2BAA2B,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,4CAA4C,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,yB,GAA2C,K,GAAuB,KAAK,WAACP,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,S,GAA4B,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,UAACjB,EAAYK,CAAC,E,SAAE,oD,GAAsE,K,MAA0C,KAAK,UAACL,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,c,SAAe,2G,KAAkJ,KAAK,WAACjB,EAAYY,EAAE,EAACU,MAAM,I,UAAK,KAAK,WAACtB,EAAYa,EAAE,E,UAAE,mBAAmB,UAACb,EAAYO,IAAI,E,SAAE,Q,GAA6B,gBAAgB,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,O,GAAyB,K,GAAuB,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,c,SAAe,+O,KAAsR,KAAK,WAACjB,EAAYY,EAAE,EAACU,MAAM,I,UAAK,KAAK,WAACtB,EAAYa,EAAE,E,UAAE,cAAc,UAACb,EAAYO,IAAI,E,SAAE,Q,GAA6B,YAAY,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,iCAAiC,UAACP,EAAYO,IAAI,E,SAAE,a,MAAmD,K,GAAuB,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,c,SAAe,yqB,KAAgtB,KAAK,WAACjB,EAAYY,EAAE,EAACU,MAAM,I,UAAK,KAAK,WAACtB,EAAYa,EAAE,E,UAAE,WAAW,UAACb,EAAYO,IAAI,E,SAAE,Q,GAA6B,wCAAwC,UAACP,EAAYO,IAAI,E,SAAE,Y,GAAiC,MAAM,UAACP,EAAYO,IAAI,E,SAAE,W,GAAgC,I,GAAsB,K,GAAuB,KAAK,WAACP,EAAYS,EAAE,EAACO,GAAG,O,UAAQ,OAAO,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,Q,SAAS,G,MAAsC,KAAK,WAAClB,EAAYY,EAAE,E,UAAE,KAAK,WAACZ,EAAYa,EAAE,E,UAAC,UAACb,EAAYO,IAAI,E,SAAE,Q,GAA6B,e,GAAiC,K,GAAuB,KAAK,WAACP,EAAYK,CAAC,E,UAAE,aAAa,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,aAAa,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,wB,GAAyC,KAAK,WAACP,EAAYK,CAAC,E,UAAE,gBAAgB,UAACL,EAAYO,IAAI,E,SAAE,Q,GAA6B,qBAAqB,UAACP,EAAYO,IAAI,E,SAAE,Q,GAA6B,qBAAqB,UAACP,EAAYO,IAAI,E,SAAE,K,GAA0B,8B,GAA+C,KAAK,WAACP,EAAYM,EAAE,EAACU,GAAG,c,UAAe,gBAAgB,UAAChB,EAAYI,CAAC,EAACa,UAAU,gBAAgB,cAAY,OAAOC,KAAK,e,SAAgB,G,MAAsC,KAAK,WAAClB,EAAYK,CAAC,E,UAAC,UAACL,EAAYc,MAAM,E,SAAC,UAACd,EAAYO,IAAI,E,SAAE,W,KAAqD,+E,GAAgG,KAAK,WAACP,EAAYQ,GAAG,EAACS,UAAU,uB,UAAuB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,K,GAAwB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,iBAAiB,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,S,GAA0B,K,MAA0C,KAAK,UAACP,EAAYK,CAAC,E,SAAE,c,GAAgC,KAAK,UAACL,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,e,SAAgB,wU,KAA+W,KAAK,UAACjB,EAAYK,CAAC,E,SAAE,2C,GAA6D,KAAK,WAACL,EAAYK,CAAC,E,UAAE,+BAA+B,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,2D,GAA4E,KAAK,UAACP,EAAYU,GAAG,E,SAAC,UAACV,EAAYO,IAAI,EAACU,UAAU,gB,SAAiB,iD,KAAwF,KAAK,WAACjB,EAAYK,CAAC,E,UAAE,0DAA0D,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,O,GAAwB,KAAK,WAACP,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,0BAA0B,UAACL,EAAYO,IAAI,E,SAAE,W,GAAgC,gE,GAAiF,K,MAA0C,KAAK,WAACP,EAAYK,CAAC,E,UAAE,kBAAkB,UAACL,EAAYO,IAAI,E,SAAE,oB,GAAyC,kBAAkB,UAACP,EAAYO,IAAI,E,SAAE,W,GAAgC,iFAAiF,UAACP,EAAYO,IAAI,E,SAAE,W,GAAgC,gD,GAAiE,KAAK,WAACP,EAAYK,CAAC,E,UAAE,oDAAoD,UAACL,EAAYc,MAAM,E,SAAE,M,GAA6B,a,GAA8B,KAAK,WAACd,EAAYQ,GAAG,EAACS,UAAU,wB,UAAwB,UAACjB,EAAYQ,GAAG,EAACS,UAAU,yB,SAA0B,M,GAAyB,WAACjB,EAAYQ,GAAG,EAACS,UAAU,2B,UAA2B,WAACjB,EAAYK,CAAC,E,UAAE,eAAe,UAACL,EAAYI,CAAC,EAACc,KAAK,oC,SAAqC,W,GAA6B,I,GAAqB,K,QACxxqB,CAnBA,GAAAK,UAAA,EAAWC,mBAAmB,EAA9B,GAAWA,mBAAmB,CAAK,CAAC,GACpCD,WAAWC,mBAAmB,CAAC,gDAAgD,CAAG,CAAC,IAAM,CAAC,CAAC,KAAO,kBAAkB,GAAK,gBAAgB,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,YAAY,GAAK,YAAY,MAAQ,CAAC,EAAE,CAAC,KAAO,SAAS,GAAK,SAAS,MAAQ,CAAC,EAAE,CAAC,KAAO,UAAU,GAAK,UAAU,MAAQ,CAAC,EAAE,CAAC,KAAO,MAAM,GAAK,MAAM,MAAQ,CAAC,EAAE,CAAC,KAAO,SAAS,GAAK,SAAS,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,YAAY,GAAK,YAAY,MAAQ,CAAC,EAAE,CAAC,KAAO,kBAAkB,GAAK,gBAAgB,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,OAAO,GAAK,OAAO,MAAQ,CAAC,EAAE,CAAC,KAAO,gBAAgB,GAAK,cAAc,MAAQ,CAAC,EAAE,CAAC,MAAQ,OAAO,YAAc,CAAC,iBAAmB,CAAC,CAAC,EAuBptB,MAJA,W,IAAoBzB,EAAQ,UAAR,6CAAQ,CAAC,EACR0B,EAAc,AAAAxB,OAAOC,MAAM,CAAC,CAAC,EAAG,yBAAsBH,EAAMgB,UAAU,EAA/EW,OAAO,CACf,OAAOD,EAAY,UAACA,EAAA,mBAAc1B,GAAA,C,SAAO,UAACD,EAAA,KAAA6B,CAAA,AAAAA,EAAA,GAAsB5B,G,IAAuBD,EAAkBC,EAC7G,C"}