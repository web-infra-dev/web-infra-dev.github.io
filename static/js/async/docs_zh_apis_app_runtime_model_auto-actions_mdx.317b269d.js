(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_apis_app_runtime_model_auto-actions_mdx"],{30781:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return o}});var t,i=s("15169"),c=s("43932"),d=s("9880"),a=s("23169"),l=s("34552");function r(n){var e=Object.assign({h1:"h1",a:"a",p:"p",div:"div",code:"code",h2:"h2",h3:"h3",pre:"pre",ul:"ul",li:"li"},(0,a.useMDXComponents)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h1,{id:"auto-actions",children:["Auto actions",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#auto-actions",children:"#"})]}),"\n","\n",(0,d.jsx)(l.default,{}),"\n",(0,d.jsx)(e.p,{children:"Reduck 可以根据 State 的类型，自动生成相应的 Actions，为修改 State 提供便利。"}),"\n",(0,d.jsxs)(e.div,{className:"modern-directive tip",children:[(0,d.jsx)(e.div,{className:"modern-directive-title",children:"提示"}),(0,d.jsxs)(e.div,{className:"modern-directive-content",children:[(0,d.jsxs)(e.p,{children:["可通过 ",(0,d.jsx)(e.a,{href:"/configure/app/runtime/state#autoactions",children:(0,d.jsx)(e.code,{children:"runtime.state.autoActions"})})," 关闭 auto actions 功能。"]}),"\n"]})]}),"\n",(0,d.jsxs)(e.h2,{id:"示例",children:["示例",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,d.jsxs)(e.h3,{id:"基础数据类型",children:["基础数据类型",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#基础数据类型",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["State 类型为 ",(0,d.jsx)(e.code,{children:"string"}),"、",(0,d.jsx)(e.code,{children:"number"}),"、",(0,d.jsx)(e.code,{children:"boolean"}),"、",(0,d.jsx)(e.code,{children:"null"})," 时，生成 ",(0,d.jsx)(e.code,{children:"setState"})," Action。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-tsx",meta:'title="示例"',children:"const fooModel = model('foo').define({\n  state: 1,\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  return (\n    <div>\n      <div>State: {state}</div>\n      <button\n        type=\"button\"\n        onClick={() => {\n          // 调用自动生成的 setState Action\n          actions.setState(state + 1);\n        }}\n      >\n        add\n      </button>\n    </div>\n  );\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"数组-array",children:["数组 Array",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数组-array",children:"#"})]}),"\n",(0,d.jsx)(e.p,{children:"State 类型为 Array 时，生成下列 Actions："}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"push"}),"：将一个或多个元素添加到数组的末尾。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"pop"}),"：从数组中删除最后一个元素。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"shift"}),"：从数组中删除第一个元素。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"unshift"}),"：将一个或多个元素添加到数组的开头。","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["语法：",(0,d.jsx)(e.code,{children:"arr.unshift(element1, ..., elementN)"})]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"elementN"}),"：要添加到数组开头的元素或多个元素。"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"filter"}),"：过滤元素。"]}),"\n"]}),"\n","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"concat"}),"：拼接数组。"]}),"\n"]}),"\n","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"splice"}),"：通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回修改后的数组（注意和原生 ",(0,d.jsx)(e.code,{children:"splice"})," 返回值不同）。","\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["语法：",(0,d.jsx)(e.code,{children:"splice(start[, deleteCount[, item1[, item2[, ...]]]])"})]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"start"}),"：指定修改的开始位置（从 0 计数）。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"deleteCount"}),"：可选，整数，表示要移除的数组元素的个数。"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"item, item2, ..."}),"：可选，要添加进数组的元素，从 start 位置开始。如果不指定，则 ",(0,d.jsx)(e.code,{children:"splice"})," 将只删除数组元素。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-tsx",meta:'title="示例"',children:"const fooModel = model('foo').define({\n  state: [1, 2, 3],\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.push(4);\n    actions.pop();\n    actions.shift(0);\n    actions.unshift();\n    actions.filter(val => val <= 2);\n    actions.splice(0, 1, 1, 2);\n  }, []);\n\n  return (\n    <div>\n      <div>State: {state}</div>\n    </div>\n  );\n}\n"})}),"\n",(0,d.jsxs)(e.h3,{id:"简单对象-plainobject",children:["简单对象 PlainObject",(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#简单对象-plainobject",children:"#"})]}),"\n",(0,d.jsxs)(e.p,{children:["State 类型为 PlainObject 时，根据 State 包含的属性名，生成 ",(0,d.jsx)(e.code,{children:"set${key}"}),"（小驼峰命名）Actions。"]}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-tsx",meta:'title="示例"',children:"const fooModel = model('foo').define({\n  state: {\n    a: 1,\n    b: { value: 1 },\n    c: 'c',\n  },\n});\n\nfunction App() {\n  const [state, actions] = useModel(fooModel);\n\n  useEffect(() => {\n    actions.setA(2);\n    actions.setB({ value: 2 });\n    actions.setC('d');\n  }, []);\n\n  return (\n    <div>\n      <div>State: {state}</div>\n    </div>\n  );\n}\n"})})]})}(t=globalThis).__RSPRESS_PAGE_META||(t.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fapis%2Fapp%2Fruntime%2Fmodel%2Fauto-actions.mdx"]={toc:[{text:"示例",id:"示例",depth:2},{text:"基础数据类型",id:"基础数据类型",depth:3},{text:"数组 Array",id:"数组-array",depth:3},{text:"简单对象 PlainObject",id:"简单对象-plainobject",depth:3}],title:"Auto actions",frontmatter:{sidebar_position:6,title:"Auto actions"}};var o=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,a.useMDXComponents)(),n.components).wrapper;return e?(0,d.jsx)(e,(0,c._)((0,i._)({},n),{children:(0,d.jsx)(r,(0,i._)({},n))})):r(n)}}}]);