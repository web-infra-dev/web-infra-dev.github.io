{"version":3,"file":"static/js/async/docs_zh_guides_basic-features_routes_mdx.b50ccc01.js","sources":["./docs/zh/components/convention-routing-motivation.mdx","./docs/zh/components/routes-practice.mdx","./docs/zh/guides/basic-features/routes.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fcomponents%2Fconvention-routing-motivation.mdx\"] = {\"toc\":[],\"title\":\"\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    return <></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n","globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fcomponents%2Froutes-practice.mdx\"] = {\"toc\":[],\"title\":\"\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    return <></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n","globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fbasic-features%2Froutes.mdx\"] = {\"toc\":[{\"text\":\"约定式路由\",\"id\":\"约定式路由\",\"depth\":2},{\"text\":\"路由文件约定\",\"id\":\"路由文件约定\",\"depth\":3},{\"text\":\"Layout\",\"id\":\"layout\",\"depth\":4},{\"text\":\"Page\",\"id\":\"page\",\"depth\":4},{\"text\":\"Config\",\"id\":\"config\",\"depth\":4},{\"text\":\"动态路由\",\"id\":\"动态路由\",\"depth\":3},{\"text\":\"动态可选路由\",\"id\":\"动态可选路由\",\"depth\":3},{\"text\":\"通配路由\",\"id\":\"通配路由\",\"depth\":3},{\"text\":\"无路径布局\",\"id\":\"无路径布局\",\"depth\":3},{\"text\":\"无布局路径\",\"id\":\"无布局路径\",\"depth\":3},{\"text\":\"(WIP)Loading\",\"id\":\"wiploading\",\"depth\":3},{\"text\":\"路由重定向\",\"id\":\"路由重定向\",\"depth\":3},{\"text\":\"错误处理\",\"id\":\"错误处理\",\"depth\":3},{\"text\":\"运行时配置\",\"id\":\"运行时配置\",\"depth\":3},{\"text\":\"渲染前的钩子\",\"id\":\"渲染前的钩子\",\"depth\":3},{\"text\":\"预加载\",\"id\":\"预加载\",\"depth\":3},{\"text\":\"常见问题\",\"id\":\"常见问题\",\"depth\":4},{\"text\":\"自控式路由\",\"id\":\"自控式路由\",\"depth\":2},{\"text\":\"其他路由方案\",\"id\":\"其他路由方案\",\"depth\":2}],\"title\":\"路由方案\",\"frontmatter\":{\"sidebar_position\":1}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nimport Motivation from '@site-docs/components/convention-routing-motivation';\nimport Practice from '@site-docs/components/routes-practice';\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        strong: \"strong\",\n        div: \"div\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        h3: \"h3\",\n        ul: \"ul\",\n        li: \"li\",\n        h4: \"h4\",\n        ol: \"ol\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"路由方案\">{\"路由方案\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#路由方案\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js 的路由基于 \"}<_components.a href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener noreferrer\">{\"React Router 6\"}</_components.a>{\"，并提供了多种类型的路由模式。根据不同 \"}<_components.a href=\"/guides/concept/entries\">{\"入口\"}</_components.a>{\" 类型，将路由分为三种模式，分别是\"}<_components.strong>{\"约定式路由\"}</_components.strong>{\"，\"}<_components.strong>{\"自控式路由\"}</_components.strong>{\"和\"}<_components.strong>{\"其他路由方案\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"本小节提到的路由，都是客户端路由，即 SPA 路由。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"约定式路由\">{\"约定式路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#约定式路由\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"以 \"}<_components.code>{\"routes/\"}</_components.code>{\" 为约定的入口，Modern.js 会自动基于文件系统，生成对应的路由结构。\"}</_components.p>{\"\\n\"}<_components.p>{\"Modern.js 支持了业界流行的约定式路由模式：\"}<_components.strong>{\"嵌套路由\"}</_components.strong>{\"，使用嵌套路由时，页面的路由 与 UI 结构是相呼应的，我们将会详细介绍这种路由模式。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"/user/johnny/profile                  /user/johnny/posts\\n+------------------+                  +-----------------+\\n| User             |                  | User            |\\n| +--------------+ |                  | +-------------+ |\\n| | Profile      | |  +------------>  | | Posts       | |\\n| |              | |                  | |             | |\\n| +--------------+ |                  | +-------------+ |\\n+------------------+                  +-----------------+\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"路由文件约定\">{\"路由文件约定\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#路由文件约定\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在\"}<_components.code>{\"routes/\"}</_components.code>{\" 目录下，目录名会作为路由 url 的映射，Modern.js 有两个文件约定 \"}<_components.code>{\"layout.[jt]sx\"}</_components.code>{\" 和 \"}<_components.code>{\"page.[jt]sx\"}</_components.code>{\"（后面简写为 \"}<_components.code>{\".tsx\"}</_components.code>{\"）。这两个文件决定了应用的布局层次，其中 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 中作为布局组件，\"}<_components.code>{\"page.tsx\"}</_components.code>{\" 作为内容组件，是整条路由的叶子节点（一条路由有且仅有一个叶子节点，且必须以叶子节点结尾）。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如以下目录结构：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── page.tsx\\n    └── user\\n        └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"会产出下面两条路由：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"/\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"/user\"}</_components.code></_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"当添加 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 后， 假设有以下目录\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"这里 \"}<_components.code>{\"routes/layout.tsx\"}</_components.code>{\" 会作为 \"}<_components.code>{\"/\"}</_components.code>{\" 路由下所有组件的布局组件使用， \"}<_components.code>{\"routes/user/layout.tsx\"}</_components.code>{\" 会作为 \"}<_components.code>{\"/user\"}</_components.code>{\" 路由下所有路由组件的布局组件使用。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── layout.tsx\\n    ├── page.tsx\\n    └── user\\n        ├── layout.tsx\\n        └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当路由为 \"}<_components.code>{\"/\"}</_components.code>{\" 时，会有以下 UI 布局：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<Layout>\\n  <Page />\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"同样，\"}<_components.code>{\"routes/user/layout.tsx\"}</_components.code>{\" 会作为 \"}<_components.code>{\"/user\"}</_components.code>{\" 路由下所有组件的布局组件使用。当路由为 \"}<_components.code>{\"/user\"}</_components.code>{\" 时， 会有以下 UI 布局：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<Layout>\\n  <UserLayout>\\n    <UserPage />\\n  </UserLayout>\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h4 id=\"layout\">{\"Layout\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#layout\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p><_components.code>{\"<Layout>\"}</_components.code>{\" 组件是指 \"}<_components.code>{\"routes/\"}</_components.code>{\" 目录下所有 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 文件，它们表示对应路由片段的布局，使用 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 表示子组件。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta=\"title=routes/layout.tsx\">{\"import { Link, Outlet, useLoaderData } from '@modern-js/runtime/router';\\n\\nexport default () => {\\n  return (\\n    <>\\n      <Outlet></Outlet>\\n    </>\\n  );\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"<Outlet>\"}</_components.code>{\" 是 React Router 6 中新的 API，详情可以查看 \"}<_components.a href=\"https://reactrouter.com/en/main/components/outlet#outlet\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Outlet\"}</_components.a>{\".\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"为了方便介绍 \"}<_components.code>{\"<Layout>\"}</_components.code>{\" 与 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 的关系，以下面的文件目录举例：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── blog\\n    │   └── page.tsx\\n    ├── layout.tsx\\n    ├── page.tsx\\n    └── user\\n        ├── layout.tsx\\n        └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"当路由为 \"}<_components.code>{\"/\"}</_components.code>{\" 时，\"}<_components.code>{\"routes/layout.tsx\"}</_components.code>{\" 中的 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 代表的是 \"}<_components.code>{\"routes/page.tsx\"}</_components.code>{\" 中导出的组件，生成以下 UI 结构：\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<Layout>\\n  <Page />\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol start=\"2\">{\"\\n\"}<_components.li>{\"当路由为 \"}<_components.code>{\"/blog\"}</_components.code>{\" 时，\"}<_components.code>{\"routes/layout.tsx\"}</_components.code>{\" 中的 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 代表的是 \"}<_components.code>{\"routes/blog/page.tsx\"}</_components.code>{\" 中导出的组件，生成以下 UI 结构：\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<Layout>\\n  <BlogPage />\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ol start=\"3\">{\"\\n\"}<_components.li>{\"当路由为 \"}<_components.code>{\"/user\"}</_components.code>{\" 时，\"}<_components.code>{\"routes/layout.tsx\"}</_components.code>{\" 中的 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 代表的是 \"}<_components.code>{\"routes/user/layout.tsx\"}</_components.code>{\" 中导出的组件。\"}<_components.code>{\"routes/user/layout.tsx\"}</_components.code>{\" 中的 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 代表的是 \"}<_components.code>{\"routes/user/page.tsx\"}</_components.code>{\" 中导出的组件。生成以下 UI 结构：\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<Layout>\\n  <UserLayout>\\n    <UserPage />\\n  </UserLayout>\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"总结而言，如果子路由的文件目录下存在 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\"，上一级 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 中的 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 即为子路由文件目录下的 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" ，否则为子路由文件目录下的 \"}<_components.code>{\"page.tsx\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.h4 id=\"page\">{\"Page\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#page\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"所有的路由，理论上都应该由 \"}<_components.code>{\"<Page>\"}</_components.code>{\" 组件结束。在 \"}<_components.code>{\"page.tsx\"}</_components.code>{\" 文件内，如果开发者引入 \"}<_components.code>{\"<Outlet>\"}</_components.code>{\" 组件，不会有任何效果。\"}</_components.p>{\"\\n\"}<_components.h4 id=\"config\">{\"Config\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#config\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"每个 \"}<_components.code>{\"Layout\"}</_components.code>{\" 或 \"}<_components.code>{\"Page\"}</_components.code>{\" 文件都可以定义一个自己的 \"}<_components.code>{\"config\"}</_components.code>{\" 文件，如 \"}<_components.code>{\"page.config.ts\"}</_components.code>{\"，该文件中我们约定了一个具名导出 \"}<_components.code>{\"handle\"}</_components.code>{\"，\\n这个字段中你可以定义任意属性：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/page.config.ts\"'>{\"export const handle = {\\n  breadcrumbName: 'profile'\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"定义的这些属性可以通过 \"}<_components.a href=\"https://reactrouter.com/en/main/hooks/use-matches\" target=\"_blank\" rel=\"noopener noreferrer\"><_components.code>{\"useMatches\"}</_components.code></_components.a>{\" hook 获取：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/layout.ts\"'>{\"export default () => {\\n  const matches = useMatches;\\n  const breadcrumbs = matches.map(matchedRoute => matchedRoute?.handle?.breadcrumbName);\\n  return (\\n    <Breadcrumb names={breadcrumbs}>\\n    </Breadcrumb>\\n  )\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"动态路由\">{\"动态路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#动态路由\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"[]\"}</_components.code>{\" 命名的文件目录，生成的路由会作为动态路由。例如以下文件目录：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"└── routes\\n    ├── [id]\\n    │   └── page.tsx\\n    ├── blog\\n    │   └── page.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"routes/[id]/page.tsx\"}</_components.code>{\" 文件会转为 \"}<_components.code>{\"/:id\"}</_components.code>{\" 路由。除了可以确切匹配的 \"}<_components.code>{\"/blog\"}</_components.code>{\" 路由，其他所有 \"}<_components.code>{\"/xxx\"}</_components.code>{\" 都会匹配到该路由。\"}</_components.p>{\"\\n\"}<_components.p>{\"在组件中，可以通过 \"}<_components.a href=\"/apis/app/runtime/router/router#useparams\">{\"useParams\"}</_components.a>{\" 获取对应命名的参数。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 loader 中，params 会作为 \"}<_components.a href=\"/guides/basic-features/data-fetch#loader-%E5%87%BD%E6%95%B0\">{\"loader\"}</_components.a>{\" 的入参，通过 \"}<_components.code>{\"params.xxx\"}</_components.code>{\" 可以获取。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"动态可选路由\">{\"动态可选路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#动态可选路由\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"[$]\"}</_components.code>{\" 命名的文件目录，生成的路由会作为动态可选路由。例如以下文件目录：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"└── routes\\n    ├── user\\n    │   └── [id$]\\n    │       └── page.tsx\\n    ├── blog\\n    │   └── page.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"routes/user/[id$]/page.tsx\"}</_components.code>{\" 文件会转为 \"}<_components.code>{\"/user/:id?\"}</_components.code>{\" 路由。\"}<_components.code>{\"/user\"}</_components.code>{\" 下的所有路由都会匹配到该路由，并且 \"}<_components.code>{\"id\"}</_components.code>{\" 参数可选存在。通常在区分\"}<_components.strong>{\"创建\"}</_components.strong>{\"与\"}<_components.strong>{\"编辑\"}</_components.strong>{\"时，可以使用该路由。\"}</_components.p>{\"\\n\"}<_components.p>{\"在组件中，可以通过 \"}<_components.a href=\"/apis/app/runtime/router/router#useparams\">{\"useParams\"}</_components.a>{\" 获取对应命名的参数。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 loader 中，params 会作为 \"}<_components.a href=\"/guides/basic-features/data-fetch#loader-%E5%87%BD%E6%95%B0\">{\"loader\"}</_components.a>{\" 的入参，通过 \"}<_components.code>{\"params.xxx\"}</_components.code>{\" 可以获取。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"通配路由\">{\"通配路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#通配路由\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"如果在 routes 目录下创建 \"}<_components.code>{\"$.tsx\"}</_components.code>{\" 文件，该文件会作为通配路由组件，当没有匹配的路由时，会渲染该路由组件。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"$.tsx\"}</_components.code>{\" 可以认为是一种特殊的 \"}<_components.code>{\"page\"}</_components.code>{\" 路由组件，当前目录下有 \"}<_components.code>{\"layout\"}</_components.code>{\" 组件时，\"}<_components.code>{\"$.tsx\"}</_components.code>{\"，会作为 \"}<_components.code>{\"layout\"}</_components.code>{\" 的子组件渲染。\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.p>{\"例如以下目录结构：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"└── routes\\n    ├── blog\\n    │   ├── $.tsx\\n    │   └── layout.tsx\\n    └── layout.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当访问任何匹配不到的路径时(如 \"}<_components.code>{\"/blog/a\"}</_components.code>{\")，都会渲染 \"}<_components.code>{\"routes/$.tsx\"}</_components.code>{\" 组件，因为这里有 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\"，渲染的 UI 如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<RootLayout>\\n  <BlogLayout>\\n    <$></$>\\n  </BlogLayout>\\n</RootLayout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果希望访问 \"}<_components.code>{\"/blog\"}</_components.code>{\" 时，也匹配到 \"}<_components.code>{\"blog/$.tsx\"}</_components.code>{\" 文件，需要删除同目录下的 \"}<_components.code>{\"blog/layout.tsx\"}</_components.code>{\" 文件，同时保证 \"}<_components.code>{\"blog\"}</_components.code>{\" 下面没有其他子路由。\"}</_components.p>{\"\\n\"}<_components.p>{\"同样，\"}<_components.code>{\"$.tsx\"}</_components.code>{\" 中可以使用 \"}<_components.a href=\"/apis/app/runtime/router/router#useparams\">{\"useParams\"}</_components.a>{\" 捕获 url 的剩余部分。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"$.tsx\"'>{\"import { useParams } from '@modern-js/runtime/router';\\n// 当 path 是 `/aaa/bbb` 时\\nconst params = useParams();\\nparams['*']; // => 'aaa/bbb'\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"$.tsx\"}</_components.code>{\" 可以加入到 \"}<_components.code>{\"routes\"}</_components.code>{\" 目录下的任意目录中，一个常见的使用示例是添加 \"}<_components.code>{\"routes/$.tsx\"}</_components.code>{\" 文件去定制任意层级的 404 内容。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"无路径布局\">{\"无路径布局\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#无路径布局\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当目录名以 __ 开头时，对应的目录名不会转换为实际的路由路径，例如以下文件目录：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── __auth\\n    │   ├── layout.tsx\\n    │   ├── login\\n    │   │   └── page.tsx\\n    │   └── signup\\n    │       └── page.tsx\\n    ├── layout.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Modern.js 会生成 \"}<_components.code>{\"/login\"}</_components.code>{\" 和 \"}<_components.code>{\"/sign\"}</_components.code>{\" 两条路由，\"}<_components.code>{\"__auth/layout.tsx\"}</_components.code>{\" 组件会作为 \"}<_components.code>{\"login/page.tsx\"}</_components.code>{\" 和 \"}<_components.code>{\"signup/page.tsx\"}</_components.code>{\" 的布局组件，但\"}<_components.code>{\"__auth\"}</_components.code>{\" 不会作为路由路径片段。\"}</_components.p>{\"\\n\"}<_components.p>{\"当需要为某些类型的路由，做独立的布局，或是想要将路由做归类时，这一功能非常有用。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"无布局路径\">{\"无布局路径\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#无布局路径\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"有些情况下，项目需要较为复杂的路由，但这些路由又不存在独立的 UI 布局，如果像普通文件目录那边创建路由会导致目录层级较深。\"}</_components.p>{\"\\n\"}<_components.p>{\"因此 Modern.js 支持了通过 \"}<_components.code>{\".\"}</_components.code>{\" 来分割路由片段，代替文件目录。例如，当需要 \"}<_components.code>{\"/user/profile/2022/edit\"}</_components.code>{\" 时，可以直接创建如下文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"└── routes\\n    ├── user.profile.[id].edit\\n    │      └── page.tsx\\n    ├── layout.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"访问路由时，将得到如下 UI 布局：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<RootLayout>\\n  <UserProfileEdit /> // routes/user.profile.[id].edit/page.tsx\\n</RootLayout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"wiploading\">{\"(WIP)Loading\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#wiploading\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.code>{\"routes/\"}</_components.code>{\" 下每一层目录中，开发者可以创建 \"}<_components.code>{\"loading.tsx\"}</_components.code>{\" 文件，默认导出一个 \"}<_components.code>{\"<Loading>\"}</_components.code>{\" 组件。\"}</_components.p>{\"\\n\"}<_components.p>{\"当路由目录下存在该组件和 \"}<_components.code>{\"layout\"}</_components.code>{\" 组件时，这一级子路由下所有的路由切换时，都会以该 \"}<_components.code>{\"<Loading>\"}</_components.code>{\" 组件作为 JS Chunk 加载时的 Fallback UI。例如以下文件目录：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\".\\n└── routes\\n    ├── blog\\n    │   ├── [id]\\n    │   │   └── page.tsx\\n    │   └── page.tsx\\n    ├── layout.tsx\\n    ├── loading.tsx\\n    └── page.tsx\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当定义 \"}<_components.code>{\"loading.tsx\"}</_components.code>{\" 时，就相当于以下布局：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=当路由为\"/\"时'>{\"<Layout>\\n  <Suspense fallback={<Loading />}>\\n    <Page />\\n  </Suspense>\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=当路由为\"/blog\"时'>{\"<Layout>\\n  <Suspense fallback={<Loading />}>\\n    <BlogPage />\\n  </Suspense>\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=当路由为\"/blog/123\"时'>{\"<Layout>\\n  <Suspense fallback={<Loading />}>\\n    <BlogIdPage />\\n  </Suspense>\\n</Layout>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"当目录的 Layout 组件不存在时，该目录下的 Loading 组件也不会生效。\"}</_components.p><_components.p>{\"Modern.js 建议必须有根 Layout 和根 Loading。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"当路由从 \"}<_components.code>{\"/\"}</_components.code>{\" 跳转到 \"}<_components.code>{\"/blog\"}</_components.code>{\" 时，如果 \"}<_components.code>{\"blog/page\"}</_components.code>{\" 组件的 JS Chunk 还未加载，则会先展示 \"}<_components.code>{\"loading.tsx\"}</_components.code>{\" 中导出的组件 UI。\"}</_components.p>{\"\\n\"}<_components.p>{\"同理，当路由从 \"}<_components.code>{\"/\"}</_components.code>{\" 或者 \"}<_components.code>{\"/blog\"}</_components.code>{\" 跳转到 \"}<_components.code>{\"/blog/123\"}</_components.code>{\" 时，如果 \"}<_components.code>{\"blog/[id]/page\"}</_components.code>{\" 组件的 JS Chunk 还未加载，也会先展示 \"}<_components.code>{\"loading.tsx\"}</_components.code>{\" 中导出的组件 UI。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"路由重定向\">{\"路由重定向\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#路由重定向\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"可以通过创建 \"}<_components.a href=\"/guides/basic-features/data-fetch\"><_components.code>{\"Data Loader\"}</_components.code></_components.a>{\" 文件做路由的重定向，如有文件 \"}<_components.code>{\"routes/user/page.tsx\"}</_components.code>{\"，想对这个文件对应的路由做重定向，可以创建 \"}<_components.code>{\"routes/user/page.loader.ts\"}</_components.code>{\" 文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/user/page.loader.ts\"'>{\"import { redirect } from '@modern-js/runtime/router';\\n\\nexport default () => {\\n  const user = await getUser();\\n  if (!user) {\\n    return redirect('/login');\\n  }\\n  return null;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"错误处理\">{\"错误处理\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#错误处理\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.code>{\"routes/\"}</_components.code>{\" 下每一层目录中，开发者同样可以定义一个 \"}<_components.code>{\"error.tsx\"}</_components.code>{\" 文件，默认导出一个 \"}<_components.code>{\"<ErrorBoundary>\"}</_components.code>{\" 组件。\"}</_components.p>{\"\\n\"}<_components.p>{\"当有路由目录下存在该组件时，组件渲染出错会被 \"}<_components.code>{\"ErrorBoundary\"}</_components.code>{\" 组件捕获。当目录未定义 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 文件时，\"}<_components.code>{\"<ErrorBoundary>\"}</_components.code>{\" 组件不会生效。\"}</_components.p>{\"\\n\"}<_components.p><_components.code>{\"<ErrorBoundary>\"}</_components.code>{\" 可以返回出错时的 UI 视图，当前层级未声明 \"}<_components.code>{\"<ErrorBoundary>\"}</_components.code>{\" 组件时，错误会向上冒泡到更上层的组件，直到被捕获或抛出错误。同时，当组件出错时，只会影响捕获到该错误的路由组件及子组件，其他组件的状态和视图不受影响，可以继续交互。\"}</_components.p>{\"\\n\"}{}{\"\\n\"}<_components.p>{\"在 \"}<_components.code>{\"<ErrorBoundary>\"}</_components.code>{\" 组件内，可以使用 \"}<_components.a href=\"/apis/app/runtime/router/router#userouteerror\">{\"useRouteError\"}</_components.a>{\" 获取的错误的具体信息：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { useRouteError } from '@modern-js/runtime/router';\\nconst ErrorBoundary = () => {\\n  const error = useRouteError();\\n  return (\\n    <div>\\n      <h1>{error.status}</h1>\\n      <h2>{error.message}</h2>\\n    </div>\\n  );\\n};\\nexport default ErrorBoundary;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"运行时配置\">{\"运行时配置\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#运行时配置\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在每个根 \"}<_components.code>{\"Layout\"}</_components.code>{\" 组件中(\"}<_components.code>{\"routes/layout.ts\"}</_components.code>{\")，可以动态地定义运行时配置：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/layout.tsx\"'>{\"// 定义运行时配置\\nimport type { AppConfig } from '@modern-js/runtime';\\n\\nexport const config = (): AppConfig => {\\n  return {\\n    router: {\\n      createRoutes() {\\n        return [\\n          {\\n            path: 'modern',\\n            element: <div>modern</div>,\\n          },\\n        ];\\n      },\\n    },\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"渲染前的钩子\">{\"渲染前的钩子\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#渲染前的钩子\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在有些场景下，需要在应用渲染前做一些操作，可以在 \"}<_components.code>{\"routes/layout.tsx\"}</_components.code>{\" 中定义 \"}<_components.code>{\"init\"}</_components.code>{\" 钩子，\"}<_components.code>{\"init\"}</_components.code>{\" 在客户端和服务端均会执行，基本使用示例如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/layout.tsx\"'>{\"import type { RuntimeContext } from '@modern-js/runtime';\\n\\nexport const init = (context: RuntimeContext) => {\\n  // do something\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"init\"}</_components.code>{\" 钩子可以挂载一些全局的数据，在应用的其他地方可以访问 \"}<_components.code>{\"runtimeContext\"}</_components.code>{\" 变量：\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"该功能在应用需要页面前置的数据、自定义数据注入或是框架迁移（如 Next.js）时会非常有用。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/layout.tsx\"'>{\"import { RuntimeContext } from '@modern-js/runtime';\\n\\nexport const init = (context: RuntimeContext) => {\\n  return {\\n    message: 'Hello World',\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/page.tsx\"'>{\"import { useRuntimeContext } from '@modern-js/runtime';\\n\\nexport default () => {\\n  const { context } = useRuntimeContext();\\n  const { message } = context.getInitData();\\n\\n  return <div>{message}</div>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"配合 SSR 功能时，浏览器端可以获取到 SSR 时 \"}<_components.code>{\"init\"}</_components.code>{\" 返回的数据，开发者可以自行判断是否要在浏览器端重新获取数据来覆盖 SSR 数据，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/layout.tsx\"'>{\"import { RuntimeContext } from '@modern-js/runtime';\\n\\nexport const init = (context: RuntimeContext) => {\\n  if (process.env.MODERN_TARGET === 'node') {\\n    return {\\n      message: 'Hello World By Server',\\n    };\\n  } else {\\n    const { context } = runtimeContext;\\n    const data = context.getInitData();\\n    // 如果没有获取到期望的数据\\n    if (!data.message) {\\n      return {\\n        message: 'Hello World By Client',\\n      };\\n    }\\n  }\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"预加载\">{\"预加载\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#预加载\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在约定式路由下， Modern.js 会根据路由，自动地对路由进行分片，当用户访问具体的路由时，会自动加载对应的分片，这样可以有效地减少首屏加载的时间。但这也带来了一个问题，当用户访问一个路由时，如果该路由对应的分片还未加载完成，就会出现白屏的情况。\\n这种情况下你可以通过定义 \"}<_components.code>{\"Loading\"}</_components.code>{\" 组件，在静态资源加载完成前，展示一个自定义的 \"}<_components.code>{\"Loading\"}</_components.code>{\" 组件。\"}</_components.p>{\"\\n\"}<_components.p>{\"为了进一步提升用户体验，减少 loading 的时间，Modern.js 支持在 Link 组件上定义 \"}<_components.code>{\"prefetch\"}</_components.code>{\" 属性，可以提前对静态资源和数据进行加载：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{'<Link prefetch=\"intent\" to=\"page\">\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\">{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"该功能目前仅在 Webpack 项目中支持，Rspack 项目暂不支持。\"}</_components.li>{\"\\n\"}<_components.li>{\"对数据的预加载目前只会预加载 SSR 项目中 \"}<_components.a href=\"/guides/basic-features/data-fetch\">{\"Data Loader\"}</_components.a>{\" 中返回的数据。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p><_components.code>{\"prefetch\"}</_components.code>{\" 属性有三个可选值：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"none\"}</_components.code>{\"， 默认值，不会做 prefetch，没有任何额外的行为。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"intent\"}</_components.code>{\"，这是我们推荐大多数场景下使用的值，当你把鼠标放在 Link 上时，会自动开始加载对应的分片和 Data Loader 中定义的数据，当鼠标移开时，会自动取消加载。在我们的测试中，即使是快速点击，也能减少大约 200ms 的加载时间。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"render\"}</_components.code>{\"，当 Link 组件渲染时，就会加载对应的分片和 Data Loader 中定义的数据。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h4 id=\"常见问题\">{\"常见问题\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#常见问题\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"使用 \"}<_components.code>{\"render\"}</_components.code>{\" 和不根据路由做静态资源分片的区别？\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"使用 \"}<_components.code>{\"render\"}</_components.code>{\" 可以指定哪些路由在首屏时，进行加载，同时你可以通过对渲染的控制，仅当 \"}<_components.code>{\"Link\"}</_components.code>{\" 组件进入到可视区域时，才对 \"}<_components.code>{\"Link\"}</_components.code>{\" 组件进行渲染。\"}</_components.li>{\"\\n\"}<_components.li>{\"使用 \"}<_components.code>{\"render\"}</_components.code>{\"，仅在空闲时对静态资源进行加载，不会与首屏静态资源抢占网络。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 SSR 场景下，也会对数据进行预取。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}{\"\\n\"}<Motivation/>{\"\\n\"}{\"\\n\"}<Practice/>{\"\\n\"}<_components.h2 id=\"自控式路由\">{\"自控式路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#自控式路由\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"以 \"}<_components.code>{\"src/App.tsx\"}</_components.code>{\" 为约定的入口，Modern.js 不会对路由做额外的操作，开发者可以自行使用 \"}<_components.a href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener noreferrer\">{\"React Router 6\"}</_components.a>{\" 的 API 进行开发，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/App.tsx\"'>{\"import { BrowserRouter, Route, Routes } from '@modern-js/runtime/router';\\n\\nexport default () => {\\n  return (\\n    <BrowserRouter>\\n      <Routes>\\n        <Route index element={<div>index</div>} />\\n        <Route path=\\\"about\\\" element={<div>about</div>} />\\n      </Routes>\\n    </BrowserRouter>\\n  );\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"Modern.js 默认对约定式路由做了一系列资源加载及渲染上的优化，并且提供了开箱即用的 SSR 能力，而这些能力，在使用自控路由时，都需要开发者自行封装，推荐开发者使用约定式路由。\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"其他路由方案\">{\"其他路由方案\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#其他路由方案\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"默认情况下，Modern.js 会开启内置的路由方案，即 React Router。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"export default defineConfig({\\n  runtime: {\\n    router: true,\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如上述配置，当开启 \"}<_components.a href=\"/configure/app/runtime/router\"><_components.code>{\"runtime.router\"}</_components.code></_components.a>{\" 配置时，Modern.js 会从 \"}<_components.code>{\"@modern-js/runtime/router\"}</_components.code>{\" 命名空间导出 React Router 的 API 供开发者使用，保证开发者和 Modern.js 中使用同一份代码，并自动根据 router 配置包裹 \"}<_components.code>{\"Provider\"}</_components.code>{\" 组件。另外，这种情况下，React Router 的代码会被打包到 JS 产物中。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果项目已经有自己的路由方案，或者不需要使用客户端路由，可以关闭这个功能。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"export default defineConfig({\\n  runtime: {\\n    router: false,\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如上述配置， 如果关闭了 \"}<_components.a href=\"/configure/app/runtime/router\"><_components.code>{\"runtime.router\"}</_components.code></_components.a>{\" 配置，并直接使用 \"}<_components.code>{\"react-router-dom\"}</_components.code>{\" 进行项目路由管理时，还需要根据 React Router 文档自行包裹 \"}<_components.code>{\"Provider\"}</_components.code>{\"。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","globalThis","__RSPRESS_PAGE_META","MDXLayout","Object","assign","components","wrapper","_","_components","h1","a","p","strong","div","h2","code","pre","h3","ul","li","h4","ol","id","className","href","target","rel","meta","start"],"mappings":"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"}