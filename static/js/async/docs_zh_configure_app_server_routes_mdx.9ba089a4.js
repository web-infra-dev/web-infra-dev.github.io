(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["docs_zh_configure_app_server_routes_mdx"],{23296:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return l}});var s,d=r("15169"),i=r("43932"),t=r("9880"),a=r("23169");function c(e){var n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",code:"code",p:"p",h2:"h2",pre:"pre",div:"div"},(0,a.useMDXComponents)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"serverroutes",children:["server.routes",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#serverroutes",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"类型："})," ",(0,t.jsx)(n.code,{children:"Object"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"默认值："})," 根据文件约定自动生成的服务端路由规则，每个入口生成一条路由规则，入口名称等于路由路径。"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"该配置选项只作用于服务端路由，可以自定义应用入口的访问路由。"}),"\n",(0,t.jsxs)(n.h2,{id:"自定义访问路由",children:["自定义访问路由",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义访问路由",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:["对象的 ",(0,t.jsx)(n.code,{children:"key"})," 为当前应用的入口名, 值可以是 ",(0,t.jsx)(n.code,{children:"string | Array<string>"}),"。"]}),"\n",(0,t.jsxs)(n.p,{children:["当值类型为 ",(0,t.jsx)(n.code,{children:"string"})," 时，当前值即表示访问该入口的路由名称。"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  server: {\n    routes: {\n      // 默认路由为 /entryName1，自定义后为 /p/test1\n      entryName1: '/p/test1'\n      // 支持动态服务端路由配置\n      entryName2: '/detail/:id'\n    }\n  }\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["也可以通过 ",(0,t.jsx)(n.code,{children:"Array<string>"})," 为入口设置多个访问路由:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  server: {\n    routes: {\n      'page-a': [`/a`, '/b'],\n    },\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["此时，通过 ",(0,t.jsx)(n.code,{children:"/a"}),"、",(0,t.jsx)(n.code,{children:"/b"})," 两个路由都可以访问到 ",(0,t.jsx)(n.code,{children:"page-a"})," 入口。"]}),"\n",(0,t.jsxs)(n.p,{children:["执行 ",(0,t.jsx)(n.code,{children:"dev"})," 命令后，可以在 ",(0,t.jsx)(n.code,{children:"dist/route.json"})," 中查看入口 ",(0,t.jsx)(n.code,{children:"page-a"})," 存在两条路由记录:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "routes": [\n    {\n      "urlPath": "/a",\n      "entryName": "page-a",\n      "entryPath": "html/page-a/index.html",\n      "isSPA": true,\n      "isSSR": false\n    },\n    {\n      "urlPath": "/b",\n      "entryName": "page-a",\n      "entryPath": "html/page-a/index.html",\n      "isSPA": true,\n      "isSSR": false\n    }\n  ]\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"自定义响应头",children:["自定义响应头",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义响应头",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"可以通过配置入口的 resHeaders 设置响应头："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  server: {\n    routes: {\n      'page-a': {\n        route: ['/a', '/b'],\n        resHeaders: {\n          'x-modern-test': '1',\n        },\n      },\n    },\n  },\n});\n"})}),"\n",(0,t.jsxs)(n.div,{className:"modern-directive note",children:[(0,t.jsx)(n.div,{className:"modern-directive-title",children:"NOTE"}),(0,t.jsxs)(n.div,{className:"modern-directive-content",children:[(0,t.jsxs)(n.p,{children:["这一配置在生产环境与开发环境都生效，可以根据 NODE_ENV 区分环境设置不同的响应头。但如果你只需要在开发环境设置响应头，推荐使用 ",(0,t.jsx)(n.code,{children:"tools.devServer.headers"}),"。"]}),"\n"]})]})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fconfigure%2Fapp%2Fserver%2Froutes.mdx"]={toc:[{text:"自定义访问路由",id:"自定义访问路由",depth:2},{text:"自定义响应头",id:"自定义响应头",depth:2}],title:"server.routes",frontmatter:{sidebar_label:"routes"}};var l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,a.useMDXComponents)(),e.components).wrapper;return n?(0,t.jsx)(n,(0,i._)((0,d._)({},e),{children:(0,t.jsx)(c,(0,d._)({},e))})):c(e)}}}]);