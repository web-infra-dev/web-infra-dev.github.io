{"version":3,"file":"static/js/async/docs_zh_apis_app_runtime_core_use-module-apps_mdx.ae008193.js","sources":["./docs/zh/apis/app/runtime/core/use-module-apps.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fapis%2Fapp%2Fruntime%2Fcore%2Fuse-module-apps.mdx\"] = {\"toc\":[{\"text\":\"使用姿势\",\"id\":\"使用姿势\",\"depth\":2},{\"text\":\"函数签名\",\"id\":\"函数签名\",\"depth\":2},{\"text\":\"示例\",\"id\":\"示例\",\"depth\":2},{\"text\":\"集中式路由\",\"id\":\"集中式路由\",\"depth\":3},{\"text\":\"加载动画\",\"id\":\"加载动画\",\"depth\":2}],\"title\":\"useModuleApps\",\"frontmatter\":{\"title\":\"useModuleApps\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nimport EnableMicroFrontend from \"@site-docs/components/enable-micro-frontend\";\nimport MicroRuntimeConfig from \"@site-docs/components/micro-runtime-config\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        pre: \"pre\",\n        code: \"code\",\n        h3: \"h3\",\n        strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"usemoduleapps\">{\"useModuleApps\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#usemoduleapps\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"返回所有微前端子应用的 React 组件，用于可自由控制路由。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"使用姿势\">{\"使用姿势\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#使用姿势\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { useModuleApps } from '@modern-js/plugin-garfish/runtime';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"函数签名\">{\"函数签名\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#函数签名\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p><_components.code>{\"function useModuleApps(): Record<string, React.FC<any>>\"}</_components.code></_components.p>{\"\\n\"}<_components.p>{\"分别返回包裹每个子应用后的 React 组件。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"示例\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"需要先配置微前端子应用信息。\"}</_components.p>{\"\\n\"}{\"\\n\"}<EnableMicroFrontend/>{\"\\n\"}<_components.p>{\"这里演示主应用为自控式路由的场景，全部场景参考 \"}<_components.a href=\"/guides/topic-detail/micro-frontend/c02-development\">{\"体验微前端\"}</_components.a></_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta=\"title=App.tsx\">{\"function App() {\\n  const { apps, MApp, Table, Dashboard } = useModuleApps();\\n\\n  // 使用的不是 MApp 组件，需要使用 createBrowserRouter 来创建路由\\n  const router = createBrowserRouter(\\n    createRoutesFromElements(\\n      <Route path=\\\"/\\\" element={<AppLayout />}>\\n        <Route key={'table'} path={'table/*'} element={<Table />} />\\n        <Route key={'dashboard'} path={'dashboard/*'} element={<Dashboard />} />\\n      </Route>\\n    )\\n  );\\n\\n  return (\\n    // 方法一：使用 MApp 自动根据配置的 activeWhen 参数加载子应用(本项目配置在 modern.config.ts 中)\\n    // <BrowserRouter>\\n    //   <MApp />\\n    // </BrowserRouter>\\n\\n    // 方法二：手动写 Route 组件方式加载子应用，方便于需要鉴权等需要前置操作的场景\\n    <>\\n      <RouterProvider router={router} />\\n    </>\\n  );\\n}\\n\\ndefineConfig(App, {\\n  masterApp: {\\n    apps: [\\n      {\\n        // name 区分大小写，name 提供的是什么 useModuleApps 返回的就是什么\\n        name: 'Table',\\n        entry: 'http://127.0.0.1:8081/',\\n      },\\n      {\\n        name: 'Dashboard',\\n        entry: 'http://localhost:8082',\\n      },\\n    ],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"useModuleApps()\"}</_components.code>{\" 获取到 \"}<_components.code>{\"Table\"}</_components.code>{\" 和 \"}<_components.code>{\"Dashboard\"}</_components.code>{\" 子应用组件（名称和配置里的 \"}<_components.code>{\"name\"}</_components.code>{\" 字段对应），之后就可以像使用普通的 React 组件一样去加载子应用。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"集中式路由\">{\"集中式路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#集中式路由\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.strong>{\"集中式路由\"}</_components.strong>{\" 是将子应用的激活路由集中配置的方式。我们给子应用列表信息添加 \"}<_components.code>{\"activeWhen\"}</_components.code>{\" 字段来启用 \"}<_components.strong>{\"集中式路由\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}{\"\\n\"}<MicroRuntimeConfig/>{\"\\n\"}<_components.p>{\"然后在主应用中使用 \"}<_components.code>{\"useModuleApp\"}</_components.code>{\" 方法获取 \"}<_components.code>{\"MApp\"}</_components.code>{\" 组件, 并在主应用渲染 \"}<_components.code>{\"MApp\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta=\"title=主应用：App.tsx\">{\"import { useModuleApp } from '@modern-js/plugin-runtime';\\n\\nfunction App() {\\n  const { MApp } = useModuleApps();\\n\\n  return (\\n    <div>\\n      <MApp />\\n    </div>\\n  );\\n}\\n\\ndefineConfig(App, {\\n  masterApp: {\\n    apps: [\\n      {\\n        // name 区分大小写，name 提供的是什么 useModuleApps 返回的就是什么\\n        name: 'Table',\\n        activeWhen: '/table',\\n        entry: 'http://127.0.0.1:8081/',\\n      },\\n      {\\n        name: 'Dashboard',\\n        activeWhen: '/dashboard',\\n        entry: 'http://localhost:8082',\\n      },\\n    ],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这样启动应用后，访问 \"}<_components.code>{\"/dashboard\"}</_components.code>{\" 路由，会渲染 \"}<_components.code>{\"Dashboard\"}</_components.code>{\" 子应用，访问 \"}<_components.code>{\"/table\"}</_components.code>{\" 路由，会渲染 \"}<_components.code>{\"Table\"}</_components.code>{\" 子应用。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"加载动画\">{\"加载动画\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#加载动画\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"可以通过以下方式，自定义组件加载过程的过渡动画。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\" meta='title=\"App.tsx\"'>{\"import { useModuleApps } from '@modern-js/plugin-garfish/runtime';\\n\\nimport { RouterProvider, Route, createBrowserRouter, createRoutesFromElements, BrowserRouter, Link, Outlet } from '@modern-js/runtime/router';\\n\\nconst AppLayout = () => (\\n  <>\\n    <div><Link to={'/table'}>加载约定式路由子应用</Link></div>\\n    <div><Link to={'/dashboard'}>加载自控式路由子应用</Link></div>\\n    <div><Link to={'/'}>卸载子应用</Link></div>\\n    <Outlet />\\n  </>\\n)\\n\\nexport default () => {\\n  const { apps } = useModuleApps();\\n\\n  // 使用的不是 MApp 组件，需要使用 createBrowserRouter 来创建路由\\n  const router = createBrowserRouter(\\n    createRoutesFromElements(\\n      <Route path=\\\"/\\\" element={<AppLayout />}>\\n        {apps.map(app => {\\n          const { Component } = app;\\n          // 模糊匹配，path 需要写成类似 abc/* 的模式\\n          return (\\n            <Route\\n              key={app.name}\\n              path={`${app.name.toLowerCase()}/*`}\\n              element={\\n              <Component\\n                loadable={{\\n                  loading: ({ pastDelay, error }: any) => {\\n                    if (error) {\\n                      return <div>error: {error?.message}</div>;\\n                    } else if (pastDelay) {\\n                      return <div>loading</div>;\\n                    } else {\\n                      return null;\\n                    }\\n                  },\\n                }}\\n              />\\n              }\\n            />\\n          )\\n        })}\\n      </Route>\\n    )\\n  );\\n\\n  return (\\n    <>\\n      <RouterProvider router={router} />\\n    </>\\n  );\\n};\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","pre","code","h3","strong","components","id","className","href","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}