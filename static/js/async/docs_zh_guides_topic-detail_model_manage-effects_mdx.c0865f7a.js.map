{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_manage-effects_mdx.c0865f7a.js","sources":["./docs/zh/guides/topic-detail/model/manage-effects.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Fmanage-effects.mdx\"] = {\"toc\":[{\"text\":\"副作用对 State 修改\",\"id\":\"副作用对-state-修改\",\"depth\":2},{\"text\":\"副作用不影响 state\",\"id\":\"副作用不影响-state\",\"depth\":2},{\"text\":\"副作用函数返回值\",\"id\":\"副作用函数返回值\",\"depth\":2}],\"title\":\"副作用管理\",\"frontmatter\":{\"sidebar_position\":5,\"title\":\"副作用管理\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        ul: \"ul\",\n        li: \"li\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"副作用管理\">{\"副作用管理\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#副作用管理\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Model 中的 Action 必须是一个纯函数，执行过程中不会产生任何副作用。但在真实的业务中，我们会遇到很多副作用场景，如：请求 HTTP 接口获取状态数据，或者在更新状态的同时修改 localStorage、发送事件等。在 Reduck 中，是通过 Model 的 Effects 函数管理副作用的。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"副作用对-state-修改\">{\"副作用对 State 修改\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#副作用对-state-修改\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"副作用修改 State，最常见的场景就是请求 HTTP 接口，更新状态数据。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们以一个简单的 \"}<_components.code>{\"todoModel\"}</_components.code>{\" 为例。其有一个 \"}<_components.code>{\"load\"}</_components.code>{\" 的副作用函数，请求远端的 TODO 列表，请求成功之后更新 \"}<_components.code>{\"state.items\"}</_components.code>{\" 字段。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n    loading: false,\\n    error: null,\\n  },\\n  actions: {\\n    load: {\\n      pending(state) {\\n        state.loading = true;\\n      },\\n      fulfilled(state, items) {\\n        state.items = items;\\n        state.loading = false;\\n      },\\n      rejected(state, error) {\\n        state.error = error;\\n        state.loading = false;\\n      },\\n    },\\n  },\\n  effects: {\\n    // Promise 副作用\\n    async load() {\\n      return new Promise(resolve => {\\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\\n      });\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"副作用函数统一定义在 \"}<_components.code>{\"effects\"}</_components.code>{\" 字段下。这里我们写了一个 \"}<_components.code>{\"load\"}</_components.code>{\" 函数，它返回一个 Promise，Promise 执行成功后，返回 TODO 列表 \"}<_components.code>{'[\"Lerna Modern.js\"]'}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"副作用函数需要和 actions 配合使用，才能完成状态的修改。因此，我们在 \"}<_components.code>{\"actions\"}</_components.code>{\" 中定义了一个 \"}<_components.code>{\"load\"}</_components.code>{\"（命名需要和 \"}<_components.code>{\"effects\"}</_components.code>{\" 下的副作用函数的名字保持一致）对象，包含 \"}<_components.code>{\"pending\"}</_components.code>{\"、\"}<_components.code>{\"fulfilled\"}</_components.code>{\"、\"}<_components.code>{\"rejected\"}</_components.code>{\" 3 个 action，分别是对副作用函数 \"}<_components.code>{\"load\"}</_components.code>{\" 返回的 \"}<_components.code>{\"Promise\"}</_components.code>{\" 的三种状态（ pending、fulfilled、rejected ）的处理：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"pending\"}</_components.code>{\"：接收当前状态 \"}<_components.code>{\"state\"}</_components.code>{\" 作为参数，新的状态中 \"}<_components.code>{\"loading\"}</_components.code>{\" 设为 \"}<_components.code>{\"true\"}</_components.code>{\"。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"fulfilled\"}</_components.code>{\"：接收当前状态 \"}<_components.code>{\"state\"}</_components.code>{\" 和 Promise fulfilled 状态的值 \"}<_components.code>{\"items\"}</_components.code>{\" 为参数，新的状态中 \"}<_components.code>{\"items\"}</_components.code>{\" 等于参数 \"}<_components.code>{\"items\"}</_components.code>{\"、\"}<_components.code>{\"loading\"}</_components.code>{\" 设为 \"}<_components.code>{\"false\"}</_components.code>{\"。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"rejected\"}</_components.code>{\"：接收当前状态 \"}<_components.code>{\"state\"}</_components.code>{\" 和 Promise rejected 状态的错误 \"}<_components.code>{\"error\"}</_components.code>{\" 为参数，新的状态中 \"}<_components.code>{\"error\"}</_components.code>{\" 等于参数 \"}<_components.code>{\"error\"}</_components.code>{\"、\"}<_components.code>{\"loading\"}</_components.code>{\" 设为 \"}<_components.code>{\"false\"}</_components.code>{\"。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"组件中如何调用 effects 函数呢？ effects 函数会被合并到 actions 对象上，因此可以通过 actions 对象调用 effects 函数，如下所示：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"function Todo() {\\n  const [state, actions] = useModel(todoModel);\\n\\n  useEffect(() => {\\n    // 调用 effects 函数\\n    actions.load();\\n  }, []);\\n\\n  if (state.loading) {\\n    return <div>loading....</div>;\\n  }\\n\\n  return (\\n    <div>\\n      <div>\\n        {state.items.map((item, index) => (\\n          <div key={index}>{item}</div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"上面的示例中， \"}<_components.code>{\"pending\"}</_components.code>{\"、\"}<_components.code>{\"fulfilled\"}</_components.code>{\"、\"}<_components.code>{\"rejected\"}</_components.code>{\" 3 个 action，对于用于获取数据的 HTTP 请求场景下，一般都是需要的。Reduck 提供了一个工具函数 \"}<_components.code>{\"handleEffect\"}</_components.code>{\"，用于简化这种场景下的 action 创建。\"}</_components.p>{\"\\n\"}<_components.p><_components.code>{\"handleEffect\"}</_components.code>{\" 约定这种副作用场景下， Model 的 State 结构包含 \"}<_components.code>{\"result\"}</_components.code>{\"、\"}<_components.code>{\"error\"}</_components.code>{\"、\"}<_components.code>{\"pending\"}</_components.code>{\" 3 个字段，初始值为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"{\\n  result: null,\\n  error: null,\\n  pending: false，\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"调用 \"}<_components.code>{\"handleEffect\"}</_components.code>{\" 会返回如下数据结构:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"{\\n  pending() { // ... },\\n  fulfilled() { // ... },\\n  rejected() { // ... }\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这个数据结构和我们在 \"}<_components.code>{\"actions\"}</_components.code>{\" 下的 \"}<_components.code>{\"load\"}</_components.code>{\" 对象的数据结构是相同的。\"}<_components.code>{\"handleEffect\"}</_components.code>{\" 返回的对象，其实就是对应了 Effects 函数需要的 3 个 action。\"}</_components.p>{\"\\n\"}<_components.p>{\"利用 \"}<_components.code>{\"handleEffect\"}</_components.code>{\"，改写 \"}<_components.code>{\"todoModel\"}</_components.code>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n    loading: false,\\n    error: null,\\n  },\\n  actions: {\\n    load: handleEffect({ result: 'items' }),\\n  },\\n  effects: {\\n    // Promise 副作用\\n    async load() {\\n      return new Promise(resolve => {\\n        setTimeout(() => resolve(['Learn Modern.js']), 2000);\\n      });\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"handleEffect\"}</_components.code>{\" 接收的参数对象，将 \"}<_components.code>{\"result\"}</_components.code>{\" 设置为 \"}<_components.code>{\"item\"}</_components.code>{\"。因为 \"}<_components.code>{\"todoModel\"}</_components.code>{\" 的 state，使用 \"}<_components.code>{\"items\"}</_components.code>{\" 作为 key 保存 todo 列表数据，而不是使用 \"}<_components.code>{\"handleEffect\"}</_components.code>{\" 默认的 \"}<_components.code>{\"result\"}</_components.code>{\" 作为 key，所以这里需要进行配置。\"}</_components.p>{\"\\n\"}<_components.p>{\"明显可见，通过 \"}<_components.code>{\"handleEffect\"}</_components.code>{\" 实现的 \"}<_components.code>{\"todoModel\"}</_components.code>{\" 比之前的实现有了很大精简。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果不希望 pending、fulfilled、rejected 3 种状态都被 \"}<_components.code>{\"handleEffect\"}</_components.code>{\" 自动处理，例如 fulfilled 需要手动处理较复杂的数据类型，但是 pending、rejected 依旧想进行自动化处理，可以参考如下写法：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"  actions: {\\n    load: {\\n      ...handleEffect(),\\n      fulfilled(state, payload) {\\n        // 手动处理\\n      },\\n    },\\n  },\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"handleEffect\"}</_components.code>{\" \"}<_components.a href=\"/apis/app/runtime/model/handle-effect\">{\"API\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"Effects 函数中，也支持手动调用 Actions，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const todoModel = model('todo').define((context, utils) => ({\\n  state: {\\n    items: [],\\n    loading: false,\\n    error: null,\\n  },\\n  actions: {\\n    pending(state) {\\n      state.loading = true;\\n    },\\n    fulfilled(state, items) {\\n      state.items = items;\\n      state.loading = false;\\n    },\\n  },\\n  effects: {\\n    async load() {\\n      // 通过 utils.use 获取当前 Model 对象的 actions\\n      const [, actions] = utils.use(todoModel);\\n      // 手动调用 action\\n      actions.pending();\\n\\n      return new Promise(resolve => {\\n        setTimeout(() => {\\n          const items = ['Learn Modern.js'];\\n          // 手动调用 action\\n          actions.fulfilled(items);\\n          resolve(items);\\n        }, 2000);\\n      });\\n    },\\n  },\\n}));\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"可以使用 \"}<_components.code>{\"use\"}</_components.code>{\" 函数加载其它 Model（包括 Model 自身），实现 \"}<_components.a href=\"/guides/topic-detail/model/model-communicate\">{\"Model 间通信\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"副作用不影响-state\">{\"副作用不影响 state\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#副作用不影响-state\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"有些场景下，我们只需要读取 State，执行相关副作用逻辑，副作用不会修改 State。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如，存储某些 State 到 \"}<_components.code>{\"localStorage\"}</_components.code>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define((context, utils) => ({\\n  state: {\\n    value: 'foo',\\n  },\\n  effects: {\\n    setLocalStorage(key) {\\n      const [state] = utils.use(fooModel);\\n      localStorage.set(key, state.value);\\n      return 'success';\\n    },\\n  },\\n}));\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"或者是向服务端发送数据：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    value: 'foo',\\n  },\\n  effects: {\\n    async sendData(data) {\\n      const res = await fetch('url', {\\n        method: 'POST',\\n        body: data,\\n      });\\n      return res.json();\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"副作用函数返回值\">{\"副作用函数返回值\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#副作用函数返回值\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"有时候，我们希望能根据副作用函数的执行结果，直接执行后续逻辑。这时候，就需要使用 Effects 函数的返回。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如，当点击发送按钮，发送数据成功后，立即关闭当前的弹窗；如果失败，显示错误信息。我们可以通过如下代码实现：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// 代码仅做示意，不能执行\\n// 组件内部 发送按钮 的响应函数\\nconst handleClick = async () => {\\n  // sendData 返回代表状态的字符串\\n  const result = await actions.sendData('some data');\\n  if (result === 'success') {\\n    // 关闭弹窗\\n    closeModal();\\n  } else {\\n    // 显示错误\\n    showError(result);\\n  }\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/effects\" target=\"_blank\" rel=\"noopener noreferrer\">{\"示例代码\"}</_components.a></_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","code","pre","ul","li","div","components","id","className","href","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}