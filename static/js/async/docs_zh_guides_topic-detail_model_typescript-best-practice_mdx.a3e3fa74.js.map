{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_typescript-best-practice_mdx.a3e3fa74.js","sources":["./docs/zh/guides/topic-detail/model/typescript-best-practice.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Ftypescript-best-practice.mdx\"] = {\"toc\":[{\"text\":\"定义 Model 的 State 类型\",\"id\":\"定义-model-的-state-类型\",\"depth\":2},{\"text\":\"衍生状态的依赖类型\",\"id\":\"衍生状态的依赖类型\",\"depth\":2},{\"text\":\"获取 Model 类型信息的 Hooks\",\"id\":\"获取-model-类型信息的-hooks\",\"depth\":2}],\"title\":\"TS 最佳实践\",\"frontmatter\":{\"sidebar_position\":10,\"title\":\"TS 最佳实践\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        pre: \"pre\",\n        code: \"code\",\n        ul: \"ul\",\n        li: \"li\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"ts-最佳实践\">{\"TS 最佳实践\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#ts-最佳实践\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Reduck 对 TS 提供了良好的支持，大部分使用场景下，无需任何额外工作，就可以直接获得 API 的 TS 类型提示。本节，将对其他的一些使用场景，做补充介绍。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"定义-model-的-state-类型\">{\"定义 Model 的 State 类型\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#定义-model-的-state-类型\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"为 Model 的 State 声明类型信息，是在 TS 中使用 Reduck 的最佳实践。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"示例\"'>{\"interface State {\\n  data: string;\\n}\\n\\nexport const foo = model<State>('foo').define({\\n  state: {\\n    data: '',\\n  },\\n  computed: {\\n    withSuffix: state => state.data + 'suffix',\\n  },\\n  actions: {\\n    setData: (state, payload: string) => {\\n      state.data = payload;\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当为 Model 的 State 声明类型信息后，Model 的 \"}<_components.code>{\"computed\"}</_components.code>{\"、\"}<_components.code>{\"actions\"}</_components.code>{\" 都能获取正确的类型信息。事实上，上面的示例代码中，即使我们不定义 State 类型信息，也会根据 \"}<_components.code>{\"state\"}</_components.code>{\" 的初始值信息自动推导出 State 的类型信息。不过，仍然建议你在定义 Model 时，声明 State 的类型信息，因为根据 \"}<_components.code>{\"state\"}</_components.code>{\" 的初始值信息推导出的 State 类型信息可能不完整(缺少字段或字段的类型信息缺少)，而且当使用\"}<_components.a href=\"/apis/app/runtime/model/model_#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\">{\"函数类型\"}</_components.a>{\"定义 Model 时，State 的类型信息也是无法根据 \"}<_components.code>{\"state\"}</_components.code>{\" 的初始值信息自动推导的。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"衍生状态的依赖类型\">{\"衍生状态的依赖类型\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#衍生状态的依赖类型\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"当 Model 的衍生状态依赖其他 Model 时，需要手动指定其他 Model 的 State。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"示例\"'>{\"interface State {\\n  data: string;\\n}\\n\\nexport const bar = model<State>('bar').define({\\n  state: {\\n    data: '',\\n  },\\n  computed: {\\n    // 为 fooState 指定类型\\n    withFoo: [foo, (state, fooState: FooState) => state.data + fooState.data],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"获取-model-类型信息的-hooks\">{\"获取 Model 类型信息的 Hooks\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#获取-model-类型信息的-hooks\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Reduck 提供了一组用于获取 Model 类型信息的工具类型：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"GetModelState\"}</_components.code>{\"： 获取 Model 的 State（包含衍生状态）类型信息。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"GetModelActions\"}</_components.code>{\"：获取 Model 的 Actions（包含 Effects 函数）类型信息。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"示例\"'>{\"export const foo = model<State2>('foo').define({\\n  // 省略\\n});\\n\\n// 获取 foo 的 State 类型\\nlet fooActions: GetModelActions<typeof foo>;\\n// 获取 foo 的 Actions 类型\\nlet fooState: GetModelState<typeof foo>;\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","pre","code","ul","li","components","id","className","href","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}