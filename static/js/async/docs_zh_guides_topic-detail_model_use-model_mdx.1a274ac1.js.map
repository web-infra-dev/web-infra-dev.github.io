{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_use-model_mdx.1a274ac1.js","sources":["./docs/zh/guides/topic-detail/model/use-model.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Fuse-model.mdx\"] = {\"toc\":[{\"text\":\"在组件内使用\",\"id\":\"在组件内使用\",\"depth\":2},{\"text\":\"作为全局状态使用\",\"id\":\"作为全局状态使用\",\"depth\":3},{\"text\":\"作为静态状态使用\",\"id\":\"作为静态状态使用\",\"depth\":3},{\"text\":\"作为局部状态使用\",\"id\":\"作为局部状态使用\",\"depth\":3},{\"text\":\"在组件外使用\",\"id\":\"在组件外使用\",\"depth\":2}],\"title\":\"使用 Model\",\"frontmatter\":{\"sidebar_position\":3,\"title\":\"使用 Model\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        h2: \"h2\",\n        h3: \"h3\",\n        p: \"p\",\n        code: \"code\",\n        pre: \"pre\",\n        div: \"div\",\n        img: \"img\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"使用-model\">{\"使用 Model\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#使用-model\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.h2 id=\"在组件内使用\">{\"在组件内使用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#在组件内使用\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.h3 id=\"作为全局状态使用\">{\"作为全局状态使用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#作为全局状态使用\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"useModel\"}</_components.code>{\" 可以获取 Model 的 State、Actions 等。当 Model 的 State 通过 Actions 进行修改后，任何其他使用了该 Model 的组件，都会自动重新渲染。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 \"}<_components.a href=\"/guides/topic-detail/model/quick-start\">{\"快速上手\"}</_components.a>{\" 的计数器案例中，我们已经演示了 \"}<_components.code>{\"useModel\"}</_components.code>{\" 的使用，不再重复。\"}</_components.p>{\"\\n\"}<_components.p><_components.code>{\"useModel\"}</_components.code>{\" 支持传入多个 Model，多个 Model 的 State 和 Actions 会进行合并后作为返回结果。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    value: 1,\\n  },\\n  actions: {\\n    add(state) {\\n      state += 1;\\n    },\\n  },\\n});\\n\\nconst barModel = model('bar').define({\\n  state: {\\n    title: 'bar',\\n  },\\n  actions: {\\n    set(state, payload) {\\n      state.title = payload;\\n    },\\n  },\\n});\\n\\nconst [state, actions] = useModel([fooModel, barModel]);\\n// 或\\nconst [state, actions] = useModel(fooModel, barModel);\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"state\"}</_components.code>{\" 和 \"}<_components.code>{\"actions\"}</_components.code>{\" 的值分别为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"state = {\\n  value: 1,\\n  title: 'bar',\\n};\\n\\nactions = {\\n  add(state) {\\n    state += 1;\\n  },\\n  set(state, payload) {\\n    state.title = payload;\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"useModel\"}</_components.code>{\" 还支持对 State 和 Actions 做 selector 操作，实现对 State 和 Actions 的筛选或重命名，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    value: 1,\\n  },\\n  actions: {\\n    add(state) {\\n      state += 1;\\n    },\\n  },\\n});\\n\\nconst barModel = model('bar').define({\\n  state: {\\n    value: 'bar',\\n  },\\n  actions: {\\n    set(state, payload) {\\n      state.value = payload;\\n    },\\n  },\\n});\\n\\nconst [state, actions] = useModel(\\n  [fooModel, barModel],\\n  (fooState, barState) => ({\\n    fooValue: fooState.value,\\n    barValue: barState.value,\\n  }), // stateSelector\\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\\n);\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"我们通过 \"}<_components.code>{\"stateSelector\"}</_components.code>{\" ，把 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 和 \"}<_components.code>{\"barModel\"}</_components.code>{\" 中重名的状态做了命名修改，通过 \"}<_components.code>{\"actionsSelector\"}</_components.code>{\" ，过滤掉了 \"}<_components.code>{\"barModel\"}</_components.code>{\" 的 Actions。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果只需要设置 \"}<_components.code>{\"actionsSelector\"}</_components.code>{\"，可以把 \"}<_components.code>{\"stateSelector\"}</_components.code>{\" 设置为 \"}<_components.code>{\"undefined\"}</_components.code>{\"，作为参数占位。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const [state, actions] = useModel(\\n  [fooModel, barModel],\\n  undefined,\\n  (fooActions, barActions) => ({ add: fooActions.add }), // actionsSelector\\n);\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"作为静态状态使用\">{\"作为静态状态使用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#作为静态状态使用\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\" 获取 Model ，将 Model 中的状态作为静态状态使用。可以保证组件每次访问到的 Model 的 State 都是最新值，但是 Model 的 State 的变化，并不会引起当前组件的重新渲染。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"useStaticModel\"}</_components.code>{\" 的使用方式和 \"}<_components.code>{\"useModel\"}</_components.code>{\" 完全一致。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"考虑下面一种场景，有一个组件 Input 负责用户输入，另外一个组件 Search 负责根据用户的输入信息，在点击查询按钮后执行查询操作，我们不希望用户输入过程中的状态变化引起 Search 重新渲染，这时候就可以使用 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { useStaticModel } from '@modern-js/runtime/model';\\n\\nfunction Search() {\\n  // 这里注意不要解构 state\\n  const [state] = useStaticModel(searchModel);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={async () => {\\n          const result = await mockSearch(state.input);\\n          console.log(result);\\n        }}\\n      >\\n        Search\\n      </button>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive warning\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"不要解构 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\" 返回的 \"}<_components.code>{\"state\"}</_components.code>{\"，例如改成如下写法：\\n\"}<_components.code>{\"const [{input}] = useStaticModel(searchModel);\"}</_components.code>{\"\\n将始终获取到 Input 的初始值。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p><_components.code>{\"useStaticModel\"}</_components.code>{\" 还适合和 \"}<_components.a href=\"https://github.com/pmndrs/react-three-fiber\" target=\"_blank\" rel=\"noopener noreferrer\">{\"react-three-fiber\"}</_components.a>{\" 等动画库一起使用，因为在动画组件 UI 里绑定会快速变化的状态，容易引起\"}<_components.a href=\"https://docs.pmnd.rs/react-three-fiber/advanced/pitfalls#never-bind-fast-state-reactive\" target=\"_blank\" rel=\"noopener noreferrer\">{\"性能问题\"}</_components.a>{\"。这种情况就可以选择使用 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\"，它只会订阅状态，但不会引起视图组件的重新渲染。下面是一个简化示例：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"function ThreeComponent() {\\n  const [state, actions] = useStaticModel(modelA);\\n\\n  useFrame(() => {\\n    state.value; // 假设初始化为 0\\n    actions.setValue(1);\\n    state.value; // 这里会得到1\\n  });\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"使用 React 的 refs 也可以实现类似效果，其实 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\" 内部也使用到了 refs。不过直接 \"}<_components.code>{\"useStaticModel\"}</_components.code>{\" 有助于将状态的管理逻辑从组件中解耦，统一收敛到 Model 层。\"}</_components.p>{\"\\n\"}<_components.p>{\"完整的示例代码可以在\"}<_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/static-model\" target=\"_blank\" rel=\"noopener noreferrer\">{\"这里\"}</_components.a>{\"查看。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"作为局部状态使用\">{\"作为局部状态使用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#作为局部状态使用\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"useLocalModel\"}</_components.code>{\" 获取 Model ，将 Model 中的状态作为局部状态使用。此时 Model State 的变化，只会引起当前组件的重新渲染，但是不会引起其他使用了该 Model 的组件重新渲染。效果和通过 React 的 \"}<_components.code>{\"useState\"}</_components.code>{\" 管理状态类似，但是可以将状态的管理逻辑从组件中解耦，统一收敛到 Model 层。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"useLocalModel\"}</_components.code>{\" 的使用方式和 \"}<_components.code>{\"useModel\"}</_components.code>{\" 完全一致。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"例如，我们修改计数器应用的代码，添加一个有局部状态的计数器组件 \"}<_components.code>{\"LocalCounter\"}</_components.code>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { useLocalModel } from '@modern-js/runtime/model';\\n\\nfunction LocalCounter() {\\n  const [state, actions] = useLocalModel(countModel);\\n\\n  return (\\n    <div>\\n      <div>local counter: {state.value}</div>\\n      <button onClick={() => actions.add()}>add</button>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"分别点击 \"}<_components.code>{\"Counter\"}</_components.code>{\" 和 \"}<_components.code>{\"LocalCounter\"}</_components.code>{\" 的 \"}<_components.code>{\"add\"}</_components.code>{\" 按钮，两者的状态互不影响：\"}</_components.p>{\"\\n\"}<_components.p><_components.img src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/eueh7vhojuh/modern/local-model.gif\" alt=\"local-model\"/></_components.p>{\"\\n\"}<_components.p>{\"完整的示例代码可以在\"}<_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/local-model\" target=\"_blank\" rel=\"noopener noreferrer\">{\"这里\"}</_components.a>{\"查看。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"在组件外使用\">{\"在组件外使用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#在组件外使用\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在实际业务场景中，有时候我们需要在 React 组件外使用 Model，例如在工具函数中访问 State、执行 Actions 等。这个时候，我们就需要使用 Store。 Store 是一个底层概念，一般情况下用户接触不到，它负责存储和管理整个应用的状态。Reduck 的 Store 基于 \"}<_components.a href=\"https://redux.js.org/api/store\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Redux 的 Store\"}</_components.a>{\" 实现，增加了 Reduck 特有的 API，如 \"}<_components.code>{\"use\"}</_components.code>{\" 。\"}</_components.p>{\"\\n\"}<_components.p>{\"首先，在组件内调用 \"}<_components.code>{\"useStore\"}</_components.code>{\" 获取当前应用使用的 \"}<_components.code>{\"store\"}</_components.code>{\" 对象，并挂载到组件外的变量上：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"let store; // 组件外部 `store` 对象的引用\\nfunction setStore(s) {\\n  store = s;\\n}\\nfunction getStore() {\\n  return store;\\n}\\n\\nfunction Counter() {\\n  const [state] = useModel(countModel);\\n  const store = useStore();\\n  // 通过 useMemo 避免不必要的重复设置\\n  useMemo(() => {\\n    setStore(store);\\n  }, [store]);\\n\\n  return (\\n    <div>\\n      <div>counter: {state.value}</div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"store.use\"}</_components.code>{\" 可以获取 Model 对象，\"}<_components.code>{\"store.use\"}</_components.code>{\" 的用法同 \"}<_components.code>{\"useModel\"}</_components.code>{\" 相同。以计数器应用为例，我们在组件树外，每 1s 对计数器值\\n执行自增操作：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"setInterval(() => {\\n  const store = getStore();\\n  const [, actions] = store.use(countModel);\\n  actions.add();\\n}, 1000);\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"完整的示例代码可以在\"}<_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/counter-model-outof-react\" target=\"_blank\" rel=\"noopener noreferrer\">{\"这里\"}</_components.a>{\"查看。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"如果是通过 \"}<_components.a href=\"/apis/app/runtime/model/create-store\"><_components.code>{\"createStore\"}</_components.code></_components.a>{\" 手动创建的 Store 对象，无需通过 \"}<_components.code>{\"useStore\"}</_components.code>{\" 在组件内获取，即可直接使用。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"本节涉及的 API 的详细定义，请参考\"}<_components.a href=\"/apis/app/runtime/model/model_\">{\"这里\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","h2","h3","p","code","pre","div","img","components","id","className","href","target","rel","src","alt","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}