{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_framework-plugin_implement_mdx.76d3ebf2.js","sources":["./docs/zh/guides/topic-detail/framework-plugin/implement.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fframework-plugin%2Fimplement.mdx\"] = {\"toc\":[{\"text\":\"实现插件\",\"id\":\"实现插件\",\"depth\":2},{\"text\":\"插件类型\",\"id\":\"插件类型\",\"depth\":3},{\"text\":\"插件配置项\",\"id\":\"插件配置项\",\"depth\":3},{\"text\":\"插件 API\",\"id\":\"插件-api\",\"depth\":3},{\"text\":\"异步 setup\",\"id\":\"异步-setup\",\"depth\":3},{\"text\":\"添加插件\",\"id\":\"添加插件\",\"depth\":2},{\"text\":\"开发本地插件\",\"id\":\"开发本地插件\",\"depth\":3},{\"text\":\"在 npm 上发布插件\",\"id\":\"在-npm-上发布插件\",\"depth\":3}],\"title\":\"如何编写插件\",\"frontmatter\":{\"title\":\"如何编写插件\",\"sidebar_position\":3}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        ul: \"ul\",\n        li: \"li\",\n        code: \"code\",\n        pre: \"pre\",\n        h3: \"h3\",\n        img: \"img\",\n        ol: \"ol\",\n        strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"如何编写插件\">{\"如何编写插件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#如何编写插件\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"上一小节介绍了 Modern.js 插件的 Hook 模型，这一小节介绍如何编写插件。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"实现插件\">{\"实现插件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#实现插件\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 插件是一个对象，对象包含以下属性：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"name\"}</_components.code>{\": 插件的名称，唯一标识符。\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"setup\"}</_components.code>{\": 插件初始化函数，只会执行一次。setup 函数可以返回一个 Hooks 对象，Modern.js 会在特定的时机执行这些 Hooks。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const myPlugin = {\\n  name: 'my-plugin',\\n\\n  setup() {\\n    // 执行一些初始化逻辑\\n    const foo = '1';\\n\\n    // 返回一个 Hooks 对象\\n    return {\\n      afterBuild: () => {\\n        // 在构建完成后执行逻辑\\n      },\\n    };\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"另外，在插件中，允许配置与其他插件的执行顺序。详情可以参考\"}<_components.a href=\"/guides/topic-detail/framework-plugin/relationship\">{\"插件关系\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"插件类型\">{\"插件类型\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#插件类型\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Modern-js 支持多种工程开发，如应用工程(app-tools), 模块工程(module-tools)等。\"}</_components.p>{\"\\n\"}<_components.p>{\"为了兼顾不同工程开发的差异和通性，Modern-js 将插件如下图进行组织:\"}</_components.p>{\"\\n\"}<_components.p><_components.img src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/eeeh7uhbepxlpe/modern-website/plugin-relationship.jpg\" alt=\"plugin-relationship\"/></_components.p>{\"\\n\"}<_components.p>{\"从图可以看出，Modern-js 将插件大致分为两类:\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"通用插件: 插件只会包含一些基础的 Hooks\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"工程插件: 不同的工程开发会在通用插件的基础上扩展出自己的 Hooks, Config 等类型。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.p>{\"使用 TypeScript 时，可以引入内置的 \"}<_components.code>{\"CliPlugin\"}</_components.code>{\" 等类型，为插件提供正确的类型推导。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\nconst myPlugin: CliPlugin = {\\n  name: 'my-plugin',\\n\\n  setup() {\\n    const foo = '1';\\n\\n    return {\\n      afterBuild: () => {\\n        // 在构建完成后执行逻辑\\n      },\\n    };\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"上述代码为通用插件，只包含一些基础的 Hooks。 Modern.js 支持通过泛型对插件的定义进行扩展：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type { CliPlugin, AppTools } from '@modern-js/app-tools';\\n\\nconst myPlugin: CliPlugin<AppTools> = {\\n  name: 'my-plugin',\\n\\n  setup() {\\n    const foo = '1';\\n\\n    return {\\n      afterBuild: () => {\\n        // 在构建完成后执行逻辑\\n      },\\n    };\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果仔细观察 \"}<_components.code>{\"AppTools\"}</_components.code>{\" 这个类型，可以发现 \"}<_components.code>{\"AppTools\"}</_components.code>{\" 由 3 种类型构成.\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"type AppTools = {\\n  hooks: AppToolsHooks;\\n  userConfig: AppToolsUserConfig;\\n  normalizedConfig: AppToolsNormalizedConfig;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当编写插件时，插件通过泛型扩展在不同的基础上扩展自己的 Hooks 等类型:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// 通用插件上扩展\\nimport type { CliPlugin } from '@modern-js/core';\\nimport type { MyPluginHook } from 'xxx';\\n\\nconst myPlugin: CliPlugin<{ hooks: MyPluginHook }> = {};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// 在 @modern-js/app-tools 基础上扩展\\nimport type { CliPlugin, AppTools } from '@modern-js/app-tools';\\nimport type { MyPluginHook } from 'xxx';\\n\\nconst myPlugin: CliPlugin<AppTools & { hooks: MyPluginHook }> = {};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"详细说明，请参考 \"}<_components.a href=\"/guides/topic-detail/framework-plugin/extend\">{\"扩展 Hook\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"插件配置项\">{\"插件配置项\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#插件配置项\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.strong>{\"建议将插件写成函数的形式\"}</_components.strong>{\"，使插件能通过函数入参来接收配置项：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\ntype MyPluginOptions = {\\n  foo: string;\\n};\\n\\nconst myPlugin = (options: MyPluginOptions): CliPlugin => ({\\n  name: 'my-plugin',\\n\\n  setup() {\\n    console.log(options.foo);\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"插件-api\">{\"插件 API\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#插件-api\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"插件的 \"}<_components.code>{\"setup\"}</_components.code>{\" 函数会接收一个 api 入参，你可以调用 api 上提供的一些方法来获取到配置、应用上下文等信息。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\nexport const myPlugin = (): CliPlugin => ({\\n  name: 'my-plugin',\\n\\n  setup(api) {\\n    // 获取应用原始配置\\n    const config = api.useConfigContext();\\n    // 获取应用运行上下文\\n    const appContext = api.useAppContext();\\n    // 获取解析之后的最终配置\\n    const resolvedConfig = api.useResolvedConfigContext();\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"插件 API 的详细说明，请参考 \"}<_components.a href=\"/guides/topic-detail/framework-plugin/plugin-api\">{\"Plugin API\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"异步-setup\">{\"异步 setup\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#异步-setup\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"CLI 插件的 setup 可以是一个异步函数，在初始化过程中执行异步逻辑。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\nexport const myPlugin = (): CliPlugin => ({\\n  name: 'my-plugin',\\n\\n  async setup(api) {\\n    await doSomething();\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"添加插件\">{\"添加插件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加插件\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"自定义插件的使用方式可以查看：\"}<_components.a href=\"/configure/app/plugins\">{\"plugins (框架插件)\"}</_components.a>{\"。下面会介绍 Modern.js 中推荐的插件实现方法。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"开发本地插件\">{\"开发本地插件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#开发本地插件\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"本地插件推荐写在 \"}<_components.code>{\"config/plugin\"}</_components.code>{\" 目录下，并通过 \"}<_components.code>{\"export default\"}</_components.code>{\" 导出：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta=\"title=config/plugin/myPlugin.ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\nexport const myPlugin = (): CliPlugin => ({\\n  name: 'my-plugin',\\n\\n  setup() {\\n    // 插件初始化\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"然后在 \"}<_components.code>{\"modern.config.ts\"}</_components.code>{\" 中注册对应的插件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { defineConfig } from '@modern-js/app-tools';\\nimport { myPlugin } from './config/plugin/myPlugin';\\n\\nexport default defineConfig({\\n  plugins: [myPlugin()],\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"在-npm-上发布插件\">{\"在 npm 上发布插件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#在-npm-上发布插件\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"如果需要将 Modern.js 插件发布到 npm，推荐使用 Modern.js 中的模块工程方案来管理和构建。\"}</_components.p>{\"\\n\"}<_components.p>{\"首先创建一个空的模块工程方案项目，调整 npm 包名称：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-json\">{'{\\n  \"name\": \"my-plugin\"\\n  ...\\n}\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"然后新建对应的插件文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta=\"title=src/index.ts\">{\"import type { CliPlugin } from '@modern-js/core';\\n\\nexport const myPlugin = (): CliPlugin => ({\\n  name: 'my-plugin',\\n\\n  setup() {\\n    // 插件初始化\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"发布之后，安装到需要使用的项目 \"}<_components.code>{\"pnpm add my-plugin\"}</_components.code>{\"，这里以一个应用项目为例，然后在 \"}<_components.code>{\"modern.config.ts\"}</_components.code>{\" 中添加：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { defineConfig } from '@modern-js/app-tools';\\nimport { myPlugin } from 'my-plugin';\\n\\nexport default defineConfig({\\n  plugins: [myPlugin()],\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果你发现目前 Modern.js 存在无法满足的场景，欢迎通过\"}<_components.strong>{\"编写自定义插件的方式\"}</_components.strong>{\"来一起建设 Modern.js 生态。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","ul","li","code","pre","h3","img","ol","strong","components","id","className","href","src","alt","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}