{"version":3,"file":"static/js/async/docs_en_guides_topic-detail_model_typescript-best-practice_mdx.a0bad9b9.js","sources":["./docs/en/guides/topic-detail/model/typescript-best-practice.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"en%2Fguides%2Ftopic-detail%2Fmodel%2Ftypescript-best-practice.mdx\"] = {\"toc\":[{\"text\":\"Defining the State Type of the Model\",\"id\":\"defining-the-state-type-of-the-model\",\"depth\":2},{\"text\":\"Dependent types of Derived State\",\"id\":\"dependent-types-of-derived-state\",\"depth\":2},{\"text\":\"Hooks for Getting Model Type Information\",\"id\":\"hooks-for-getting-model-type-information\",\"depth\":2}],\"title\":\"TS Best Practices\",\"frontmatter\":{\"sidebar_position\":10,\"title\":\"TS Best Practices\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        pre: \"pre\",\n        code: \"code\",\n        ul: \"ul\",\n        li: \"li\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"ts-best-practices\">{\"TS Best Practices\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#ts-best-practices\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Reduck provides excellent support for TypeScript, and in most cases, you can get API type prompts directly without any extra work. In this section, we will provide additional information on other usage scenarios.\"}</_components.p>{\"\\n\"}<_components.h2 id=\"defining-the-state-type-of-the-model\">{\"Defining the State Type of the Model\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#defining-the-state-type-of-the-model\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Declaring type information for the State of a Model is a best practice when using Reduck in TypeScript.\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"interface State {\\n  data: string;\\n}\\n\\nexport const foo = model<State>('foo').define({\\n  state: {\\n    data: '',\\n  },\\n  computed: {\\n    withSuffix: state => state.data + 'suffix',\\n  },\\n  actions: {\\n    setData: (state, payload: string) => {\\n      state.data = payload;\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"When you declare type information for the State of a Model, the \"}<_components.code>{\"computed\"}</_components.code>{\" and \"}<_components.code>{\"actions\"}</_components.code>{\" of the Model can get the correct type information. In fact, even if we don't define State type information in the example code above, the type information of State can be automatically inferred based on the initial value information of \"}<_components.code>{\"state\"}</_components.code>{\". However, we still recommend that you declare the type information of State when defining a Model because the type information of State inferred based on the initial value information of \"}<_components.code>{\"state\"}</_components.code>{\" may be incomplete (missing fields or field type information), and the type information of State cannot be automatically inferred based on the initial value information of \"}<_components.code>{\"state\"}</_components.code>{\" when using \"}<_components.a href=\"/apis/app/runtime/model/model_#function-type\">{\"Function Type\"}</_components.a>{\" to define the Model.\"}</_components.p>{\"\\n\"}<_components.h2 id=\"dependent-types-of-derived-state\">{\"Dependent types of Derived State\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#dependent-types-of-derived-state\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"When the derived state of a Model depends on other Models, you need to manually specify the State of the other Models.\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"interface State {\\n  data: string;\\n}\\n\\nexport const bar = model<State>('bar').define({\\n  state: {\\n    data: '',\\n  },\\n  computed: {\\n    // specify the type for fooState\\n    withFoo: [foo, (state, fooState: FooState) => state.data + fooState.data],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"hooks-for-getting-model-type-information\">{\"Hooks for Getting Model Type Information\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#hooks-for-getting-model-type-information\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Reduck provides a set of utility types for getting Model type information:\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"GetModelState\"}</_components.code>{\": Get the type information of the State (including derived state) of the Model.\"}</_components.li>{\"\\n\"}<_components.li><_components.code>{\"GetModelActions\"}</_components.code>{\": Get the type information of the Actions (including Effects functions) of the Model.\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export const foo = model<State2>('foo').define({\\n  // skip some codes\\n});\\n\\n// get the State type of foo\\nlet fooActions: GetModelActions<typeof foo>;\\n// get the Actions type of foo\\nlet fooState: GetModelState<typeof foo>;\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","pre","code","ul","li","components","id","className","href","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}