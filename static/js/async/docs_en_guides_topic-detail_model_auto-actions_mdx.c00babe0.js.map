{"version":3,"file":"static/js/async/docs_en_guides_topic-detail_model_auto-actions_mdx.c00babe0.js","sources":["./docs/en/guides/topic-detail/model/auto-actions.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"en%2Fguides%2Ftopic-detail%2Fmodel%2Fauto-actions.mdx\"] = {\"toc\":[{\"text\":\"Primitive data types\",\"id\":\"primitive-data-types\",\"depth\":2},{\"text\":\"Array Types\",\"id\":\"array-types\",\"depth\":2},{\"text\":\"Simple Object Types\",\"id\":\"simple-object-types\",\"depth\":2}],\"title\":\"Automatically Generated Actions\",\"frontmatter\":{\"sidebar_position\":6,\"title\":\"Automatically Actions\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        ul: \"ul\",\n        li: \"li\",\n        h2: \"h2\",\n        pre: \"pre\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"automatically-generated-actions\">{\"Automatically Generated Actions\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#automatically-generated-actions\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"In the \"}<_components.a href=\"/guides/topic-detail/model/quick-start\">{\"Quick Start\"}</_components.a>{\", we implemented the simplest counter model, which still required 10 lines of code. In fact, Modern.js supports automatically generating commonly used actions based on the declared \"}<_components.code>{\"state\"}</_components.code>{\" type, which reduces the amount of boilerplate code. The currently supported types are:\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"Primitive data types\"}</_components.li>{\"\\n\"}<_components.li>{\"Array types\"}</_components.li>{\"\\n\"}<_components.li>{\"Simple object types (Plain Object)\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h2 id=\"primitive-data-types\">{\"Primitive data types\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#primitive-data-types\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const countModel = model('count').define({ state: 1 });\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"As shown above, we only need one line to create a simple \"}<_components.code>{\"countModel\"}</_components.code>{\". Here's an example code that uses the model:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"function Counter() {\\n  const [state, actions] = useModel(countModel);\\n\\n  useEffect(() => {\\n    // Add 1\\n    actions.setState(state + 1);\\n  }, []);\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"array-types\">{\"Array Types\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#array-types\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"When the state is an array type, an example code for automatically generating actions is shown below:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const countModel = model('count').define({ state: [] });\\n\\nfunction Counter() {\\n  const [state, actions] = useModel(countModel);\\n\\n  useEffect(() => {\\n    actions.push(1);\\n    actions.pop();\\n    actions.shift();\\n    actions.unshift(1);\\n    actions.concat([1]);\\n    actions.splice(0, 1, 2);\\n    actions.filter(value => value > 1);\\n  }, []);\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"We can use the methods of the JavaScript Array object to modify the state.\"}</_components.p>{\"\\n\"}<_components.h2 id=\"simple-object-types\">{\"Simple Object Types\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#simple-object-types\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"When the state is a simple object type, an example code for automatically generating actions is shown below:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const countModel = model('count').define({\\n  state: {\\n    a: 1,\\n    b: [],\\n    c: {},\\n  },\\n});\\n\\nfunction Counter() {\\n  const [state, actions] = useModel(countModel);\\n\\n  useEffect(() => {\\n    actions.setA(2);\\n    actions.setB([1]);\\n    actions.setC({ a: 1 });\\n  }, []);\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Three different fields \"}<_components.code>{\"a\"}</_components.code>{\", \"}<_components.code>{\"b\"}</_components.code>{\", and \"}<_components.code>{\"c\"}</_components.code>{\" each generate \"}<_components.code>{\"setA\"}</_components.code>{\", \"}<_components.code>{\"setB\"}</_components.code>{\", and \"}<_components.code>{\"setC\"}</_components.code>{\" actions, respectively.\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"When the user-defined action and the action automatically generated by Modern.js have the same name, the user-defined action takes precedence. For example, if \"}<_components.code>{\"setA\"}</_components.code>{\" action is already defined in \"}<_components.code>{\"countModel\"}</_components.code>{\", calling \"}<_components.code>{\"actions.setA()\"}</_components.code>{\" executes the user-defined \"}<_components.code>{\"setA\"}</_components.code>{\".\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"Additional Information\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"For more information on related APIs, please refer to \"}<_components.a href=\"/apis/app/runtime/model/auto-actions\">{\"here\"}</_components.a>{\".\\n\"}</_components.p></_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","ul","li","h2","pre","div","components","id","className","href","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}