{"version":3,"file":"static/js/async/docs_zh_guides_advanced-features_ssr_mdx.30c20074.js","sources":["./docs/zh/guides/advanced-features/ssr.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fadvanced-features%2Fssr.mdx\"] = {\"toc\":[{\"text\":\"SSR 时的数据获取\",\"id\":\"ssr-时的数据获取\",\"depth\":2},{\"text\":\"保持渲染一致\",\"id\":\"保持渲染一致\",\"depth\":2},{\"text\":\"关注内存泄漏\",\"id\":\"关注内存泄漏\",\"depth\":2},{\"text\":\"收敛服务端数据\",\"id\":\"收敛服务端数据\",\"depth\":2},{\"text\":\"Serverless Pre-render\",\"id\":\"serverless-pre-render\",\"depth\":2},{\"text\":\"Treeshaking\",\"id\":\"treeshaking\",\"depth\":2},{\"text\":\"环境变量区分\",\"id\":\"环境变量区分\",\"depth\":3},{\"text\":\"文件后缀区分\",\"id\":\"文件后缀区分\",\"depth\":3},{\"text\":\"独立文件\",\"id\":\"独立文件\",\"depth\":3},{\"text\":\"接口请求\",\"id\":\"接口请求\",\"depth\":2},{\"text\":\"流式渲染\",\"id\":\"流式渲染\",\"depth\":2},{\"text\":\"异步获取数据\",\"id\":\"异步获取数据\",\"depth\":3},{\"text\":\"渲染异步数据\",\"id\":\"渲染异步数据\",\"depth\":3},{\"text\":\"错误处理\",\"id\":\"错误处理\",\"depth\":3}],\"title\":\"服务端渲染\",\"frontmatter\":{\"sidebar_position\":4}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        pre: \"pre\",\n        h2: \"h2\",\n        div: \"div\",\n        ol: \"ol\",\n        li: \"li\",\n        strong: \"strong\",\n        h3: \"h3\",\n        ul: \"ul\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"服务端渲染\">{\"服务端渲染\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#服务端渲染\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"在 Modern.js 中，SSR 也是开箱即用的。开发者无需为 SSR 编写复杂的服务端逻辑，也无需关心 SSR 的运维，或是创建单独的服务。Modern.js 拥有完备的 SSR 降级策略，保证页面能够安全运行。\"}</_components.p>{\"\\n\"}<_components.p>{\"启用 SSR 非常简单，只需要设置 \"}<_components.a href=\"/configure/app/server/ssr\"><_components.code>{\"server.ssr\"}</_components.code></_components.a>{\" 为 \"}<_components.code>{\"true\"}</_components.code>{\" 即可：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { defineConfig } from '@modern-js/app-tools';\\n\\nexport default defineConfig({\\n  server: {\\n    ssr: true,\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"ssr-时的数据获取\">{\"SSR 时的数据获取\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#ssr-时的数据获取\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 中提供了 Data Loader，方便开发者在 SSR、CSR 下同构的获取数据。每个路由模块，如 \"}<_components.code>{\"layout.tsx\"}</_components.code>{\" 和 \"}<_components.code>{\"page.tsx\"}</_components.code>{\" 都可以定义自己的 Data Loader：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/page.loader.ts\"'>{\"export default () => {\\n  return {\\n    message: 'Hello World',\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在组件中可以通过 Hooks API 的方式获取 \"}<_components.code>{\"loader\"}</_components.code>{\" 函数返回的数据：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { useLoaderData } from '@modern-js/runtime/router';\\nexport default () => {\\n  const data = useLoaderData();\\n  return <div>{data.message}</div>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Modern.js 打破传统的 SSR 开发模式，提供了用户无感的 SSR 开发体验。并且提供了优雅的降级处理，一旦 SSR 请求失败，会自动降级在浏览器端重新发起请求。\"}</_components.p>{\"\\n\"}<_components.p>{\"不过，开发者仍然需要关注数据的兜底处理，例如 \"}<_components.code>{\"null\"}</_components.code>{\" 值或不符合预期的数据返回。避免在 SSR 时产生 React 渲染错误或是返回凌乱的渲染结果。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\">{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"当以客户端路由的方式请求页面时，Modern.js 会发送一个 HTTP 请求，服务端接收到请求后执行页面对应的 Data Loader 函数，然后将执行结果作为请求的响应返回浏览器。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"使用 Data Loader 时，数据获取发生在渲染前，Modern.js 也仍然支持在组件渲染时获取数据。更多相关内容可以查看\"}<_components.a href=\"/guides/basic-features/data-fetch\">{\"数据获取\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"保持渲染一致\">{\"保持渲染一致\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#保持渲染一致\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"有些业务中，UI 展示会和用户设备有关，例如 \"}<_components.a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent\" target=\"_blank\" rel=\"noopener noreferrer\">{\"UA\"}</_components.a>{\" 信息。如果处理不够仔细，此时很有可能出现不符合预期的渲染结果。\"}</_components.p>{\"\\n\"}<_components.p>{\"这里通过一个例子，演示当 SSR 与 CSR 渲染不一致时出现的问题，在组件中添加以下代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"{\\n  typeof window !== 'undefined' ? <div>browser content</div> : null;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"启动应用后，访问页面，会发现浏览器控制台抛出警告信息：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-sh\">{\"Warning: Expected server HTML to contain a matching <div> in <div>.\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这是 React hydrate 结果与 SSR 渲染结果不一致造成的。虽然当前页面表现正常，但在复杂应用中，很有可能因此出现 DOM 层级混乱、样式混乱等问题。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"关于 hydrate (注水)逻辑请参考\"}<_components.a href=\"https://zh-hans.react.dev/reference/react-dom/hydrate\" target=\"_blank\" rel=\"noopener noreferrer\">{\"这里\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"应用需要保持 SSR 与 CSR 渲染结果的一致性，如果存在不一致的情况，说明这部分内容无需在 SSR 中进行渲染。Modern.js 为这类在 SSR 中不需要渲染的内容提供 \"}<_components.a href=\"/apis/app/runtime/core/use-runtime-context\"><_components.code>{\"<NoSSR>\"}</_components.code>{\" 工具组件\"}</_components.a>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { NoSSR } from '@modern-js/runtime/ssr';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在不需要进行 SSR 的元素外部，用 \"}<_components.code>{\"NoSSR\"}</_components.code>{\" 组件包裹：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<NoSSR>\\n  <div>client content</div>\\n</NoSSR>\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"修改代码后，刷新页发现之前的 Waring 消失。打开浏览器开发者工具的 Network 窗口，查看返回的 HTML 文档是不包含 \"}<_components.code>{\"NoSSR\"}</_components.code>{\" 组件包裹的内容的。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.a href=\"/apis/app/runtime/core/use-runtime-context\"><_components.code>{\"useRuntimeContext\"}</_components.code></_components.a>{\" 可以获取完整的请求信息，可以利用它保证 SSR 与 CSR 的渲染结果一致。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"关注内存泄漏\">{\"关注内存泄漏\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#关注内存泄漏\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.div className=\"modern-directive warning\"><_components.div className=\"modern-directive-title\">{\"警告\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"在 SSR 场景下，开发者需要特别关注内存泄露问题，即使是微小的内存泄露，在大量的访问后也会对服务造成影响。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"SSR 时，浏览器的每次请求，都会触发服务端重新执行一次组件渲染逻辑。所以，需要避免在全局定义任何可能不断增长的数据结构，或在全局进行事件订阅，或创建不会被销毁的流。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如以下代码，使用 \"}<_components.a href=\"https://redux-observable.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"redux-observable\"}</_components.a>{\" 时，习惯了 CSR 的开发者通常会在组件中这样编码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"/* 代码仅作为示例，不可运行 */\\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\\n\\nconst epicMiddleware = createEpicMiddleware();\\nconst rootEpic = combineEpics();\\n\\nexport default function Test() {\\n  epicMiddleware.run(rootEpic);\\n  return <div>Hello Modern.js</div>;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在组件外层创建 Middleware 实例 \"}<_components.code>{\"epicMiddleware\"}</_components.code>{\"，并在组件内部调用 \"}<_components.code>{\"epicMiddleware.run\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"在浏览器端，这段代码不会造成任何问题，但是在 SSR 时，Middleware 实例会一直无法被销毁。每次渲染组件，调用 \"}<_components.code>{\"epicMiddleware.run(rootEpic)\"}</_components.code>{\" 时，都会在内部添加新的事件绑定，导致整个对象不断变大，最终对应用性能造成影响。\"}</_components.p>{\"\\n\"}<_components.p>{\"CSR 中这类问题不易被发觉，因此从 CSR 切换到 SSR 时，如果不确定应用是否存在这类隐患，可以对应用进行压测。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"收敛服务端数据\">{\"收敛服务端数据\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#收敛服务端数据\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"为了保持 SSR 阶段请求的数据，可以在浏览器端直接使用，Modern.js 会将渲染过程中收集的数据与状态注入到 HTML 内。但是，CSR 应用常常存在接口数据量大、组件状态未收敛的情况，这时如果直接使用 SSR，渲染得到的 HTML 体积可能会存在过大的问题。此时，SSR 不仅无法为应用带来用户体验上的提升，反而可能起到相反的作用。\"}</_components.p>{\"\\n\"}<_components.p>{\"因此，使用 SSR 时，\"}<_components.strong>{\"开发者需要为应用做合理的瘦身\"}</_components.strong>{\"：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"关注首屏，SSR 中可以只请求首屏需要的数据，并在浏览器端渲染剩余的部分。\"}</_components.li>{\"\\n\"}<_components.li>{\"将与渲染无关的数据，从接口返回数据中剔除。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.h2 id=\"serverless-pre-render\">{\"Serverless Pre-render\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#serverless-pre-render\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 提供 Serverless Pre-rendering (SPR) 这一特性来提升 SSR 性能。\"}</_components.p>{\"\\n\"}<_components.p>{\"SPR 利用预渲染与缓存技术，为 SSR 页面提供静态 Web 的响应性能。它让 SSR 应用拥有静态 Web 页面的响应速度与稳定性，同时还能保持数据的动态更新。\"}</_components.p>{\"\\n\"}<_components.p>{\"在 Modern.js 中使用 SPR 非常简单，只需要在组件中新增 \"}<_components.code>{\"PreRender\"}</_components.code>{\" 组件，该组件所在的页面就会自动开启 SPR。\"}</_components.p>{\"\\n\"}<_components.p>{\"这里模拟一个使用 \"}<_components.code>{\"useLoaderData\"}</_components.code>{\" API 的组件，Data Loader 中的请求需要消耗 2s 时间。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"page.loader.ts\"'>{\"export default async () => {\\n  await new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      resolve(null);\\n    }, 2000);\\n  });\\n\\n  return {\\n    message: 'Hello Modern.js',\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"page.tsx\"'>{\"import { useLoaderData } from '@modern-js/runtime/router';\\n\\nexport default () => {\\n  const data = useLoaderData();\\n  return <div>{data?.message}</div>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"执行 \"}<_components.code>{\"dev\"}</_components.code>{\" 命令后，打开页面，可以明显的察觉到页面需要等到 2s 后才返回。\"}</_components.p>{\"\\n\"}<_components.p>{\"接下来使用 \"}<_components.code>{\"PreRender\"}</_components.code>{\" 组件来进行优化，该组件可以直接从 \"}<_components.code>{\"@modern-js/runtime/ssr\"}</_components.code>{\" 中导出：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { PreRender } from '@modern-js/runtime/ssr';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在路由组件内使用 \"}<_components.code>{\"PreRender\"}</_components.code>{\" 组件，并设置参数 \"}<_components.code>{\"interval\"}</_components.code>{\"，用于表示该次渲染结果的过期时间为 5s：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"<PreRender interval={5} />\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"修改后，执行 \"}<_components.code>{\"pnpm run build && pnpm run serve\"}</_components.code>{\" 启动应用，并打开页面。\"}</_components.p>{\"\\n\"}<_components.p>{\"首次打开时，和之前的渲染并没有什么不同，同样存在 2s 延迟。点击刷新，页面瞬间打开，但此时，页面数据并没有因为刷新发生变化，这是因为缓存还没有过期。\"}</_components.p>{\"\\n\"}<_components.p>{\"等待 5s，重新刷新页面，页面的数据仍然没有变化。再一次刷新页面数据发生变化，但是页面仍然几乎是瞬间响应的。\\n这是因为在之前的请求时，SPR 已经在后台异步获取了新的渲染结果，本次请求到的页面是已经缓存在服务器中的版本。\"}</_components.p>{\"\\n\"}<_components.p>{\"可以想象，当 \"}<_components.code>{\"interval\"}</_components.code>{\" 设置为 1 时，用户可以在感知到实时数据的同时，拥有静态页面的响应体验。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.code>{\"PreRender\"}</_components.code>{\" 的详细使用可以参考\"}<_components.a href=\"/apis/app/runtime/ssr/pre-render\">{\"这里\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"treeshaking\">{\"Treeshaking\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#treeshaking\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"开启 SSR 时，Modern.js 会用相同的入口，构建出 SSR Bundle 和 CSR Bundle 两份产物。因此，在 SSR Bundle 中存在 Web API，或是在 CSR Bundle 中存在 Node API 时，都可能导致运行出错。\"}</_components.p>{\"\\n\"}<_components.p>{\"在组件中引入 Web API，通常情况下是要做一些全局监听，或是获取浏览器相关的数据，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"document.addEventListener('load', () => {\\n  console.log('document load');\\n});\\nconst App = () => {\\n  return <div>Hello World</div>;\\n};\\nexport default App;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在组件文件中引入 Node API，通常情况下是因为使用了 \"}<_components.code>{\"useLoader\"}</_components.code>{\"，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import fse from 'fs-extra';\\nimport { useLoader } from '@modern-js/runtime'\\n\\nconst App = () => {\\n  const { data } = useLoader(async () => {\\n    const file = fse.readFileSync('./myfile');\\n    return {\\n      ...\\n    };\\n  })\\n\\n  return <div>Hello World</div>;\\n};\\nexport default App;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"环境变量区分\">{\"环境变量区分\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#环境变量区分\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"对于第一种情况，我们可以直接使用 Modern.js 内置的环境变量 \"}<_components.code>{\"MODERN_TARGET\"}</_components.code>{\" 进行判断，在构建时删除无用代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"if (process.env.MODERN_TARGET === 'browser') {\\n  document.addEventListener('load', () => {\\n    console.log('document load');\\n  });\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"开发环境打包后，SSR 产物和 CSR 产物会被编译成以下内容。因此 SSR 环境中不会再因为 Web API 报错：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"// SSR 产物\\nif (false) {\\n}\\n\\n// CSR 产物\\nif (true) {\\n  document.addEventListener('load', () => {\\n    console.log('document load');\\n  });\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"更多内容可以查看\"}<_components.a href=\"/guides/basic-features/env-vars\">{\"环境变量\"}</_components.a>{\"。\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"文件后缀区分\">{\"文件后缀区分\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#文件后缀区分\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"但例如第二种情况，在代码中引入了 \"}<_components.code>{\"fs-extra\"}</_components.code>{\"，它内部有使用了 Node API 的副作用，如果直接引用到组件中，会造成 CSR 加载报错。\"}</_components.p>{\"\\n\"}<_components.p>{\"环境变量的方式并不能在这种情况下生效，Modern.js 也支持通过 \"}<_components.code>{\".node.\"}</_components.code>{\" 后缀的文件来区分 SSR Bundle 和 CSR Bundle 产物的打包文件。\"}</_components.p>{\"\\n\"}<_components.p>{\"可以创建同名的 \"}<_components.code>{\".ts\"}</_components.code>{\" 和 \"}<_components.code>{\".node.ts\"}</_components.code>{\" 文件做一层代理：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"compat.ts\"'>{\"export const readFileSync: any = () => {};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"compat.node.ts\"'>{\"export { readFileSync } from 'fs-extra';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在文件中直接引入 \"}<_components.code>{\"./compat\"}</_components.code>{\"，此时 SSR 环境下会优先使用 \"}<_components.code>{\".node.ts\"}</_components.code>{\" 后缀的文件，CSR 环境下会使用 \"}<_components.code>{\".ts\"}</_components.code>{\" 后缀的文件。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"App.tsx\"'>{\"import { readFileSync } from './compat'\\n\\nexport const loader = () => {\\n  const file = readFileSync('./myfile');\\n  return {\\n    ...\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"独立文件\">{\"独立文件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#独立文件\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"上述两种方式，都会为开发者带来一些心智负担。在真实的业务中，我们发现大多数的 Node / Web 代码混用都出现在数据请求中。\"}</_components.p>{\"\\n\"}<_components.p>{\"因此，Modern.js 基于\"}<_components.a href=\"/guides/basic-features/routes\">{\"嵌套路由\"}</_components.a>{\"开发设计了\"}<_components.a href=\"/guides/basic-features/data-fetch\">{\"更简单的方案\"}</_components.a>{\"来分离 CSR 和 SSR 的代码。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们可以通过独立文件来分离\"}<_components.strong>{\"数据请求\"}</_components.strong>{\"与\"}<_components.strong>{\"组件代码\"}</_components.strong>{\"。在 \"}<_components.code>{\"routes/page.tsx\"}</_components.code>{\" 中编写组件逻辑，在 \"}<_components.code>{\"routes/page.loader.ts\"}</_components.code>{\" 中编写数据请求逻辑。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/page.tsx\"'>{\"export default Page = () => {\\n  return <div>Hello World<div>\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"routes/page.loader.tsx\"'>{\"import fse from 'fs-extra';\\nexport default () => {\\n  const file = fse.readFileSync('./myfile');\\n  return {\\n    ...\\n  };\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"接口请求\">{\"接口请求\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#接口请求\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在 SSR 中发起接口请求时，开发者有时自己封装了同构的请求工具。部分接口需要传递用户 Cookie，开发者可以通过 \"}<_components.a href=\"/guides/basic-features/data-fetch#route-loader\"><_components.code>{\"useRuntimeContext\"}</_components.code></_components.a>{\" API 获取到请求头来实现。\"}</_components.p>{\"\\n\"}<_components.p>{\"需要注意的是，此时获取到的是 HTML 请求的请求头，不一定适用于接口请求，因此\"}<_components.strong>{\"千万不能\"}</_components.strong>{\"透传所有请求头。并且，一些后端接口，或是通用网关，会根据请求头中的信息做校验，全量透传容易出现各种难以排查的问题，推荐\"}<_components.strong>{\"按需透传\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果实在需要透传所有请求头，请务必过滤 \"}<_components.code>{\"host\"}</_components.code>{\" 字段。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"流式渲染\">{\"流式渲染\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#流式渲染\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Modern.js 支持了 React 18 的流式渲染，可以通过如下配置启用：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { defineConfig } from '@modern-js/app-tools';\\n\\nexport default defineConfig({\\n  server: {\\n    ssr: {\\n      mode: 'stream',\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Modern.js 的流式渲染基于 React Router 实现，主要涉及 API 有：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.a href=\"https://reactrouter.com/en/main/utils/defer\" target=\"_blank\" rel=\"noopener noreferrer\"><_components.code>{\"defer\"}</_components.code></_components.a>{\"：在 Data Loader 中使用，用于支持异步获取数据。\"}</_components.li>{\"\\n\"}<_components.li><_components.a href=\"https://reactrouter.com/en/main/components/await\" target=\"_blank\" rel=\"noopener noreferrer\"><_components.code>{\"Await\"}</_components.code></_components.a>{\"：用于渲染 Data Loader 返回的异步数据。\"}</_components.li>{\"\\n\"}<_components.li><_components.a href=\"https://reactrouter.com/en/main/hooks/use-async-value\" target=\"_blank\" rel=\"noopener noreferrer\"><_components.code>{\"useAsyncValue\"}</_components.code></_components.a>{\"：用于从最近的父级 \"}<_components.code>{\"Await\"}</_components.code>{\" 组件中获取数据。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h3 id=\"异步获取数据\">{\"异步获取数据\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#异步获取数据\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"page.loader.ts\"'>{\"import { defer, type LoaderFunctionArgs } from '@modern-js/runtime/router';\\n\\ninterface User {\\n  name: string;\\n  age: number;\\n}\\n\\nexport interface Data {\\n  data: User;\\n}\\n\\nexport default ({ params }: LoaderFunctionArgs) => {\\n  const userId = params.id;\\n\\n  const user = new Promise<User>(resolve => {\\n    setTimeout(() => {\\n      resolve({\\n        name: `user-${userId}`,\\n        age: 18,\\n      });\\n    }, 200);\\n  });\\n\\n  return defer({ data: user });\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"user\"}</_components.code>{\" 是一个 Promise 类型的对象，表示需要异步获取的数据，通过 \"}<_components.code>{\"defer\"}</_components.code>{\" 处理需要异步获取的 \"}<_components.code>{\"user\"}</_components.code>{\"。注意，\"}<_components.code>{\"defer\"}</_components.code>{\" 必须接收一个对象类型的参数，\\n因此， 传入 \"}<_components.code>{\"defer\"}</_components.code>{\" 的参数为：\"}<_components.code>{\"{ data: user }\"}</_components.code></_components.p>{\"\\n\"}<_components.p><_components.code>{\"defer\"}</_components.code>{\" 还可以同时接收异步数据和同步数据。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"page.loader.ts\"'>{\"// 省略部分代码\\n\\nexport default ({ params }: LoaderFunctionArgs) => {\\n  const userId = params.id;\\n\\n  const user = new Promise<User>(resolve => {\\n    setTimeout(() => {\\n      resolve({\\n        name: `user-${userId}`,\\n        age: 18,\\n      });\\n    }, 200);\\n  });\\n\\n  const otherData = new Promise<string>(resolve => {\\n    setTimeout(() => {\\n      resolve('some sync data');\\n    }, 200);\\n  });\\n\\n  return defer({\\n    data: user,\\n    other: await otherData,\\n  });\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"otherData\"}</_components.code>{\" 前加了 \"}<_components.code>{\"await\"}</_components.code>{\"，所以是同步获取的数据，它可以和异步获取的数据 \"}<_components.code>{\"user\"}</_components.code>{\" 同时传入 \"}<_components.code>{\"defer\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"渲染异步数据\">{\"渲染异步数据\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#渲染异步数据\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过 \"}<_components.code>{\"Await\"}</_components.code>{\" 组件，可以获取到 Data Loader 中异步返回的数据，然后进行渲染。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"page.tsx\"'>{\"import { Await, useLoaderData } from '@modern-js/runtime/router';\\nimport { Suspense } from 'react';\\nimport type { Data } from './page.loader';\\n\\nconst Page = () => {\\n  const data = useLoaderData() as Data;\\n\\n  return (\\n    <div>\\n      User info:\\n      <Suspense fallback={<div id=\\\"loading\\\">loading user data ...</div>}>\\n        <Await resolve={data.data}>\\n          {user => {\\n            return (\\n              <div id=\\\"data\\\">\\n                name: {user.name}, age: {user.age}\\n              </div>\\n            );\\n          }}\\n        </Await>\\n      </Suspense>\\n    </div>\\n  );\\n};\\n\\nexport default Page;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"Await\"}</_components.code>{\" 需要包裹在 \"}<_components.code>{\"Suspense\"}</_components.code>{\" 组件内部，\"}<_components.code>{\"Await\"}</_components.code>{\" 的 \"}<_components.code>{\"resolve\"}</_components.code>{\" 传入的是 Data Loader 异步获取的数据，当数据获取完成后，\\n通过 \"}<_components.a href=\"https://zh-hans.react.dev/reference/react/cloneElement#passing-data-with-a-render-prop\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Render Props\"}</_components.a>{\" 模式，渲染获取到的数据。在数据的获取阶段，将展示\\n\"}<_components.code>{\"Suspense\"}</_components.code>{\" 组件 \"}<_components.code>{\"fallback\"}</_components.code>{\" 属性设置的内容。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive warning\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"从 Data Loader 文件导入类型时，需要使用 import type 语法，保证只导入类型信息，这样可以避免 Data Loader 的代码打包到前端产物的 bundle 文件中。\"}</_components.p>{\"\\n\"}<_components.p>{\"所以，这里的导入方式为：\"}<_components.code>{\"import type { Data } from './page.loader'\"}</_components.code>{\";\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"也可以通过 \"}<_components.code>{\"useAsyncValue\"}</_components.code>{\" 获取 Data Loader 返回的异步数据。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta=\"title='page.tsx'\">{\"import { useAsyncValue } from '@modern-js/runtime/router';\\n\\n// 省略部分代码\\n\\nconst UserInfo = () => {\\n  const user = useAsyncValue();\\n\\n  return (\\n    <div>\\n      name: {user.name}, age: {user.age}\\n    </div>\\n  );\\n};\\n\\nconst Page = () => {\\n  const data = useLoaderData() as Data;\\n\\n  return (\\n    <div>\\n      User info:\\n      <Suspense fallback={<div id=\\\"loading\\\">loading user data ...</div>}>\\n        <Await resolve={data.data}>\\n          <UserInfo />\\n        </Await>\\n      </Suspense>\\n    </div>\\n  );\\n};\\n\\nexport default Page;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"错误处理\">{\"错误处理\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#错误处理\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.code>{\"Await\"}</_components.code>{\" 组件的 \"}<_components.code>{\"errorElement\"}</_components.code>{\" 属性，可以用来处理当 Data Loader 执行时，或者子组件渲染时抛出的错误。\\n例如，我们故意在 Data Loader 函数中抛出错误：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"page.loader.ts\"'>{\"import { defer } from '@modern-js/runtime/router';\\n\\nexport default () => {\\n  const data = new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      reject(new Error('error occurs'));\\n    }, 200);\\n  });\\n\\n  return defer({ data });\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"然后通过 \"}<_components.code>{\"useAsyncError\"}</_components.code>{\" 获取错误，并将用于渲染错误信息的组件赋值给 \"}<_components.code>{\"Await\"}</_components.code>{\" 组件的 \"}<_components.code>{\"errorElement\"}</_components.code>{\" 属性：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"page.ts\"'>{\"import { Await, useAsyncError, useLoaderData } from '@modern-js/runtime/router';\\nimport { Suspense } from 'react';\\n\\nexport default function Page() {\\n  const data = useLoaderData();\\n\\n  return (\\n    <div>\\n      Error page\\n      <Suspense fallback={<div>loading ...</div>}>\\n        <Await resolve={data.data} errorElement={<ErrorElement />}>\\n          {(data: any) => {\\n            return <div>never displayed</div>;\\n          }}\\n        </Await>\\n      </Suspense>\\n    </div>\\n  );\\n}\\n\\nfunction ErrorElement() {\\n  const error = useAsyncError() as Error;\\n  return <p>Something went wrong! {error.message}</p>;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\">{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li><_components.a href=\"https://reactrouter.com/en/main/guides/deferred\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Deferred Data\"}</_components.a></_components.li>{\"\\n\"}<_components.li><_components.a href=\"https://github.com/reactwg/react-18/discussions/37\" target=\"_blank\" rel=\"noopener noreferrer\">{\"New Suspense SSR Architecture in React 18\"}</_components.a></_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","pre","h2","div","ol","li","strong","h3","ul","components","id","className","href","meta","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}