{"version":3,"file":"static/js/async/docs_zh_guide_basic_css-modules_md.7de3cd44.js","sources":["./docs/zh/guide/basic/css-modules.md"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguide%2Fbasic%2Fcss-modules.md\"] = {\"toc\":[{\"text\":\"示例\",\"id\":\"示例\",\"depth\":2},{\"text\":\"为所有样式文件启用 CSS Modules\",\"id\":\"为所有样式文件启用-css-modules\",\"depth\":2},{\"text\":\"为指定的样式文件启用 CSS Modules\",\"id\":\"为指定的样式文件启用-css-modules\",\"depth\":2},{\"text\":\"自定义类名\",\"id\":\"自定义类名\",\"depth\":2},{\"text\":\"添加类型声明\",\"id\":\"添加类型声明\",\"depth\":2},{\"text\":\"生成准确的类型定义\",\"id\":\"生成准确的类型定义\",\"depth\":2},{\"text\":\"示例\",\"id\":\"示例-1\",\"depth\":3},{\"text\":\"相关配置\",\"id\":\"相关配置\",\"depth\":3}],\"title\":\"使用 CSS Modules\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        ul: \"ul\",\n        li: \"li\",\n        h2: \"h2\",\n        pre: \"pre\",\n        div: \"div\",\n        h3: \"h3\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"使用-css-modules\">{\"使用 CSS Modules\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#使用-css-modules\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p><_components.a href=\"https://github.com/css-modules/css-modules\" target=\"_blank\" rel=\"noopener noreferrer\">{\"CSS Modules\"}</_components.a>{\" 让我们能以模块化的方式编写 CSS 代码，并且可以在 JavaScript 文件中导入和使用这些样式。使用 CSS Modules 可以自动生成唯一的类名，隔离不同模块之间的样式，避免类名冲突。\"}</_components.p>{\"\\n\"}<_components.p>{\"Builder 默认支持使用 CSS Modules，无需添加额外的配置。我们约定使用 \"}<_components.code>{\"[name].module.css\"}</_components.code>{\" 文件名来启用 CSS Modules。\"}</_components.p>{\"\\n\"}<_components.p>{\"以下样式文件会被视为 CSS Modules：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li><_components.code>{\"*.module.scss\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"*.module.less\"}</_components.code></_components.li>{\"\\n\"}<_components.li><_components.code>{\"*.module.css\"}</_components.code></_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h2 id=\"示例\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"编写样式：\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.pre><_components.code className=\"language-css\">{\"/* button.module.css */\\n.error {\\n  background: red;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"使用样式：\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"// Button.tsx\\nimport React, { Component } from 'react';\\n// 引入样式文件\\nimport styles from './button.module.css';\\n\\nexport default () => {\\n  return <button className={styles.error}>Error Button</button>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"为所有样式文件启用-css-modules\">{\"为所有样式文件启用 CSS Modules\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#为所有样式文件启用-css-modules\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在默认情况下，只有 \"}<_components.code>{\"*.module.css\"}</_components.code>{\" 结尾的文件才被视为 CSS Modules 模块。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果你想将源码目录下的所有 CSS 文件当做 CSS Modules 模块进行处理，可以通过开启 \"}<_components.a href=\"https://modernjs.dev/builder/api/config-output.html#outputdisablecssmoduleextension\" target=\"_blank\" rel=\"noopener noreferrer\">{\"output.disableCssModuleExtension\"}</_components.a>{\" 来实现，比如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    disableCssModuleExtension: true,\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"设置后，以下两个文件都会被视为 CSS Modules：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import styles1 from './foo.module.css';\\nimport styles2 from './bar.css';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive tip\"><_components.div className=\"modern-directive-title\">{\"TIP\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"我们不推荐开启此配置项，因为开启 \"}<_components.code>{\"disableCssModuleExtension\"}</_components.code>{\" 后，CSS Modules 文件和普通 CSS 文件无法得到明确的区分，不利于长期维护。\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"为指定的样式文件启用-css-modules\">{\"为指定的样式文件启用 CSS Modules\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#为指定的样式文件启用-css-modules\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在默认情况下，只有 \"}<_components.code>{\"*.module.css\"}</_components.code>{\" 结尾的文件才被视为 CSS Modules 模块。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果你想只为一些指定的样式文件启用 CSS Modules，可以通过配置 \"}<_components.a href=\"/api/config-output#outputcssmodule\">{\"output.cssModules\"}</_components.a>{\" 来实现，比如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    cssModules: {\\n      auto: resource => {\\n        return resource.includes('.module.') || resource.includes('shared/');\\n      },\\n    },\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"自定义类名\">{\"自定义类名\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#自定义类名\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"自定义 CSS Modules 生成的类名也是我们比较常用的功能，你可以使用 \"}<_components.a href=\"/api/config-output#outputcssmodulelocalidentname\">{\"output.cssModuleLocalIdentName\"}</_components.a>{\" 来进行配置。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    cssModuleLocalIdentName: '[hash:base64:4]',\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果你需要自定义 CSS Modules 的其他配置，可以通过 \"}<_components.a href=\"/api/config-tools#css-loader\">{\"tools.cssLoader\"}</_components.a>{\" 进行设置。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"添加类型声明\">{\"添加类型声明\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加类型声明\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"当你在 TypeScript 代码中引用 CSS Modules 时，TypeScript 可能会提示该模块缺少类型定义：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code>{\"TS2307: Cannot find module './index.module.css' or its corresponding type declarations.\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"此时你需要为 CSS Modules 添加类型声明文件，请在项目中创建 \"}<_components.code>{\"src/global.d.ts\"}</_components.code>{\" 文件，并添加相应的类型声明：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/global.d.ts\"'>{\"declare module '*.module.css' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.module.scss' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.module.sass' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.module.less' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.module.styl' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"如果你开启了 \"}<_components.code>{\"disableCssModuleExtension\"}</_components.code>{\" 配置值，还需要添加以下类型：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/global.d.ts\"'>{\"declare module '*.css' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.scss' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.sass' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.less' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\\ndeclare module '*.styl' {\\n  const classes: { readonly [key: string]: string };\\n  export default classes;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"添加类型声明后，如果依然存在上述错误提示，请尝试重启当前 IDE，或者调整 \"}<_components.code>{\"global.d.ts\"}</_components.code>{\" 所在的目录，使 TypeScript 能够正确识别类型定义。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"生成准确的类型定义\">{\"生成准确的类型定义\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#生成准确的类型定义\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"上述方法虽然可以解决 CSS Modules 在 TypeScript 中的类型问题，但是无法准确地提示出某个 CSS 文件导出了哪些类名。\"}</_components.p>{\"\\n\"}<_components.p>{\"Builder 支持为 CSS Modules 生成准确的类型声明，你只需要开启 \"}<_components.a href=\"/api/config-output#outputenablecssmoduletsdeclaration\">{\"output.enableCssModuleTSDeclaration\"}</_components.a>{\" 配置项，再执行构建命令，Builder 就会为项目中所有的 CSS Modules 文件生成相应的类型声明文件。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    enableCssModuleTSDeclaration: true,\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"示例-1\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例-1\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"例如某个文件夹下面有 \"}<_components.code>{\"src/index.ts\"}</_components.code>{\" 和 \"}<_components.code>{\"src/index.module.scss\"}</_components.code>{\" 两个文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/index.ts\"'>{\"import styles from './index.module.scss';\\n\\nexport default () => {\\n  <div>\\n    <div className={styles.pageHeader}>Page Header</div>\\n  </div>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-scss\">{\"// index.module.scss\\n.page-header {\\n  color: black;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"执行构建命令后，会自动生成 \"}<_components.code>{\"src/index.module.scss.d.ts\"}</_components.code>{\" 类型声明文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/index.module.scss.d.ts\"'>{\"// This file is automatically generated.\\n// Please do not change this file!\\ninterface CssExports {\\n  'page-header': string;\\n  pageHeader: string;\\n}\\nexport const cssExports: CssExports;\\nexport default cssExports;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"此时再打开 \"}<_components.code>{\"src/index.ts\"}</_components.code>{\" 文件，可以看到 \"}<_components.code>{\"styles\"}</_components.code>{\" 对象已经具备了准确的类型。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"相关配置\">{\"相关配置\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#相关配置\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"在上述例子中，\"}<_components.code>{\"src/index.module.scss.d.ts\"}</_components.code>{\" 是编译生成的代码，你可以选择将它们提交到 Git 仓库里，也可以选择在 \"}<_components.code>{\".gitignore\"}</_components.code>{\" 文件中忽略它们：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"# Ignore auto generated CSS declarations\\n*.module.css.d.ts\\n*.module.sass.d.ts\\n*.module.scss.d.ts\\n*.module.less.d.ts\\n*.module.styl.d.ts\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"此外，如果生成的代码导致了 ESLint 报错，你也可以将上述配置添加到 \"}<_components.code>{\".eslintignore\"}</_components.code>{\" 文件里。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","ul","li","h2","pre","div","h3","components","id","className","href","target","rel","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}