{"version":3,"file":"static/js/async/docs_zh_guide_basic_json-files_md.79fcba33.js","sources":["./docs/zh/guide/basic/json-files.md"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguide%2Fbasic%2Fjson-files.md\"] = {\"toc\":[{\"text\":\"JSON 文件\",\"id\":\"json-文件\",\"depth\":2},{\"text\":\"示例\",\"id\":\"示例\",\"depth\":3},{\"text\":\"具名引用\",\"id\":\"具名引用\",\"depth\":3},{\"text\":\"YAML 文件\",\"id\":\"yaml-文件\",\"depth\":2},{\"text\":\"示例\",\"id\":\"示例-1\",\"depth\":3},{\"text\":\"添加类型声明\",\"id\":\"添加类型声明\",\"depth\":3},{\"text\":\"TOML 文件\",\"id\":\"toml-文件\",\"depth\":2},{\"text\":\"示例\",\"id\":\"示例-2\",\"depth\":3},{\"text\":\"添加类型声明\",\"id\":\"添加类型声明-1\",\"depth\":3}],\"title\":\"引用 JSON 文件\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        h3: \"h3\",\n        pre: \"pre\",\n        code: \"code\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"引用-json-文件\">{\"引用 JSON 文件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#引用-json-文件\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Builder 支持在代码中引用 JSON 文件，也支持引用 \"}<_components.a href=\"https://yaml.org/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"YAML\"}</_components.a>{\" 和 \"}<_components.a href=\"https://toml.io/en/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"TOML\"}</_components.a>{\" 文件并将其转换为 JSON 格式。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"json-文件\">{\"JSON 文件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#json-文件\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"你可以直接在 JavaScript 文件中引用 JSON 文件。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"示例\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.pre><_components.code className=\"language-json\" meta='title=\"example.json\"'>{'{\\n  \"name\": \"foo\",\\n  \"items\": [1, 2]\\n}\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-js\" meta='title=\"index.js\"'>{\"import example from './example.json';\\n\\nconsole.log(example.name); // 'foo';\\nconsole.log(example.items); // [1, 2];\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"具名引用\">{\"具名引用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#具名引用\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Builder 暂不支持通过 named import 来引用 JSON 文件：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"import { name } from './example.json';\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"yaml-文件\">{\"YAML 文件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#yaml-文件\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"YAML 是一种数据序列化语言，通常用于编写配置文件。\"}</_components.p>{\"\\n\"}<_components.p>{\"你可以直接在 JavaScript 中引用 \"}<_components.code>{\".yaml\"}</_components.code>{\" 或 \"}<_components.code>{\".yml\"}</_components.code>{\" 文件，它们会被自动转换为 JSON 格式。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"示例-1\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例-1\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.pre><_components.code className=\"language-yaml\" meta='title=\"example.yaml\"'>{\"---\\nhello: world\\nfoo:\\n  bar: baz\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"import example from './example.yaml';\\n\\nconsole.log(example.hello); // 'world';\\nconsole.log(example.foo); // { bar: 'baz' };\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"添加类型声明\">{\"添加类型声明\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加类型声明\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当你在 TypeScript 代码中引用 YAML 文件时，请在项目中创建 \"}<_components.code>{\"src/global.d.ts\"}</_components.code>{\" 文件，并添加相应的类型声明：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/global.d.ts\"'>{\"declare module '*.yaml' {\\n  const content: Record<string, any>;\\n  export default content;\\n}\\n\\ndeclare module '*.yml' {\\n  const content: Record<string, any>;\\n  export default content;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"toml-文件\">{\"TOML 文件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#toml-文件\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"TOML 是一种语义明显、易于阅读的配置文件格式。\"}</_components.p>{\"\\n\"}<_components.p>{\"你可以直接在 JavaScript 中引用 \"}<_components.code>{\".toml\"}</_components.code>{\" 文件，它会被自动转换为 JSON 格式。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"示例-2\">{\"示例\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#示例-2\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.pre><_components.code className=\"language-toml\" meta='title=\"example.toml\"'>{'hello = \"world\"\\n\\n[foo]\\nbar = \"baz\"\\n'}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"import example from './example.toml';\\n\\nconsole.log(example.hello); // 'world';\\nconsole.log(example.foo); // { bar: 'baz' };\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"添加类型声明-1\">{\"添加类型声明\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加类型声明-1\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当你在 TypeScript 代码中引用 TOML 文件时，请在项目中创建 \"}<_components.code>{\"src/global.d.ts\"}</_components.code>{\" 文件，并添加相应的类型声明：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/global.d.ts\"'>{\"declare module '*.toml' {\\n  const content: Record<string, any>;\\n  export default content;\\n}\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","h3","pre","code","components","id","className","href","target","rel","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}