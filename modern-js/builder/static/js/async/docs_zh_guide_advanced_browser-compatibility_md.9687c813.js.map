{"version":3,"file":"static/js/async/docs_zh_guide_advanced_browser-compatibility_md.9687c813.js","sources":["./docs/zh/guide/advanced/browser-compatibility.md"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguide%2Fadvanced%2Fbrowser-compatibility.md\"] = {\"toc\":[{\"text\":\"设置浏览器范围\",\"id\":\"设置浏览器范围\",\"depth\":2},{\"text\":\"背景知识\",\"id\":\"背景知识\",\"depth\":2},{\"text\":\"语法降级和 API 降级\",\"id\":\"语法降级和-api-降级\",\"depth\":3},{\"text\":\"语法转译\",\"id\":\"语法转译\",\"depth\":3},{\"text\":\"API Polyfill\",\"id\":\"api-polyfill\",\"depth\":3},{\"text\":\"降级方式\",\"id\":\"降级方式\",\"depth\":2},{\"text\":\"降级当前项目代码\",\"id\":\"降级当前项目代码\",\"depth\":3},{\"text\":\"降级第三方依赖\",\"id\":\"降级第三方依赖\",\"depth\":3},{\"text\":\"降级非当前项目的代码\",\"id\":\"降级非当前项目的代码\",\"depth\":3},{\"text\":\"Polyfill 方案\",\"id\":\"polyfill-方案\",\"depth\":2},{\"text\":\"entry 方案\",\"id\":\"entry-方案\",\"depth\":3},{\"text\":\"usage 方案\",\"id\":\"usage-方案\",\"depth\":3},{\"text\":\"不注入 Polyfill\",\"id\":\"不注入-polyfill\",\"depth\":3}],\"title\":\"浏览器兼容性\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        ul: \"ul\",\n        li: \"li\",\n        h3: \"h3\",\n        strong: \"strong\",\n        blockquote: \"blockquote\",\n        code: \"code\",\n        pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"浏览器兼容性\">{\"浏览器兼容性\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#浏览器兼容性\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"本章节介绍如何使用 Builder 提供的能力来处理浏览器兼容性问题。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"设置浏览器范围\">{\"设置浏览器范围\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#设置浏览器范围\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在处理兼容性问题之前，首先需要明确你的项目需要支持的浏览器范围，并添加相应的 browserslist 配置。\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"如果你还没有设置浏览器范围，请先阅读 \"}<_components.a href=\"/guide/advanced/browserslist\">{\"设置浏览器范围\"}</_components.a>{\" 章节。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}<_components.li>{\"\\n\"}<_components.p>{\"如果你已经设置了浏览器范围，那么 Builder 会自动根据该范围进行编译，对 JavaScript 语法和 CSS 语法进行降级处理，并注入所需的 polyfill 代码。大部分情况下，你可以放心地使用现代 ECMAScript 特性，无须担心兼容性问题。\"}</_components.p>{\"\\n\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"在设置浏览器范围之后，如果你依然在开发中遇到了一些兼容性问题，请继续阅读下面的内容来寻找解决方案。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"背景知识\">{\"背景知识\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#背景知识\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在处理兼容性问题之前，建议你了解以下背景知识，以更好地处理相关问题。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"语法降级和-api-降级\">{\"语法降级和 API 降级\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#语法降级和-api-降级\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当你在项目中使用高版本语法和 API 时，为了让编译后的代码能稳定运行在低版本浏览器中，需要完成两部分降级：语法降级和 API 降级。\"}</_components.p>{\"\\n\"}<_components.p><_components.strong>{\"Builder 通过语法转译来对语法进行降级，通过 polyfill 来对 API 进行进行降级。\"}</_components.strong></_components.p>{\"\\n\"}<_components.blockquote>{\"\\n\"}<_components.p>{\"语法和 API 并不是强绑定的，浏览器厂商在实现引擎的时候，会根据规范或者自身需要提前支持一些语法或者提前实现一些 API。因此，同一时期的不同厂商的浏览器，对语法和 API 的兼容都不一定相同。所以在一般的实践中，语法和 API 是分成两个部分进行处理的。\"}</_components.p>{\"\\n\"}</_components.blockquote>{\"\\n\"}<_components.h3 id=\"语法转译\">{\"语法转译\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#语法转译\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.strong>{\"语法是编程语言如何组织代码的一系列规则\"}</_components.strong>{\"，不遵守这些规则的代码无法被编程语言的引擎正确识别，因此无法被运行。在 JavaScript 中，以下几个示例都是语法规则：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"在 \"}<_components.code>{\"const foo = 1\"}</_components.code>{\" 中，\"}<_components.code>{\"const\"}</_components.code>{\" 表示声明一个不可变的常量。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 \"}<_components.code>{\"foo?.bar?.baz\"}</_components.code>{\" 中，\"}<_components.code>{\"?.\"}</_components.code>{\" 表示可选链访问属性。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 \"}<_components.code>{\"async function () {}\"}</_components.code>{\" 中，\"}<_components.code>{\"async\"}</_components.code>{\" 表示声明一个异步函数。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"由于不同浏览器的解析器所能支持的语法不同，尤其是旧版本浏览器引擎所能支持的语法较少，因此一些语法在低版本浏览器引擎中运行时，就会在解析 AST 的阶段报错。\"}</_components.p>{\"\\n\"}<_components.p>{\"比如下面这段代码在 IE 浏览器或低版本 Node.js 下会报错：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"const foo = {};\\nfoo?.bar();\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"我们在低版本 Node.js 中运行这段代码，会出现以下错误信息：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"SyntaxError: Unexpected token .\\n  at Object.exports.runInThisContext (vm.js:73:16)\\n  at Object.<anonymous> ([eval]-wrapper:6:22)\\n  at Module._compile (module.js:460:26)\\n  at evalScript (node.js:431:25)\\n  at startup (node.js:90:7)\\n  at node.js:814:3\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"从错误信息里可以明显看到，这是一个语法错误（SyntaxError）。这说明这个语法在低版本的引擎中是不受支持的。\"}</_components.p>{\"\\n\"}<_components.p><_components.strong>{\"语法是不能通过 polyfill 或者 shim 进行支持的\"}</_components.strong>{\"。如果想在低版本浏览器中运行一些它原本不支持的语法，那么就需要对代码进行转译，转译成低版本引擎所能支持的语法。\"}</_components.p>{\"\\n\"}<_components.p>{\"将上述代码转译为以下代码即可在低版本引擎中运行：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"var foo = {};\\nfoo === null || foo === void 0 ? void 0 : foo.bar();\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"转译后，代码的语法变了，把一些低版本引擎无法理解的语法用其可理解的语法替代，\"}<_components.strong>{\"但代码本身的意义没有变\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果引擎在转换为 AST 的时候遇到了无法识别的语法，就会报语法错误，并中止代码执行流程。在这种情况下，如果你的项目没有使用 SSR 或 SSG 等能力的话，页面将会直接白屏，导致页面不可用。\"}</_components.p>{\"\\n\"}<_components.p>{\"如果代码被转换为 AST 成功，引擎会将 AST 转为可执行代码，并在引擎内部正常执行。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"api-polyfill\">{\"API Polyfill\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#api-polyfill\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"JavaScript 是解释型脚本语言，不同于 Rust 等编译型语言。Rust 会在编译阶段对代码中的调用进行检查，而 JavaScript 在真正运行到某一行代码之前，并不知道这一行代码所调用的函数是否存在，因此一些错误只有在运行时才会出现。\"}</_components.p>{\"\\n\"}<_components.p>{\"举个例子，下面这段代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"var str = 'Hello world!';\\nconsole.log(str.notExistedMethod());\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"上面这段代码有着正确的语法，在引擎运行时的第一个阶段也能正确转换为 AST，但是在真正运行的时候，由于 \"}<_components.code>{\"String.prototype\"}</_components.code>{\" 上不存在 \"}<_components.code>{\"notExistedMethod\"}</_components.code>{\" 这个方法，所以在实际运行的时候会报错：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"Uncaught TypeError: str.notExistedMethod is not a function\\n  at <anonymous>:2:17\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"随着 ECMAScript 的迭代，一些内置对象也会迎来新的方法。比如 \"}<_components.code>{\"String.prototype.replaceAll\"}</_components.code>{\" 是在 ES2021 中被引入的，那么在大部分 2021 年前的浏览器的引擎的内置对象 \"}<_components.code>{\"String.prototype\"}</_components.code>{\" 中是不存在 \"}<_components.code>{\"replaceAll\"}</_components.code>{\" 方法的，因此下面这段代码在最新的 Chrome 里可以运行，但是在较早的版本里无法运行：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"'abc'.replaceAll('abc', 'xyz');\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"为了解决在旧版浏览器中的 \"}<_components.code>{\"String.prototype\"}</_components.code>{\" 缺少 \"}<_components.code>{\"replaceAll\"}</_components.code>{\" 的问题，我们可以在老版本的浏览器里扩展 \"}<_components.code>{\"String.prototype\"}</_components.code>{\" 对象，给它加上 \"}<_components.code>{\"replaceAll\"}</_components.code>{\" 方法，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"// 该 polyfill 的实现并不一定符合标准，仅作为示例。\\nif (!String.prototype.replaceAll) {\\n  String.prototype.replaceAll = function (str, newStr) {\\n    // If a regex pattern\\n    if (\\n      Object.prototype.toString.call(str).toLowerCase() === '[object regexp]'\\n    ) {\\n      return this.replace(str, newStr);\\n    }\\n    // If a string\\n    return this.replace(new RegExp(str, 'g'), newStr);\\n  };\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.blockquote>{\"\\n\"}<_components.p>{\"这种为旧环境提供实现来对齐新 API 的技术被称作 polyfill。\"}</_components.p>{\"\\n\"}</_components.blockquote>{\"\\n\"}<_components.h2 id=\"降级方式\">{\"降级方式\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#降级方式\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在 Builder 中，我们将代码分为三类：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"第一类是当前项目中的源代码。\"}</_components.li>{\"\\n\"}<_components.li>{\"第二类是通过 npm 安装的第三方依赖代码。\"}</_components.li>{\"\\n\"}<_components.li>{\"第三类是非当前项目的代码，比如 monorepo 中其他目录下的代码。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"默认情况下，Builder 只会对第一类代码进行编译和降级，而其他类型的代码默认是不进行降级处理的。\"}</_components.p>{\"\\n\"}<_components.p>{\"之所以这样处理，主要有几个考虑：\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"将所有第三方依赖代码都进行降级的话会\"}<_components.strong>{\"导致构建性能显著下降\"}</_components.strong>{\"。\"}</_components.li>{\"\\n\"}<_components.li>{\"大部分第三方依赖在发布前已经进行了降级处理，二次降级可能会引入新问题。\"}</_components.li>{\"\\n\"}<_components.li>{\"非当前项目的代码可能已经经过了编译处理，或者编译所需的配置与当前项目并不相同。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h3 id=\"降级当前项目代码\">{\"降级当前项目代码\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#降级当前项目代码\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当前项目的代码会被默认降级，因此你不需要添加额外的配置，只需要保证正确设置了浏览器范围即可。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"降级第三方依赖\">{\"降级第三方依赖\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#降级第三方依赖\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当你发现某个第三方依赖的代码导致了兼容性问题时，你可以将这个依赖添加到 Builder 的 \"}<_components.a href=\"/api/config-source#sourceinclude\">{\"source.include\"}</_components.a>{\" 配置中，使 Builder 对该依赖进行额外的编译。\"}</_components.p>{\"\\n\"}<_components.p>{\"以 \"}<_components.code>{\"query-string\"}</_components.code>{\" 这个 npm 包为例，你可以做如下的配置：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import path from 'path';\\n\\nexport default {\\n  source: {\\n    include: [/\\\\/node_modules\\\\/query-string\\\\//],\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"请查看 \"}<_components.a href=\"/api/config-source#sourceinclude\">{\"source.include\"}</_components.a>{\" 文档来查看更详细的用法说明。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"降级非当前项目的代码\">{\"降级非当前项目的代码\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#降级非当前项目的代码\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当你引用非当前项目的代码时，如果该代码未经过编译处理，那么你也需要配置 \"}<_components.a href=\"/api/config-source#sourceinclude\">{\"source.include\"}</_components.a>{\" 来对它进行编译。\"}</_components.p>{\"\\n\"}<_components.p>{\"比如，你需要引用 monorepo 中 \"}<_components.code>{\"packages\"}</_components.code>{\" 目录下的某个模块，可以添加如下的配置：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import path from 'path';\\n\\nexport default {\\n  source: {\\n    include: [\\n      // 方法一:\\n      // 编译 Monorepo 的 package 目录下的所有文件\\n      path.resolve(__dirname, '../../packages'),\\n\\n      // 方法二:\\n      // 编译 Monorepo 的 package 目录里某个包的源代码\\n      // 这种写法匹配的范围更加精准，对整体编译性能的影响更小\\n      path.resolve(__dirname, '../../packages/xxx/src'),\\n    ],\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"polyfill-方案\">{\"Polyfill 方案\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#polyfill-方案\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Builder 底层通过 Babel 或 SWC 编译 JavaScript 代码，并注入 \"}<_components.a href=\"https://github.com/zloirock/core-js\" target=\"_blank\" rel=\"noopener noreferrer\">{\"core-js\"}</_components.a>{\"、\"}<_components.a href=\"https://www.npmjs.com/package/@babel/runtime\" target=\"_blank\" rel=\"noopener noreferrer\">{\"@babel/runtime\"}</_components.a>{\"、\"}<_components.a href=\"https://www.npmjs.com/package/@swc/helpers\" target=\"_blank\" rel=\"noopener noreferrer\">{\"@swc/helpers\"}</_components.a>{\" 等 polyfill 库。\"}</_components.p>{\"\\n\"}<_components.p>{\"在不同的使用场景下，你可能会需要不同的 polyfill 方案。Builder 提供了 \"}<_components.a href=\"/api/config-output#outputpolyfill\">{\"output.polyfill\"}</_components.a>{\" 配置项来切换不同的 polyfill 方案。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"entry-方案\">{\"entry 方案\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#entry-方案\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"entry 为默认方案，无须手动设置。\"}</_components.p>{\"\\n\"}<_components.p>{\"在使用 entry 方案时，Builder 会根据当前项目设置的浏览器范围来计算需要注入哪些 \"}<_components.code>{\"core-js\"}</_components.code>{\" 方法，并在每个页面的入口文件中进行注入。这种方式注入的 polyfill 较为全面，不需要再担心项目源码和第三方依赖的 polyfill 问题，但是因为包含了一些没有用到的 polyfill 代码，所以最终的包大小可能会有所增加。\"}</_components.p>{\"\\n\"}<_components.p>{\"entry 方案对应的配置为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    polyfill: 'entry',\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"usage-方案\">{\"usage 方案\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#usage-方案\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"usage 方案可以更精确地控制需要注入哪些 core-js polyfill。\"}</_components.p>{\"\\n\"}<_components.p>{\"当你开启 usage 方案时，Builder 会分析项目中的源代码，并判断需要注入哪些 polyfill。\"}</_components.p>{\"\\n\"}<_components.p>{\"比如代码中使用了 \"}<_components.code>{\"Map\"}</_components.code>{\":\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"var b = new Map();\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"编译后，只会在该文件中注入 \"}<_components.code>{\"Map\"}</_components.code>{\" 所需的 polyfill：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"import 'core-js/modules/es.map';\\nvar b = new Map();\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这种方式的优点是注入的 polyfill 体积更小，适合对包体积有较高要求的项目使用。缺点是 polyfill 可能注入不全，因为第三方依赖默认不会被编译和降级处理，因此第三方依赖所需的 polyfill 不会被分析到，如果需要分析某个第三方依赖，也需要将其加入到 \"}<_components.a href=\"/api/config-source#sourceinclude\">{\"source.include\"}</_components.a>{\" 配置中。\"}</_components.p>{\"\\n\"}<_components.p>{\"usage 方案对应的配置为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    polyfill: 'usage',\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"不注入-polyfill\">{\"不注入 Polyfill\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#不注入-polyfill\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"你可以将 \"}<_components.code>{\"output.polyfill\"}</_components.code>{\" 设置为 \"}<_components.code>{\"'off'\"}</_components.code>{\" 来禁用 polyfill 注入的行为。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default {\\n  output: {\\n    polyfill: 'off',\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"使用此选项时，你需要自行保证代码的兼容性，比如通过 \"}<_components.a href=\"/api/config-source#sourcepreentry\">{\"source.preEntry\"}</_components.a>{\" 来手动引用所需的 polyfill 代码。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","ul","li","h3","strong","blockquote","code","pre","components","id","className","href","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}