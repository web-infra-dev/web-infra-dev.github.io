[{"id":0,"title":"Builder Core","content":"#\n\nThis section describes some of the core methods provided by Builder.\n\n\ncreateBuilder#\n\nCreate a Builder instance object.\n\nWhen using this method, it needs to be used with the\n@modern-js/builder-webpack-provider or @modern-js/builder-rspack-provider.\nProviders implements corresponding build feature based on specific bundlers.\n\n\nbuilderWebpackProvider#\n\nWhen builderWebpackProvider is passed, the Builder will use webpack as the\nbundler for building.\n\n\n\n\nbuilderRspackProvider#\n\nWhen builderRspackProvider is passed, the Builder will use Rspack as the bundler\nfor building.\n\n\n\n\noptions#\n\nThe second parameter of createBuilder is a options object, you can pass in the\nfollowing options:\n\n\n\nDescription:\n\n * cwd: The root path of the current build, the default value is process.cwd().\n * entry: Build entry object.\n * target: Build target type, the default value is ['web'], see chapter Build\n   Target for details.\n * framework: The name of the framework, a unique identifier, the default value\n   is 'modern.js'.\n * configPath: The path to the framework config file (absolute path), this\n   parameter affects the build cache update.\n\n\nmergeBuilderConfig#\n\nMerges multiple Builder config objects and returns a new merged object.\n\n * Type\n\n\n\n * Example\n\n\n\n> This method does not modify the original config object.\n\n\nwebpack#\n\nA webpack object for consuming webpack builtin plugins or type definitions.\n\n * Example\n\n\n\n> In most scenarios, it is recommended to import webpack from Builder instead of\n> manually installing a \"webpack\" dependency, which can avoid multi-instance\n> problems.\n\n\nHtmlWebpackPlugin#\n\nHtmlWebpackPlugin object, usually used to implement custom plugins of\nHtmlWebpackPlugin.\n\n * Example\n\n\n\n> In most scenarios, it is recommended to import HtmlWebpackPlugin from builder\n> instead of manually installing a \"html-webpack-plugin\" dependency, which can\n> avoid multi-instance problems.","routePath":"/builder/en/api/builder-core","lang":"en","toc":[{"text":"createBuilder","id":"createbuilder","depth":2,"charIndex":73},{"text":"builderWebpackProvider","id":"builderwebpackprovider","depth":3,"charIndex":331},{"text":"builderRspackProvider","id":"builderrspackprovider","depth":3,"charIndex":457},{"text":"options","id":"options","depth":3,"charIndex":580},{"text":"mergeBuilderConfig","id":"mergebuilderconfig","depth":2,"charIndex":1137},{"text":"webpack","id":"webpack","depth":2,"charIndex":1316},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":2,"charIndex":1589}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":1,"title":"Builder Instance","content":"#\n\nThis section describes all the properties and methods on the Builder instance\nobject.\n\n\nbuilder.context#\n\nbuilder.context is a read-only object that provides some context infos.\n\n\nbuilder.context.entry#\n\nThe entry object, corresponding to the entry option of createBuilder method.\n\n * Type\n\n\n\n\nbuilder.context.target#\n\nBuild target type, corresponding to the target option of createBuilder method.\n\n * Type\n\n\n\n\nbuilder.context.rootPath#\n\nThe root path of current build, corresponding to the cwd option of createBuilder\nmethod.\n\n * Type\n\n\n\n\nbuilder.context.srcPath#\n\nThe absolute path to the src directory.\n\n * Type\n\n\n\n\nbuilder.context.distPath#\n\nThe absolute path of the output directory, corresponding to the\noutput.distPath.root config in BuilderConfig.\n\n * Type\n\n\n\n\nbuilder.context.cachePath#\n\nThe absolute path of the build cache files.\n\n * Type\n\n\n\n\nbuilder.context.configPath#\n\nThe absolute path to the framework config file, corresponding to the configPath\noption of createBuilder method.\n\n * Type\n\n\n\n\nbuilder.context.tsconfigPath#\n\nThe absolute path of the tsconfig.json file, or undefined if the tsconfig.json\nfile does not exist in current project.\n\n * Type\n\n\n\n\nbuilder.context.framework#\n\nThe name of the framework, a unique identifier, the default value is\n'modern.js'.\n\n * Type\n\n\n\n\nbuilder.context.devServer#\n\nDev Server information, including the current Dev Server hostname and port\nnumber.\n\n * Type\n\n\n\n\nbuilder.context.bundlerType#\n\nThe bundler type of current build.\n\n * Type\n\n\n\n\nbuilder.build#\n\nPerform a production build.\n\n * Type\n\n\n\n * Example\n\n\n\n\nDevelopment environment build#\n\nIf you need to perform a development build, you can set the mode option to\n'development'.\n\n\n\n\nMonitor file changes#\n\nIf you need to watch file changes and re-build, you can set the watch option to\ntrue.\n\n\n\n\nCustom Compiler#\n\nIn some cases, you may want to use a custom compiler:\n\n\n\n\nbuilder.startDevServer#\n\nStart the local Dev Server, based on the Modern.js Dev Server.\n\n * Type\n\n\n\n * Example\n\nStart Dev Server:\n\n\n\nAfter successfully starting Dev Server, you can see the following logs:\n\n\n\nstartDevServer returns the following parameters:\n\n * urls: URLs to access dev server.\n * port: The actual listening port number.\n * server: Server instance object.\n\n\n\n\nDisable Print URLs#\n\nSetting printURLs to false to disable the default URL output, so you can custom\nthe logs.\n\n\n\nYou can also directly configure printURLs as a function to modify URLs, such as\nadding a subpath to each URL:\n\n\n\n\nStrict Port#\n\nWhen a port is occupied, Builder will automatically increment the port number\nuntil an available port is found.\n\nSet strictPort to true and Builder will throw an exception when the port is\noccupied.\n\n\n\n\nCustom Compiler#\n\nIn some cases, you may want to use a custom compiler:\n\n\n\n\nGet Port Silently#\n\nIn some cases, the default startup port number is already occupied. In this\nsituation, Builder will automatically increment the port number until it finds\nan available one. This process will output a prompt log. If you do not want this\nlog, you can set getPortSliently to true.\n\n\n\n\nCustom Logger#\n\nBy default, Builder uses @modern-js/utils/logger to output logs. You can\ncustomize the log output object through the logger parameter.\n\n\n\nThen Builder will use the custom logger to output logs.\n\n\nbuilder.serve#\n\nStart a server to preview the production build locally. This method should be\nexecuted after builder.build.\n\n * Type\n\n\n\n * Example\n\nStart the server：\n\n\n\nserve returns the following parameters:\n\n * urls: URLs to access server.\n * port: The actual listening port number.\n * server: Server instance object.\n\n\n\n\nbuilder.createCompiler#\n\nCreate a Compiler object.\n\nWhen the target option of createBuilder contains only one value, the return\nvalue is Compiler; when target contains multiple values, the return value is\nMultiCompiler.\n\n * Type\n\n\n\n * Example\n\n\n\n> In most scenarios, you do not need to use this API unless you need to custom\n> the Dev Server or other advanced scenarios.\n\n\nbuilder.addPlugins#\n\nRegister one or more Builder plugins, which can be called multiple times.\n\nThis method needs to be called before compiling. If it is called after\ncompiling, it will not affect the compilation result.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.removePlugins#\n\nRemoves one or more Builder plugins, which can be called multiple times.\n\nThis method needs to be called before compiling. If it is called after\ncompiling, it will not affect the compilation result.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.isPluginExists#\n\nDetermines whether a plugin has been registered.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.inspectConfig#\n\nInspect the final generated builder config and bundler config.\n\nTIP\n\nThe inspectConfig method does not support simultaneous use with the\nstartDevServer / build method.\n\nWhen you need to view the complete builder and bundler configurations during the\nbuild process, you can use the debug mode or obtain them through hooks such as\nonBeforeBuild and onBeforeCreateCompile.\n\n * Type\n\n\n\n * Example\n\nGet the config content in string format:\n\n\n\nWrite the config content to disk:\n\n\n\n\nbuilder.onBeforeCreateCompiler#\n\nonBeforeCreateCompiler is a callback function that is triggered after the\nCompiler instance has been created, but before the build process begins. This\nhook is called when you run builder.startDevServer, builder.build, or\nbuilder.createCompiler.\n\nYou can access the Compiler instance object through the compiler parameter:\n\n * If the current bundler is webpack, you will get the webpack Compiler object.\n\n * If the current bundler is Rspack, you will get the Rspack Compiler object.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onAfterCreateCompiler#\n\nonAfterCreateCompiler is a callback function that is triggered after the\ncompiler instance has been created, but before the build process. This hook is\ncalled when you run builder.startDevServer, builder.build, or\nbuilder.createCompiler.\n\nYou can access the Compiler instance object through the compiler parameter:\n\n * If the current bundler is webpack, you will get the webpack Compiler object.\n\n * If the current bundler is Rspack, you will get the Rspack Compiler object.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onBeforeBuild#\n\nonBeforeBuild is a callback function that is triggered before the production\nbuild is executed. You can access the final configuration array of the\nunderlying bundler through the `bundlerConfigs' parameter:\n\n * If the current bundler is webpack, you will get a webpack configuration\n   array.\n\n * If the current bundler is Rspack, you will get an Rspack configuration array.\n\n * The configuration array can contain one or more configurations, depending on\n   the current target config of Builder.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onAfterBuild#\n\nonAfterBuild is a callback function that is triggered after running the\nproduction build. You can access the build result information via the `stats'\nparameter:\n\n * If the current bundler is webpack, you will get webpack Stats.\n\n * If the current bundler is Rspack, you will get Rspack Stats.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onBeforeStartDevServer#\n\nCalled before starting the development server.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onAfterStartDevServer#\n\nCalled after starting the development server, you can get the port number\nthrough the port parameter.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onDevCompileDone#\n\nCalled after each development environment build, you can use isFirstCompile to\ndetermine whether it is the first build.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.onExit#\n\nCalled when the process is going to exit, this hook can only execute synchronous\ncode.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.getBuilderConfig#\n\nGet the Builder config, this method must be called after the modifyBuilderConfig\nhook is executed.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.getNormalizedConfig#\n\nGet the normalized Builder config, this method must be called after the\nmodifyBuilderConfig hook is executed.\n\nCompared with the api.getBuilderConfig method, the config returned by this\nmethod has been normalized, and the type definition of the config will be\nnarrowed. For example, the undefined type of config.html will be removed.\n\nIt is recommended to use this method to get the Builder config.\n\n * Type\n\n\n\n * Example\n\n\n\n\nbuilder.getHTMLPaths#\n\nGet path information for all HTML assets.\n\nThis method will return an object, the key is the entry name and the value is\nthe relative path of the HTML file in the dist directory.\n\n * Type\n\n\n\n * Example\n\n","routePath":"/builder/en/api/builder-instance","lang":"en","toc":[{"text":"builder.context","id":"buildercontext","depth":2,"charIndex":90},{"text":"builder.context.entry","id":"buildercontextentry","depth":3,"charIndex":182},{"text":"builder.context.target","id":"buildercontexttarget","depth":3,"charIndex":296},{"text":"builder.context.rootPath","id":"buildercontextrootpath","depth":3,"charIndex":413},{"text":"builder.context.srcPath","id":"buildercontextsrcpath","depth":3,"charIndex":542},{"text":"builder.context.distPath","id":"buildercontextdistpath","depth":3,"charIndex":621},{"text":"builder.context.cachePath","id":"buildercontextcachepath","depth":3,"charIndex":771},{"text":"builder.context.configPath","id":"buildercontextconfigpath","depth":3,"charIndex":856},{"text":"builder.context.tsconfigPath","id":"buildercontexttsconfigpath","depth":3,"charIndex":1010},{"text":"builder.context.framework","id":"buildercontextframework","depth":3,"charIndex":1173},{"text":"builder.context.devServer","id":"buildercontextdevserver","depth":3,"charIndex":1296},{"text":"builder.context.bundlerType","id":"buildercontextbundlertype","depth":3,"charIndex":1420},{"text":"builder.build","id":"builderbuild","depth":2,"charIndex":1498},{"text":"Development environment build","id":"development-environment-build","depth":3,"charIndex":1569},{"text":"Monitor file changes","id":"monitor-file-changes","depth":3,"charIndex":1695},{"text":"Custom Compiler","id":"custom-compiler","depth":3,"charIndex":1808},{"text":"builder.startDevServer","id":"builderstartdevserver","depth":2,"charIndex":1884},{"text":"Disable Print URLs","id":"disable-print-urls","depth":3,"charIndex":2260},{"text":"Strict Port","id":"strict-port","depth":3,"charIndex":2488},{"text":"Custom Compiler","id":"custom-compiler-1","depth":3,"charIndex":2705},{"text":"Get Port Silently","id":"get-port-silently","depth":3,"charIndex":2781},{"text":"Custom Logger","id":"custom-logger","depth":3,"charIndex":3083},{"text":"builder.serve","id":"builderserve","depth":2,"charIndex":3295},{"text":"builder.createCompiler","id":"buildercreatecompiler","depth":2,"charIndex":3619},{"text":"builder.addPlugins","id":"builderaddplugins","depth":2,"charIndex":3992},{"text":"builder.removePlugins","id":"builderremoveplugins","depth":2,"charIndex":4240},{"text":"builder.isPluginExists","id":"builderispluginexists","depth":2,"charIndex":4490},{"text":"builder.inspectConfig","id":"builderinspectconfig","depth":2,"charIndex":4591},{"text":"builder.onBeforeCreateCompiler","id":"builderonbeforecreatecompiler","depth":2,"charIndex":5091},{"text":"builder.onAfterCreateCompiler","id":"builderonaftercreatecompiler","depth":2,"charIndex":5634},{"text":"builder.onBeforeBuild","id":"builderonbeforebuild","depth":2,"charIndex":6168},{"text":"builder.onAfterBuild","id":"builderonafterbuild","depth":2,"charIndex":6716},{"text":"builder.onBeforeStartDevServer","id":"builderonbeforestartdevserver","depth":2,"charIndex":7059},{"text":"builder.onAfterStartDevServer","id":"builderonafterstartdevserver","depth":2,"charIndex":7166},{"text":"builder.onDevCompileDone","id":"builderondevcompiledone","depth":2,"charIndex":7327},{"text":"builder.onExit","id":"builderonexit","depth":2,"charIndex":7501},{"text":"builder.getBuilderConfig","id":"buildergetbuilderconfig","depth":2,"charIndex":7632},{"text":"builder.getNormalizedConfig","id":"buildergetnormalizedconfig","depth":2,"charIndex":7785},{"text":"builder.getHTMLPaths","id":"buildergethtmlpaths","depth":2,"charIndex":8241}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":2,"title":"Builder Types","content":"#\n\nThis section describes some of the type definitions provided by the Builder.\n\n\nBuilderInstance#\n\nThe type of the Builder instance.\n\n\n\nYou can pass in the Provider type through generics to make the type definition\nof the Builder instance more accurate:\n\n\n\n\nBuilderContext#\n\nThe type of the context property in the Builder instance.\n\n\n\n\nBuilderPlugin#\n\nThe type of Builder plugin, should be used with the BuilderPluginAPI type\nexported from the provider.\n\n\n\n\nBuilderTarget#\n\nThe type of build target.\n\n\n\n\nBuilderEntry#\n\nThe type of the entry option to the createBuilder method.\n\n\n\n\nCreateBuilderOptions#\n\nThe param type of createBuilder method.\n\n","routePath":"/builder/en/api/builder-types","lang":"en","toc":[{"text":"BuilderInstance","id":"builderinstance","depth":2,"charIndex":81},{"text":"BuilderContext","id":"buildercontext","depth":2,"charIndex":258},{"text":"BuilderPlugin","id":"builderplugin","depth":2,"charIndex":337},{"text":"BuilderTarget","id":"buildertarget","depth":2,"charIndex":459},{"text":"BuilderEntry","id":"builderentry","depth":2,"charIndex":505},{"text":"CreateBuilderOptions","id":"createbuilderoptions","depth":2,"charIndex":582}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":3,"title":"Dev Config","content":"#\n\nThis section describes some dev configurations in Modern.js Builder.\n\n\ndev.assetPrefix#\n\n * Type: boolean | string\n * Default: '/'\n\nSet the URL prefix of static assets in the development environment.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the development environment. In the production\nenvironment, please use the output.assetPrefix to set the URL prefix.\n\n\nBoolean Type#\n\nIf assetPrefix is set to true, the URL prefix will be http://localhost:port/:\n\n\n\nThe script URL will be:\n\n\n\nIf assetPrefix is set to false or not set, / is used as the default value.\n\n\nString type#\n\nWhen the value of assetPrefix is string type, the string will be used as the URL\nprefix:\n\n\n\nThe script URL will be:\n\n\n\n\nDifferences from Native Configuration#\n\ndev.assetPrefix corresponds to the following native configurations:\n\n * output.publicPath configuration in webpack.\n * output.publicPath configuration in Rspack.\n\nThe differences from the native configuration are as follows:\n\n * dev.assetPrefix only takes effect in the development environment.\n\n * dev.assetPrefix automatically appends a trailing / by default.\n\n * The value of dev.assetPrefix is written to the process.env.ASSET_PREFIX\n   environment variable.\n\n\ndev.beforeStartUrl#\n\n * Type: () => Promise | void\n * Default: undefined\n\ndev.beforeStartUrl is used to execute a callback function before opening the\nstartUrl, this config needs to be used together with dev.startUrl.\n\n\n\n\ndev.hmr#\n\n * Type: boolean\n * Default: true\n\nWhether to enable Hot Module Replacement.\n\nIf hmr is set to false, the HMR and react-refresh will no longer work.\n\n\n\n\ndev.host#\n\n * Type: string\n * Default: 0.0.0.0\n\nSpecify the host that the dev server listens to.\n\nBy default, the dev server will listen to 0.0.0.0, which means listening to all\nnetwork interfaces, including localhost and public network addresses.\n\nIf you want the dev server to listen only on localhost, you can set it to:\n\n\n\n\ndev.https#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nAfter configuring this option, you can enable HTTPS Dev Server, and disabling\nthe HTTP Dev Server.\n\nHTTP:\n\n\n\nHTTPS:\n\n\n\nAutomatically generate certificates#\n\nYou can directly set https to true, Builder will automatically generate the\nHTTPS certificate based on devcert.\n\nWhen using this method, you need to manually install the devcert dependency in\nyour project:\n\n\n\nThen configure dev.https to true:\n\n\n\nThe devcert has some limitations, it does not currently support IP addresses\nyet.\n\nTIP\n\nThe https proxy automatically installs the certificate and needs root authority,\nplease enter the password according to the prompt.The password is only used to\ntrust the certificate, and will not be leaked or be used elsewhere.\n\nManually set the certificate#\n\nYou can also manually pass in the certificate and the private key required in\nthe dev.https option. This parameter will be directly passed to the createServer\nmethod of the https module in Node.js.\n\nFor details, please refer to https.createServer.\n\n\n\n\ndev.port#\n\n * Type: number\n * Default: 8080\n\nSpecify a port number for Dev Server to listen.\n\nBy default, Dev Server listens on port 8080 and automatically increments the\nport number when the port is occupied.\n\n\nExample#\n\nSet the port to 3000:\n\n\n\n\ndev.progressBar#\n\n * Type:\n\n\n\n * Default: true\n\nWhether to display progress bar during compilation.\n\n\n\nIf you need to modify the text displayed on the left side of the progress bar,\nyou can set the id option:\n\n\n\n\ndev.startUrl#\n\n * Type: boolean | string | string[] | undefined\n * Default: undefined\n\ndev.startUrl is used to set the URL of the page that automatically opens in the\nbrowser when Dev Server starts.\n\nBy default, no page will be opened.\n\nYou can set it to the following values:\n\n\n\n\nPort placeholder#\n\nSince the port number may change, you can use the placeholder to refer to the\ncurrent port number, and Builder will automatically replace the placeholder with\nthe actual listening port number.\n\n\n\n\nOpen the specified browser#\n\nOn MacOS, you can open the specified browser when Dev Server starts, by set\nenvironment variable BROWSER, support values:\n\n * Google Chrome Canary\n * Google Chrome Dev\n * Google Chrome Beta\n * Google Chrome\n * Microsoft Edge\n * Brave Browser\n * Vivaldi\n * Chromium","routePath":"/builder/en/api/config-dev","lang":"en","toc":[{"text":"dev.assetPrefix","id":"devassetprefix","depth":2,"charIndex":73},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":567},{"text":"String type","id":"string-type","depth":3,"charIndex":767},{"text":"Differences from Native Configuration","id":"differences-from-native-configuration","depth":3,"charIndex":901},{"text":"dev.beforeStartUrl","id":"devbeforestarturl","depth":2,"charIndex":1406},{"text":"dev.hmr","id":"devhmr","depth":2,"charIndex":1628},{"text":"dev.host","id":"devhost","depth":2,"charIndex":1791},{"text":"dev.https","id":"devhttps","depth":2,"charIndex":2119},{"text":"Automatically generate certificates","id":"automatically-generate-certificates","depth":4,"charIndex":2318},{"text":"Manually set the certificate","id":"manually-set-the-certificate","depth":4,"charIndex":2919},{"text":"dev.port","id":"devport","depth":2,"charIndex":3202},{"text":"Example","id":"example","depth":3,"charIndex":3414},{"text":"dev.progressBar","id":"devprogressbar","depth":2,"charIndex":3450},{"text":"dev.startUrl","id":"devstarturl","depth":2,"charIndex":3663},{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":3944},{"text":"Open the specified browser","id":"open-the-specified-browser","depth":3,"charIndex":4160}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":4,"title":"Experiments Config","content":"#\n\nThis section describes some experimental configs in the Builder, which can\nenable unstable features in Builder.\n\nIf you meet issues with experimental features, please disable the config first\nand report through GitHub Issues.\n\n\nexperiments.lazyCompilation#\n\n * Type:\n\n\n\n * Default: false\n\nUsed to enable the lazy compilation (i.e. compile on demand). When this config\nis enabled, Builder will compile entrypoints and dynamic imports only when they\nare used. It will improve the compilation startup time of the project.\n\nLazy compilation only takes effect in the development.\n\n\nLazy Compilation for Dynamic Imports#\n\nLazy compile async modules introduced by dynamic import:\n\n\n\nWhen imports option is enabled, all async modules will only be compiled when\nrequested. If your project is a single-page application, and routing is split\nthrough dynamic import, there will be a significant effect of speeding up\ncompilation.\n\n\nLazy Compilation for Entires#\n\nIn addition to lazy compilation for async modules, you can also choose to lazily\ncompile both entries and async modules at the same time.\n\n\n\nThe above config can also be simplified to:\n\n\n\nWhen entries option is enabled, all pages will not be compiled when the\ncompilation is started, and the page will be compiled only when you visit it.\n\nWhen using lazy compilation for entries, there are some considerations:\n\n * Only work for multi-page applications, no work for single-page applications.\n * when you visit a page, there will be a white screen for a period of time due\n   to waiting for the page to be compiled.\n\n\nLimitations#\n\nDisable split chunks#\n\nWhen you enable lazy compilation, in order to ensure the compilation results,\nBuilder will disable split chunks in the development. This will not affect the\nbuild results in the production, but will cause a difference between the build\nresults of the development and production.\n\nUse proxy#\n\nLazy Compilation relies on the local development server of webpack. When you\nproxy a domain name to localhost, Lazy Compilation will not work properly.\nTherefore, if you need to develop with proxy, please disable Lazy Compilation.\n\nOther Potential Issues#\n\nConsidering that Lazy Compilation is still an experimental feature of webpack,\nyou may encounter some potential issues while using it, such as changes in the\nbehavior of compiled artifacts or compilation errors.\n\nWhen you encounter these issues, you can refer to webpack Issues to find\nsolutions or disable the lazyCompilation configuration option.\n\n\nexperiments.sourceBuild#\n\n * Type: boolean | PluginSourceBuildOptions\n * Default: false\n * Version: MAJOR_VERSION.46.0\n\nUsed to enable the ability for source code building. When this configuration\noption is enabled, Builder will read the source code files corresponding to the\nsource field in the sub-project's package.json and compile them.\n\n\n\nMore detail can see \"Source Code Build Mode\"。\n\n\nOptions#\n\nexperiments.sourceBuild is implemented based on Rsbuild's Source Build plugin.\nYou can pass plugin options like this:\n\n","routePath":"/builder/en/api/config-experiments","lang":"en","toc":[{"text":"experiments.lazyCompilation","id":"experimentslazycompilation","depth":2,"charIndex":230},{"text":"Lazy Compilation for Dynamic Imports","id":"lazy-compilation-for-dynamic-imports","depth":3,"charIndex":579},{"text":"Lazy Compilation for Entires","id":"lazy-compilation-for-entires","depth":3,"charIndex":922},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1570},{"text":"Disable split chunks","id":"disable-split-chunks","depth":4,"charIndex":1584},{"text":"Use proxy","id":"use-proxy","depth":4,"charIndex":1887},{"text":"Other Potential Issues","id":"other-potential-issues","depth":4,"charIndex":2131},{"text":"experiments.sourceBuild","id":"experimentssourcebuild","depth":2,"charIndex":2507},{"text":"Options","id":"options","depth":3,"charIndex":2900}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":5,"title":"Html Config","content":"#\n\nThis section describes some HTML configurations in Modern.js Builder.\n\n\nhtml.appIcon#\n\n * Type: string\n * Default: undefined\n\nSet the file path of the apple-touch-icon icon for the iOS system, can be set as\na relative path relative to the project root directory, or as an absolute path\nto the file. Setting it as a CDN URL is not currently supported.\n\nAfter config this option, the icon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\n\n\nSet to an absolute path:\n\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n\n\nhtml.crossorigin#\n\n * Type: boolean | 'anonymous' | 'use-credentials'\n * Default: false\n\nSet the crossorigin attribute of the\n\nThe","routePath":"/builder/en/api/config-html","lang":"en","toc":[{"text":"html.appIcon","id":"htmlappicon","depth":2,"charIndex":74},{"text":"Example","id":"example","depth":3,"charIndex":524},{"text":"html.crossorigin","id":"htmlcrossorigin","depth":2,"charIndex":672},{"text":"Example","id":"example-1","depth":3,"charIndex":-1},{"text":"Optional Values","id":"optional-values","depth":3,"charIndex":-1},{"text":"html.disableHtmlFolder","id":"htmldisablehtmlfolder","depth":2,"charIndex":-1},{"text":"Example","id":"example-2","depth":3,"charIndex":524},{"text":"html.favicon","id":"htmlfavicon","depth":2,"charIndex":-1},{"text":"Example","id":"example-3","depth":3,"charIndex":-1},{"text":"html.faviconByEntries","id":"htmlfaviconbyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-4","depth":3,"charIndex":524},{"text":"html.inject","id":"htmlinject","depth":2,"charIndex":-1},{"text":"Default inject position","id":"default-inject-position","depth":4,"charIndex":-1},{"text":"Inject into body","id":"inject-into-body","depth":4,"charIndex":-1},{"text":"html.injectByEntries","id":"htmlinjectbyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-5","depth":3,"charIndex":-1},{"text":"html.meta","id":"htmlmeta","depth":2,"charIndex":-1},{"text":"Example","id":"example-6","depth":3,"charIndex":524},{"text":"html.metaByEntries","id":"htmlmetabyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-7","depth":3,"charIndex":-1},{"text":"html.mountId","id":"htmlmountid","depth":2,"charIndex":-1},{"text":"Example","id":"example-8","depth":3,"charIndex":524},{"text":"Notes","id":"notes","depth":3,"charIndex":-1},{"text":"Update Relevant Code","id":"update-relevant-code","depth":4,"charIndex":-1},{"text":"Custom Templates","id":"custom-templates","depth":4,"charIndex":-1},{"text":"html.scriptLoading","id":"htmlscriptloading","depth":2,"charIndex":-1},{"text":"defer","id":"defer","depth":3,"charIndex":-1},{"text":"blocking","id":"blocking","depth":3,"charIndex":-1},{"text":"module","id":"module","depth":3,"charIndex":-1},{"text":"html.tags","id":"htmltags","depth":2,"charIndex":-1},{"text":"Tag Object","id":"tag-object","depth":4,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":4,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":4,"charIndex":-1},{"text":"html.tagsByEntries","id":"htmltagsbyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-9","depth":3,"charIndex":-1},{"text":"html.template","id":"htmltemplate","depth":2,"charIndex":-1},{"text":"Example","id":"example-10","depth":3,"charIndex":524},{"text":"html.templateByEntries","id":"htmltemplatebyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-11","depth":3,"charIndex":-1},{"text":"html.templateParameters","id":"htmltemplateparameters","depth":2,"charIndex":-1},{"text":"html.templateParametersByEntries","id":"htmltemplateparametersbyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-12","depth":3,"charIndex":524},{"text":"html.title","id":"htmltitle","depth":2,"charIndex":-1},{"text":"html.titleByEntries","id":"htmltitlebyentries","depth":2,"charIndex":-1},{"text":"Example","id":"example-13","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":6,"title":"Output Config","content":"","routePath":"/builder/en/api/config-output","lang":"en","toc":[{"text":"output.assetPrefix","id":"outputassetprefix","depth":2,"charIndex":-1},{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Differences from Native Configuration","id":"differences-from-native-configuration","depth":3,"charIndex":-1},{"text":"output.assetsRetry","id":"outputassetsretry","depth":2,"charIndex":-1},{"text":"Example","id":"example-1","depth":3,"charIndex":-1},{"text":"output.charset","id":"outputcharset","depth":2,"charIndex":-1},{"text":"output.cleanDistPath","id":"outputcleandistpath","depth":2,"charIndex":-1},{"text":"output.convertToRem","id":"outputconverttorem","depth":2,"charIndex":-1},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":-1},{"text":"Object Type","id":"object-type","depth":3,"charIndex":-1},{"text":"Example","id":"example-2","depth":3,"charIndex":-1},{"text":"output.copy","id":"outputcopy","depth":2,"charIndex":-1},{"text":"output.cssModules","id":"outputcssmodules","depth":2,"charIndex":-1},{"text":"cssModules.auto","id":"cssmodulesauto","depth":3,"charIndex":-1},{"text":"cssModules.exportLocalsConvention","id":"cssmodulesexportlocalsconvention","depth":3,"charIndex":-1},{"text":"output.cssModuleLocalIdentName","id":"outputcssmodulelocalidentname","depth":2,"charIndex":-1},{"text":"Default Value","id":"default-value","depth":3,"charIndex":-1},{"text":"Template String","id":"template-string","depth":3,"charIndex":-1},{"text":"Example","id":"example-3","depth":3,"charIndex":-1},{"text":"output.dataUriLimit","id":"outputdataurilimit","depth":2,"charIndex":-1},{"text":"Example","id":"example-4","depth":3,"charIndex":-1},{"text":"output.disableCssExtract","id":"outputdisablecssextract","depth":2,"charIndex":-1},{"text":"Example","id":"example-5","depth":3,"charIndex":-1},{"text":"output.disableCssModuleExtension","id":"outputdisablecssmoduleextension","depth":2,"charIndex":-1},{"text":"Example","id":"example-6","depth":3,"charIndex":-1},{"text":"Detailed","id":"detailed","depth":3,"charIndex":-1},{"text":"disableCssModuleExtension is false (default)","id":"disablecssmoduleextension-is-false-default","depth":4,"charIndex":-1},{"text":"disableCssModuleExtension is true","id":"disablecssmoduleextension-is-true","depth":4,"charIndex":-1},{"text":"output.distPath","id":"outputdistpath","depth":2,"charIndex":-1},{"text":"Root Directory","id":"root-directory","depth":3,"charIndex":-1},{"text":"Example","id":"example-7","depth":3,"charIndex":-1},{"text":"output.disableMinimize","id":"outputdisableminimize","depth":2,"charIndex":-1},{"text":"output.disableSourceMap","id":"outputdisablesourcemap","depth":2,"charIndex":-1},{"text":"output.disableSvgr","id":"outputdisablesvgr","depth":2,"charIndex":-1},{"text":"output.disableTsChecker","id":"outputdisabletschecker","depth":2,"charIndex":-1},{"text":"Blocking Compilation","id":"blocking-compilation","depth":3,"charIndex":-1},{"text":"Example","id":"example-8","depth":3,"charIndex":-1},{"text":"output.disableFilenameHash","id":"outputdisablefilenamehash","depth":2,"charIndex":-1},{"text":"Example","id":"example-9","depth":3,"charIndex":-1},{"text":"output.disableInlineRuntimeChunk","id":"outputdisableinlineruntimechunk","depth":2,"charIndex":-1},{"text":"Disable Inlining","id":"disable-inlining","depth":3,"charIndex":-1},{"text":"Merge Into Page Chunk","id":"merge-into-page-chunk","depth":3,"charIndex":-1},{"text":"output.enableAssetManifest","id":"outputenableassetmanifest","depth":2,"charIndex":-1},{"text":"Example","id":"example-10","depth":3,"charIndex":-1},{"text":"output.enableAssetFallback","id":"outputenableassetfallback","depth":2,"charIndex":-1},{"text":"Example","id":"example-11","depth":3,"charIndex":-1},{"text":"output.enableLatestDecorators","id":"outputenablelatestdecorators","depth":2,"charIndex":-1},{"text":"output.enableCssModuleTSDeclaration","id":"outputenablecssmoduletsdeclaration","depth":2,"charIndex":-1},{"text":"Example","id":"example-12","depth":3,"charIndex":-1},{"text":"output.enableInlineScripts","id":"outputenableinlinescripts","depth":2,"charIndex":-1},{"text":"Example","id":"example-13","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1},{"text":"Using Function","id":"using-function","depth":3,"charIndex":-1},{"text":"output.enableInlineStyles","id":"outputenableinlinestyles","depth":2,"charIndex":-1},{"text":"Example","id":"example-14","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp-1","depth":3,"charIndex":-1},{"text":"Using Function","id":"using-function-1","depth":3,"charIndex":-1},{"text":"output.externals","id":"outputexternals","depth":2,"charIndex":-1},{"text":"Example","id":"example-15","depth":3,"charIndex":-1},{"text":"output.filename","id":"outputfilename","depth":2,"charIndex":-1},{"text":"Example","id":"example-16","depth":3,"charIndex":-1},{"text":"Filename of Async Modules","id":"filename-of-async-modules","depth":3,"charIndex":-1},{"text":"output.legalComments","id":"outputlegalcomments","depth":2,"charIndex":-1},{"text":"Example","id":"example-17","depth":3,"charIndex":-1},{"text":"output.overrideBrowserslist","id":"outputoverridebrowserslist","depth":2,"charIndex":-1},{"text":"Priority","id":"priority","depth":4,"charIndex":-1},{"text":"Default Value","id":"default-value-1","depth":4,"charIndex":-1},{"text":"Example","id":"example-18","depth":3,"charIndex":-1},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":-1},{"text":"output.polyfill","id":"outputpolyfill","depth":2,"charIndex":-1},{"text":"Config","id":"config","depth":3,"charIndex":-1},{"text":"entry","id":"entry","depth":4,"charIndex":-1},{"text":"usage","id":"usage","depth":4,"charIndex":-1},{"text":"ua","id":"ua","depth":4,"charIndex":-1},{"text":"off","id":"off","depth":4,"charIndex":-1},{"text":"output.svgDefaultExport","id":"outputsvgdefaultexport","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":7,"title":"Performance Config","content":"#\n\nThis section describes some performance related configurations in Modern.js\nBuilder.\n\n\nperformance.buildCache#\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Bundler: only support webpack\n\nControls the Builder's caching behavior during the build process.\n\nBuilder will enable build cache by default to improve the compile speed, the\ngenerated cache files are write to the ./node_modules/.cache/webpack directory\nby default.\n\nYou can configure the cache path with buildCache, e.g.\n\n\n\nYou can also disable the build cache by setting it to false:\n\n\n\n\ncacheDigest#\n\ncacheDigest is used to add some environment variables that will affect the build\nresults. The Builder will set the cache name based on the cacheDigest content\nand the current build mode to ensure that different cacheDigests can hit\ndifferent caches.\n\nExample#\n\nThe current project needs to set different extensions according to different\nAPP_ID. By default, since the code & configuration & dependencies of the current\nproject have not changed, the previous cache will be hit.\n\nBy adding APP_ID to cacheDigest, different cache results will be searched when\nAPP_ID changes, thereby avoiding hitting cache results that do not meet\nexpectations.\n\n\n\n\nperformance.bundleAnalyze#\n\n * Type: Object | undefined\n\nUsed to enable the webpack-bundle-analyzer plugin to analyze the size of the\noutput.\n\nBy default, Builder does not enable webpack-bundle-analyzer. When this feature\nis enabled, the default configuration is as follows:\n\n\n\n\nEnable Bundle Analyze#\n\nYou have two ways to enable webpack-bundle-analyzer to analyze the size of the\noutput files:\n\n * Add the environment variable BUNDLE_ANALYZE=true, for example:\n\n\n\n * Configure performance.bundleAnalyze to enable it permanently:\n\n\n\nAfter enabling it, Builder will generate an HTML file that analyzes the size of\nthe output files, and print the following log in the Terminal:\n\n\n\nYou can manually open the file in the browser and view the detail of the bundle\nsize. When an area is larger, it indicates that its corresponding bundle size is\nlarger.\n\n\n\n\nOverride Default Configuration#\n\nYou can override the default configuration through performance.bundleAnalyze,\nsuch as enabling the server mode:\n\n\n\n\nSize Types#\n\nIn the webpack-bundle-analyzer panel, you can control size types in the upper\nleft corner (default is Parsed):\n\n * Stat: The size obtained from the stats object of the bundler, which reflects\n   the size of the code before minification.\n * Parsed: The size of the file on the disk, which reflects the size of the code\n   after minification.\n * Gzipped: The file size requested in the browser reflects the size of the code\n   after minification and gzip.\n\n\nGenerate stats.json#\n\nBy setting generateStatsFile to true, stats JSON file will be generated in\nbundle output directory.\n\n\n\n\nNotes#\n\n 1. Enabling the server mode will cause the build process to not exit normally.\n\n 2. Enabling bundleAnalyzer will reduce build speed. Therefore, this\n    configuration should not be enabled during daily development, and it is\n    recommended to enable it on demand through the BUNDLE_ANALYZE environment\n    variable.\n\n 3. Since no code minification and other optimizations are performed in the dev\n    phase, the real output size cannot be reflected, so it is recommended to\n    analyze the output size in the build phase.\n\n\nperformance.chunkSplit#\n\n * Type: Object\n * Default: { strategy: 'split-by-experience' }\n\nperformance.chunkSplit is used to configure the chunk splitting strategy. The\ntype of ChunkSplit is as follows:\n\n\n\n\nchunkSplit.strategy#\n\nBuilder supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n\n * split-by-size: automatically split according to module size.\n\n * all-in-one: bundle all codes into one chunk.\n\n * single-vendor: bundle all NPM packages into a single chunk.\n\n * custom: custom chunk splitting strategy.\n\n\nDefault Strategy#\n\nBuilder adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @babel/runtime, @swc/helpers, tslib.\n * lib-react.js: includes react, react-dom.\n * lib-router.js: includes react-router, react-router-dom, history,\n   @remix-run/router.\n * lib-lodash.js: includes lodash, lodash-es.\n * lib-antd.js: includes antd.\n * lib-arco.js: includes @arco-design/web-react.\n * lib-semi.js: includes @douyinfe/semi-ui.\n\nTIP\n\nIf the above npm packages are not installed or used in the project, the\ncorresponding chunk will not be generated.\n\nIf you want to use other splitting strategies, you can specify it via\nperformance.chunkSplit.strategy.\n\nTIP\n\nThe split-by-module strategy is not supported when using Rspack as the bundler.\n\n\nchunkSplit.minSize#\n\n * Type: number\n * Default: 10000\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nminimum size of a chunk via performance.chunkSplit.minSize, the unit is bytes.\nThe default value is 10000. For example:\n\n\n\n\nchunkSplit.maxSize#\n\n * Type: number\n * Default: Infinity\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nmaximum size of a chunk via performance.chunkSplit.maxSize, the unit is bytes.\nThe default value is Infinity. For example:\n\n\n\n\nchunkSplit.forceSplitting#\n\n * Type: RegExp[] | Record\n * Default: []\n\nVia performance.chunkSplit.forceSplitting, you can specify the NPM packages that\nneed to be forced to split.\n\nFor example, split the axios library under node_modules into axios.js:\n\n\n\nThis is an easier way than configuring webpack's splitChunks directly.\n\nTIP\n\nChunks split using the forceSplitting configuration will be inserted into the\nHTML file as resources requested for the initial screen using","routePath":"/builder/en/api/config-performance","lang":"en","toc":[{"text":"performance.buildCache","id":"performancebuildcache","depth":2,"charIndex":89},{"text":"cacheDigest","id":"cachedigest","depth":3,"charIndex":534},{"text":"Example","id":"example","depth":4,"charIndex":799},{"text":"performance.bundleAnalyze","id":"performancebundleanalyze","depth":2,"charIndex":1195},{"text":"Enable Bundle Analyze","id":"enable-bundle-analyze","depth":3,"charIndex":1474},{"text":"Override Default Configuration","id":"override-default-configuration","depth":3,"charIndex":2048},{"text":"Size Types","id":"size-types","depth":3,"charIndex":2197},{"text":"Generate stats.json","id":"generate-statsjson","depth":3,"charIndex":2666},{"text":"Notes","id":"notes","depth":3,"charIndex":2792},{"text":"performance.chunkSplit","id":"performancechunksplit","depth":2,"charIndex":3326},{"text":"chunkSplit.strategy","id":"chunksplitstrategy","depth":3,"charIndex":3532},{"text":"Default Strategy","id":"default-strategy","depth":3,"charIndex":4081},{"text":"chunkSplit.minSize","id":"chunksplitminsize","depth":3,"charIndex":5041},{"text":"chunkSplit.maxSize","id":"chunksplitmaxsize","depth":3,"charIndex":5296},{"text":"chunkSplit.forceSplitting","id":"chunksplitforcesplitting","depth":3,"charIndex":5557},{"text":"chunkSplit.splitChunks","id":"chunksplitsplitchunks","depth":3,"charIndex":-1},{"text":"chunkSplit.override","id":"chunksplitoverride","depth":3,"charIndex":-1},{"text":"performance.dnsPrefetch","id":"performancednsprefetch","depth":2,"charIndex":-1},{"text":"Example","id":"example-1","depth":3,"charIndex":-1},{"text":"performance.preconnect","id":"performancepreconnect","depth":2,"charIndex":-1},{"text":"Example","id":"example-2","depth":3,"charIndex":799},{"text":"performance.prefetch","id":"performanceprefetch","depth":2,"charIndex":-1},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":-1},{"text":"Object Type","id":"object-type","depth":3,"charIndex":-1},{"text":"prefetch.type","id":"prefetchtype","depth":4,"charIndex":-1},{"text":"Example","id":"example-3","depth":4,"charIndex":-1},{"text":"performance.preload","id":"performancepreload","depth":2,"charIndex":-1},{"text":"Boolean Type","id":"boolean-type-1","depth":3,"charIndex":-1},{"text":"Object Type","id":"object-type-1","depth":3,"charIndex":-1},{"text":"preload.type","id":"preloadtype","depth":4,"charIndex":-1},{"text":"Example","id":"example-4","depth":4,"charIndex":799},{"text":"performance.printFileSize","id":"performanceprintfilesize","depth":2,"charIndex":-1},{"text":"Example","id":"example-5","depth":3,"charIndex":-1},{"text":"performance.profile","id":"performanceprofile","depth":2,"charIndex":-1},{"text":"Example","id":"example-6","depth":3,"charIndex":799},{"text":"performance.removeConsole","id":"performanceremoveconsole","depth":2,"charIndex":-1},{"text":"Remove all consoles","id":"remove-all-consoles","depth":4,"charIndex":-1},{"text":"Remove specific console","id":"remove-specific-console","depth":4,"charIndex":-1},{"text":"performance.removeMomentLocale","id":"performanceremovemomentlocale","depth":2,"charIndex":-1},{"text":"performance.transformLodash","id":"performancetransformlodash","depth":2,"charIndex":-1},{"text":"Example","id":"example-7","depth":3,"charIndex":-1},{"text":"Disabling the Transformation","id":"disabling-the-transformation","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":8,"title":"Security Config","content":"#\n\nThis section describes some security related configurations in Modern.js\nBuilder.\n\n\nsecurity.sri#\n\n * Type:\n\n\n\n * Default: undefined\n * Bundler: only support webpack\n\nAdding an integrity attribute (integrity) to sub-resources introduced by HTML\nallows the browser to verify the integrity of the introduced resource, thus\npreventing tampering with the downloaded resource.\n\nEnabling this option will set the webpack output.crossOriginLoading\nconfiguration option to anonymous.\n\nIntroduce SRI#\n\nSubresource Integrity (SRI) is a security feature that enables browsers to\nverify that resources they fetch (for example, from a CDN) are delivered without\nunexpected manipulation. It works by allowing you to provide a cryptographic\nhash that a fetched resource must match.\n\nFor script tags, the result is to refuse to execute the code; for CSS links, the\nresult is not to load the styles.\n\nFor more on subresource integrity, see Subresource Integrity - MDN.\n\nExample#\n\nBy default, SRI is not turned on, and when it is, its default configuration is\nas follows:\n\n\n\nYou can customize the configuration options according to your own needs:\n\n\n\n\nsecurity.checkSyntax#\n\n * Type:\n\n\n\n * Default: false\n\nUsed to analyze whether there is incompatible advanced syntax in the build\nartifacts under the current browser scope. If any incompatible syntax is found,\ndetailed information will be printed to the terminal.\n\n\nEnable Detection#\n\nYou can set checkSyntax to true to enable syntax checking.\n\n\n\nWhen you enable checkSyntax, Builder will perform the detection during\nproduction builds. If any incompatible advanced syntax is detected in the build\nartifacts, error logs will be printed to the terminal, and the current build\nprocess will be terminated.\n\n\nError Logs#\n\nThe format of the error logs is as follows, including the source file, artifact\nlocation, error reason, and source code:\n\n\n\nTIP\n\nCurrently, syntax checking is implemented based on AST parser. Each time it\nperforms a check, it can only identify the first incompatible syntax found in\nthe file. If there are multiple incompatible syntaxes in the file, you need to\nfix the detected syntax and re-run the check.output.disableMinimize to true and\nrebuild again.\n\nIf the corresponding source location is not shown in the log, try setting\n\n\nSolutions#\n\nIf a syntax error is detected, you can handle it in the following ways:\n\n * If you want to downgrade this syntax to ensure good code compatibility, you\n   can compile the corresponding module through the source.include config.\n * If you don't want to downgrade the syntax, you can adjust the project's\n   browserslist to match the syntax.\n * If you do not want to check the syntax of certain products, you can use the\n   checkSyntax.exclude configuration to exclude the files to be checked.\n\n\nOptions#\n\ncheckSyntax.targets#\n\n * Type: string[]\n * Default: The browserslist configuration of the current project\n\ntargets is the target browser range of the project. Its value is a standard\nbrowserslist array. If you are not familiar with the usage of browserslist,\nplease refer to \"Browserslist\".\n\nBuilder will read the value of targets and automatically deduce the minimum\nECMAScript syntax version that can be used in the build artifacts, such as ES5\nor ES6.\n\n * Example:\n\nFor example, if the target browsers to be compatible with in the project are\nChrome 53 and later versions, you can add the following configuration:\n\n\n\nBuilder will deduce that the ECMAScript syntax version that can be used with\nchrome >= 53 is ES6. When the build artifacts contain ES2016 or higher syntax,\nit triggers syntax error prompts.\n\nTIP\n\nPlease note that Builder does not support automatic analysis of syntax versions\nabove ES6 based on targets. If the syntax version compatible with your build\nartifacts exceeds ES6, please use checkSyntax.ecmaVersion to set it.\n\ncheckSyntax.ecmaVersion#\n\n * Type: 3 | 5 | 6 | 2015 | 2016 | 2017 | 2018 | 2019 | 2020 | 2021 | 2022 |\n   'latest'\n * Default: Automatically analyzed based on targets\n\necmaVersion represents the minimum ECMAScript syntax version that can be used in\nthe build artifact. The priority of ecmaVersion is higher than targets.\n\n * Example:\n\nFor example, if the minimum ECMAScript syntax version that can be used in the\nbuild artifacts is ES2020, you can add the following configuration:\n\n\n\nAt this time, the build artifacts can include all syntax supported by ES2020,\nsuch as optional chaining.\n\ncheckSyntax.exclude#\n\n * Type: RegExp | RegExp[]\n * Default: undefined\n\nexclude is used to exclude a portion of files during detection. You can pass in\none or more regular expressions to match the paths of source files. Files that\nmatch the regular expression will be ignored and will not trigger syntax\nchecking.\n\n * Example:\n\nFor example, to ignore files under the node_modules/foo directory:\n\n","routePath":"/builder/en/api/config-security","lang":"en","toc":[{"text":"security.sri","id":"securitysri","depth":2,"charIndex":86},{"text":"Introduce SRI","id":"introduce-sri","depth":4,"charIndex":479},{"text":"Example","id":"example","depth":4,"charIndex":955},{"text":"security.checkSyntax","id":"securitychecksyntax","depth":2,"charIndex":1136},{"text":"Enable Detection","id":"enable-detection","depth":3,"charIndex":1401},{"text":"Error Logs","id":"error-logs","depth":3,"charIndex":1740},{"text":"Solutions","id":"solutions","depth":3,"charIndex":2287},{"text":"Options","id":"options","depth":3,"charIndex":2792},{"text":"checkSyntax.targets","id":"checksyntaxtargets","depth":4,"charIndex":2802},{"text":"checkSyntax.ecmaVersion","id":"checksyntaxecmaversion","depth":4,"charIndex":3845},{"text":"checkSyntax.exclude","id":"checksyntaxexclude","depth":4,"charIndex":4435}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":9,"title":"Source Config","content":"#\n\nThis section describes configs related to source code parsing and compilation in\nModern.js Builder.\n\n\nsource.alias#\n\n * Type: Record | Function\n * Default: undefined\n\nCreate aliases to import or require certain modules, same as the resolve.alias\nconfig of webpack and Rspack.\n\nTIP\n\nFor TypeScript projects, you only need to configure compilerOptions.paths in the\ntsconfig.json file. The Builder will automatically recognize it, so there is no\nneed to configure the source.alias option separately. For more details, please\nrefer to Path Aliases.\n\n\nObject Type#\n\nThe alias can be an Object, and the relative path will be automatically\nconverted to absolute path.\n\n\n\nWith above configuration, if @common/Foo.tsx is import in the code, it will be\nmapped to the /src/common/Foo.tsx path.\n\n\nFunction Type#\n\nThe alias can be a function, it will accept the previous alias object, and you\ncan modify it.\n\n\n\nYou can also return a new object as the final result in the function, which will\nreplace the previous alias object.\n\n\n\n\nExact Matching#\n\nBy default, source.alias will automatically match sub-paths, for example, with\nthe following configuration:\n\n\n\nIt will match as follows:\n\n\n\nYou can add the $ symbol to enable exact matching, which will not automatically\nmatch sub-paths.\n\n\n\nIt will match as follows:\n\n\n\n\nHandling npm packages#\n\nYou can use alias to resolve an npm package to a specific directory.\n\nFor example, if multiple versions of the react are installed in the project, you\ncan alias react to the version installed in the root node_modules directory to\navoid bundling multiple copies of the React code.\n\n\n\nWhen using alias to handle npm packages, please be aware of whether different\nmajor versions of the package are being used in the project.\n\nFor example, if a module or npm dependency in your project uses the React 18\nAPI, and you alias React to version 17, the module will not be able to reference\nthe React 18 API, resulting in code exceptions.\n\n\nsource.aliasStrategy#\n\n * Type: 'prefer-tsconfig' | 'prefer-alias'\n * Default: 'prefer-tsconfig'\n\nsource.aliasStrategy is used to control the priority between the paths option in\ntsconfig.json and the alias option in the bundler.\n\n\nprefer-tsconfig#\n\nBy default, source.aliasStrategy is set to 'prefer-tsconfig'. In this case, both\nthe paths option in tsconfig.json and the alias option in the bundler will take\neffect, but the paths option in tsconfig has a higher priority.\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * source.alias:\n\n\n\nSince the tsconfig paths have a higher priority, the following will happen:\n\n * @common will use the value defined in tsconfig paths, pointing to\n   ./src/common-1\n * @utils will use the value defined in source.alias, pointing to ./src/utils\n\n\nprefer-alias#\n\nIf the value of source.aliasStrategy is set to prefer-alias, the paths option in\ntsconfig.json will only be used to provide TypeScript type definitions and will\nnot affect the bundling result. In this case, the bundler will only read the\nalias option as the path alias.\n\n\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * source.alias:\n\n\n\nSince the tsconfig paths are only used to provide types, only the @common alias\nwill be effective, pointing to the ./src/common-2 directory.\n\nIn most cases, you don't need to use prefer-alias, but you can consider using it\nif you need to dynamically generate some alias configurations. For example,\ngenerating the alias option based on environment variables:\n\n\n\n\nsource.include#\n\n * Type: RuleSetCondition[]\n * Default:\n\n\n\nThe source.include is used to specify additional JavaScript files that need to\nbe compiled.\n\nTo avoid redundant compilation, by default, Rsbuild only compiles JavaScript\nfiles in the current directory and TypeScript and JSX files in all directories.\nIt does not compile JavaScript files under node_modules.\n\nThrough the source.include config, you can specify directories or modules that\nneed to be compiled by Rsbuild. The usage of source.include is consistent with\nRule.include in Rspack, which supports passing in strings or regular expressions\nto match the module path.\n\nFor example:\n\n\n\n\nCompile Npm Packages#\n\nA typical usage scenario is to compile npm packages under node_modules, because\nsome third-party dependencies have ES6+ syntax, which may cause them to fail to\nrun on low-version browsers. You can solve the problem by using this config to\nspecify the dependencies that need to be compiled.\n\nTake query-string as an example, you can add the following config:\n\n\n\nThe above two methods match the absolute paths of files using \"path prefixes\"\nand \"regular expressions\" respectively. It is worth noting that all referenced\nmodules in the project will be matched. Therefore, you should avoid using overly\nloose values for matching to prevent compilation performance issues or\ncompilation errors.\n\n\nCompile Sub Dependencies#\n\nWhen you compile an npm package via source.include, Builder will only compile\nthe matching module by default, not the Sub Dependencies of the module.\n\nTake query-string for example, it depends on the decode-uri-component package,\nwhich also has ES6+ code, so you need to add the decode-uri-component package to\nsource.include as well.\n\n\n\n\nCompile Libraries in Monorepo#\n\nWhen developing in Monorepo, if you need to refer to the source code of other\nlibraries in Monorepo, you can add the corresponding library to source.include:\n\n\n\n\nCompile CommonJS Module#\n\nBabel cannot compile CommonJS modules by default, and if you compile a CommonJS\nmodule, you may get a runtime error message exports is not defined.\n\nWhen you need to compile a CommonJS module using source.include, you can set\nBabel's sourceType configuration to unambiguous.\n\n\n\nSetting sourceType to unambiguous may have some other effects, please refer to\nBabel official documentation.\n\n\nMatching Symlink#\n\nIf you match a module that is symlinked to the current project, then you need to\nmatch the real path of the module, not the symlinked path.\n\nFor example, if you symlink the packages/foo path in Monorepo to the\nnode_modules/foo path of the current project, you need to match the packages/foo\npath, not the node_modules/foo path.\n\nThis behavior can be controlled via webpack's resolve.symlinks config.\n\n\nPrecautions#\n\nNote that source.include should not be used to compile the entire node_modules\ndirectory. For example, the following usage is wrong:\n\n\n\nIf you compile the entire node_modules, not only will the build time be greatly\nincreased, but also unexpected errors may occur. Because most of the npm\npackages in node_modules are already compiled, there is usually no need for a\nsecond compilation. In addition, exceptions may occur after npm packages such as\ncore-js are compiled.\n\n\nsource.exclude#\n\n * Type: Array\n * Default: []\n\nSpecifies JavaScript/TypeScript files that do not need to be compiled. The usage\nis consistent with Rule.exclude in webpack, which supports passing in strings or\nregular expressions to match the module path.\n\nFor example:\n\n\n\n\nsource.define#\n\n * Type: Record\n * Default: {}\n\nReplaces variables in your code with other values or expressions at compile\ntime. This can be useful for allowing different behavior between development\nbuilds and production builds.\n\nEach key passed into options is an identifier or multiple identifiers joined\nwith ..\n\n * If the value is a string it will be used as a code fragment.\n * If the value isn't a string, it will be stringified (including functions).\n * If the value is an object all keys are defined the same way.\n * If you prefix typeof to the key, it's only defined for typeof calls.\n\nFor more information please visit webpack - DefinePlugin.\n\nTIP\n\nWhen using Rspack as the bundler, the supported types can be found in\nRspack.builtins.define.\n\n\nExample#\n\n\n\nExpressions will be replaced with the corresponding code fragments:\n\n\n\n\nsource.globalVars#\n\n * Type: Record | Function\n * Default:\n\n\n\nUsed to define global variables. It can replace expressions like process.env.FOO\nin your code after compile. Such as:\n\n\n\n\nExample#\n\nIn the following example, the ENABLE_VCONSOLE and APP_CONTEXT are injected into\nthe code:\n\n\n\nYou can use them directly in your code:\n\n\n\n\nFunction Usage#\n\n * Type:\n\n\n\nYou can set source.globalVars to a function to dynamically setting some\nenvironment variables.\n\nFor example, dynamically set according to the build target:\n\n\n\n\nDifference with define#\n\nYou can take source.globalVars as the syntax sugar of source.define, the only\ndifference is that source.globalVars will automatically stringify the value,\nwhich makes it easier to set the value of global variables. The values of\nglobalVars should be JSON-safe to ensure it can be serialized.\n\n\n\n\nPrecautions#\n\nsource.globalVars injects environment variables through string replacement, so\nit cannot take effect on dynamic syntaxes such as destructuring.\n\nWhen using destructuring assignment, Builder will not be able to determine\nwhether the variable NODE_ENV is associated with the expression\nprocess.env.NODE_ENV to be replaced, so the following usage is invalid:\n\n\n\n\nsource.moduleScopes#\n\n * Type: Array | Function\n * Default: undefined\n * Bundler: only support webpack\n\nRestrict importing paths. After configuring this option, all source files can\nonly import code from the specific paths, and import code from other paths is\nnot allowed.\n\n\nExample#\n\nFirst, we configure moduleScopes to only include the src directory:\n\n\n\nThen we import the utils/a module outside the src directory in src/App.tsx:\n\n\n\nAfter compiling, there will be a reference path error:\n\n\n\nIf we configure the utils directory in moduleScopes, the error will disappear.\n\n\n\n\nArray Type#\n\nYou can directly set several paths like this:\n\n\n\n\nFunction Type#\n\nmoduleScopes also supports setting as a function, which can be modified instead\nof overriding the default value:\n\n\n\n\nsource.transformImport#\n\nUsed to import the code and style of the component library on demand, which is\nequivalent to babel-plugin-import.\n\nThe difference between it and babel-plugin-import is that source.transformImport\nis not coupled with Babel. Builder will automatically identify whether the\ncurrently used tools is Babel, SWC or Rspack, and apply the corresponding\non-demand import configuration.\n\n * Type:\n\n\n\n * Default:\n\nWhen the Ant Design component library <= 4.x version is installed in the\nproject, Builder will automatically add the following default configurations:\n\n\n\nWhen the Arco Design component library is installed in the project, Builder will\nautomatically add the following default configurations:\n\n\n\nTIP\n\nWhen you add configurations for antd or @arco-design/web-react, the priority\nwill be higher than the default configurations mentioned above.\n\n\nExample#\n\nWhen using the above antd default configuration:\n\n\n\nThe source code is as follows:\n\n\n\nIt will be transformed into:\n\n\n\n\nDisable Default Config#\n\nYou can manually set transformImport: false to disable the default config.\n\n\n\nFor example, if you use externals to avoid bundling antd, because\ntransformImport will convert the imported path of antd by default, the matching\npath changes and externals cannot take effect. At this time, you can disable\ntransformImport to avoid this problem.\n\n\nConfiguration#\n\nlibraryName#\n\n * Type: string\n\nThe original import path that needs to be transformed.\n\nlibraryDirectory#\n\n * Type: string\n * Default: 'lib'\n\nUsed to splice the transformed path, the splicing rule is\n${libraryName}/${libraryDirectory}/${member}, where member is the imported\nmember.\n\nExample:\n\n\n\nOut:\n\n\n\nstyle#\n\n * Type: boolean\n * Default: undefined\n\nDetermines whether to import related styles. If it is true, the path\n${libraryName}/${libraryDirectory}/${member}/style will be imported. If it is\nfalse or undefined, the style will not be imported.\n\nWhen it is set to true:\n\n\n\nOut:\n\n\n\nstyleLibraryDirectory#\n\n * Type: string\n * Default: undefined\n\nThis configuration is used to splice the import path when importing styles. If\nthis configuration is specified, the style configuration option will be ignored.\nThe spliced import path is ${libraryName}/${styleLibraryDirectory}/${member}.\n\nWhen it is set to styles:\n\n\n\nOut:\n\n\n\ncamelToDashComponentName#\n\n * Type: boolean\n * Default: true\n\nWhether to convert camelCase imports to kebab-case.\n\nExample:\n\n\n\nOut:\n\n\n\ntransformToDefaultImport#\n\n * Type: boolean\n * Default: true\n\nWhether to convert import statements to default imports.\n\nExample:\n\n\n\nOut:\n\n\n\ncustomName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported path after conversion. The input is the imported member.\nFor example, configure it as (member) => `my-lib/${member}` , which will convert\nto .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.\n\ncustomStyleName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported style path after conversion. The input is the imported\nmember. For example, configure it as (member) => `my-lib/${member}` , which will\nconvert to .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.\n\n\nsource.preEntry#\n\n * Type: string | string[]\n * Default: undefined\n\nAdd a script before the entry file of each page. This script will be executed\nbefore the page code. It can be used to execute global logics, such as injecting\npolyfills, setting global styles, etc.\n\nAdd a single script#\n\nFirst create a src/polyfill.ts file:\n\n\n\nThen configure src/polyfill.ts to source.preEntry:\n\n\n\nRe-run the compilation and visit any page, you can see that the code in\nsrc/polyfill.ts has been executed, and the I am a polyfill is logged in the\nconsole.\n\nAdd global style#\n\nYou can also configure the global style through source.preEntry, this CSS code\nwill be loaded earlier than the page code, such as introducing a normalize.css\nfile:\n\n\n\nAdd multiple scripts#\n\nYou can add multiple scripts by setting preEntry to an array, and they will be\nexecuted in array order:\n\n\n\n\nsource.resolveExtensionPrefix#\n\n * Type: string | Record\n * Default: undefined\n\nAdd a prefix to resolve.extensions.\n\nIf multiple files share the same name but have different extensions, Builder\nwill resolve the one with the extension listed first in the array and skip the\nrest.\n\n\nExample#\n\n\n\nWith the configuration above, the extensions array will become:\n\n\n\nWhen import './foo' in the code, the foo.web.js file will be resolved first,\nthen the foo.js file.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nextension prefix for different targets. At this point, you need to set\nresolveExtensionPrefix to an object whose key is the corresponding build target.\n\nFor example to set different extension prefix for web and node:\n\n\n\nWhen import './foo' in the code, the foo.node.js file will be resolved for node\ntarget, and the foo.web.js file will be resolved for web target.\n\n\nsource.resolveMainFields#\n\n * Type:\n\n\n\n * Default: undefined\n\nThis config will determine which field of package.json you use to import the npm\nmodule. Same as the resolve.mainFields config of webpack.\n\n\nExample#\n\n\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nmainFields for different targets. At this point, you need to set\nresolveMainFields to an object whose key is the corresponding build target.\n\nFor example to set different mainFields for web and node:\n\n","routePath":"/builder/en/api/config-source","lang":"en","toc":[{"text":"source.alias","id":"sourcealias","depth":2,"charIndex":104},{"text":"Object Type","id":"object-type","depth":3,"charIndex":549},{"text":"Function Type","id":"function-type","depth":3,"charIndex":787},{"text":"Exact Matching","id":"exact-matching","depth":3,"charIndex":1020},{"text":"Handling npm packages","id":"handling-npm-packages","depth":3,"charIndex":1307},{"text":"source.aliasStrategy","id":"sourcealiasstrategy","depth":2,"charIndex":1962},{"text":"prefer-tsconfig","id":"prefer-tsconfig","depth":3,"charIndex":2194},{"text":"prefer-alias","id":"prefer-alias","depth":3,"charIndex":2796},{"text":"source.include","id":"sourceinclude","depth":2,"charIndex":3561},{"text":"Compile Npm Packages","id":"compile-npm-packages","depth":3,"charIndex":4212},{"text":"Compile Sub Dependencies","id":"compile-sub-dependencies","depth":3,"charIndex":4927},{"text":"Compile Libraries in Monorepo","id":"compile-libraries-in-monorepo","depth":3,"charIndex":5293},{"text":"Compile CommonJS Module","id":"compile-commonjs-module","depth":3,"charIndex":5487},{"text":"Matching Symlink","id":"matching-symlink","depth":3,"charIndex":5902},{"text":"Precautions","id":"precautions","depth":3,"charIndex":6323},{"text":"source.exclude","id":"sourceexclude","depth":2,"charIndex":6809},{"text":"source.define","id":"sourcedefine","depth":2,"charIndex":7083},{"text":"Example","id":"example","depth":3,"charIndex":7840},{"text":"source.globalVars","id":"sourceglobalvars","depth":2,"charIndex":7924},{"text":"Example","id":"example-1","depth":3,"charIndex":8108},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":8255},{"text":"Difference with define","id":"difference-with-define","depth":3,"charIndex":8444},{"text":"Precautions","id":"precautions-1","depth":3,"charIndex":8765},{"text":"source.moduleScopes","id":"sourcemodulescopes","depth":2,"charIndex":9139},{"text":"Example","id":"example-2","depth":3,"charIndex":9414},{"text":"Array Type","id":"array-type","depth":3,"charIndex":9715},{"text":"Function Type","id":"function-type-1","depth":3,"charIndex":9778},{"text":"source.transformImport","id":"sourcetransformimport","depth":2,"charIndex":9911},{"text":"Example","id":"example-3","depth":3,"charIndex":10781},{"text":"Disable Default Config","id":"disable-default-config","depth":3,"charIndex":10910},{"text":"Configuration","id":"configuration","depth":3,"charIndex":11277},{"text":"libraryName","id":"libraryname","depth":4,"charIndex":11293},{"text":"libraryDirectory","id":"librarydirectory","depth":4,"charIndex":11380},{"text":"style","id":"style","depth":4,"charIndex":11596},{"text":"styleLibraryDirectory","id":"stylelibrarydirectory","depth":4,"charIndex":11879},{"text":"camelToDashComponentName","id":"cameltodashcomponentname","depth":4,"charIndex":12218},{"text":"transformToDefaultImport","id":"transformtodefaultimport","depth":4,"charIndex":12353},{"text":"customName","id":"customname","depth":4,"charIndex":12493},{"text":"customStyleName","id":"customstylename","depth":4,"charIndex":13366},{"text":"source.preEntry","id":"sourcepreentry","depth":2,"charIndex":14251},{"text":"Add a single script","id":"add-a-single-script","depth":4,"charIndex":14518},{"text":"Add global style","id":"add-global-style","depth":4,"charIndex":14792},{"text":"Add multiple scripts","id":"add-multiple-scripts","depth":4,"charIndex":14978},{"text":"source.resolveExtensionPrefix","id":"sourceresolveextensionprefix","depth":2,"charIndex":15109},{"text":"Example","id":"example-4","depth":3,"charIndex":15390},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":15569},{"text":"source.resolveMainFields","id":"sourceresolvemainfields","depth":2,"charIndex":16035},{"text":"Example","id":"example-5","depth":3,"charIndex":16238},{"text":"Set according to Targets","id":"set-according-to-targets-1","depth":4,"charIndex":16250}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":10,"title":"Tools Config","content":"#\n\nThis section describes some low-level tools configurations in Modern.js Builder.\n\n\ntools.autoprefixer#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of autoprefixer by tools.autoprefixer.\n\n\nObject Type#\n\nWhen tools.autoprefixer is configured as Object type, it is merged with the\ndefault config through Object.assign. For example:\n\n\n\n\nFunction Type#\n\nWhen tools.autoprefixer is a Function, the default config is passed as the first\nparameter and can be directly modified or returned as the final result. For\nexample:\n\n\n\n\ntools.babel#\n\n * Type: Object | Function\n * Default: undefined\n\nWith tools.babel you can modify the options of babel-loader.\n\n\nUsage Scenarios#\n\nPlease note the limitations of tools.babel in the following usage scenarios:\n\n * Rspack scenario: When using Rspack as the bundler, using the tools.babel\n   option will significantly slow down the Rspack's build speed. This is because\n   Rspack defaults to using SWC for compilation, and configuring Babel will\n   cause the code to be compiled twice, resulting in additional compilation\n   overhead.\n * webpack + SWC scenario: When using webpack as the bundler, if you use\n   Builder's SWC plugin for code compilation, the tools.babel option will not\n   take effect.\n\n\nFunction Type#\n\nWhen tools.babel is of type Function, the default Babel configuration will be\npassed as the first parameter. You can directly modify the configuration object\nor return an object as the final babel-loader configuration.\n\n\n\nThe second parameter of the tools.babel function provides some more convenient\nutility functions. Please continue reading the documentation below.\n\nTIP\n\nThe above example is just for reference, usually you don't need to manually\nconfigure babel-plugin-import, because the Builder already provides a more\ngeneral source.transformImport configuration.\n\n\nObject Type#\n\nWhen tools.babel's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nCAUTION\n\nNote that Object.assign is a shallow copy and will completely overwrite the\nbuilt-in presets or plugins array, please use it with caution.\n\n\n\n\nUtil Functions#\n\nWhen tools.babel is a Function, the tool functions available for the second\nparameter are as follows:\n\naddPlugins#\n\n * Type: (plugins: BabelPlugin[]) => void\n\nAdd some Babel plugins. For example:\n\n\n\naddPresets#\n\n * Type: (presets: BabelPlugin[]) => void\n\nAdd Babel preset configuration. (No need to add presets in most cases)\n\n\n\nremovePlugins#\n\n * Type: (plugins: string | string[]) => void\n\nTo remove the Babel plugin, just pass in the name of the plugin to be removed,\nyou can pass in a single string or an array of strings.\n\n\n\nremovePresets#\n\n * Type: (presets: string | string[]) => void\n\nTo remove the Babel preset configuration, pass in the name of the preset to be\nremoved, you can pass in a single string or an array of strings.\n\n\n\nmodifyPresetEnvOptions#\n\n * Type: (options: PresetEnvOptions) => void\n\nModify the configuration of @babel/preset-env, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\n\n\nmodifyPresetReactOptions#\n\n * Type: (options: PresetReactOptions) => void\n\nModify the configuration of @babel/preset-react, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\n\n\naddIncludes#\n\nDeprecated, please use source.include instead, both have the same functionality.\n\naddExcludes#\n\nDeprecated, please use source.exclude instead, both have the same functionality.\n\n\nDebugging Babel Configuration#\n\nAfter modifying the babel-loader configuration through tools.babel, you can view\nthe final generated configuration in Builder debug mode.\n\nFirst, enable debug mode by using the DEBUG=builder parameter:\n\n\n\nThen open the generated (webpack|rspack).config.web.js file and search for the\nbabel-loader keyword to see the complete babel-loader configuration.\n\n\ntools.bundlerChain#\n\n * Type: Function | undefined\n * Default: undefined\n\nYou can modify the webpack and Rspack configuration by configuring\ntools.bundlerChain which is type of Function. The function receives two\nparameters, the first is the original bundler chain object, and the second is an\nobject containing some utils.\n\nWhat is BundlerChain\n\nBundler chain is a subset of webpack chain, which contains part of the webpack\nchain API that you can use to modify both webpack and Rspack configuration.\n\nConfigurations modified via bundler chain will work on both webpack and Rspack\nbuilds. Note that the bundler chain only supports modifying the configuration of\nthe non-differentiated parts of webpack and Rspack. For example, modifying the\ndevtool configuration option (webpack and Rspack have the same devtool property\nvalue type), or adding an Rspack-compatible webpack plugin.\n\n> tools.bundlerChain is executed earlier than tools.webpackChain / tools.webpack\n> / tools.rspack and thus will be overridden by changes in others.\n\nFor more information, please refer to Rsbuild#tools.bundlerChain\n\n\ntools.cssExtract#\n\n * Type: Object | Function\n * Default:\n\n\n\nThe config of CssExtractRspackPlugin / mini-css-extract-plugin can be modified\nthrough tools.cssExtract.\n\nFor detailed usage, please refer to Rsbuild - tools.cssExtract.\n\n\ntools.cssLoader#\n\n * Type: Object | Function\n * Default: undefined\n\nThe config of css-loader can be modified through tools.cssLoader. The default\nconfig is as follows:\n\n\n\nFor detailed usage, please refer to Rsbuild - tools.cssLoader.\n\n\ntools.devServer#\n\n * Type: Object\n * Default: {}\n\nThe config of DevServer can be modified through tools.devServer.\n\nTIP\n\nModern.js does not directly use webpack-dev-server or @rspack/dev-server, but\nimplement DevServer based on webpack-dev-middleware.\n\n\nOptions#\n\nafter#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware after all other middleware\ninternally within the server.\n\n\n\nwebpack-dev-server uses Express as the server-side framework. Modern.js does not\nuse any framework, and the req and res in the above middleware are all native\nNode objects. Therefore, the Express middleware used in webpack-dev-server may\nnot be directly usable in Modern.js.\n\nIf you want to migrate the Express middleware used in webpack-dev-server, you\ncan use the following method to pass the Express app as middleware:\n\n\n\nbefore#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware prior to all other middleware\ninternally within the server.\n\n\n\nclient#\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use dev.client instead.\n\n * Type:\n\n\n\n * Default:\n\n\n\nThe config of HMR client, which are usually used to set the WebSocket URL of\nHMR.\n\ncompress#\n\n * Type: boolean\n * Default: true\n\nWhether to enable gzip compression for served static assets.\n\nIf you want to disable the gzip compression, you can set compress to false:\n\n\n\ndevMiddleware#\n\n * Type:\n\n\n\n * Default:\n\n\n\nThe config of devMiddleware. Current options is the subset of\nwebpack-dev-middleware.\n\nheaders#\n\n * Type: Record\n * Default: undefined\n\nAdds headers to all responses.\n\n\n\nhistoryApiFallback#\n\n * Type: boolean | ConnectHistoryApiFallbackOptions\n * Default: false\n\nThe index.html page will likely have to be served in place of any 404 responses.\nEnable devServer.historyApiFallback by setting it to true:\n\n\n\nFor more options and information, see the connect-history-api-fallback\ndocumentation.\n\nhot#\n\n * Type: boolean\n * Default: true\n\nEnable Hot Module Replacement feature.\n\nhttps#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nBy default, DevServer will be served over HTTP. It can optionally be served over\nHTTPS by setting devServer.https to true, and will disable the HTTP server.\n\nYou can also manually pass in the certificate and corresponding private key\nrequired by the HTTPS server:\n\n\n\nliveReload#\n\n * Type: boolean\n * Default: true\n\nBy default, the DevServer will reload/refresh the page when file changes are\ndetected (devServer.hot option must be disabled in order for liveReload to take\neffect). Disable devServer.liveReload by setting it to false.\n\nsetupMiddlewares#\n\n * Type:\n\n\n\n * Default: undefined\n\nProvides the ability to execute a custom function and apply custom middlewares.\n\nThe order among several different types of middleware is: devServer.before =>\nunshift => internal middlewares => push => devServer.after.\n\n\n\nIt is possible to use some server api to meet special scenario requirements:\n\n * sockWrite. Allow send some message to hmr client, and then the hmr client\n   will take different actions depending on the message type. If you send a\n   \"content changed\" message, the page will reload.\n\n\n\nproxy#\n\n * Type: Record | Record\n * Default: undefined\n\nProxying some URLs.\n\n\n\nA request to /api/users will now proxy the request to\nhttp://localhost:3000/api/users.\n\nIf you don't want /api to be passed along, we need to rewrite the path:\n\n\n\nThe DevServer Proxy makes use of the http-proxy-middleware package. Check out\nits documentation for more advanced usages.\n\nThe full type definition of DevServer Proxy is:\n\n\n\nIn addition to the http-proxy-middleware option, we also support the bypass and\ncontext configuration:\n\n * bypass: bypass the proxy based on the return value of a function.\n   * Return null or undefined to continue processing the request with proxy.\n   * Return false to produce a 404 error for the request.\n   * Return a path to serve from, instead of continuing to proxy the request.\n * context: If you want to proxy multiple, specific paths to the same target,\n   you can use an array of one or more objects with a context property.\n\n\n\n\n\nwatch#\n\n * Type: boolean\n * Default: true\n\nWhether to watch files change in directories such as mock/, server/, api/.\n\n\ntools.htmlPlugin#\n\n * Type: false | Object | Function\n * Default:\n\n\n\nThe configs of html-webpack-plugin or @rspack/plugin-html can be modified\nthrough tools.htmlPlugin.\n\n\nObject Type#\n\nWhen tools.htmlPlugin is Object type, the value will be merged with the default\nconfig via Object.assign.\n\n\n\n\nFunction Type#\n\nWhen tools.htmlPlugin is a Function:\n\n * The first parameter is the default config, which can be modified directly.\n * The second parameter is also an object, containing the entry name and the\n   entry value.\n * The Function can return a new object as the final config.\n\n\n\n\nBoolean Type#\n\nThe built-in html-webpack-plugin plugins can be disabled by set tools.htmlPlugin\nto false.\n\n\n\n\nDisable JS/CSS minify#\n\nBy default, Builder will compresses JavaScript/CSS code inside HTML during the\nproduction build to improve the page performance. This ability is often helpful\nwhen using custom templates or inserting custom scripts.\n\nHowever, when output.enableInlineScripts or output.enableInlineStyles is turned\non, inline JavaScript/CSS code will be repeatedly compressed, which will have a\ncertain impact on build performance. You can modify the default minify behavior\nby modifying the tools.htmlPlugin.minify configuration.\n\n\n\n\ntools.less#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of less-loader via tools.less.\n\n\nObject Type#\n\nWhen tools.less is configured as Object type, it is merged with the default\nconfig through Object.assign in a shallow way. It should be noted that\nlessOptions is merged through deepMerge in a deep way. For example:\n\n\n\n\nFunction Type#\n\nWhen tools.less is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor example:\n\n\n\n\nModifying Less Version#\n\nIn some scenarios, if you need to use a specific version of Less instead of the\nbuilt-in Less v4 in Builder, you can install the desired Less version in your\nproject and set it up using the implementation option of the less-loader.\n\n\n\n\nUtil Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files less-loader does not compile, You can pass in one or\nmore regular expressions to match the path of less files, for example:\n\n\n\n\ntools.minifyCss#\n\n * Type: Object | Function | undefined\n * Default:\n\n\n\nWhen building for production, Builder will minimize the CSS code through\ncss-minimizer-webpack-plugin. The config of css-minimizer-webpack-plugin can be\nmodified via tools.minifyCss.\n\n\nObject Type#\n\nWhen tools.minifyCss is Object type, it will be merged with the default config\nvia Object.assign.\n\nFor example, modify the preset config of cssnano:\n\n\n\n\nFunction Type#\n\nWhen tools.minifyCss is Function type, the default config is passed in as the\nfirst parameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\n\n\n\ntools.postcss#\n\n * Type: Object | Function\n * Default:\n\n\n\nBuilder integrates PostCSS by default, you can configure postcss-loader through\ntools.postcss.\n\n\nFunction Type#\n\nWhen the value is a Function, the internal default config is passed as the first\nparameter, and the config object can be modified directly without returning, or\nan object can be returned as the final result; the second parameter is a set of\ntool functions for modifying the postcss-loader config.\n\nFor example, you need to add a PostCSS plugin on the basis of the original\nplugin, and push a new plugin to the postcssOptions.plugins array:\n\n\n\nWhen you need to pass parameters to the PostCSS plugin, you can pass them in by\nfunction parameters:\n\n\n\ntools.postcss can return a config object and completely replace the default\nconfig:\n\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. Note that Object.assign is a shallow copy and will completely\noverwrite the built-in presets or plugins array, please use it with caution.\n\n\n\n\nUtil Functions#\n\naddPlugins#\n\n * Type: (plugins: PostCSSPlugin | PostCSSPlugin[]) => void\n\nFor adding additional PostCSS plugins, You can pass in a single PostCSS plugin,\nor an array of PostCSS plugins.\n\n\n\nTIP\n\nBuilder uses the PostCSS v8 version. When you use third-party PostCSS plugins,\nplease pay attention to whether the PostCSS version is compatible. Some legacy\nplugins may not work in PostCSS v8.\n\n\ntools.pug#\n\n * Type: true | Object | Function | undefined\n * Default: false\n\nConfigure the Pug template engine.\n\n\nBoolean Type#\n\nPug template engine is not enabled by default, you can enable it by setting\ntools.pug to true.\n\n\n\nWhen enabled, you can use index.pug as the template file in html.template\nconfig.\n\n\nObject Type#\n\nWhen tools.terser is Object type, you can passing the Pug options:\n\n\n\nFor detailed options, please refer to Pug API Reference.\n\n\nFunction Type#\n\nWhen tools.pug is Function type, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or a value\ncan be returned as the final result.\n\n\n\n\ntools.sass#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of sass-loader via tools.sass.\n\n\nObject Type#\n\nWhen tools.sass is Object type, it is merged with the default config through\nObject.assign. It should be noted that sassOptions is merged through deepMerge\nin a deep way.\n\nFor example:\n\n\n\n\nFunction Type#\n\nWhen tools.sass is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor Example:\n\n\n\n\nModifying Sass Version#\n\nIn some scenarios, if you need to use a specific version of Sass instead of the\nbuilt-in Dart Sass v1 in Builder, you can install the desired Sass version in\nyour project and set it up using the implementation option of the sass-loader.\n\n\n\n\nUtility Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files sass-loader does not compile, You can pass in one or\nmore regular expressions to match the path of sass files, for example:\n\n\n\n\ntools.styleLoader#\n\n * Type: Object | Function\n * Default: {}\n\nThe config of style-loader can be set through tools.styleLoader.\n\nIt is worth noting that Builder does not enable style-loader by default. You can\nuse output.disableCssExtract config to enable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\n\n\n\ntools.styledComponents#\n\n * Type: Object | Function\n * Default:\n\n\n\ntools.styledComponents config is corresponding to\nbabel-plugin-styled-components, or @swc/plugin-styled-components when using SWC\nplugin.\n\nWhen the value is an Object, use the Object.assign function to merge with the\ndefault config. For example:\n\n\n\nWhen the config is a Function, the first parameter is the default configuration,\nand the second parameter provides some utility functions that can be called\ndirectly:\n\n\n\nThe feature is enabled by default, and you can configure tools.styledComponents\nto false to disable this behavior, which can improve build performance:\n\n\n\n\ntools.terser#\n\n * Type: Object | Function | undefined\n * Default:\n\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the JavaScript code through\nterser-webpack-plugin. The config of terser-webpack-plugin can be modified via\ntools.terser.\n\n\nObject Type#\n\nWhen tools.terser is Object type, it will be merged with the default config via\nObject.assign.\n\nFor example, to exclude some files from minification:\n\n\n\n\nFunction Type#\n\nWhen tools.terser is Function type, the default config is passed in as the first\nparameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\n\n\nDisable code minification\n\nIf you need to disable code minification, you can use the output.disableMinimize\nconfiguration.\n\n\ntools.tsLoader#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nAlternatives for ts-loader\n\nUsing babel-loader or Rspack instead of ts-loader can significantly improve\ncompilation speed and provide better extendability.\n\nts-loader cannot be used with certain features such as source.transformImport\nand tools.styledComponents provided by Babel & SWC.\n\nts-loader is not enabled by default in the project. When tools.tsLoader is not\nundefined, builder will use ts-loader instead of babel-loader to compile\nTypeScript code.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default configuration via\nObject.assign.\n\nThe default configuration is as follows:\n\n\n\nYou can override the default configuration via the tools.tsLoader configuration\noption:\n\n\n\n\nFunction Type#\n\nWhen this value is a Function, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or an object\ncan be returned as the final configuration.The second parameter is the util\nfunctions to modify the ts-loader configuration. For example:\n\n\n\n\nUtil Functions#\n\naddIncludes#\n\nDeprecated, please use source.include instead, both have the same functionality.\n\naddExcludes#\n\nDeprecated, please use source.exclude instead, both have the same functionality.\n\n\ntools.tsChecker#\n\n * Type: Object | Function\n * Default:\n\n\n\nBy default, the fork-ts-checker-webpack-plugin is enabled for type checking. You\ncan use output.disableTsChecker config to disable it.\n\n\nObject Type#\n\nWhen the value of tsChecker is of type Object, it will be deeply merged with the\ndefault configuration.\n\n\n\n\nFunction Type#\n\nWhen the value of tsChecker is of type Function, the default configuration will\nbe passed as the first argument. You can directly modify the configuration\nobject or return an object as the final configuration.\n\n\n\n\ntools.webpack#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\ntools.webpack is used to configure webpack.\n\n> tools.bundlerChain is also used to modify the webpack configuration, and the\n> function is more powerful. It is recommended to use tools.bundlerChain first.\n\n\nObject Type#\n\ntools.webpack can be configured as an object to be deep merged with the built-in\nwebpack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\n\n\n\nFunction Type#\n\ntools.webpack can be configured as a function. The first parameter of this\nfunction is the built-in webpack configuration object, you can modify this\nobject, and then return it. For example:\n\n\n\nTIP\n\nThe object returned by the tools.webpack function is used directly as the final\nwebpack configuration and is not merged with the built-in webpack configuration.\n\n\nUtils#\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional webpack rules.\n\nFor example:\n\n\n\nprependPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal webpack plugins array, and\nthe plugin will be executed first.\n\n\n\nappendPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal webpack plugins array, the\nplugin will be executed last.\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal webpack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal fork-ts-checker-webpack-plugin:\n\n\n\nmergeConfig#\n\n * Type: (...configs: WebpackConfig[]) => WebpackConfig\n\nUsed to merge multiple webpack configs, same as webpack-merge.\n\n\n\n\ntools.webpackChain#\n\n * Type: Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can modify the webpack configuration by configuring tools.webpackChain which\nis type of Function. The function receives two parameters, the first is the\noriginal webpack chain object, and the second is an object containing some\nutils.\n\nCompared with tools.webpack, webpack-chain not only supports chained calls, but\nalso can locate built-in Rule or Plugin based on aliases, so as to achieve\nprecise config modification. We recommend using tools.webpackChain instead of\ntools.webpack.\n\n> tools.webpackChain is executed earlier than tools.webpack and thus will be\n> overridden by changes in tools.webpack.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nTIP\n\nPlease note that some of the rules or plugins listed below are not available by\ndefault. They will only be included in the webpack configuration when you enable\nspecific options or register certain plugins.\n\nFor example, the RULE.STYLUS rule exists only when the Stylus plugin is\nregistered.\n\nCHAIN_ID.RULE#\n\nID            DESCRIPTION\nRULE.JS       Rule for js\nRULE.TS       Rule for ts\nRULE.CSS      Rule for css\nRULE.LESS     Rule for less\nRULE.SASS     Rule for sass\nRULE.STYLUS   Rule for stylus(requires Stylus plugin)\nRULE.SVG      Rule for svg\nRULE.PUG      Rule for pug\nRULE.TOML     Rule for toml\nRULE.YAML     Rule for yaml\nRULE.WASM     Rule for WASM\nRULE.NODE     Rule for node\nRULE.FONT     Rule for font\nRULE.IMAGE    Rule for image\nRULE.MEDIA    Rule for media\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID                                DESCRIPTION\nUSE.TS                            correspond to ts-loader\nUSE.CSS                           correspond to css-loader\nUSE.LESS                          correspond to less-loader\nUSE.SASS                          correspond to sass-loader\nUSE.STYLUS                        correspond to stylus-loader\nUSE.PUG                           correspond to pug-loader\nUSE.VUE                           correspond to vue-loader\nUSE.TOML                          correspond to toml-loader\nUSE.YAML                          correspond to yaml-loader\nUSE.NODE                          correspond to node-loader\nUSE.URL                           correspond to url-loader\nUSE.SVGR                          correspond to @svgr/webpack\nUSE.BABEL                         correspond to babel-loader\nUSE.STYLE                         correspond to style-loader\nUSE.POSTCSS                       correspond to postcss-loader\nUSE.CSS_MODULES_TS                correspond to css-modules-typescript-loader\nUSE.MINI_CSS_EXTRACT              correspond to mini-css-extract-plugin.loader\nUSE.RESOLVE_URL_LOADER_FOR_SASS   correspond to resolve-url-loader\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                             DESCRIPTION\nPLUGIN.HMR                     correspond to HotModuleReplacementPlugin\nPLUGIN.COPY                    correspond to CopyWebpackPlugin\nPLUGIN.HTML                    correspond to HtmlWebpackPlugin, you need to splice the\n                               entry name when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.DEFINE                  correspond to DefinePlugin\nPLUGIN.IGNORE                  correspond to IgnorePlugin\nPLUGIN.BANNER                  correspond to BannerPlugin\nPLUGIN.PROGRESS                correspond to Webpackbar\nPLUGIN.APP_ICON                correspond to AppIconPlugin\nPLUGIN.MANIFEST                correspond to WebpackManifestPlugin\nPLUGIN.TS_CHECKER              correspond to ForkTsCheckerWebpackPlugin\nPLUGIN.INLINE_HTML             correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER         correspond to WebpackBundleAnalyzer\nPLUGIN.MINI_CSS_EXTRACT        correspond to MiniCssExtractPlugin\nPLUGIN.VUE_LOADER_PLUGIN       correspond to VueLoaderPlugin\nPLUGIN.REACT_FAST_REFRESH      correspond to ReactFastRefreshPlugin\nPLUGIN.NODE_POLYFILL_PROVIDE   correspond to ProvidePlugin for node polyfills\nPLUGIN.SUBRESOURCE_INTEGRITY   correspond to webpack-subresource-integrity\nPLUGIN.ASSETS_RETRY            correspond to webpack static asset retry plugin in Builder\nPLUGIN.AUTO_SET_ROOT_SIZE      correspond to automatically set root font size plugin in\n                               Builder\n\nCHAIN_ID.MINIMIZER#\n\nMINIMIZER.XXX can match a certain minimizer.\n\nID                  DESCRIPTION\nMINIMIZER.JS        correspond to TerserWebpackPlugin\nMINIMIZER.CSS       correspond to CssMinimizerWebpackPlugin\nMINIMIZER.ESBUILD   correspond to ESBuildPlugin\nMINIMIZER.SWC       correspond to SwcWebpackPlugin\n\n\nExamples#\n\nFor usage examples, please refer to: WebpackChain usage examples.\n\n\ntools.rspack#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support Rspack\n\ntools.rspack is used to configure Rspack.\n\n\nObject Type#\n\ntools.rspack can be configured as an object to be deep merged with the built-in\nRspack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\n\n\n\nFunction Type#\n\ntools.rspack can be configured as a function. The first parameter of this\nfunction is the built-in Rspack configuration object, you can modify this\nobject, and then return it. For example:\n\n\n\nTIP\n\nThe object returned by the tools.rspack function is used directly as the final\nRspack configuration and is not merged with the built-in Rspack configuration.\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nrspack#\n\n * Type: typeof import('@rspack/core')\n\nThe Rspack instance. For example:\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules.\n\nFor example:\n\n\n\nprependPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal Rspack plugins array, and the\nplugin will be executed first.\n\n\n\nappendPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal Rspack plugins array, the\nplugin will be executed last.\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal Rspack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal webpack-bundle-analyzer:\n\n\n\nmergeConfig#\n\n * Type: (...configs: RspackConfig[]) => RspackConfig\n\nUsed to merge multiple Rspack configs, same as webpack-merge.\n\n","routePath":"/builder/en/api/config-tools","lang":"en","toc":[{"text":"tools.autoprefixer","id":"toolsautoprefixer","depth":2,"charIndex":85},{"text":"Object Type","id":"object-type","depth":3,"charIndex":215},{"text":"Function Type","id":"function-type","depth":3,"charIndex":360},{"text":"tools.babel","id":"toolsbabel","depth":2,"charIndex":546},{"text":"Usage Scenarios","id":"usage-scenarios","depth":3,"charIndex":673},{"text":"Function Type","id":"function-type-1","depth":3,"charIndex":1260},{"text":"Object Type","id":"object-type-1","depth":3,"charIndex":1850},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":2124},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":2244},{"text":"addPresets","id":"addpresets","depth":4,"charIndex":2340},{"text":"removePlugins","id":"removeplugins","depth":4,"charIndex":2470},{"text":"removePresets","id":"removepresets","depth":4,"charIndex":2671},{"text":"modifyPresetEnvOptions","id":"modifypresetenvoptions","depth":4,"charIndex":2881},{"text":"modifyPresetReactOptions","id":"modifypresetreactoptions","depth":4,"charIndex":3091},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":3307},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":3403},{"text":"Debugging Babel Configuration","id":"debugging-babel-configuration","depth":3,"charIndex":3500},{"text":"tools.bundlerChain","id":"toolsbundlerchain","depth":2,"charIndex":3887},{"text":"tools.cssExtract","id":"toolscssextract","depth":2,"charIndex":4986},{"text":"tools.cssLoader","id":"toolscssloader","depth":2,"charIndex":5219},{"text":"tools.devServer","id":"toolsdevserver","depth":2,"charIndex":5455},{"text":"Options","id":"options","depth":3,"charIndex":5709},{"text":"after","id":"after","depth":4,"charIndex":5719},{"text":"before","id":"before","depth":4,"charIndex":6293},{"text":"client","id":"client","depth":4,"charIndex":6446},{"text":"compress","id":"compress","depth":4,"charIndex":6652},{"text":"devMiddleware","id":"devmiddleware","depth":4,"charIndex":6839},{"text":"headers","id":"headers","depth":4,"charIndex":6969},{"text":"historyApiFallback","id":"historyapifallback","depth":4,"charIndex":7052},{"text":"hot","id":"hot","depth":4,"charIndex":7374},{"text":"https","id":"https","depth":4,"charIndex":7455},{"text":"liveReload","id":"livereload","depth":4,"charIndex":7798},{"text":"setupMiddlewares","id":"setupmiddlewares","depth":4,"charIndex":8066},{"text":"proxy","id":"proxy","depth":4,"charIndex":8628},{"text":"watch","id":"watch","depth":4,"charIndex":9585},{"text":"tools.htmlPlugin","id":"toolshtmlplugin","depth":2,"charIndex":9705},{"text":"Object Type","id":"object-type-2","depth":3,"charIndex":9876},{"text":"Function Type","id":"function-type-2","depth":3,"charIndex":10000},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":10290},{"text":"Disable JS/CSS minify","id":"disable-jscss-minify","depth":3,"charIndex":10400},{"text":"tools.less","id":"toolsless","depth":2,"charIndex":10941},{"text":"Object Type","id":"object-type-3","depth":3,"charIndex":11055},{"text":"Function Type","id":"function-type-3","depth":3,"charIndex":11288},{"text":"Modifying Less Version","id":"modifying-less-version","depth":3,"charIndex":11551},{"text":"Util Function","id":"util-function","depth":3,"charIndex":11812},{"text":"addExcludes","id":"addexcludes-1","depth":4,"charIndex":11828},{"text":"tools.minifyCss","id":"toolsminifycss","depth":2,"charIndex":12046},{"text":"Object Type","id":"object-type-4","depth":3,"charIndex":12303},{"text":"Function Type","id":"function-type-4","depth":3,"charIndex":12470},{"text":"tools.postcss","id":"toolspostcss","depth":2,"charIndex":12677},{"text":"Function Type","id":"function-type-5","depth":3,"charIndex":12832},{"text":"Object Type","id":"object-type-5","depth":3,"charIndex":13483},{"text":"Util Functions","id":"util-functions-1","depth":3,"charIndex":13726},{"text":"addPlugins","id":"addplugins-1","depth":4,"charIndex":13743},{"text":"tools.pug","id":"toolspug","depth":2,"charIndex":14133},{"text":"Boolean Type","id":"boolean-type-1","depth":3,"charIndex":14247},{"text":"Object Type","id":"object-type-6","depth":3,"charIndex":14444},{"text":"Function Type","id":"function-type-6","depth":3,"charIndex":14587},{"text":"tools.sass","id":"toolssass","depth":2,"charIndex":14802},{"text":"Object Type","id":"object-type-7","depth":3,"charIndex":14916},{"text":"Function Type","id":"function-type-7","depth":3,"charIndex":15119},{"text":"Modifying Sass Version","id":"modifying-sass-version","depth":3,"charIndex":15382},{"text":"Utility Function","id":"utility-function","depth":3,"charIndex":15648},{"text":"addExcludes","id":"addexcludes-2","depth":4,"charIndex":15667},{"text":"tools.styleLoader","id":"toolsstyleloader","depth":2,"charIndex":15885},{"text":"Object Type","id":"object-type-8","depth":3,"charIndex":16147},{"text":"Function Type","id":"function-type-8","depth":3,"charIndex":16264},{"text":"tools.styledComponents","id":"toolsstyledcomponents","depth":2,"charIndex":16467},{"text":"tools.terser","id":"toolsterser","depth":2,"charIndex":17109},{"text":"Object Type","id":"object-type-9","depth":3,"charIndex":17387},{"text":"Function Type","id":"function-type-9","depth":3,"charIndex":17555},{"text":"tools.tsLoader","id":"toolstsloader","depth":2,"charIndex":17883},{"text":"Object Type","id":"object-type-10","depth":3,"charIndex":18454},{"text":"Function Type","id":"function-type-10","depth":3,"charIndex":18698},{"text":"Util Functions","id":"util-functions-2","depth":3,"charIndex":19014},{"text":"addIncludes","id":"addincludes-1","depth":4,"charIndex":19031},{"text":"addExcludes","id":"addexcludes-3","depth":4,"charIndex":19127},{"text":"tools.tsChecker","id":"toolstschecker","depth":2,"charIndex":19224},{"text":"Object Type","id":"object-type-11","depth":3,"charIndex":19421},{"text":"Function Type","id":"function-type-11","depth":3,"charIndex":19543},{"text":"tools.webpack","id":"toolswebpack","depth":2,"charIndex":19773},{"text":"Object Type","id":"object-type-12","depth":3,"charIndex":20090},{"text":"Function Type","id":"function-type-12","depth":3,"charIndex":20281},{"text":"Utils","id":"utils","depth":3,"charIndex":20659},{"text":"env","id":"env","depth":4,"charIndex":20786},{"text":"isProd","id":"isprod","depth":4,"charIndex":20967},{"text":"target","id":"target","depth":4,"charIndex":21103},{"text":"isServer","id":"isserver","depth":4,"charIndex":21249},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":21365},{"text":"webpack","id":"webpack","depth":4,"charIndex":21496},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":21579},{"text":"addRules","id":"addrules","depth":4,"charIndex":21681},{"text":"prependPlugins","id":"prependplugins","depth":4,"charIndex":21794},{"text":"appendPlugins","id":"appendplugins","depth":4,"charIndex":22004},{"text":"removePlugin","id":"removeplugin","depth":4,"charIndex":22207},{"text":"mergeConfig","id":"mergeconfig","depth":4,"charIndex":22413},{"text":"tools.webpackChain","id":"toolswebpackchain","depth":2,"charIndex":22551},{"text":"Utils","id":"utils-1","depth":3,"charIndex":23268},{"text":"env","id":"env-1","depth":4,"charIndex":23276},{"text":"isProd","id":"isprod-1","depth":4,"charIndex":23457},{"text":"target","id":"target-1","depth":4,"charIndex":23593},{"text":"isServer","id":"isserver-1","depth":4,"charIndex":23744},{"text":"isWebWorker","id":"iswebworker-1","depth":4,"charIndex":23860},{"text":"webpack","id":"webpack-1","depth":4,"charIndex":23991},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin-1","depth":4,"charIndex":24074},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":24176},{"text":"CHAIN_ID.RULE","id":"chain_idrule","depth":4,"charIndex":24604},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":4,"charIndex":25088},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":4,"charIndex":25547},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":4,"charIndex":26773},{"text":"CHAIN_ID.MINIMIZER","id":"chain_idminimizer","depth":4,"charIndex":28314},{"text":"Examples","id":"examples","depth":3,"charIndex":28628},{"text":"tools.rspack","id":"toolsrspack","depth":2,"charIndex":28707},{"text":"Object Type","id":"object-type-13","depth":3,"charIndex":28860},{"text":"Function Type","id":"function-type-13","depth":3,"charIndex":29049},{"text":"Utils","id":"utils-2","depth":3,"charIndex":29541},{"text":"env","id":"env-2","depth":4,"charIndex":29549},{"text":"isProd","id":"isprod-2","depth":4,"charIndex":29730},{"text":"target","id":"target-2","depth":4,"charIndex":29866},{"text":"isServer","id":"isserver-2","depth":4,"charIndex":30012},{"text":"isWebWorker","id":"iswebworker-2","depth":4,"charIndex":30128},{"text":"rspack","id":"rspack","depth":4,"charIndex":30259},{"text":"addRules","id":"addrules-1","depth":4,"charIndex":30345},{"text":"prependPlugins","id":"prependplugins-1","depth":4,"charIndex":30457},{"text":"appendPlugins","id":"appendplugins-1","depth":4,"charIndex":30664},{"text":"removePlugin","id":"removeplugin-1","depth":4,"charIndex":30864},{"text":"mergeConfig","id":"mergeconfig-1","depth":4,"charIndex":31062}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":11,"title":"API","content":"#","routePath":"/builder/en/api/","lang":"en","toc":[],"domain":"","frontmatter":{"overview":true},"version":""},{"id":12,"title":"Plugin Core","content":"#\n\nThis section describes the core plugin types and APIs.\n\n\nBuilderPlugin#\n\nThe type of the plugin object. The plugin object contains the following\nproperties:\n\n * name: The name of the plugin, a unique identifier.\n * setup: The setup function of the plugin, which can be an asynchronous\n   function. This function will only be executed once when the plugin is\n   initialized.\n * pre: Specifies the preceding plugins for the current plugin. You can pass an\n   array of preceding plugin names, and the current plugin will be executed\n   after these plugins.\n * post: Specifies the succeeding plugins for the current plugin. You can pass\n   an array of succeeding plugin names, and the current plugin will be executed\n   before these plugins.\n * remove: Specifies the plugins to be removed. You can pass an array of plugin\n   names to be removed.\n\nThe type of the plugin object, which contains the following properties:\n\n\n\nYou can import this type from @modern-js/builder:\n\n\n\n\nPre-Plugins#\n\nBy default, plugins are executed in the order they are added. You can declare\npre-execution plugins using the pre field.\n\nFor example, consider the following two plugins:\n\n\n\nThe Bar plugin is configured with the Foo plugin in its pre field, so the Foo\nplugin will always be executed before the Bar plugin.\n\n\nPost-Plugins#\n\nSimilarly, you can declare post-execution plugins using the post field.\n\n\n\nThe Bar plugin is configured with the Foo plugin in its post field, so the Foo\nplugin will always be executed after the Bar plugin.\n\n\nRemoving Plugins#\n\nYou can remove other plugins within a plugin using the remove field.\n\n\n\nFor example, if you register both the Foo and Bar plugins mentioned above, the\nFoo plugin will not take effect because the Bar plugin declares the removal of\nthe Foo plugin.\n\n\nBuilderPluginAPI#\n\nThe type of plugin API. The plugin API provides the context info, utility\nfunctions and lifecycle hooks.\n\nFor a complete introduction to lifecycle hooks, please read the Plugin Hooks\nchapter.\n\nWhen using webpack-provider or rspack-provider, the type definition of\nBuilderPluginAPI is somewhat different, and you can introduce the corresponding\ntype according to the usage scenario of the plugin.\n\n\nPlugin for webpack-provider#\n\nWhen developing plugins for webpack-provider, please import BuilderPluginAPI\nfrom @modern-js/builder-webpack-provider.\n\n\n\n\nPlugins for rspack-provider#\n\nWhen developing plugins for rspack-provider, please import BuilderPluginAPI from\n@modern-js/builder-rspack-provider.\n\n\n\n\nPlugins for both webpack-provider and rspack-provider#\n\nWhen developing plugins for both webpack-provider and rspack-provider, please\nimport DefaultBuilderPlugin from @modern-js/builder-shared.\n\nNote that developing plugins that can support both webpack and Rspack at the\nsame time means that you cannot use any APIs with webpack / Rspack identifiers,\nsuch as modifyWebpackConfig or modifyRspackConfig.\n\nYou can use modifyBundlerChain to modify the configuration that applies to both\nwebpack and Rspack.\n\n\n\n\napi.context#\n\napi.context is a read-only object that provides some context information.\n\nThe content of api.context is exactly the same as builder.context, please refer\nto builder.context.\n\n * Example\n\n\n\n\napi.getBuilderConfig#\n\nGet the Builder config, this method must be called after the modifyBuilderConfig\nhook is executed.\n\n * Type\n\n\n\n * Example\n\n\n\n\napi.getNormalizedConfig#\n\nGet the normalized Builder config, this method must be called after the\nmodifyBuilderConfig hook is executed.\n\nCompared with the api.getBuilderConfig method, the config returned by this\nmethod has been normalized, and the type definition of the config will be\nnarrowed. For example, the undefined type of config.html will be removed.\n\nIt is recommended to use this method to get the Builder config.\n\n * Type\n\n\n\n * Example\n\n\n\n\napi.isPluginExists#\n\nDetermines whether a plugin has been registered.\n\n * Type\n\n\n\n * Example\n\n\n\n\napi.getHTMLPaths#\n\nGet path information for all HTML assets.\n\nThis method will return an object, the key is the entry name and the value is\nthe relative path of the HTML file in the dist directory.\n\n * Type\n\n\n\n * Example\n\n","routePath":"/builder/en/api/plugin-core","lang":"en","toc":[{"text":"BuilderPlugin","id":"builderplugin","depth":2,"charIndex":59},{"text":"Pre-Plugins","id":"pre-plugins","depth":3,"charIndex":974},{"text":"Post-Plugins","id":"post-plugins","depth":3,"charIndex":1296},{"text":"Removing Plugins","id":"removing-plugins","depth":3,"charIndex":1520},{"text":"BuilderPluginAPI","id":"builderpluginapi","depth":2,"charIndex":1787},{"text":"Plugin for webpack-provider","id":"plugin-for-webpack-provider","depth":3,"charIndex":2204},{"text":"Plugins for rspack-provider","id":"plugins-for-rspack-provider","depth":3,"charIndex":2357},{"text":"Plugins for both webpack-provider and rspack-provider","id":"plugins-for-both-webpack-provider-and-rspack-provider","depth":3,"charIndex":2508},{"text":"api.context","id":"apicontext","depth":2,"charIndex":3016},{"text":"api.getBuilderConfig","id":"apigetbuilderconfig","depth":2,"charIndex":3221},{"text":"api.getNormalizedConfig","id":"apigetnormalizedconfig","depth":2,"charIndex":3370},{"text":"api.isPluginExists","id":"apiispluginexists","depth":2,"charIndex":3822},{"text":"api.getHTMLPaths","id":"apigethtmlpaths","depth":2,"charIndex":3919}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":13,"title":"Plugin Hooks","content":"#\n\nThis section describes the lifetime hooks provided by Builder plugin.\n\n\nOverview#\n\nCommon Hooks\n\n * modifyBuilderConfig: Modify raw config of Builder.\n * modifyBundlerChain (experimental): Modify config of webpack or Rspack via the\n   bundler chain api.\n * modifyWebpackChain: Modify webpack-chain.\n * modifyWebpackConfig: Modify raw config of webpack.\n * modifyRspackConfig: Modify raw config of Rspack.\n * onBeforeCreateCompiler: Called before creating compiler instance.\n * onAfterCreateCompiler: Called after the compiler object is created, but\n   before the build is executed.\n\nBuild Hooks: Called only when the build method is executed to build the\nproduction outputs.\n\n * onBeforeBuild: Called before the production build is executed.\n * onAfterBuild: Called after executing the production build, you can get the\n   build stats.\n\nDev Server Hooks: Called only when the startDevServer method is executed to run\nthe development server.\n\n * onBeforeStartDevServer: Called before starting the development server.\n * onAfterStartDevServer: Called after starting the development server.\n * onDevCompileDone: Called after each development compile.\n\nOther Hooks\n\n * onExit: Called when the process is going to exit.\n\n\nCommon Hooks#\n\n\nmodifyBuilderConfig#\n\nModify the config passed to the Builder, you can directly modify the config\nobject, or return a new object to replace the previous object.\n\n * Type\n\n\n\n * Example\n\n\n\n\nmodifyBundlerChain experimental#\n\nBundler chain is a subset of webpack chain, which contains part of the webpack\nchain API that you can use to modify both webpack and Rspack configuration.\n\nmodifyBundlerChain is used to call the bundler chain to modify the webpack /\nRspack configuration. You can use this hook when using webpack-provider or\nrspack-provider.\n\nThis hook only supports modifying the configuration of the non-differentiated\nparts of webpack and Rspack. For example, modifying the devtool configuration\noption (webpack and Rspack have the same devtool property value type), or adding\nan Rspack-compatible webpack plugin.\n\n * Type\n\n\n\n * Example\n\n\n\n\nmodifyWebpackChain#\n\nModify the webpack config through the webpack chain. This method is only called\nwhen using webpack-provider.\n\n * Type\n\n\n\n * Example\n\n\n\n\nmodifyWebpackConfig#\n\nTo modify the final webpack config object, you can directly modify the config\nobject, or return a new object to replace the previous object. This method is\nonly called when using webpack-provider.\n\nThis method is called later than the modifyWebpackChain hook.\n\n * Type\n\n\n\n * Example\n\n\n\n\nmodifyRspackConfig#\n\nTo modify the final Rspack config object, you can directly modify the config\nobject, or return a new object to replace the previous object. This method is\nonly called when using rspack-provider.\n\n * Type\n\n\n\n * Example\n\n\n\n\nonBeforeCreateCompiler#\n\nonBeforeCreateCompiler is a callback function that is triggered after the\nCompiler instance has been created, but before the build process begins. This\nhook is called when you run builder.startDevServer, builder.build, or\nbuilder.createCompiler.\n\nYou can access the Compiler instance object through the compiler parameter:\n\n * If the current bundler is webpack, you will get the webpack Compiler object.\n\n * If the current bundler is Rspack, you will get the Rspack Compiler object.\n\n * Type\n\n\n\n * Example\n\n\n\n\nonAfterCreateCompiler#\n\nonAfterCreateCompiler is a callback function that is triggered after the\ncompiler instance has been created, but before the build process. This hook is\ncalled when you run builder.startDevServer, builder.build, or\nbuilder.createCompiler.\n\nYou can access the Compiler instance object through the compiler parameter:\n\n * If the current bundler is webpack, you will get the webpack Compiler object.\n\n * If the current bundler is Rspack, you will get the Rspack Compiler object.\n\n * Type\n\n\n\n * Example\n\n\n\n\nBuild Hooks#\n\n\nonBeforeBuild#\n\nonBeforeBuild is a callback function that is triggered before the production\nbuild is executed. You can access the final configuration array of the\nunderlying bundler through the `bundlerConfigs' parameter:\n\n * If the current bundler is webpack, you will get a webpack configuration\n   array.\n\n * If the current bundler is Rspack, you will get an Rspack configuration array.\n\n * The configuration array can contain one or more configurations, depending on\n   the current target config of Builder.\n\n * Type\n\n\n\n * Example\n\n\n\n\nonAfterBuild#\n\nonAfterBuild is a callback function that is triggered after running the\nproduction build. You can access the build result information via the `stats'\nparameter:\n\n * If the current bundler is webpack, you will get webpack Stats.\n\n * If the current bundler is Rspack, you will get Rspack Stats.\n\n * Type\n\n\n\n * Example\n\n\n\n\nDev Server Hooks#\n\n\nonBeforeStartDevServer#\n\nCalled before starting the development server.\n\n * Type\n\n\n\n * Example\n\n\n\n\nonAfterStartDevServer#\n\nCalled after starting the development server, you can get the port number\nthrough the port parameter.\n\n * Type\n\n\n\n * Example\n\n\n\n\nonDevCompileDone#\n\nCalled after each development environment build, you can use isFirstCompile to\ndetermine whether it is the first build.\n\n * Type\n\n\n\n * Example\n\n\n\n\nOther Hooks#\n\n\nonExit#\n\nCalled when the process is going to exit, this hook can only execute synchronous\ncode.\n\n * Type\n\n\n\n * Example\n\n","routePath":"/builder/en/api/plugin-hooks","lang":"en","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":74},{"text":"Common Hooks","id":"common-hooks","depth":2,"charIndex":1219},{"text":"modifyBuilderConfig","id":"modifybuilderconfig","depth":3,"charIndex":1235},{"text":"modifyBundlerChain `experimental`","id":"modifybundlerchain-experimental","depth":3,"charIndex":-1},{"text":"modifyWebpackChain","id":"modifywebpackchain","depth":3,"charIndex":2084},{"text":"modifyWebpackConfig","id":"modifywebpackconfig","depth":3,"charIndex":2241},{"text":"modifyRspackConfig","id":"modifyrspackconfig","depth":3,"charIndex":2550},{"text":"onBeforeCreateCompiler","id":"onbeforecreatecompiler","depth":3,"charIndex":2793},{"text":"onAfterCreateCompiler","id":"onaftercreatecompiler","depth":3,"charIndex":3328},{"text":"Build Hooks","id":"build-hooks","depth":2,"charIndex":3854},{"text":"onBeforeBuild","id":"onbeforebuild","depth":3,"charIndex":3869},{"text":"onAfterBuild","id":"onafterbuild","depth":3,"charIndex":4409},{"text":"Dev Server Hooks","id":"dev-server-hooks","depth":2,"charIndex":4744},{"text":"onBeforeStartDevServer","id":"onbeforestartdevserver","depth":3,"charIndex":4764},{"text":"onAfterStartDevServer","id":"onafterstartdevserver","depth":3,"charIndex":4863},{"text":"onDevCompileDone","id":"ondevcompiledone","depth":3,"charIndex":5016},{"text":"Other Hooks","id":"other-hooks","depth":2,"charIndex":5182},{"text":"onExit","id":"onexit","depth":3,"charIndex":5197}],"domain":"","frontmatter":{"extractApiHeaders":[2]},"version":""},{"id":14,"title":"Browser Compatibility","content":"#\n\nThis chapter introduces how to use the capabilities provided by Builder to deal\nwith browser compatibility issues.\n\n\nSet browserslist#\n\nBefore dealing with compatibility issues, you first need to clarify which\nbrowsers your project needs to support, and add the corresponding browserslist\nconfig.\n\n * If you haven't set browserslist yet, please read the Browserslist chapter\n   first.\n\n * If you have set a browserslist, Builder will automatically compile according\n   to that scope, downgrade JavaScript syntax and CSS syntax, and inject the\n   required polyfill. In most cases, you can safely use modern ECMAScript\n   features without worrying about compatibility issues.\n\nAfter setting the browserslist, if you still encountered some compatibility\nissues, please continue reading below contents to find some solutions.\n\n\nBackground knowledge#\n\nBefore dealing with compatibility issues, it is recommended that you understand\nthe following background knowledge to better handle related issues.\n\n\nSyntax downgrade and API downgrade#\n\nWhen you use higher-version syntax and API in your project, in order to make the\ncompiled code run stably in lower-version browsers, we need to downgrade two\nparts: syntax downgrade and API downgrade.\n\nBuilder downgrades syntax through syntax transpilation, and downgrades API\nthrough inject polyfill.\n\n> Grammar and API are not strongly bound. When browser manufacturers implement\n> the engine, they will support some syntax or implement some APIs in advance\n> according to the specification or their own needs. Therefore, browsers from\n> different manufacturers in the same period are not necessarily compatible with\n> syntax and API. So in general practice, syntax and API are handled in two\n> parts.\n\n\nSyntax transpilation#\n\nSyntax is a series of rules for how a programming language organizes code, and\ncode that does not follow these rules cannot be correctly recognized by the\nprogramming language's engine and therefore cannot be run. In JavaScript, the\nfollowing examples are syntax rules:\n\n * In const foo = 1, const means to declare an immutable constant.\n * In foo?.bar?.baz, ?. indicates optional chaining of access properties.\n * In async function () {}, async means to declare an asynchronous function.\n\nBecause the parsers of different browsers can support different syntax,\nespecially the old version of the browser engine can support less grammar, so\nwhen some syntax are run in the lower version of the browser engine, an error\nwill be reported at the stage of parsing the AST .\n\nFor example, the following code will report an error in IE browser or a lower\nversion of Node.js:\n\n\n\nWhen we run this code in a low version of Node.js, the following error message\nwill appear:\n\n\n\nIt is obvious from the error message that this is a syntax error. This means\nthat this syntax is not supported in lower versions of the engine.\n\nSyntax can not be supported by polyfill or shim. If you want to run some syntax\nthat it does not originally support in a low-version browser, you need to\ntranspile the code into a syntax that the low-version engine can support.\n\nTranspile the above code into the following code to run in lower version\nengines:\n\n\n\nAfter transpilation, the syntax of the code has changed, and some syntax that\nthe engine of the lower version cannot understand has been replaced with the\nsyntax it can understand, but the meaning of the code itself has not changed.\n\nIf the engine encounters an unrecognized syntax when converting to AST, it will\nreport a syntax error and abort the code execution process. In this case, if\nyour project does not use capabilities such as SSR or SSG, the page will be\nblank, making the page unavailable.\n\nIf the code is successfully converted to AST, the engine will convert the AST\ninto executable code and execute it normally inside the engine.\n\n\nAPI Polyfill#\n\nJavaScript is an interpreted scripting language, unlike compiled languages like\nRust. Rust will check the calls in the code during the compilation phase, and\nJavaScript does not know whether the function called by this line of code exists\nbefore it actually runs to a certain line of code, so some errors will only\nappear at runtime.\n\nFor example:\n\n\n\nThe above code has correct syntax and can be converted to AST correctly in the\nfirst stage of the engine runtime, but when it is actually running, because the\nmethod notExistedMethod does not exist on String.prototype, an error will be\nreported:\n\n\n\nWith the iteration of ECMAScript, some new methods will be added to be built-in\nobjects. For example, String.prototype.replaceAll was introduced in ES2021, then\nthe replaceAll method does not exist in the built-in object String.prototype of\nmost browser engines before 2021, so the following code works in the latest\nChrome, but not in earlier versions:\n\n\n\nIn order to solve the problem that String.prototype lacks replaceAll in older\nbrowsers, we can extend the String.prototype object in older browsers and add\nthe replaceAll method to it, for example:\n\n\n\n> This technique of providing implementations for legacy environments to align\n> new APIs is called polyfill.\n\n\nDowngrade method#\n\nIn Builder, we divide code into three categories:\n\n * The first category is the source code in the current project.\n * The second category is third-party dependencies installed through npm.\n * The third category is the code out of the current project, such as the code\n   in other directories in the monorepo.\n\nBy default, Builder will only compile and downgrade the first category, other\ncategories will not be downgraded by default.\n\nThere are several considerations for this approach:\n\n * Downgrading all third-party party dependencies will significantly reduce\n   build performance.\n * Most third-party dependencies have been downgraded before release, and the\n   second downgrade may introduce new problems.\n * The code out of the current project may have been compiled, or the\n   compilation config may be different.\n\n\nDowngrade the current project code#\n\nThe code of the current project will be downgraded by default, so you don't need\nto add additional config, just make sure that the browserslist config is set\ncorrectly.\n\n\nDowngrade third-party dependencies#\n\nWhen you find that a third-party dependencies causes compatibility issues, you\ncan add this dependency to Builder's source.include config, Make Builder do\nextra compilation for this dependency.\n\nTaking the npm package query-string as an example, you can add the following\nconfig:\n\n\n\nPlease refer to source.include document for detailed usage guide.\n\n\nDowngrade the code out of the current project#\n\nWhen you import the code out of the current project, if the code has not been\ncompiled, then you also need to configure source.include to it to compile.\n\nFor example, if you need to reference a module under the packages directory in\nthe monorepo, you can add the following config:\n\n\n\n\nPolyfill mode#\n\nBuilder compiles JavaScript code through Babel or SWC, and injects polyfill\nlibraries like core-js, @babel/runtime and @swc/helpers.\n\nIn different usage scenarios, you may need different polyfill solutions. Builder\nprovides output.polyfill config to switch between different polyfill modes.\n\n\nentry mode#\n\nentry is the default mode and does not need to be set manually.\n\nWhen using the entry mode, Builder will analyze which core-js methods need to be\ninjected according to the browserslist set by the current project, and inject\nthem to the entry file of each page. The polyfill injected in this way is more\ncomprehensive, and there is no need to worry about the project source code and\nthird-party dependencies polyfill issues. However, because some unused polyfill\ncodes are included, the bundle size may increase.\n\nThe config of entry mode is:\n\n\n\n\nusage mode#\n\nThe usage mode allows more precise control over which core-js polyfills need to\nbe injected.\n\nWhen you enable the usage mode, Builder will analyze the source code in the\nproject and determine which polyfills need to be injected.\n\nFor example, the code uses the Map object:\n\n\n\nAfter compilation, only the polyfills for Map will be injected into this file:\n\n\n\nThe advantage of this method is that the size of the injected polyfill is\nsmaller, which is suitable for projects with higher requirements on bundle size.\nThe disadvantage is that polyfill may not be fully injected, because third-party\ndependencies will not be compiled and downgraded by default, so the polyfill\nrequired by third-party dependencies will not be analyzed. If you need to\nanalyze a third-party dependency, you also need to add it to source.include\nconfig.\n\nThe config of usage mode is:\n\n\n\n\nDisable Polyfill#\n\nYou can disable polyfill injection behavior by setting output.polyfill to 'off'.\n\n\n\nWhen using this config, you need to ensure compatibility by yourself, such as\nmanually import the required polyfill code through source.preEntry.","routePath":"/builder/en/guide/advanced/browser-compatibility","lang":"en","toc":[{"text":"Set browserslist","id":"set-browserslist","depth":2,"charIndex":119},{"text":"Background knowledge","id":"background-knowledge","depth":2,"charIndex":826},{"text":"Syntax downgrade and API downgrade","id":"syntax-downgrade-and-api-downgrade","depth":3,"charIndex":999},{"text":"Syntax transpilation","id":"syntax-transpilation","depth":3,"charIndex":1742},{"text":"API Polyfill","id":"api-polyfill","depth":3,"charIndex":3838},{"text":"Downgrade method","id":"downgrade-method","depth":2,"charIndex":5123},{"text":"Downgrade the current project code","id":"downgrade-the-current-project-code","depth":3,"charIndex":5967},{"text":"Downgrade third-party dependencies","id":"downgrade-third-party-dependencies","depth":3,"charIndex":6175},{"text":"Downgrade the code out of the current project","id":"downgrade-the-code-out-of-the-current-project","depth":3,"charIndex":6563},{"text":"Polyfill mode","id":"polyfill-mode","depth":2,"charIndex":6896},{"text":"entry mode","id":"entry-mode","depth":3,"charIndex":7205},{"text":"usage mode","id":"usage-mode","depth":3,"charIndex":7764},{"text":"Disable Polyfill","id":"disable-polyfill","depth":3,"charIndex":8640}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"Browserslist","content":"#\n\nBuilder supports using Browserslist to specify which browsers should be\nsupported in your Web application.\n\n\nWhat is Browserslist#\n\nSince different browsers support ECMAScript and CSS differently, developers need\nto set the correct browser range for web applications.\n\nBrowserslist can specify which browsers your web application can run in, it\nprovides a configuration for specifying browsers range. Browserslist has become\na standard in the industry, it is used by libraries such as Autoprefixer, Babel,\nESLint, PostCSS, SWC and Webpack.\n\nWhen you specify a browser range through Browserslist, Builder will compile\nJavaScript and CSS code to the specified syntax, and inject the corresponding\npolyfill code. When you only need to be compatible with modern browsers, the\ncompilation process will introduce less compatible code and polyfills, and the\nperformance of the page will be better.\n\nFor example, when you need to be compatible with IE11 browser, Builder will\ncompile the code to ES5 and inject the polyfill required by IE11 through\ncore-js.\n\nWhat is polyfill\n\nA polyfill is a piece of code that provides the functionality of a newer feature\nto older browsers that do not support that feature natively. It is used to fill\nin the gaps in older browsers' implementations of web standards, allowing\ndevelopers to use newer features safely without having to worry about whether or\nnot they will work in older browsers. For example, if a browser does not support\nthe Array.map() method, a polyfill can be used to provide that functionality,\nallowing code that uses Array.prototype.flat() to work in that browser.\nPolyfills are commonly used to ensure that web applications can work on a wide\nrange of browsers, including older ones.\n\n\nSet Browserslist#\n\nYou can set the Browserslist value in the package.json or .browserslistrc file\nin the root directory of the current project.\n\n\nExample#\n\nSet via browserslist in package.json:\n\n\n\nSet via a separate .browserslistrc file:\n\n\n\n\nEffective Scope#\n\nBy default, the .browserslistrc file only takes effect for browser-side bundles,\nincluding the web and web-worker target types.\n\nWhen you are building multiple targets at the same time, for example if the\ntargets contains both web and node, only the web bundles will be affected by the\n.browserslistrc file. If you want to make changes to the node bundles, you can\nuse the output.overrideBrowserslist configuration below.\n\n\nUse output.overrideBrowserslist config#\n\nIn addition to the above standard usage, Builder also provides\noutput.overrideBrowserslist config, which can also set the value of\nBrowserslist.\n\noverrideBrowserslist can be set to an array, which is written in the same way as\nthe browserslistrc configuration, but has a higher priority than browserslistrc.\n\n\n\nWhen .overrideBrowserslist is set to an array, it will also only work for\nbrowser-side bundles.\n\nWhen you build multiple targets at the same time, you can set different browser\nranges for different targets. At this point, you need to set\noverrideBrowserslist to an object whose key is the corresponding build target.\n\nFor example to set different ranges for web and node:\n\n\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\n\nCommonly used Browserslist#\n\nThe following are some commonly used Browserslist, you can choose according to\nyour project type.\n\n\nDesktop PC scenario#\n\nIn the desktop PC scenario, if you need to be compatible with IE 11 browsers,\nyou can set Browserslist to:\n\n\n\nThe above Browserslist will compile the code to the ES5 specification. For the\nspecific browser list, please check browserslist.dev.\n\nIf you don't need to be compatible with IE 11 browsers, you can adjust\nBrowserslist to get a more performant output, such as:\n\n * Set to browsers that supports native ES Modules (recommended):\n\n\n\n * Set to browsers that support ES6:\n\n\n\n\nMobile H5 scenario#\n\nThe mobile H5 scenario is mainly compatible with iOS and Android systems,\nusually we set Browserslist as:\n\n\n\nThe above Browserslist will compile the code to the ES5 specification, which is\ncompatible with most mobile scenarios on the market. For the detailed browsers\nlist, please check browserslist.dev.\n\n\n\nYou can also choose to use the ES6 specification in the H5 scene, which will\nmake the performance of the page better. The corresponding Browserslist is as\nfollows:\n\n\n\n\nDefault Browserslist#\n\nBuilder will set different default values of Browserslist according to build\ntarget, but we recommend that you explicitly set Browserslist in your project,\nwhich will make the compatible scope of the project more clear.\n\n\nWeb Target#\n\nThe default values of web target are as follows:\n\n\n\nUnder this browser range, JavaScript code will be compiled to ES5 syntax.\n\n\nNode Target#\n\nNode target will be compatible with Node.js 14.0 by default.\n\n\n\n\nWeb Worker Target#\n\nThe default Browserslist of the Web Worker target is consistent with the Web\ntarget.\n\n\n\n\nModern Web Target#\n\nModern Web target will be compatible with browsers that support native ES\nModules by default.\n\n\n\n\nQuery browser support#\n\nWhen developing, we need to know the browser support of certain features or\nAPIs. At this time, we can check on the caniuse website.\n\nFor example, we need to know the browser support of Promise, just enter Promise\nin caniuse, and you can see the following results:\n\n\n\nAs can be seen from the above table, Promise is natively supported in Chrome 33\nand iOS 8, but not in IE 11.","routePath":"/builder/en/guide/advanced/browserslist","lang":"en","toc":[{"text":"What is Browserslist","id":"what-is-browserslist","depth":2,"charIndex":111},{"text":"Set Browserslist","id":"set-browserslist","depth":2,"charIndex":1740},{"text":"Example","id":"example","depth":3,"charIndex":1886},{"text":"Effective Scope","id":"effective-scope","depth":3,"charIndex":1982},{"text":"Use output.overrideBrowserslist config","id":"use-outputoverridebrowserslist-config","depth":3,"charIndex":2424},{"text":"Commonly used Browserslist","id":"commonly-used-browserslist","depth":2,"charIndex":3403},{"text":"Desktop PC scenario","id":"desktop-pc-scenario","depth":3,"charIndex":3532},{"text":"Mobile H5 scenario","id":"mobile-h5-scenario","depth":3,"charIndex":4035},{"text":"Default Browserslist","id":"default-browserslist","depth":2,"charIndex":4532},{"text":"Web Target","id":"web-target","depth":3,"charIndex":4777},{"text":"Node Target","id":"node-target","depth":3,"charIndex":4918},{"text":"Web Worker Target","id":"web-worker-target","depth":3,"charIndex":4997},{"text":"Modern Web Target","id":"modern-web-target","depth":3,"charIndex":5106},{"text":"Query browser support","id":"query-browser-support","depth":2,"charIndex":5224}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"Custom webpack config","content":"#\n\nBuilder supports directly modifying webpack configuration objects, and also\nsupports deep customization of webpack configuration through webpack-chain.\n\n\nModify the webpack configuration object#\n\nYou can use tools.webpack to modify the webpack configuration object.\n\n\n\nWhen to use\n\nWhen you only need to modify a small amount of webpack configuration, you can\nuse tools.webpack. But if you need to modify the built-in webpack plugins or\nloaders of Builder, please use tools.webpackChain to modify.\n\n\nUsing webpack-chain#\n\nwebpack-chain is a configuration modification tools that is different from\nmodifying webpack configuration objects. Compared with modifying webpack\nconfiguration objects, webpack-chain not only supports chain calls, but also can\nmodify built-in Rule or Plugin based on id.\n\n\ntools.webpackChain config#\n\nBuilder provides tools.webpackChain config to modify webpack-chain.\n\nThe value of tools.webpackChain is Function type, which receives two parameters:\n\n * The first parameter is the webpack-chain instance, you can use this instance\n   to modify the default webpack config.\n * The second parameter is a utils collection, including env, isProd, CHAIN_ID,\n   etc.\n\nHere's a basic example:\n\n\n\n\nwebpack-chain Basics#\n\nBefore you start using webpack-chain to modify your webpack configuration, it is\nrecommended that you understand some basics.\n\n\nHow does webpack-chain locate#\n\nSimply put, webpack-chain requires users to set a unique id for each Rule,\nLoader, Plugin, and Minimizer. Through these ids, you can easily find the\ndesired object from deeply nested webpack configuration object.\n\nBuilder exports all internally defined ids through the CHAIN_ID object, so you\ncan use these exported ids to locate the Loader or Plugin you want to modify,\nwithout having to search through complex traversal in the webpack configuration\nobject.\n\nFor example, to delete the built-in HTML plugin via CHAIN_ID.PLUGIN.HTML:\n\n\n\n\nwebpack-chain id type#\n\nThe CHAIN_ID object contains some ids, which have different meanings:\n\nCHAIN_ID FIELD            CORRESPONDING CONFIGURATION   DESCRIPTION\nCHAIN_ID.PLUGIN           plugins[i]                    corresponds to a plugin in the webpack configuration\nCHAIN_ID.RULE             module.rules[i]               corresponds to a Rule in the webpack configuration\nCHAIN_ID.USE              module.rules[i].loader        corresponds to a Loader in the webpack configuration\nCHAIN_ID.MINIMIZER        optimization.minimizer        corresponds to a compression tool in webpack configuration\nCHAIN_ID.RESOLVE_PLUGIN   resolve.plugins[i]            corresponds to a Resolve plugin in the webpack configuration\n\n\nwebpack-chain Demo#\n\n\nAdd/Modify/Delete loader#\n\n\n\n\nAdd/Modify/Delete plugin#\n\n\n\n\nModify the config according to environment#\n\nIn the tool collection, you can get the flag of various environments, such as\ndevelopment/production/test environment, SSR build, and Web Worker build, so as\nto modify the config in different environments.\n\n\n\nThe above are some common config examples. For the complete webpack-chain API,\nplease refer to webpack-chain documentation.","routePath":"/builder/en/guide/advanced/custom-webpack-config","lang":"en","toc":[{"text":"Modify the webpack configuration object","id":"modify-the-webpack-configuration-object","depth":2,"charIndex":156},{"text":"Using webpack-chain","id":"using-webpack-chain","depth":2,"charIndex":502},{"text":"tools.webpackChain config","id":"toolswebpackchain-config","depth":3,"charIndex":799},{"text":"webpack-chain Basics","id":"webpack-chain-basics","depth":2,"charIndex":1216},{"text":"How does webpack-chain locate","id":"how-does-webpack-chain-locate","depth":3,"charIndex":1367},{"text":"webpack-chain id type","id":"webpack-chain-id-type","depth":3,"charIndex":1937},{"text":"webpack-chain Demo","id":"webpack-chain-demo","depth":2,"charIndex":2659},{"text":"Add/Modify/Delete loader","id":"addmodifydelete-loader","depth":3,"charIndex":2681},{"text":"Add/Modify/Delete plugin","id":"addmodifydelete-plugin","depth":3,"charIndex":2711},{"text":"Modify the config according to environment","id":"modify-the-config-according-to-environment","depth":3,"charIndex":2741}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"Environment Variables","content":"#\n\nBuilder supports injecting environment variables or expressions into the code\nduring compilation, which is helpful for distinguishing the running environment\nor injecting constant values. This chapter introduces how to use environment\nvariables.\n\n\nDefault Variables#\n\n\nprocess.env.NODE_ENV#\n\nBy default, Builder will automatically set the process.env.NODE_ENV environment\nvariable to 'development' in development mode and 'production' in production\nmode.\n\nYou can use process.env.NODE_ENV directly in Node.js and in the runtime code.\n\n\n\nIn the development environment, the above code will be compiled as:\n\n\n\nIn the production environment, the above code will be compiled as:\n\n\n\nAfter code minification, if (false) { ... } will be recognized as invalid code\nand removed automatically.\n\n\nprocess.env.ASSET_PREFIX#\n\nYou can use process.env.ASSET_PREFIX in the runtime code to access the URL\nprefix of static assets.\n\n * In development, it is equivalent to the value set by dev.assetPrefix.\n * In production, it is equivalent to the value set by output.assetPrefix.\n * Builder will automatically remove the trailing slash from assetPrefix to make\n   string concatenation easier.\n\nFor example, we copy the static/icon.png image to the dist directory through\noutput.copy configuration:\n\n\n\nThen we can access the image URL in the runtime code:\n\n\n\nIn the development environment, the above code will be compiled as:\n\n\n\nIn the production environment, the above code will be compiled as:\n\n\n\n\nUsing define config#\n\nBy configuring the source.define, you can replace expressions with other\nexpressions or values in compile time.\n\nDefine looks like macro definitions in other programming languages. But\nJavaScript has powerful runtime capabilities, so you don't need to use it as a\ncomplicated code generator. You can use it to pass simple data, such as\nenvironment variables, from compile time to runtime. Almost there, it can be\nused to work with Builder to shake trees.\n\n\nReplace Expressions#\n\nThe most basic use case for Define is to replace expressions in compile time.\n\nThe value of the environment variable NODE_ENV will change the behavior of many\nvendor packages. Usually, we need to set it to production.\n\n\n\nNote that the value provided here must be a JSON string, e.g.\nprocess.env.NODE_ENV with a value of \"production\" should be passed in as\n\"\\\"production\\\"\" to be processed correctly.\n\nSimilarly { foo: \"bar\" } should be converted to \"{\\\"foo\\\":\\\"bar\\\"}\", which if\npassed directly into the original object would mean replacing the expression\nprocess.env.NODE_ENV.foo with the identifier bar.\n\nFor more about source.define, just refer to API References.\n\nTIP\n\nThe environment variable NODE_ENV shown in the example above is already injected\nby the Builder, and you usually do not need to configure it manually.\n\n\nprocess.env Injection#\n\nWhen using source.define or source.globalVars, please avoid injecting the entire\nprocess.env object, e.g. the following usage is not recommended:\n\n\n\nIf the above usage is adopted, the following problems will be caused:\n\n 1. Some unused environment variables are additionally injected, causing the\n    environment variables of the development environment to be leaked into the\n    front-end code.\n 2. As each process.env code will be replaced by a complete environment variable\n    object, the bundle size of the front-end code will increase and the\n    performance will decrease.\n\nSo please avoid full injection, just inject the used variables from process.env.\n\n\nSetup Environment Variables#\n\nYou may often need to set environment variables, in which case you can instead\nuse the source.globalVars configuration to simplify configuration. It is a\nsyntax sugar of source.define, the only difference is that source.globalVars\nwill automatically stringify the value, which makes it easier to set the value\nof global variables and avoid writing a lot of JSON.stringify(...) stuffs.\n\n\n\nNote that either of these methods will only match the full expression;\ndestructing the expression will prevent the Builder from correctly recognizing\nit.\n\n\n\n\nDeclare type of environment variable#\n\nWhen you read an environment variable in a TypeScript file, TypeScript may\nprompt that the variable lacks a type definition, and you need to add the\ncorresponding type declaration.\n\nFor example, if you reference a CUSTOM_VAR variable, the following prompt will\nappear in the TypeScript file:\n\n\n\nTo fix this, you can create a src/env.d.ts file in your project and add the\nfollowing content:\n\n\n\n\nTree Shaking#\n\nDefine can also be used to mark dead code to assist the Builder with Tree\nShaking optimization.\n\nBuild artifacts for different regions is achieved by replacing\nprocess.env.REGION with a specific value, for example.\n\n\n\nFor an internationalized app:\n\n\n\nSpecifying the environment variable REGION=sg and then executing build will\neliminate any dead code.\n\n\n\nUnused components are not bundled into the artifacts, and their external\ndependencies can be optimized accordingly, resulting in a destination with\nbetter size and performance.\n\n\nIn-source testing#\n\nVitest supports writing tests inside source files to test the behavior of\nprivate features without exporting them. Set up Define to remove the test code\nfrom the production build. Please refer to the Vitest's documentation for\ndetailed guidelines\n\n","routePath":"/builder/en/guide/advanced/define","lang":"en","toc":[{"text":"Default Variables","id":"default-variables","depth":2,"charIndex":250},{"text":"process.env.NODE_ENV","id":"processenvnode_env","depth":3,"charIndex":271},{"text":"process.env.ASSET_PREFIX","id":"processenvasset_prefix","depth":3,"charIndex":788},{"text":"Using define config","id":"using-define-config","depth":2,"charIndex":1484},{"text":"Replace Expressions","id":"replace-expressions","depth":3,"charIndex":1963},{"text":"process.env Injection","id":"processenv-injection","depth":3,"charIndex":2811},{"text":"Setup Environment Variables","id":"setup-environment-variables","depth":2,"charIndex":3499},{"text":"Declare type of environment variable","id":"declare-type-of-environment-variable","depth":2,"charIndex":4075},{"text":"Tree Shaking","id":"tree-shaking","depth":2,"charIndex":4508},{"text":"In-source testing","id":"in-source-testing","depth":2,"charIndex":5057}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"Hot Module Replacement","content":"#\n\nHot Module Replacement (HMR) exchanges, adds, or removes modules while an\napplication is running, without a full reload. This can significantly speed up\ndevelopment in a few ways:\n\n * Retain application state which is lost during a full reload.\n * Save valuable development time by only updating what's changed.\n * Instantly update the browser when modifications are made to CSS/JS in the\n   source code, which is almost comparable to changing styles directly in the\n   browser's dev tools.\n\n\nEnabling HMR#\n\nBuilder has built-in support for HMR. By default, HMR is enabled in development.\n\nBy setting dev.hmr to false, HMR can be disabled, which the HMR and\nreact-refresh will no longer work.\n\n\n\n\nSpecify HMR URL#\n\nBy default, Builder uses the host and port number of the current page to splice\nthe WebSocket URL of HMR.\n\nWhen the HMR connection fails, you can specify the WebSocket URL by customizing\ndevServer.client configuration.\n\n\nDefault Config#\n\nThe default config are as follows, Builder will automatically deduce the URL of\nthe WebSocket request according to the current location:\n\n\n\n\nProxy#\n\nIf you are proxying an online page to local development, WebSocket requests will\nfail to connect. You can try configuring devServer.client to the following\nvalues so that HMR requests can reach the local Dev Server.\n\n\n\n\nLive reloading vs Hot reloading#\n\n * Live reloading: After modifying the file, webpack recompiles and forces a\n   browser refresh, which is a global (application-wide) refresh, equivalent to\n   window.location.reload().\n * Hot reloading: After modifying the file, webpack recompiles the corresponding\n   module and remembers the state of the application when it is refreshed, thus\n   enabling a partial refresh, i.e. hot update.\n\nDevServer provides two configuration options, hot and liveReload, to control how\nupdates are made. When both hot and liveReload are open, DevServer will attempt\nto use hot mode (HMR) first, and will degrade to reloading the page if the HMR\nupdate fails.\n\n\nFAQ#\n\nPlease refer to HMR FAQ.","routePath":"/builder/en/guide/advanced/hmr","lang":"en","toc":[{"text":"Enabling HMR","id":"enabling-hmr","depth":2,"charIndex":495},{"text":"Specify HMR URL","id":"specify-hmr-url","depth":2,"charIndex":699},{"text":"Default Config","id":"default-config","depth":3,"charIndex":938},{"text":"Proxy","id":"proxy","depth":3,"charIndex":1096},{"text":"Live reloading vs Hot reloading","id":"live-reloading-vs-hot-reloading","depth":2,"charIndex":1324},{"text":"FAQ","id":"faq","depth":2,"charIndex":2010}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"REM adaptation","content":"#\n\nBuilder supports REM adaptation via output.convertToRem, which can dynamically\nadjusts the font size according to the screen size, so that the page will be\ndisplayed correctly on different screen sizes.\n\n\nEnabling REM adaptability#\n\nBy setting output.convertToRem, the Builder can do the following things:\n\n * Convert px to rem in CSS.\n * Dynamic setting the fontSize of the root element.\n\n\n\n\nCSS conversion properties#\n\nBy default, rootFontSize is 50. So the CSS styles value are converted according\nto the ratio of 1rem : 50px.\n\n\n\nBy default, builder converts all CSS properties from px to rem. If you want to\nconvert only the font-size property, you can setting pxtorem.propList is\n['font-size'].\n\n\n\n\nSetting the page rootFontSize#\n\nThe formula for calculating the font size of the page root element is:\n\n\n\nIn a mobile browser with a screen width of 390, the default value for\nrootFontSize is 50 and the screenWidth of the UI design is 375.\n\nThe calculated font size for the root element of the page is 52 (390 * 50 /\n375).\n\nAt this point, 1 rem is 52px, 32px (0.64 rem) in the CSS style, the actual size\nin page is 33.28 px.\n\n\n\n\nCustomize maxRootFontSize#\n\nIn the desktop browser, the page rootFontSize obtained from the calculation\nformula is often too large. When the calculated result large than the\nmaxRootFontSize, the maxRootFontSize will used as the page rootFontSize.\n\nIn the desktop browser with a screen width of 1920, the calculated rootFontSize\nis 349, which exceeds the default maxRootFontSize of 64. 64 is used as the\ncurrent root element font value.\n\n\n\n\nHow to determine if REM is in effect？#\n\n 1. CSS: Check the generated .css file to see if the value of the corresponding\n    property is converted from px to rem.\n 2. HTML: Open the Page Console to see if a valid value exists for\n    document.documentElement.style.fontSize.\n\n\nHow to get the rootFontSize value that is actually in effect on the page?#\n\nThe actual rootFontSize in effect for the page is calculated dynamically based\non the current page. It can be seen by printing\ndocument.documentElement.style.fontSize or obtained by window.ROOT_FONT_SIZE.","routePath":"/builder/en/guide/advanced/rem","lang":"en","toc":[{"text":"Enabling REM adaptability","id":"enabling-rem-adaptability","depth":2,"charIndex":207},{"text":"CSS conversion properties","id":"css-conversion-properties","depth":2,"charIndex":395},{"text":"Setting the page rootFontSize","id":"setting-the-page-rootfontsize","depth":2,"charIndex":706},{"text":"Customize maxRootFontSize","id":"customize-maxrootfontsize","depth":2,"charIndex":1135},{"text":"How to determine if REM is in effect？","id":"how-to-determine-if-rem-is-in-effect","depth":2,"charIndex":1575},{"text":"How to get the rootFontSize value that is actually in effect on the page?","id":"how-to-get-the-rootfontsize-value-that-is-actually-in-effect-on-the-page","depth":2,"charIndex":1851}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"Using Rspack","content":"#\n\nThis document will show you how to enable Rspack build mode in the Builder.\n\nRspack - A High Performance JavaScript Bundler\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\n\nEnable Rspack#\n\n\nEnable in Modern.js framework#\n\nModern.js framework uses webpack as the default bundler. If you want to use\nRspack as the bundler, you can refer to: Using Rspack.\n\n\nUse Builder in a front-end framework#\n\nIntegrating rspack-provider into a frontend framework is similar to integrating\nwebpack-provider. You only need to change the dependency from\n@modern-js/builder-webpack-provider to @modern-js/builder-rspack-provider.\n\n\n\n\n\n\nPrecautions#\n\nBefore using Rspack, please be aware that Rspack is currently in the rapid\niteration phase. Therefore, you need to be aware of the following:\n\n * The API and configuration items of Rspack are not completely stable yet, so\n   non-major versions may introduce some incompatible changes.\n * Rspack currently relies on SWC for code transformation and compression. Due\n   to the lower maturity of SWC compared to Babel and Terser, you may encounter\n   bugs of SWC in edge cases.\n * Rspack is compatible with most plugins and loaders in the webpack ecosystem,\n   but there are still some plugins and loaders that cannot be used temporarily.\n\nRspack is actively working to resolve the above issues and plans to address them\nin future updates. We recommend evaluating your project requirements and risk\ntolerance before deciding whether to use Rspack. If your project requires high\nstability and high performance, you should choose the more mature tool, Webpack.\nIf you are willing to try new tools and contribute to their development, we\nencourage you to use Rspack and provide feedback and bug reports to help improve\nits stability and functionality.\n\n\nMigrating from webpack to Rspack#\n\nBuilder aims to eliminate the main differences between different bundlers and\nhelp users migrate at a lower cost. However, due to the different capabilities\nof each bundler, you still need to be aware of some differences.\n\nThis article will introduce the differences between webpack and Rspack from the\nperspective of Builder. If you need to know more in-depth differences, please\nrefer to the Rspack documentation.\n\n\n1. Builder configuration differences#\n\nCurrently, most of configuration options in Builder have been adapted for\nRspack, but there are still some configurations that are in the process of being\nsupported.\n\nSource Config#\n\n> Source code parsing and compilation related configurations in Builder.\n\nUnsupported configurations and capabilities include:\n\n * source.moduleScopes (track issue)\n\nHtml Config#\n\n> HTML related configurations in Builder.\n\nAll configurations and capabilities under html are available within rspack.\n\nSecurity Config#\n\n> Security related configurations in Builder.\n\nUnsupported configurations and capabilities include:\n\n * security.sri (track issue)\n\nDev Config#\n\n> Dev related configurations in Builder.\n\nAll configurations and capabilities under dev are available within rspack.\n\nOutput Config#\n\n> Output related configurations in Builder.\n\nAll configurations and capabilities under output are available within rspack.\n\nExperiments Config#\n\n> Experimental related configurations in the Builder\n\nAll configurations and capabilities under experimental are available within\nrspack.\n\nPerformance Config#\n\n> Performance related configurations in Builder.\n\nUnsupported configurations and capabilities include:\n\n * performance.buildCache\n\nTools Config#\n\n> Low-level tools configurations in Builder.\n\nUnsupported configurations and capabilities include:\n\n * tools.terser\n * tools.tsLoader\n * tools.webpack：use tools.rspack instead.\n * tools.webpackChain：use tools.bundlerChain instead.\n\nTIP\n\nIn addition to the above configurations, some of the supported configurations\nmay have differences in their capabilities. For specific differences in\nconfigurations, please refer to the corresponding API for each configuration.\n\n\n2. Migrating from webpackChain to bundlerChain#\n\nBuilder supports modifying Rspack config via bundlerChain. configurations\nmodified via bundlerChain will take effect on both webpack and Rspack builds.\n\n\n\nTIP\n\nThe bundlerChain only provides consistent api modification for Rspack & webpack\nconfigurations, the actual plugin / loader availability depends on the actual\nRspack / webpack support.\n\nCHAIN_ID differences#\n\nBecause of some implementation differences between webpack and Rspack, there are\nsome differences in the rules configuration.\n\nYou can see all the rules that are supported in both Rspack & webpack via\ntools.bundlerChain#CHAIN_ID.\n\n\n3. Migrating from tools.webpack to tools.rspack#\n\nBundlerChain only supports modifying the Rspack & webpack intersection config,\nmore Rspack-exclusive features need to be modified via tools.rspack.\n\nBefore modify the Rspack configuration object, you may should know the config\ndiff between Rspack and Webapck.\n\n\n\nMore information about Rspack, please refer to the Rspack website.\n\n\n4. Babel Configuration Migration#\n\nBy default, Rspack uses SWC for transpilation and compression. Therefore, when\nusing Rspack as the bundler, babel-loader is not loaded by default.\n\nFor most common Babel plugins, you can find corresponding alternatives in\nRspack, and there are also corresponding compatible configuration options in\nBuilder.\n\nBABEL PLUGIN                                      RSPACK CONFIGURATION    BUILDER CONFIGURATION\n@babel/preset-env                                 builtins.presetEnv      Browserslist、Browser Compatibility\n@babel/preset-react                               builtins.react          Hot Module Replacement\n@emotion/babel-plugin                             builtins.emotion        Not supported\nbabel-plugin-import                               builtins.pluginImport   source.transformImport\nbabel-plugin-lodash                               Not supported           Not supported\nbabel-plugin-styled-components                    Not supported           Not supported\n@babel/plugin-react-transform-remove-prop-types   Not supported           Not supported\n\nTIP\n\nWhen using Rspack for building, you can still configure Babel plugins through\ntools.babel, but this will result in additional compilation overhead, which may\nslow down the Rspack build to some extent.\n\n\n5. SWC Configuration Support#\n\nRspack has built-in support for some swc configurations, such as builtins.react,\nwhich can be referred to in Builtins.\n\nAdding swc plugins and more custom configurations is not currently supported in\nRspack. Relevant requirements can be tracked through the corresponding issue.\n\n\n6. Webpack Plugin Migration#\n\nCurrently, only a limited number of webpack plugins are compatible with Rspack.\n\nIf you are using the following plugins (or indirect dependencies) in your\nproject, you will need to temporarily remove them or use alternative solutions,\notherwise you won't be able to switch to the Rspack build:\n\n * webpack-retry-chunk-load-plugin：use output.assetsRetry instead.\n * webpack.ProviderPlugin：use builtins.provide instead.\n * webpack.DefinePlugin：use builtins.define instead.\n * webpack.ContextReplacementPlugin\n * ...\n\nDetailed plugin support can be found at: Plugin compatibility.\n\nThe plugins not listed can be judged according to Rspack Plugin API.\n\n\n7. CSS Modules Configuration Migration#\n\nRspack mode does not support modifying CSS Modules configuration through\ntools.cssLoader, however, Builder provides output.cssModules configuration, it\nused to smooth Rspack mode and webpack mode difference.\n\n\n\n\nBuild performance profile#\n\nBuilder supports the use of the RSPACK_PROFILE environment variable for build\nperformance profile.\n\n\n\nThis command will generate a rspack-profile-${timestamp} folder in the dist\nfolder, and it will contain logging.json, trace.json and jscpuprofile.json\nfiles.\n\n * trace.json: The time spent on each phase of the Rust side is recorded at a\n   granular level using tracing and can be viewed using ui.perfetto.dev\n * jscpuprofile.json: The time spent at each stage on the JavaScript side is\n   recorded at a granular level using Node.js inspector and can be viewed using\n   speedscope.app\n * logging.json: Includes some logging information that keeps a coarse-grained\n   record of how long each phase of the build took\n\n\nCompare with Rspack CLI#\n\nBuilder Rspack build mode comparison Rspack CLI adds a lot of out-of-the-box\ncapabilities. At the same time, these capabilities will bring a certain degree\nof performance overhead and behavioral differences:\n\nFEATURES                                    DESCRIPTION                                                    LINKS\nBrowser Compatibility                       Builder will set different default values of Browserslist      \n                                            according to build target\nSourceMap generation                        Builder generates different SourceMaps according to the        \n                                            environment by default (false is used by default in Rspack\n                                            CLI)\nSVG to React component                      Builder support to import SVG as component by default          \nImport common component library on demand   When using Ant Design or Arco Design component library,        \n                                            Builder will automatically enable the on-demand import\n                                            function by default\nType Checker                                Builder runs TypeScript type checker by default                \nPostCSS compilation                         PostCSS compilation is enabled by default, built-in            \n                                            autoprefixer and other plugins\nIntegrate @rspack/html-plugin               Builder integrates @rspack/html-plugin by default to support   \n                                            more HTML template features (builtins.html is used by\n                                            default in Rspack CLI)\nDevServer                                   Builder implement DevServer based on webpack-dev-middleware    \n                                            (@rspack/dev-server is used in Rspack CLI)\n\nAll of the above capabilities provide configurable options that can be adjusted\nas needed based on the actual situation of the project.\n\nFor more built-in capabilities, please refer to Feature Navigation.\n\n\nFAQ#\n\n\nAfter enabling Rspack, the performance is not as fast as expected?#\n\nUsually, after enabling Rspack, there will be a 5 to 10 times improvement in\ncompilation performance compared to Webpack.\n\nThe following behaviors are currently known to slow down Rspack build\nperformance to some extent:\n\nUsing configuration options or plugins that rely on Babel#\n\nWhen using Rspack to build, babel-loader is not enabled by default.\n\nHowever, when a project uses configuration options or plugins implemented with\nBabel, an additional babel-loader will be added for file transpilation:\n\n * Add the Babel plugin via tools.babel\n * Use Modern.js SSR feature\n * ...\n\nYou can check whether the Babel plugin exists in the final generated Rspack\nconfiguration by using debug mode.\n\nEnable TypeScript type checking#\n\nBy default, Builder enables TypeScript type checking during build. In large\nprojects, type checking can take much longer than the actual build time of\nRspack, so this behavior can slow down the build speed to some extent during\nproduction environment builds.\n\nIn this case, you can disable type checking using output.disableTsChecker to see\nif Rspack performance meets your expectations after excluding type checking.\n\nLarge number of Less files#\n\nCurrently, Less files are processed using the less-loader based on JavaScript\nand no Rust version is provided. Therefore, processing a large number of Less\nfiles can slow down the build performance.\n\nTIP\n\nWhen using component libraries such as Arco Design, please try to avoid fully\nintroducing Less styles. You can import on-demand instead. or directly import\nCSS styles.\n\nLarge number of SVG files#\n\nBy default, builder supports using SVG resources as React components, which\nincurs some performance overhead.\n\nIf you don't need this feature, you can set output.disableSvgr to true to\ndisable this behavior to improve build performance.\n\nNot import component library on demand#\n\nBy default, when using Ant Design or Arco Design component library, Builder will\nautomatically enable the on-demand import function, and the default\nconfiguration can refer to source.transformImport.\n\nWhen using other component libraries, if the component library supports\non-demand import, we recommend to configure on-demand import through\nsource.transformImport first.","routePath":"/builder/en/guide/advanced/rspack-start","lang":"en","toc":[{"text":"Enable Rspack","id":"enable-rspack","depth":2,"charIndex":650},{"text":"Enable in Modern.js framework","id":"enable-in-modernjs-framework","depth":3,"charIndex":667},{"text":"Use Builder in a front-end framework","id":"use-builder-in-a-front-end-framework","depth":3,"charIndex":832},{"text":"Precautions","id":"precautions","depth":2,"charIndex":1094},{"text":"Migrating from webpack to Rspack","id":"migrating-from-webpack-to-rspack","depth":2,"charIndex":2255},{"text":"1. Builder configuration differences","id":"1-builder-configuration-differences","depth":3,"charIndex":2708},{"text":"Source Config","id":"source-config","depth":4,"charIndex":2914},{"text":"Html Config","id":"html-config","depth":4,"charIndex":3096},{"text":"Security Config","id":"security-config","depth":4,"charIndex":3230},{"text":"Dev Config","id":"dev-config","depth":4,"charIndex":3380},{"text":"Output Config","id":"output-config","depth":4,"charIndex":3511},{"text":"Experiments Config","id":"experiments-config","depth":4,"charIndex":3651},{"text":"Performance Config","id":"performance-config","depth":4,"charIndex":3811},{"text":"Tools Config","id":"tools-config","depth":4,"charIndex":3963},{"text":"2. Migrating from webpackChain to bundlerChain","id":"2-migrating-from-webpackchain-to-bundlerchain","depth":3,"charIndex":4445},{"text":"CHAIN_ID differences","id":"chain_id-differences","depth":4,"charIndex":4839},{"text":"3. Migrating from tools.webpack to tools.rspack","id":"3-migrating-from-toolswebpack-to-toolsrspack","depth":3,"charIndex":5094},{"text":"4. Babel Configuration Migration","id":"4-babel-configuration-migration","depth":3,"charIndex":5476},{"text":"5. SWC Configuration Support","id":"5-swc-configuration-support","depth":3,"charIndex":6780},{"text":"6. Webpack Plugin Migration","id":"6-webpack-plugin-migration","depth":3,"charIndex":7091},{"text":"7. CSS Modules Configuration Migration","id":"7-css-modules-configuration-migration","depth":3,"charIndex":7771},{"text":"Build performance profile","id":"build-performance-profile","depth":2,"charIndex":8024},{"text":"Compare with Rspack CLI","id":"compare-with-rspack-cli","depth":2,"charIndex":8770},{"text":"FAQ","id":"faq","depth":2,"charIndex":10902},{"text":"After enabling Rspack, the performance is not as fast as expected?","id":"after-enabling-rspack-the-performance-is-not-as-fast-as-expected","depth":3,"charIndex":10909}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"Using Storybook","content":"#\n\nStorybook is a tool dedicated to component debugging, providing around component\ndevelopment.\n\n * Develop UIs that are more durable\n * Test UIs with less effort and no flakes\n * Document UI for your team to reuse\n * Share how the UI actually works\n * Automate UI workflows\n\nBefore when using Storybook, there are various problems related to\nconfigurations, Babel, Webpack, less or sass, but those are already included in\nModern.js builder, using Modern.js builder can make your configurations a log\neasier.\n\nYou can switch between Webpack and Rspack smoothly in Modern.js builder, for\nthose who already use Modern.js builder or Modern.js framework, you can start\nusing Storybook with the same configurations.\n\n\nQuick Start#\n\nBefore getting started, the current Storybook supports building using either\nWebpack or Rspack as the underlying tool. Depending on your needs, install any\nof the following packages:\n\n * @modern-js/builder-webpack-provider: Use Webpack for building with better\n   compatibility.\n * @modern-js/builder-rspack-provider: Use Rspack for building with super fast\n   startup speed (recommended).\n\n\nUsing in Modern.js projects, Not using legacy Storybook\nplugin(@modern-js/plugin-storybook)#\n\nIf your current project is already a Modern.js project and you haven't used any\nold version Storybook plugins, you can directly enable the Storybook feature by\nusing the following command:\n\n\n\nThis command will create a template for Storybook, including:\n\n * Creating a configuration folder .storybook and a default configuration file\n   .storybook/main.ts.\n * Creating example story components.\n * Updating package.json to add dependencies @storybook/addon-essentials and\n   @modern-js/storybook, as well as creating Storybook-related scripts.\n\nTo start, run npm run storybook.\n\n\nMigrate from @modern-js/plugin-storybook#\n\nIf you are using an older version of the Storybook plugin, you can still run the\ncommand above to create templates and modify the package.json. You can also\nupgrade manually.\n\nIf you have made some custom configurations to Storybook in the older version,\nyou need to move the configuration file root/config/storybook/main.(j|t)s to\nroot/.storybook/main.(j|t)s.\n\nAnd then add the following lines in root/.storybook/main.(j|t)s, specify\nframework as @modern-js/storybook.\n\n\n\nUpdate dependencies like @storybook/addon-* to major version 7.\n\nFinally, follow the official Storybook documentation to make the necessary\nupdates for some breaking changes, such as changes in story writing and MDX\nsyntax. You can refer to the migration guide at storybook migrate doc.\n\nAddon some scripts in your package.json\n\n\n\nTo Start, run npm run storybook\n\n\nNative Storybook users#\n\nModern.js Builder only support Storybook 7, so you need to upgrade from\nStorybook version 6 to version 7, please follow the steps outlined in the\nofficial Storybook documentation at storybook migrate doc.\n\n\n\nThe default config file path is modern.config.(j|t)s, for the detail config, see\nbuilder config.\n\nIf the original project includes configurations for Babel, they need to be\nwritten in the modern configuration. Most Babel configurations have already been\nincluded in Modern.js.\n\n\nEnable Rspack build#\n\nRspack is known for its fast build speed. To use Rspack as a build tool in\nModern.js, you only need to configure it as follows:\n\n\n\nNote that in the above configuration, the reactDocgen configuration has been\nchanged because Rspack currently does not support\n@storybook/react-docgen-typescript-plugin.\n\nBefore starting, make sure that you have installed the\n@modern-js/builder-rspack-provider package.\n\n\nConfigurations#\n\nThere are some configurations in .storybook/main.js.\n\n\nconfigPath#\n\n * Type: string\n * Default: modern.config.(j|t)s\n\nSpecify the path of Modern.js Builder configuration.\n\nExample:\n\n\n\n\nbundler#\n\n * Type: 'webpack' | 'rspack'\n * Default: webpack\n\nSpecify the underlying build tool to use either Webpack or Rspack. Please make\nsure to install the corresponding provider. To use Webpack, install\n@modern-js/builder-webpack-provider. To use Rspack, install\n@modern-js/builder-rspack-provider.\n\nExample:\n\n\n\n\nbuilderConfig#\n\n * Type: BuilderConfig\n * Default: undefined\n\nTo modify the configuration of the builder, which has a higher priority than the\nconfiguration file, you can specify the Modern.js builder configuration directly\nhere if you do not want to use the configuration file.\n\nExample:\n\n\n\n\nCommand Line Interface#\n\n@modern-js/storybook proxies some of the storybook cli commands.\n\n\nstorybook dev#\n\nStart Storybook, more details at\nhttps://storybook.js.org/docs/react/api/cli-options#dev.\n\n\nstorybook build#\n\nBuild Storybook for production, more details at\nhttps://storybook.js.org/docs/react/api/cli-options#build.\n\n\nConfigFile#\n\nThe configuration file includes an additional field: builderPlugins, in addition\nto the Modern.js builder configuration. This field is used to enable builder\nplugins, such as enabling SWC compilation.\n\n\n\n\nStorybook addon compatibility#\n\nDue to the current version of Storybook in the document being version 7, please\nselect the addon for Storybook V7.\n\nWhen an addon does not require additional Babel or Webpack configurations, it\ncan be used directly, such as @storybook/addon-essentials.\n\nFor some addons that require dependencies on Babel plugins and Webpack\nconfigurations, such as @storybook/addon-coverage, only\n@modern-js/builder-webpack-provider supports them.\n\n\nBenefits#\n\nUsing @modern-js/storybook can bring you lightning-fast builds with Rspack,\nwithout the need for tedious configuration. It comes with many best practices\nfor web development out-of-the-box, such as code splitting strategies, built-in\nsupport for CSS modules and postcss, TypeScript support, and commonly used Babel\nplugins.\n\nThe powerful capabilities of Modern.js builder can be directly used in Storybook\nprojects.\n\n\nTrouble Shooting#\n\n 1. Modern.js builder won't load your other configurations like\n    babel.config.json, babel config needs to be set in Modern.js config,\n    tools.babel. Webpack configuration can be written in either tools.webpack or\n    tools.webpackChain.\n\n 2. If you find that the build performance is not good, please check if the\n    Storybook automatic documentation generation feature is enabled. For optimal\n    performance, configure it to use react-docgen. The difference between\n    react-docgen and react-docgen-typescript is that the former is implemented\n    based on Babel, while the latter is implemented based on TypeScript. The\n    former has better performance but weaker type inference capabilities. If you\n    are using Rspack for the build, only react-docgen is supported.\n\n","routePath":"/builder/en/guide/advanced/storybook","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":713},{"text":"Using in Modern.js projects, Not using legacy Storybook plugin(@modern-js/plugin-storybook)","id":"using-in-modernjs-projects-not-using-legacy-storybook-pluginmodern-jsplugin-storybook","depth":3,"charIndex":-1},{"text":"Migrate from @modern-js/plugin-storybook","id":"migrate-from-modern-jsplugin-storybook","depth":3,"charIndex":1793},{"text":"Native Storybook users","id":"native-storybook-users","depth":3,"charIndex":2674},{"text":"Enable Rspack build","id":"enable-rspack-build","depth":2,"charIndex":3186},{"text":"Configurations","id":"configurations","depth":2,"charIndex":3611},{"text":"configPath","id":"configpath","depth":3,"charIndex":3683},{"text":"bundler","id":"bundler","depth":3,"charIndex":3813},{"text":"builderConfig","id":"builderconfig","depth":3,"charIndex":4131},{"text":"Command Line Interface","id":"command-line-interface","depth":2,"charIndex":4424},{"text":"storybook dev","id":"storybook-dev","depth":3,"charIndex":4516},{"text":"storybook build","id":"storybook-build","depth":3,"charIndex":4624},{"text":"ConfigFile","id":"configfile","depth":2,"charIndex":4751},{"text":"Storybook addon compatibility","id":"storybook-addon-compatibility","depth":2,"charIndex":4969},{"text":"Benefits","id":"benefits","depth":2,"charIndex":5435},{"text":"Trouble Shooting","id":"trouble-shooting","depth":2,"charIndex":5864}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"Build Target","content":"#\n\nBuilder supports build multiple target types for running in different target\nenvironments. After setting the correct target type, Builder will optimize the\nbuild results for the environment, and enable some plugins or configs for the\ntarget environment during the build process.\n\nYou can set the type through the target parameter of the createBuilder method.\n\n\nDefault Target#\n\nBy default, the build target is 'web', and the build result can run in a browser\nenvironment.\n\nThe Builder will read the Browserslist config in the project to determine the\nrange of browsers.\n\n\nOptional Targets#\n\ntarget can also be set to the following values:\n\n * 'node': Build for Node.js environment, usually used in SSR and other\n   scenarios.\n * 'web-worker': Build for Web Worker environment.\n * 'modern-web': Build for modern browsers.\n\nFor example, to build for the Node.js environment:\n\n\n\n\nMultiple Targets#\n\nWhen target is an array containing multiple values, Builder will perform\nmultiple builds at the same time.\n\nFor example, we can build a browser target and an node target at the same time:\n\n\n\n\nNode Target#\n\nRefers to the build target running in the Node.js environment, usually used in\nscenarios such as SSR.\n\nWhen target is set to 'node', Builder will:\n\n * No HTML files will be generated, and HTML-related logic will not be executed,\n   since HTML is not required by the Node.js environment.\n * CSS code will not be bundled or extracted, but the id information of CSS\n   Modules will be included in the bundle.\n * The default code split strategy will be disabled, but dynamic import can\n   still work.\n * Disable the HMR.\n * Adjust the default value of Browserslist to ['node >= 14'].\n\nTIP\n\nIf target is an array, such as building web and node targets at the same time,\nthen the above processing will not affect the web target, The HTML, CSS and\nother files required for the web target will still be generated correctly.\n\n\nWeb Worker Target#\n\nRefers to the build target running in the Web Worker environment.\n\nWeb Worker\n\nA web worker is a type of JavaScript program that runs in the background,\nindependently of other scripts, without affecting the performance of the page.\nThis makes it possible to run long-running scripts, such as ones that handle\ncomplex calculations or access remote resources, without blocking the user\ninterface or other scripts. Web workers provide an easy way to run tasks in the\nbackground and improve the overall performance of web applications.\n\nWhen target is set to 'web-worker', Builder will:\n\n * No HTML files will be generated, and HTML-related logic will not be executed,\n   since HTML is not required by the Web Worker environment.\n * CSS code will not be bundled or extracted, but the id information of CSS\n   Modules will be included in the bundle.\n * The default code split strategy will be disabled, and dynamic import can not\n   work, because the Web Worker only runs a single JavaScript file.\n * Disable the HMR.\n\n\nModern Web Target#\n\nRefers to the build target running in the modern browsers.\n\nWhat are modern browsers?\n\nModern browsers are one of our conventions to refer to browsers that support\nnative ES Modules.\n\nWhen target is set to 'modern-web', Builder will:\n\n * Adjust the default value of Browserslist to:\n\n","routePath":"/builder/en/guide/basic/build-target","lang":"en","toc":[{"text":"Default Target","id":"default-target","depth":2,"charIndex":363},{"text":"Optional Targets","id":"optional-targets","depth":2,"charIndex":574},{"text":"Multiple Targets","id":"multiple-targets","depth":2,"charIndex":879},{"text":"Node Target","id":"node-target","depth":2,"charIndex":1090},{"text":"Web Worker Target","id":"web-worker-target","depth":2,"charIndex":1922},{"text":"Modern Web Target","id":"modern-web-target","depth":2,"charIndex":2957}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"Use Builder CLI","content":"#\n\nModern.js Builder provides a lightweight CLI tool that includes basic commands\nsuch as dev and build. It is primarily used for building non-React projects.\n\n * For React projects, we recommend using the Modern.js framework directly.\n   Please refer to Modern.js - Quick Start for more information.\n * For non-React projects, such as developing a Vue project, you can use the\n   Builder CLI tool to build your project.\n\n\nInstall#\n\nYou need to install two packages:\n\n * @modern-js/builder-cli: the CLI tool for Builder, providing basic CLI\n   commands and automatically loading the installed Provider in the current\n   project.\n\n * @modern-js/builder-rspack-provider: To provide the building capabilities\n   based on Rspack.\n\nif you want to use webpack instead of Rspack, you can replace the\n@modern-js/builder-rspack-provider with @modern-js/builder-webpack-provider:\n\n\nCommands#\n\nBuilder CLI provides the following commands to help you quickly start a\ndevelopment server, build production-ready code, and more.\n\n\nbuilder dev#\n\nThe builder dev command is used to start a local development server and compile\nthe source code in the development environment.\n\n\n\n\nbuilder build#\n\nThe builder build command will build the outputs for production in the dist/\ndirectory by default.\n\n\n\n\nbuilder serve#\n\nThe builder serve command is used to preview the production build outputs\nlocally. Note that you need to execute the builder build command beforehand to\ngenerate the corresponding outputs.\n\n\n\n\nConfiguration#\n\nBuilder CLI will read the builder.config.ts configuration file located in the\nroot directory of your project by default. You can use all the configuration\noptions provided by Builder in the configuration file.\n\n\n\nWhen you use Rspack as the bundler, there are some differences in configuration\ntypes between webpack and Rspack. Therefore, you need to specify the 'rspack'\ngeneric for defineConfig:\n\n\n\n\nBuild Entry#\n\nBy default, Builder CLI uses src/index.(js|ts|jsx|tsx) as the build entry. You\ncan modify the build entry using the source.entries configuration option.\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Example:\n\n\n\n\nRegistering Plugins#\n\nYou can register Builder plugins using the builderPlugins option in\nbuilder.config.ts.\n\nFor example, to register a Vue plugin:\n\n","routePath":"/builder/en/guide/basic/builder-cli","lang":"en","toc":[{"text":"Install","id":"install","depth":2,"charIndex":422},{"text":"Commands","id":"commands","depth":2,"charIndex":871},{"text":"builder dev","id":"builder-dev","depth":3,"charIndex":1015},{"text":"builder build","id":"builder-build","depth":3,"charIndex":1161},{"text":"builder serve","id":"builder-serve","depth":3,"charIndex":1280},{"text":"Configuration","id":"configuration","depth":2,"charIndex":1489},{"text":"Build Entry","id":"build-entry","depth":2,"charIndex":1906},{"text":"Registering Plugins","id":"registering-plugins","depth":2,"charIndex":2117}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"Builder Config","content":"#\n\nBuilder provides a wealth of configs to help users customize the build behavior.\n\n\nConfig Categories#\n\nBuilder Configs are divided into the following categories:\n\n * Dev Config: Config related to local development.\n * Html Config: Config related to HTML.\n * Tools Config: Config related to the low-level tools.\n * Source Config: Config related to source code parsing and compilation.\n * Output Config: Config related to output.\n * Security Config: Config related to security.\n * Performance Config: Config related to performance.\n\nYou can find detailed descriptions of all configs on the API Reference page.\n\n\nDefault Values#\n\nThe Builder presets a default value for each config, and the default value is\nsuitable for most scenarios. At the same time, the upper-level framework will\nalso override some of the default values based on the requirements of the\nvertical scene.\n\nIn most cases, you don't need to define any Builder config, just use it right\nout of the box.\n\n\nUse Config#\n\n\nIn the Upper Framework#\n\nWhen you use a Builder-based upper-level framework, you can define the Builder\nconfig directly through the framework's config file, and the upper-level\nframework will pass the config to the Builder.\n\nFor example, in the Modern.js framework, you can define the Builder's\nsource.alias config in modern.config.ts file.\n\n\n\n\nUsing the Node API#\n\nWhen you call the Builder through the Node API, you can pass in the Builder\nconfig through the Provider's builderConfig option:\n\n\n\nPlease refer to API - createBuilder for details.\n\n\nRelationship with Framework Config#\n\nGenerally speaking, the Builder config is a subset of the framework config.\n\nBuilder config only deals with build-related behaviors, while framework config\ncovers a wider range, including runtime, server, deployment, etc., so framework\nconfig is extended from Builder config.\n\n\nDebug the config#\n\nYou can enable Builder's debug mode by adding the DEBUG=builder environment\nvariable when executing a build.\n\n\n\nIn debug mode, Builder will write the Builder config to the dist directory,\nwhich is convenient for developers to view and debug.\n\n\n\nOpen the generated /dist/builder.config.js file to see the complete content of\nthe Builder config.\n\nFor a complete introduction to debug mode, see the Debug Mode chapter.","routePath":"/builder/en/guide/basic/builder-config","lang":"en","toc":[{"text":"Config Categories","id":"config-categories","depth":2,"charIndex":85},{"text":"Default Values","id":"default-values","depth":2,"charIndex":612},{"text":"Use Config","id":"use-config","depth":2,"charIndex":972},{"text":"In the Upper Framework","id":"in-the-upper-framework","depth":3,"charIndex":986},{"text":"Using the Node API","id":"using-the-node-api","depth":3,"charIndex":1331},{"text":"Relationship with Framework Config","id":"relationship-with-framework-config","depth":2,"charIndex":1534},{"text":"Debug the config","id":"debug-the-config","depth":2,"charIndex":1849}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"CSS Usage","content":"#\n\nBuilder has built-in multiple style resource processing capabilities, including\nLess / Sass preprocessor, PostCSS, CSS Modules, CSS inline and CSS compression.\n\nIn addition, Builder also provides multiple configs to customize the compile\nrules of style resources.\n\n\nUsing Less, Sass and Stylus#\n\nThe Builder has built-in community popular CSS preprocessors such as Less, Sass.\n\nBy default, you don't need to configure anything for Less and Sass. If you need\nto customize loader config, you can configure tools.less, tools.sass to set it\nup.\n\nYou can also use Stylus in Builder, just install the Stylus plugin provided by\nBuilder, please refer to Stylus Plugin for usage.\n\n\nUsing PostCSS#\n\nBuilder has built-in PostCSS to transform the CSS code. You can configure the\npostcss-loader via tools.postcss.\n\n\n\n\nBuiltin PostCSS plugins#\n\nBuilder has some builtin PostCSS plugins, which will perform the following\ntransformations on CSS:\n\n * autoprefixer: we have enabled autoprefixer to add vendor prefixes to CSS\n   rules. If you want to configure the target browser, you can use\n   output.overrideBrowserslist config.\n * postcss-nesting: Provide CSS Nesting support, you can Use nested writing in\n   CSS, such as:\n\n\n\n * postcss-flexbugs-fixes: Used to fix known Flex Bugs.\n * postcss-initial: Enabled only when it needs to be compatible with legacy\n   browsers, providing the initial attribute value compatible.\n * postcss-page-break: Enabled only when compatibility with legacy browsers is\n   required, providing support for break- attribute.\n * postcss-font-variant: Enabled only when compatibility with legacy browsers is\n   required, providing support for font-variant.\n * postcss-media-minmax: Enabled only when compatibility with legacy browsers is\n   required, providing support for Media Query Ranges compatibility.\n * postcss-custom-properties: Only enabled when compatibility with legacy\n   browsers is required, providing support for Custom Properties, you can define\n   and use custom variables in CSS, such as:\n\n\n\n\nCSS Minify#\n\nUsually, in production environments we compress static assets such as CSS, JS,\netc. to achieve better transfer efficiency.\n\nBuilder automatically compresses CSS code at production build time with\ncss-minimizer-webpack-plugin (The compression tool used at the bottom is\ncssnano).\n\nYou can configure tools.minifyCss to make it more customizable.\n\nAbout cssnano\n\ncssnano is a tool for optimizing and minifying CSS files. It reduces the size of\nCSS files by removing unused rules, merging similar rules, removing comments and\nwhitespace, and converting length units, among other techniques, to improve the\nloading speed of websites.\n\n\nInline CSS Files#\n\nBy default, Builder will extract CSS into a separate .css file and output it to\nthe dist directory.\n\nIf you want to inline styles into your JS file, you can set\noutput.disableCssExtract to true to disable CSS extraction logic.When the JS\nfile is requested by the browser, JS dynamically inserts the","routePath":"/builder/en/guide/basic/css-usage","lang":"en","toc":[{"text":"Using Less, Sass and Stylus","id":"using-less-sass-and-stylus","depth":2,"charIndex":268},{"text":"Using PostCSS","id":"using-postcss","depth":2,"charIndex":675},{"text":"Builtin PostCSS plugins","id":"builtin-postcss-plugins","depth":3,"charIndex":807},{"text":"CSS Minify","id":"css-minify","depth":2,"charIndex":2025},{"text":"Inline CSS Files","id":"inline-css-files","depth":2,"charIndex":2669},{"text":"Import CSS in node_modules","id":"import-css-in-node_modules","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"HTML Template","content":"#\n\nDuring the build process, Builder will compile based on the HTML template and\ntemplate parameters to generate several HTML files.\n\nBuilder provides some configs to set the HTML template. Through this chapter,\nyou can learn the basic usage of these configs.\n\n\nSet Template#\n\nHTML templates are usually predefined by the upper framework.\n\nFor example, in the Modern.js framework, the HTML template is preset by default,\nand users can also customize the content of the template. You can read the\n\"Modern.js - HTML Template\" chapter to learn about it.\n\nIn Builder, you can use html.template and html.templateByEntries configs to\ndefine the path to the custom HTML template.\n\n\n\n\nSet Page Title#\n\nYou can set the HTML </code> tag through the <a\nhref=\"/en/api/config-html#htmltitle\">html.title</a> and <a\nhref=\"/en/api/config-html#htmltitlebyentries\">html.titleByEntries</a>\nconfigs.</p> <p>When there is only one page in your project, just use the\n<code>html.title</code> setting directly:</p> <pre><code>export default { html:\n{ title: 'example', }, }; </code></pre> <p>When there are multiple pages in your\nproject, please use <code>html.titleByEntries</code> to set corresponding titles\nfor different pages. <code>html.titleByEntries</code> uses the page's \"entry\nname\" as the key.</p> <pre><code>export default { html: { titleByEntries: { foo:\n'Foo', bar: 'Bar', }, }, }; </code></pre> <h2 id=\"set-page-icon\">Set Page Icon<a\naria-hidden=\"true\" href=\"#set-page-icon\">#</a></h2> <p>Builder supports setting\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Favicon\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">favicon</a> icon and <a\nhref=\"https://webhint.io/docs/user-guide/hints/hint-apple-touch-icons/\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">apple-touch-icon</a> icon.</p> <p>You\ncan set the favicon through the <a\nhref=\"/en/api/config-html#htmlfavicon\">html.favicon</a> and <a\nhref=\"/en/api/config-html#htmlfaviconbyentries\">html.faviconByEntries</a>\nconfigs.</p> <pre><code>export default { html: { favicon:\n'./src/assets/icon.png', }, }; </code></pre> <p>You can also set the\napple-touch-icon for iOS system through the <a\nhref=\"/en/api/config-html#htmlappicon\">html.appIcon</a> config.</p>\n<pre><code>export default { html: { appIcon: './src/assets/icon.png', }, };\n</code></pre> <h2 id=\"set-meta-tags\">Set Meta Tags<a aria-hidden=\"true\"\nhref=\"#set-meta-tags\">#</a></h2> <p>You can set the meta tags through the <a\nhref=\"/en/api/config-html#htmlmeta\">html.meta</a> and <a\nhref=\"/en/api/config-html#htmlmetabyentries\">html.metaByEntries</a> configs.</p>\n<p>For example to setting description:</p> <pre><code>export default { html: {\nmeta: { description: 'a description of the page', }, }, }; </code></pre> <p>The\ngenerated meta tag in HTML is:</p> <pre><code><meta name=\"description\"\ncontent=\"a description of the page\" /> </code></pre> <h2\nid=\"set-template-parameters\">Set Template Parameters<a aria-hidden=\"true\"\nhref=\"#set-template-parameters\">#</a></h2> <p>In HTML templates, you can use a\nvariety of template parameters. The template parameters injected by Builder by\ndefault include:</p> <pre><code>type DefaultParameters = { meta: string; //\ncorresponding to html.meta config title: string; // corresponding to html.title\nconfig mountId: string; // corresponding to html.mountId config entryName:\nstring; // entry name assetPrefix: string; // corresponding to\noutput.assetPrefix config compilation: webpack.Compilation; // Compilation\nobject corresponding to webpack webpackConfig: config; // webpack config //\nhtmlWebpackPlugin built-in parameters // See\nhttps://github.com/jantimon/html-webpack-plugin for details htmlWebpackPlugin: {\ntags: object; files: object; options: object; }; }; </code></pre> <p>You can\nalso use the <a\nhref=\"/en/api/config-html#htmltemplateparameters\">html.templateParameters</a>\nand <a\nhref=\"/en/api/config-html#htmltemplateparametersbyentries\">html.templateParamete\nrsByEntries</a> configs to pass in custom template parameters.</p> <p>For\nexample:</p> <pre><code>export default { html: { templateParameters: { text:\n'World', }, }, }; </code></pre> <p>Then you can read parameters in the HTML\ntemplate with <code><%= text %></code>:</p> <pre><code><div>hello <%= text\n%>!</div> </code></pre> <p>The generated HTML code is as follows:</p>\n<pre><code><div>hello world!</div> </code></pre> <h2\nid=\"template-engine\">Template Engine<a aria-hidden=\"true\"\nhref=\"#template-engine\">#</a></h2> <p>Builder supports using <a\nhref=\"https://www.lodashjs.com/docs/lodash.template\" target=\"_blank\"\nrel=\"noopener noreferrer\">Lodash Template</a>, <a href=\"https://ejs.co/\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">EJS</a>, <a href=\"https://pugjs.org/\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">Pug</a> as template engines, the most\nbasic Lodash Template is used as the default template engine.</p> <h3\nid=\"lodash-template\"><a href=\"https://www.lodashjs.com/docs/lodash.template\"\ntarget=\"_blank\" rel=\"noopener noreferrer\">Lodash Template</a><a\naria-hidden=\"true\" href=\"#lodash-template\">#</a></h3> <p>When the suffix of the\ntemplate is <code>.html</code>, Builder will use Lodash Template to compile\nit.</p> <p>For example, if you define a <code>text</code> parameter in a\ntemplate with a value of <code>'world'</code>, Builder will automatically\nreplace <code><%= text %></code> with the value.</p> <pre><code><!-- input -->\n<div>hello <%= text %>!</div> <!-- output --> <div>hello world!</div>\n</code></pre> <p>Please read the <a\nhref=\"https://www.lodashjs.com/docs/lodash.template\" target=\"_blank\"\nrel=\"noopener noreferrer\">Lodash Template</a> documentation for details.</p> <h3\nid=\"ejs\"><a href=\"https://ejs.co/\" target=\"_blank\" rel=\"noopener\nnoreferrer\">EJS</a><a aria-hidden=\"true\" href=\"#ejs\">#</a></h3> <p>When the\nsuffix of the template is <code>.ejs</code>, Builder will use the EJS template\nengine to compile it. EJS is a simple templating language that lets you generate\nHTML markup with plain JavaScript.</p> <p>For example, you can first refer to a\n<code>.ejs</code> template through the <a\nhref=\"/en/api/config-html#htmltemplate\">html.template</a> config:</p>\n<pre><code>export default { html: { template: './static/index.ejs', }, };\n</code></pre> <p>Then define a <code>user</code> parameter in the template with\na value of <code>{ name: 'Jack' }</code>. Builder will automatically replace\n<code><%= user.name %></code> with the value.</p> <pre><code><!-- input --> <%\nif (user) { %> <h2><%= user.name %></h2> <% } %> <!-- output --> <h2>Jack</h2>\n</code></pre> <p>Please read the <a href=\"https://ejs.co/\" target=\"_blank\"\nrel=\"noopener noreferrer\">EJS</a> documentation for details.</p> <h3 id=\"pug\"><a\nhref=\"https://pugjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Pug</a><a\naria-hidden=\"true\" href=\"#pug\">#</a></h3> <p>When the suffix of the template is\n<code>.pug</code>, Builder will use the Pug template engine to compile it. Pug\nis a robust, elegant, feature rich template engine for Node.js.</p> <p>Before\nusing the Pug template, you need to enable the <a\nhref=\"/en/api/config-tools#toolspug\">tools.pug</a> config, and define the <a\nhref=\"/en/api/config-html#htmltemplate\">html.template</a> config to reference a\n<code>.pug</code> template:</p> <pre><code>export default { html: { template:\n'./static/index.pug', }, tools: { pug: true, }, }; </code></pre> <p>Then you can\nuse Pug syntax in <code>.pug</code> templates:</p> <pre><code><!-- input --> p\nHello #{text}! <!-- output --> <p>Hello World!</p> </code></pre> <p>Please read\nthe <a href=\"https://pugjs.org/\" target=\"_blank\" rel=\"noopener\nnoreferrer\">Pug</a> documentation for details.</p> <h2\nid=\"injecting-tags\">Injecting Tags<a aria-hidden=\"true\"\nhref=\"#injecting-tags\">#</a></h2> <p>The <code>html.tags</code> option can be\nconfigured to insert any tags into the final generated HTML product.</p>\n<div><div>Usage Cases</div><div><p>The artifacts of the web application will\neventually be referenced directly or indirectly by HTML entries, but most of the\ntime injecting tags directly into HTML is not preferred.</p></div></div> <p>All\ntags that need to be injected into HTML can be accessed in the template file via\nthe variable <code>htmlWebpackPlugin.tags</code>.</p> <pre><code><html> <head>\n<%= htmlWebpackPlugin.tags.headTags %> </head> <body> <%=\nhtmlWebpackPlugin.tags.bodyTags %> </body> </html> </code></pre> <p>The purpose\nof <code>html.tags</code> is to adjust these template variables and thus modify\nthe HTML, as defined in <a href=\"/api/config-html#htmltags\">API\nReferences</a>.</p> <h3 id=\"tag-object\">Tag Object<a aria-hidden=\"true\"\nhref=\"#tag-object\">#</a></h3> <pre><code>export default { output: { assetPrefix:\n'//example.com/' }, html: { tags: [ { tag: 'script', attrs: { src: 'a.js' } }, {\ntag: 'script', attrs: { src: 'b.js' }, append: false }, { tag: 'link', attrs: {\nhref: 'style.css', rel: 'stylesheet' }, append: true } { tag: 'link', attrs: {\nhref: 'page.css', rel: 'stylesheet' }, publicPath: false } { tag: 'script',\nattrs: { src: 'c.js' }, head: false }, { tag: 'meta', attrs: { name: 'referrer',\ncontent: 'origin' } }, ], }, }; </code></pre> <p>The final insertion position of\nthe tag is determined by the <code>head</code> and <code>append</code> options,\nand two elements with the same configuration will be inserted into the same area\nand hold their relative positions to each other.</p> <p>The\n<code>publicPath</code> configuration is enabled by default for tags, the value\nof <code>output.assetPrefix</code> will be stitched to the <code>src</code>\nproperty of the <code>script</code> tag that represents the path.</p> <p>So the\nHTML output built with the above configuration will look like this.</p>\n<pre><code><html> <head> <script src=\"//example.com/b.js\"></script> <link\nhref=\"//example.com/style.css\" rel=\"stylesheet\" /> <link href=\"page.css\"\nrel=\"stylesheet\" /> <!-- some other headTags... --> <script\nsrc=\"//example.com/a.js\"></script> <meta name=\"referrer\" content=\"origin\" />\n</head> <body> <!-- some other bodyTags... --> <script\nsrc=\"//example.com/c.js\"></script> </body> </html> </code></pre> <h3\nid=\"tags-handler\">Tags Handler<a aria-hidden=\"true\"\nhref=\"#tags-handler\">#</a></h3> <p><code>html.tags</code> also accepts a\ncallback function, which is often used to modify the list of tags or to ensure\ntheir relative position while inserting them.</p> <pre><code>export default {\nhtml: { tags: [ tags => { tags.splice(0, 1); }, { tag: 'script', attrs: { src:\n'a.js' }, head: false }, { tag: 'script', attrs: { src: 'b.js' }, append: false\n}, { tag: 'script', attrs: { src: 'c.js' } }, tags => [...tags, { tag: 'script',\nattrs: { src: 'd.js' } }], ], }, }; </code></pre> <p>And you will get:</p>\n<pre><code><html> <head> <!-- some other headTags... --> <script\nsrc=\"//example.com/c.js\"></script> <script src=\"//example.com/d.js\"></script>\n</head> <body> <!-- some other bodyTags... --> <script\nsrc=\"//example.com/a.js\"></script> </body> </html> </code></pre>","routePath":"/builder/en/guide/basic/html-template","lang":"en","toc":[{"text":"Set Template","id":"set-template","depth":2,"charIndex":261},{"text":"Set Page Title","id":"set-page-title","depth":2,"charIndex":676},{"text":"Set Page Icon","id":"set-page-icon","depth":2,"charIndex":-1},{"text":"Set Meta Tags","id":"set-meta-tags","depth":2,"charIndex":-1},{"text":"Set Template Parameters","id":"set-template-parameters","depth":2,"charIndex":-1},{"text":"Template Engine","id":"template-engine","depth":2,"charIndex":-1},{"text":"Lodash Template","id":"lodash-template","depth":3,"charIndex":-1},{"text":"EJS","id":"ejs","depth":3,"charIndex":-1},{"text":"Pug","id":"pug","depth":3,"charIndex":-1},{"text":"Injecting Tags","id":"injecting-tags","depth":2,"charIndex":-1},{"text":"Tag Object","id":"tag-object","depth":3,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"Use TypeScript","content":"#\n\nBuilder supports TypeScript compilation and type checking by default, you can\nuse . ts and `. tsx' files in the project without any configuration.\n\n\nTypeScript compilation#\n\nBuilder has three ways to compile TypeScript files.\n\nBabel\n\nBy default, all TypeScript files are compiled by Babel.\n\nYou may find some old articles pointing out that Babel cannot handle const enum\nand namespace alias syntax, however since version 7.15 Babel has supported them.\nBabel compile is enabled by default.\n\nIf you want more Babel plugins\n\nts-loader\n\nThe ts-loader uses TypeScript's official compiler-TSC under the hood. When\nts-loader is enabled, TypeScript files will no longer be compiled by Babel, but\nBabel will still inject polyfill into the TSC output and transform it to the\nlower version of JavaScript.\n\nEnable ts-loader(with default options):\n\n\n\nMore configuration can be found at tools.tsLoader.\n\nIf ts-loader is enabled with default configuration, it does not have type\nchecking, we do type checking by fork-ts-checker-webpack-plugin.\n\nSWC\n\nIf you want a super fast compiler, and you don't need some custom Babel plugins,\nthen you can use SWC for compilation and minification.\n\nSWC plugin in Builder supports TypeScript, TSX and legacy decorator, you can\ncheck SWC plugin.\n\n\nWhy Babel is the default option#\n\nBabel supports TypeScript well. It cannot check types, but we can check types in\nanother process. Babel follows standards more when compiled to lower versions of\nJavaScript in certain situations. For example, Babel will initialize class\nmembers as undefined, and mark class methods as non-enumerable. If TSC is\nenabled, for better syntax downgrading and Polyfill, the TSC output will still\nbe compiled by Babel, causing unnecessary performance costs.\n\n\nType checking#\n\nCurrently, the only stable TypeScript type checking tool is TSC, and it usually\ntakes a while to check types in a large project, so Builder by default using\ntsChecker(fork-ts-checker-webpack-plugin) for asynchronous type checking, it\nwon't block project setup.\n\nSet tsChecker(with default options):\n\n\n\nMore configurations can be seen at tsChecker configuration.\n\nNote that if ts-loader is enabled and compileOnly: false is set, please disable\ntsChecker to avoid duplicate type-checking.\n\nSTC\n\nThe author of SWC has announced a new open-source type-checking tool based on\nRust, which is called STC, it's super fast but it cannot used for production\nnow, really don't recommend you use that for now, when it's stabled we will use\nthat in Builder SWC plugin as experimental ability.","routePath":"/builder/en/guide/basic/typescript","lang":"en","toc":[{"text":"TypeScript compilation","id":"typescript-compilation","depth":2,"charIndex":151},{"text":"Why Babel is the default option","id":"why-babel-is-the-default-option","depth":3,"charIndex":1271},{"text":"Type checking","id":"type-checking","depth":2,"charIndex":1758}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"Debug Mode","content":"#\n\nBuilder provides a debug mode to troubleshoot problems, you can add the\nDEBUG=builder environment variable when executing a build to enable Builder's\ndebug mode.\n\n\n\nIn debug mode, Builder will output some additional log information, and write\nthe Builder config and webpack config to the dist directory, which is convenient\nfor developers to view and debug.\n\n\nLog Information#\n\nIn debug mode, you will see some additional information output from the shell,\namong which are some process logs starting with debug, indicating what\noperations are performed inside the Builder.\n\n\n\nIn addition, the following logs will be output in the Shell, indicating that the\nBuilder has written the internally generated build configs to disk, and you can\nopen these config files to view the corresponding content.\n\n\n\n\nBuilder Config File#\n\nIn debug mode, Builder will automatically generate dist/builder.config.js file,\nwhich contains the final generated Builder config. In this file, you can know\nthe final result of the Builder config you passed in after being processed by\nthe framework and Builder.\n\nThe structure of the file is as follows:\n\n\n\nFor a complete introduction to Builder config, please see the Builder Config\nchapter.\n\n\nWebpack Config File#\n\nIf the current project is built using webpack, then in debug mode, Builder will\nalso automatically generate dist/webpack.config.web.js file, which contains the\nfinal generated webpack config. In this file, you can see what is included in\nthe config that Builder finally passes to webpack.\n\nThe structure of the file is as follows:\n\n\n\nIn addition, if the project configures additional build targets, such as\nenabling the SSR capability of the framework (corresponding to additional\nNode.js build target), an additional webpack.config.node.js file will be\ngenerated in the dist directory, corresponding to the webpack config for SSR\nbundles.\n\nFor a complete introduction to webpack configs, please see webpack official\ndocumentation.\n\n\nRspack Config File#\n\nIf the current project is built using Rspack, then in debug mode, Builder will\nalso automatically generate dist/rspack.config.web.js file, which contains the\nfinal generated Rspack config. In this file, you can see what is included in the\nconfig that Builder finally passes to Rspack.\n\nThe structure of the file is as follows:\n\n\n\nFor a complete introduction to Rspack configs, please see Rspack official\ndocumentation.","routePath":"/builder/en/guide/debug/debug-mode","lang":"en","toc":[{"text":"Log Information","id":"log-information","depth":2,"charIndex":362},{"text":"Builder Config File","id":"builder-config-file","depth":2,"charIndex":802},{"text":"Webpack Config File","id":"webpack-config-file","depth":2,"charIndex":1220},{"text":"Rspack Config File","id":"rspack-config-file","depth":2,"charIndex":1976}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"Exceptions FAQ","content":"#\n\nThe current documentation has been moved to Modern.js - Build FAQ.","routePath":"/builder/en/guide/faq/exceptions","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"Features FAQ","content":"#\n\nThe current documentation has been moved to Modern.js - Build FAQ.","routePath":"/builder/en/guide/faq/features","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"General FAQ","content":"#\n\n\nThe relationship between Modern.js Builder and Modern.js?#\n\nThe building abilities of Modern.js are based on Modern.js Builder.\n\nWhen developing Modern.js, we designed Builder as an independent module, and\nclearly divided the responsibilities of Builder and Modern.js. Therefore,\nBuilder can be used independently of the Modern.js framework and be applied to\nother frameworks or scenarios.\n\n--------------------------------------------------------------------------------\n\n\nCan Builder be used to build libraries or UI components?#\n\nBuilder focuses on solving web application building scenarios. We do not\nrecommend that you use Builder to build libraries or UI components.\n\nIf you need to build a library or UI components, it is recommended to use the\nModern.js Module.\n\n--------------------------------------------------------------------------------\n\n\nWill Builder support Turbopack?#\n\nBuilder is already supporting Rspack, and currently Turbopack supports use in\nNext.js, so there is no plan for Builder to support Turbopack.\n\n> You can find the comparison of Rspack and Turbopack in the Introduction of\n> Rspack.\n\n--------------------------------------------------------------------------------\n\n\nWill Builder support Vite?#\n\nVite is a great tool, but the goal of Builder is to replace webpack with Rust\nBundler, Rspack can provide fast compilation speed, while maintaining the\nconsistent behavior between development and production.\n\nBuilder will focus on the evolution from webpack to Rspack, so it will not be\nsupport Vite.\n\n> You can find the comparison of Vite and Turbopack in the Introduction of\n> Rspack.","routePath":"/builder/en/guide/faq/general","lang":"en","toc":[{"text":"The relationship between Modern.js Builder and Modern.js?","id":"the-relationship-between-modernjs-builder-and-modernjs","depth":3,"charIndex":3},{"text":"Can Builder be used to build libraries or UI components?","id":"can-builder-be-used-to-build-libraries-or-ui-components","depth":3,"charIndex":477},{"text":"Will Builder support Turbopack?","id":"will-builder-support-turbopack","depth":3,"charIndex":858},{"text":"Will Builder support Vite?","id":"will-builder-support-vite","depth":3,"charIndex":1205}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"HMR FAQ","content":"#\n\nThe current documentation has been moved to Modern.js - HMR FAQ.","routePath":"/builder/en/guide/faq/hmr","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"All Features","content":"#\n\nNotice\n\nModern.js Builder has been rebranded as Rsbuild. This document will no longer be\nupdated.\n\n * If you are using the Modern.js framework, please visit the Modern.js\n   framework documentation directly.\n * If you are using the CLI or Node API of Modern.js Builder, you can easily\n   migrate to Rsbuild, please visit the Rsbuild repository for more information.\n\nHere are all the main features supported by Modern.js Builder.\n\n\nJavaScript#\n\nFEATURES                   DESCRIPTION                                                    LINKS\nRspack bundler             Optional feature, use Rspack as the bundler                    \nBabel compilation          Babel compilation is enabled by default, which converts        \n                           JavaScript and TypeScript code to backward compatible\n                           JavaScript syntax\nTS compilation             TS files are compiled by Babel by default, you can also use    \n                           ts-loader\nType checker               Runs TypeScript type checker by default                        \nJS minification            JS minification is enabled by default in production build      \nPolyfill injection         core-js and other polyfills are injected by default            \nSourceMap generation       High-quality SourceMap is generated by default in production   \n                           build\nAlias                      Optional feature, set import alias                             \nRestrict importing paths   Optional feature, restrict source code import paths            \nesbuild compilation        Optional feature, transform and minify JavaScript and          \n                           TypeScript code with esbuild\nSWC compilation            Optional feature, transform and minify JavaScript and          \n                           TypeScript code with SWC\nNode outputs               Optional feature, support building bundles that run in         \n                           Node.js environment\nWeb Worker outputs         Optional feature, support building bundles that run in a Web   \n                           Worker environment\nBrowserslist               Optional feature, using browserslist (opens new window)to      \n                           specify which browsers should be supported in your Web\n                           application.\nCompatibility check        Optional feature, analyze if there are incompatible advanced   \n                           syntax in the outputs within the current browser scope\nEnvironment variable       Optional feature, inject environment variables or              \n                           expressions into the code\nNode Polyfill              Optional feature, inject polyfills for Node core modules on    \n                           the browser side\n\n\nCSS#\n\nFEATURES                  DESCRIPTION                                                    LINKS\nPostCSS compilation       PostCSS compilation is enabled by default, built-in            \n                          autoprefixer and other plugins\nSass preprocessing        Support compile Sass files by default                          \nLess preprocessing        Support compile Less files by default                          \nStylus preprocessing      Optional feature, compile Stylus files                         \nCSS Modules compilation   Support compiling *.module.* files by default                  \nCSS Modules type          Optional feature, automatically generate type definition for   \n                          CSS Modules\nCSS minification          CSS minification is enabled by default in production build     \nExtract CSS files         CSS will be extracted as separate files by default             \nStyled Components         Support styled components compilation by default               \nInline CSS into JS        Optional feature, inline CSS files to JavaScript files         \nrem unit conversion       Optional feature, convert px units in CSS to rem units         \n\n\nHTML#\n\nFEATURES                  DESCRIPTION                                    LINKS\nSet title                 Set HTML title tag                             \nSet meta                  Set HTML meta tag                              \nSet favicon               Set favicon for page                           \nSet app icon              Set apple icon for iOS                         \nUse EJS template engine   Optional feature, use EJS template engine      \nUse Pug template engine   Optional feature, use pug template engine      \nInline JS files           Optional feature, inline JS files into HTML    \nInline CSS files          Optional feature, inline CSS files into HTML   \n\n\nDevelopment and Debugging#\n\nFEATURES                  DESCRIPTION                                                LINKS\nAutomatically open page   Optional feature, automatically open page URL in browser   \n                          when starting Dev Server\nHTTPS Dev Server          Optional feature, enable HTTPS Dev Server                  \n\n\nFrontend Framework#\n\nFEATURES                 DESCRIPTION                                                 LINKS\nReact Refresh            Support React Refresh by default                            \nSVG to React component   Support to import SVG as component by default               \nVue 3 SFC compilation    Optional feature, enable compilation of Vue 3 SFC (Single   \n                         File Components) files\nVue 3 JSX compilation    Optional feature, enable compilation of Vue 3 JSX syntax    \n\n\nStatic Assets#\n\nFEATURES                 DESCRIPTION                                                  LINKS\nImport image assets      Support for import image assets in code                      \nImport font assets       Support for import font assets in code                       \nImport video assets      Support for import video assets in code                      \nImport wasm assets       Support for import WebAssembly assets in code                \nImport node addons       Support for import Node.js addons in code                    -\nInline static assets     Small assets are inlined into JS by default                  \nClean up static assets   Automatically clean up static assets in the dist directory   \n                         before each build\nCopy static assets       Optional feature, copy static assets to the dist directory   \nGenerate manifest file   Optional feature, generate manifest file containing static   \n                         asset information\n\n\nPerformance#\n\nFEATURES                     DESCRIPTION                                                    LINKS\nChunk Splitting              A variety of chunk splitting strategies are built into         \n                             Builder to automatically split the bundle into files of\n                             moderate size\nPrint File Size              After the production build, All bundle sizes is displayed by   \n                             default\nAnalyze bundle size          Optional feature, analyze bundle size through Bundle           \n                             Analyzer\nRemove console               Optional feature, remove console.xx in code                    \nOptimize moment.js size      Optional feature, remove the redundant locale files of         \n                             moment.js\nComponent on-demand import   Optional feature, selectively import code and styles from      \n                             component libraries\nImage compression            Optional feature, compress used image resources                \nPreload                      Optional feature, preemptively fetch and cache the target      \n                             resource for current navigation\nPrefetch                     Optional feature, preemptively fetch and cache the target      \n                             resource for a followup navigation\nPreconnect                   Optional feature, preemptively connect to the target           \n                             resource's origin\nDNS prefetch                 Optional feature, preemptively perform DNS resolution for      \n                             the target resource's origin","routePath":"/builder/en/guide/features","lang":"en","toc":[{"text":"JavaScript","id":"javascript","depth":2,"charIndex":434},{"text":"CSS","id":"css","depth":2,"charIndex":2790},{"text":"HTML","id":"html","depth":2,"charIndex":3978},{"text":"Development and Debugging","id":"development-and-debugging","depth":2,"charIndex":4658},{"text":"Frontend Framework","id":"frontend-framework","depth":2,"charIndex":5002},{"text":"Static Assets","id":"static-assets","depth":2,"charIndex":5508},{"text":"Performance","id":"performance","depth":2,"charIndex":6488}],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"Build Vue 2 App","content":"#\n\nAlthough the Modern.js framework is built on React, the underlying Modern.js\nBuilder is not coupled with React. Therefore, you can use Modern.js Builder to\nbuild your Vue applications and leverage most of the capabilities provided by\nModern.js Builder.\n\nIn this document, you will learn how to build a Vue 2 application using\nModern.js Builder.\n\n\nExample Project#\n\nWe have created an example project based on Vue 2 and Modern.js Builder. You can\nbuild your own project by referring this project, or just cloning it as a\ntemplate. The following documentation will provide more detailed instructions.\n\n * modern-js-examples - builder-vue2\n\n * modern-js-examples - builder-vue2-rspack\n\n\nCLI Tool#\n\nBefore you start building a Vue project, you need a CLI tool to provide basic\ncommands.\n\nYou can use the CLI tool provided by Builder, or you can build your own CLI tool\nbased on Builder's Node API.\n\n\nUsing Vue Plugin#\n\nTo compile Vue SFC (Single File Components) and JSX syntax, you need to register\nthe Builder Vue 2 plugin. The plugin will automatically add the necessary\nconfiguration for Vue builds and remove the built-in React-related\nconfigurations.\n\nFor example, register in builder.config.ts:\n\n\n\n\nType Definitions#\n\nIn a TypeScript project, you need to add type definitions for *.vue files so\nthat TypeScript can recognize them correctly.\n\nCreate env.d.ts in the src directory and add the following content:\n\n","routePath":"/builder/en/guide/framework/vue2","lang":"en","toc":[{"text":"Example Project","id":"example-project","depth":2,"charIndex":349},{"text":"CLI Tool","id":"cli-tool","depth":2,"charIndex":686},{"text":"Using Vue Plugin","id":"using-vue-plugin","depth":2,"charIndex":898},{"text":"Type Definitions","id":"type-definitions","depth":2,"charIndex":1204}],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"Build Vue 3 App","content":"#\n\nAlthough the Modern.js framework is built on React, the underlying Modern.js\nBuilder is not coupled with React. Therefore, you can use Modern.js Builder to\nbuild your Vue applications and leverage most of the capabilities provided by\nModern.js Builder.\n\nIn this document, you will learn how to build a Vue 3 application using\nModern.js Builder.\n\n\nExample Project#\n\nWe have created an example project based on Vue 3 and Modern.js Builder. You can\nbuild your own project by referring this project, or just cloning it as a\ntemplate. The following documentation will provide more detailed instructions.\n\n * modern-js-examples - builder-vue3\n\n * modern-js-examples - builder-vue3-rspack\n\n\nCLI Tool#\n\nBefore you start building a Vue project, you need a CLI tool to provide basic\ncommands.\n\nYou can use the CLI tool provided by Builder, or you can build your own CLI tool\nbased on Builder's Node API.\n\n\nUsing Vue Plugin#\n\nTo compile Vue SFC (Single File Components) and JSX syntax, you need to register\nthe Builder Vue plugin. The plugin will automatically add the necessary\nconfiguration for Vue builds and remove the built-in React-related\nconfigurations.\n\nFor example, register in builder.config.ts:\n\n\n\n\nType Definitions#\n\nIn a TypeScript project, you need to add type definitions for *.vue files so\nthat TypeScript can recognize them correctly.\n\nCreate env.d.ts in the src directory and add the following content:\n\n","routePath":"/builder/en/guide/framework/vue3","lang":"en","toc":[{"text":"Example Project","id":"example-project","depth":2,"charIndex":349},{"text":"CLI Tool","id":"cli-tool","depth":2,"charIndex":686},{"text":"Using Vue Plugin","id":"using-vue-plugin","depth":2,"charIndex":898},{"text":"Type Definitions","id":"type-definitions","depth":2,"charIndex":1202}],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"Glossary","content":"#\n\nNotice\n\nModern.js Builder has been rebranded as Rsbuild. This document will no longer be\nupdated.\n\n * If you are using the Modern.js framework, please visit the Modern.js\n   framework documentation directly.\n * If you are using the CLI or Node API of Modern.js Builder, you can easily\n   migrate to Rsbuild, please visit the Rsbuild repository for more information.\n\n\nBundler#\n\nRefers to module bundlers such as webpack, Rspack.\n\nThe main goal of bundlers is to bundle JavaScript, CSS and other files together,\nand the bundled files can be used in the browser, Node.js or other environments.\nWhen bundler processes the Web application, it builds a dependency graph and\nthen combines every module into one or more bundles.\n\n\nBuilder#\n\nRefers to the build layer of Modern.js. The goal of Builder is to provide\nModern.js users with out-of-the-box build capabilities and support seamless\nswitching between webpack and Rspack.\n\nThe previous version of Modern.js MAJOR_VERSION.46.0 used @modern-js/builder,\nwhich was upgraded to Rsbuild starting from MAJOR_VERSION.46.0.\n\n\nBuilder Provider#\n\nBuilder Provider is a part of Builder. Providers implements corresponding build\nfeature based on specific bundlers.\n\nCurrently there are two Providers:\n\n * @modern-js/builder-webpack-provider: Based on webpack.\n * @modern-js/builder-rspack-provider: Based on rspack.\n\n\nMicro-frontend#\n\nMicro-frontend (MFE) is an architecture style similar to microservices. It is a\ncomposition of multiple independently delivered frontend applications, forming a\ncohesive whole. MFE decomposes frontend applications into smaller, simpler\napplications that can be developed, tested, and deployed independently while\nstill appearing as a cohesive single product to users.\n\nIt primarily addresses two problems:\n\n * Difficulty in maintaining large and complex applications as they evolve over\n   time.\n\n * Inefficiency caused by cross-team or cross-department collaboration in\n   project development.\n\n\nModule Federation#\n\nModule Federation (MF) is a feature of Webpack. It allows a JavaScript\napplication to dynamically load code from another application, and in the\nprocess, share dependencies. If an application consuming a federated module does\nnot have a dependency needed by the federated code, Webpack will download the\nmissing dependency from that federated build origin.\n\nThis allows for the creation of micro-frontend-style applications, where\nmultiple systems can share code and be dynamically updated without having to\nrebuild the entire application.\n\nModern.js provides an example project for Module Federation. Please refer to\nmodule-federation-examples - modernjs.\n\nYou can also read the webpack Module Federation documentation to learn more\nconcepts.\n\n\nRspack#\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\n\nModern.js#\n\nModern.js is an open source web engineering system from ByteDance, which\nprovides multiple solutions to help developers solve problems in different\ndevelopment scenarios.\n\nModern.js Repository.\n\n\nEdenX#\n\nByteDance's internal web engineering system, implemented based on Modern.js.","routePath":"/builder/en/guide/glossary","lang":"en","toc":[{"text":"Bundler","id":"bundler","depth":2,"charIndex":370},{"text":"Builder","id":"builder","depth":2,"charIndex":726},{"text":"Builder Provider","id":"builder-provider","depth":2,"charIndex":1069},{"text":"Micro-frontend","id":"micro-frontend","depth":2,"charIndex":1357},{"text":"Module Federation","id":"module-federation","depth":2,"charIndex":1971},{"text":"Rspack","id":"rspack","depth":2,"charIndex":2737},{"text":"Modern.js","id":"modernjs","depth":2,"charIndex":3269},{"text":"EdenX","id":"edenx","depth":2,"charIndex":3477}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"Introduction","content":"#\n\nNotice\n\nModern.js Builder has been rebranded as Rsbuild. This document will no longer be\nupdated.\n\n * If you are using the Modern.js framework, please visit the Modern.js\n   framework documentation directly.\n * If you are using the CLI or Node API of Modern.js Builder, you can easily\n   migrate to Rsbuild, please visit the Rsbuild repository for more information.\n\nModern.js Builder is a Build Engine for web development.\n\nWith the growing of the front-end ecosystem, more and more build tools and\nplugins are created. For most developers, the configuration and dependencies\nrequired to build a web application have become complex; the cost of finding\nbest practices for developers has also risen.\n\nIn order to reduce the complexity and make it easier to build a project, we\nabstracted the build abilities based on the practical experience of Modern.js,\nand created the open source tool Modern.js Builder.\n\n\nRust Tools#\n\nIn recent years, the trend in front-end toolchain has been to re-implement them\nwith native programming languages like Rust for better performance. Some\nhigh-performance tools have created, such as Rspack, SWC, etc., and their use is\ngradually expanding. However, there are many differences between these Rust\ntools and JavaScript tools, including functional differences, configuration\ninconsistencies, which make it difficult for users to migrate.\n\nThe Rust process of the front-end toolchain will continue for a long time,\nModern.js Builder is expected to help developers better transition to Rust\ntools. Whether it's JavaScript tools, Rust tools, or even low-level bundlers\nlike webpack, they're all replaceable components in Modern.js Builder. You can\nincrementally replace these components by turning on configuration or enabling\nplugins, and Modern.js Builder will smooth out the major differences and help\nusers migrate.\n\n\nPosition#\n\nModern.js Builder is a build tool serving the upper-level front-end frameworks.\nIt focuses on solving problems in web application building, and expects to\nprovide out-of-box building abilities for front-end frameworks.\n\nIf you are developing a front-end framework, or developing a scaffolding for a\nfront-end application, Builder can provide most of the build logics for you,\nwhich allowing you to focus on implementing other features of the framework.\n\nIf you are a business developer, in most cases, you do not need to manually\ninstall Builder in your projects. We recommend that you use the upper-level\nframeworks based on Builder.\n\nCurrently, the following front-end frameworks are already using Builder:\n\n * Modern.js Framework (Open source).\n * EdenX Framework and PIA Framework inside ByteDance.\n\n\nFeatures#\n\n\nSupport Rspack Build#\n\nBuilder supports both webpack and Rspack, so you can switch between the stable\nWebpack and the faster Rspack.\n\nRspack - A High Performance JavaScript Bundler\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\nBy default, Builder uses webpack 5 as the bundler. Although the compilation\nspeed of webpack is not ideal, it is still the most mature and ecological\nbundler in the community. Based on webpack, Builder integrates Babel, PostCSS,\nterser and other tools to transform or minify codes. Builder also supports\nreplacing some compile tools with native tools to improve compilation speed,\nsuch as replacing babel/terser with swc or esbuild.\n\nIf you have higher build performance requirements, you can easily switch to\nRspack build mode, see Using Rspack for more information.\n\n\nDeep optimization#\n\nBuilder makes full use of various optimization strategies in the webpack\necosystem to ensure the artifacts performance in the production environment.\n\nTaking the chunk splitting scenario as an example, the webpack's splitChunks\nconfig is complex, and Builder makes it as an out-of-the-box\nperformance.chunkSplit config, it will split common third-party libraries into\nchunks to make page loading faster.\n\n\nExtensible Plugin System#\n\nProvides rich configuration options and a flexible plugin system to support\nin-depth customization of all features.\n\nFor Builder, all building abilities are achieved through plugins:\n\n * Most of the plugins are lightweight, built in Builder, and developers can\n   enable or disable them through configs.\n * Some plugins are more complex and developed as independent npm packages,\n   developers can install and use them as needed.\n\nBuilder also supports custom plugins, so framework developers can develop custom\nplugins to meet customized requirements.\n\n\nnpm packages#\n\nBelow is the npm package published by Builder.\n\nPACKAGE                                    VERSION   DESCRIPTION\n@modern-js/builder                                   Core package of Builder\n@modern-js/builder-cli                               CLI of Builder\n@modern-js/builder-webpack-provider                  Provides webpack build ability\n@modern-js/builder-rspack-provider                   Provides Rspack build ability\n@modern-js/builder-plugin-vue                        Vue 3 Plugin\n@modern-js/builder-plugin-vue2                       Vue 2 Plugin\n@modern-js/builder-plugin-swc                        SWC Plugin\n@modern-js/builder-plugin-stylus                     Stylus Plugin\n@modern-js/builder-plugin-esbuild                    Esbuild Plugin\n@modern-js/builder-plugin-node-polyfill              Node Polyfill Plugin\n@modern-js/builder-plugin-image-compress             Image Compress Plugin\n@modern-js/builder-shared                            Shared modules of Builder\n@modern-js/builder-doc                               Documentation snippets of Builder\n\nYou can view the source code of these packages in the packages/builder directory\nof the modern.js repository.\n\n\nNext Step#\n\nYou may want:\n\n","routePath":"/builder/en/guide/introduction","lang":"en","toc":[{"text":"Rust Tools","id":"rust-tools","depth":2,"charIndex":912},{"text":"Position","id":"position","depth":2,"charIndex":1855},{"text":"Features","id":"features","depth":2,"charIndex":2671},{"text":"Support Rspack Build","id":"support-rspack-build","depth":3,"charIndex":2683},{"text":"Deep optimization","id":"deep-optimization","depth":3,"charIndex":3957},{"text":"Extensible Plugin System","id":"extensible-plugin-system","depth":3,"charIndex":4383},{"text":"npm packages","id":"npm-packages","depth":2,"charIndex":4965},{"text":"Next Step","id":"next-step","depth":2,"charIndex":6164}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"Chunk Splitting Practice","content":"#\n\nA great chunk splitting strategy is very important to improve the loading\nperformance of the application. It can make full use of the browser's caching\nmechanism to reduce the number of requests and improve the loading speed of the\napplication.\n\nA variety of chunk splitting strategies are built into Builder, which can meet\nthe needs of most applications. You can also customize the chunk splitting\nconfig according to your own business scenarios.\n\n\nSplitting Strategies#\n\n> The chunk splitting config of Builder is in performance.chunkSplit.\n\nBuilder supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n * split-by-size: automatically split according to module size.\n * all-in-one: bundle all codes into one chunk.\n * single-vendor: bundle all NPM packages into a single chunk.\n * custom: custom chunk splitting strategy.\n\n\nsplit-by-experience#\n\nBehavior#\n\nBuilder adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @babel/runtime, @swc/helpers, tslib.\n * lib-react.js: includes react, react-dom.\n * lib-router.js: includes react-router, react-router-dom, history,\n   @remix-run/router.\n * lib-lodash.js: includes lodash, lodash-es.\n * lib-antd.js: includes antd.\n * lib-arco.js: includes @arco-design/web-react and related packages under the\n   @arco-design organization.\n * lib-semi.js: includes @douyinfe/semi-ui and related packages under the @ies &\n   @douyinfe organization.\n * lib-axios.js: includes axios and related packages.\n\nThis strategy groups commonly used packages and then splits them into separate\nchunks. Generally, the number of chunks is not large, which is suitable for most\napplications and is also our recommended strategy.\n\nConfig#\n\n\n\nNotes#\n\n * If the npm packages mentioned above are not installed or used in the project,\n   the corresponding chunk will not be generated.\n\n\nsplit-by-module#\n\nBehavior#\n\nSplit each NPM package into a Chunk.\n\nWARNING\n\nThis strategy will split the node_modules in the most granular way, and at the\nsame time, under HTTP/2, multiplexing will speed up the loading time of\nresources.However, in non-HTTP/2 environments, it needs to be used with caution\nbecause of HTTP head-of-line blocking problem.\n\nConfig#\n\n\n\nNotes#\n\n * This configuration will split the node_modules into smaller chunks, resulting\n   in a large number of file requests.\n * When using HTTP/2, resource loading time will be accelerated and cache hit\n   rate will be improved due to multiplexing.\n * When not using HTTP/2, the performance of page loading may be reduced due to\n   HTTP head-of-line blocking. Please use with caution.\n\n\nall-in-one#\n\nBehavior#\n\nThis strategy puts business code and third-party dependencies in the same Chunk.\n\nConfig#\n\n\n\nNotes#\n\n * This configuration will bundle all the generated JS code into one file\n   (except for dynamically imported chunks).\n * The size of a single JS file may be very large, leading to a decrease in page\n   loading performance.\n\n\nsingle-vendor#\n\nBehavior#\n\nThis strategy puts third-party dependencies in one Chunk, and business code in\nanother Chunk.\n\nConfig#\n\n\n\nNotes#\n\n * The size of a single vendor file may be very large, leading to a decrease in\n   page loading performance.\n\n\nsplit-by-size#\n\nBehavior#\n\nUnder this strategy, after setting minSize, maxSize to a fixed value, Builder\nwill automatically split them without extra config.\n\nConfig#\n\n\n\n\nCustom Splitting Strategy#\n\nIn addition to using the built-in strategies, you can also customize the\nsplitting strategy to meet more customization needs. Custom strategy is divided\ninto two parts:\n\n * Custom group\n * Custom bundler splitChunks config\n\nIt is worth noting that these two custom capabilities can be used together with\nthe built-in strategy, that is, you can use the built-in strategy to split\ncommonly used packages, and then use the custom function to split other\npackages.\n\n\nCustom Group#\n\nBuilder supports custom group, which is more flexible than the built-in\nstrategies, and simpler than writing bundler config.\n\nFor example, split the axios library under node_modules into axios.js:\n\n\n\nThrough forceSplitting config, you can easily split some packages into a Chunk.\n\nNotes#\n\nChunks split using the forceSplitting configuration will be inserted into the\nHTML file as resources requested for the initial screen using","routePath":"/builder/en/guide/optimization/split-chunk","lang":"en","toc":[{"text":"Splitting Strategies","id":"splitting-strategies","depth":2,"charIndex":453},{"text":"split-by-experience","id":"split-by-experience","depth":3,"charIndex":1069},{"text":"Behavior","id":"behavior","depth":4,"charIndex":1091},{"text":"Config","id":"config","depth":4,"charIndex":2121},{"text":"Notes","id":"notes","depth":4,"charIndex":2132},{"text":"split-by-module","id":"split-by-module","depth":3,"charIndex":2273},{"text":"Behavior","id":"behavior-1","depth":4,"charIndex":2291},{"text":"Config","id":"config-1","depth":4,"charIndex":2628},{"text":"Notes","id":"notes-1","depth":4,"charIndex":2639},{"text":"all-in-one","id":"all-in-one","depth":3,"charIndex":3029},{"text":"Behavior","id":"behavior-2","depth":4,"charIndex":3042},{"text":"Config","id":"config-2","depth":4,"charIndex":3135},{"text":"Notes","id":"notes-2","depth":4,"charIndex":3146},{"text":"single-vendor","id":"single-vendor","depth":3,"charIndex":3380},{"text":"Behavior","id":"behavior-3","depth":4,"charIndex":3396},{"text":"Config","id":"config-3","depth":4,"charIndex":3502},{"text":"Notes","id":"notes-3","depth":4,"charIndex":3513},{"text":"split-by-size","id":"split-by-size","depth":3,"charIndex":3632},{"text":"Behavior","id":"behavior-4","depth":4,"charIndex":3648},{"text":"Config","id":"config-4","depth":4,"charIndex":3790},{"text":"Custom Splitting Strategy","id":"custom-splitting-strategy","depth":2,"charIndex":3802},{"text":"Custom Group","id":"custom-group","depth":3,"charIndex":4293},{"text":"Notes","id":"notes-4","depth":4,"charIndex":4589},{"text":"Custom Bundler `splitChunks` Config","id":"custom-bundler-splitchunks-config","depth":3,"charIndex":-1},{"text":"Using Dynamic Import for Code Splitting","id":"using-dynamic-import-for-code-splitting","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"Quick Start","content":"#\n\nNotice\n\nModern.js Builder has been rebranded as Rsbuild. This document will no longer be\nupdated.\n\n * If you are using the Modern.js framework, please visit the Modern.js\n   framework documentation directly.\n * If you are using the CLI or Node API of Modern.js Builder, you can easily\n   migrate to Rsbuild, please visit the Rsbuild repository for more information.\n\n\nEnvironment preparation#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 16.2.0. We recommend using the LTS version of\nNode.js 18.\n\nYou can check the currently used Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 16.2.0, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 18 LTS version via nvm:\n\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\nUse the Modern.js Framework#\n\nThe Modern.js Framework uses Modern.js Builder as its build tool by default. If\nyou are a business developer, you do not need to manually install Builder, just\ncreate a Modern.js project and use all the features provided by Builder.\n\n\n\nPlease refer to Modern.js - Introduction and Modern.js - Quick Start to learn\nhow to use Modern.js framework.\n\nAbout the documentation\n\nModern.js framework documentation and Modern.js Builder documentation are\ndeployed under two separate sites. If you encounter any build-related problems\nwhile using the Modern.js framework, you can always refer to the documentation\nof Modern.js Builder to find solutions.\n\n\nUse the Builder CLI Tool#\n\nModern.js Builder provides a lightweight CLI tool that includes basic commands\nsuch as dev and build. It is primarily used for building non-React projects.\n\nIf your project is not based on React, for example, if you are developing a Vue\nproject, you can use the Builder CLI tool to build your project.\n\nPlease refer to Use Builder CLI for more information on how to use it.\n\n\nUse Builder in a Front-end Framework#\n\nIf you are developing a front-end framework, you can use Builder by following\nthese steps:\n\n\n1. Install Builder#\n\nYou need to install two packages:\n\n * @modern-js/builder: This is the core package of Builder, which exports the\n   core API of Builder.\n\n * @modern-js/builder-rspack-provider: To provide the building capabilities\n   based on Rspack.\n\nif you want to use webpack instead of Rspack, you can replace the\n@modern-js/builder-rspack-provider with @modern-js/builder-webpack-provider:\n\n> When performing a version upgrade, please ensure that the Builder and Provider\n> packages you install are of the same version.\n\n\n2. Create Builder Instance#\n\nThere are two steps to creating a Builder instance:\n\nFirst you need to initialize the Builder Provider and pass in the builderConfig\nconfig object. Builder provides a lot of configs that allow you to customize the\nbuild behavior. At this point, you don't need to know the specific content of\nthe config, just pass in an empty object. You can find all available configs in\nAPI - config.\n\n * Initialize the Rspack Provider:\n\n\n\n * Initialize the Rspack Provider：\n\n\n\nAfter getting the provider instance, you can call the createBuilder method to\ncreate a Builder instance object:\n\n\n\nExcept the entry option, the createBuilder method also provides some other\noptions, which you can learn more about in API - createBuilder.\n\n\n3. Call Builder Instance Method#\n\nThe Builder instance provides some methods, which you can use according to the\nusage scenarios.\n\nTo start local development, it is recommended to use the builder.startDevServer\nmethod, which will start a local Dev Server.\n\n\n\nAfter successfully starting Dev Server, you can see the following logs:\n\n\n\nTo deploy the App to production environment, it is recommended to use the\nbuilder.build method, which will build the production outputs.\n\n\n\n> For more introduction of Builder instance methods, please read the Builder\n> Instance chapter.\n\nAfter completing the above three steps, you have learned the basic usage of\nBuilder. Next, you can customize the build process through the Builder plugin\nand Builder configs.\n\n\nNext Step#\n\nYou may want:","routePath":"/builder/en/guide/quick-start","lang":"en","toc":[{"text":"Environment preparation","id":"environment-preparation","depth":2,"charIndex":370},{"text":"Use the Modern.js Framework","id":"use-the-modernjs-framework","depth":2,"charIndex":1094},{"text":"Use the Builder CLI Tool","id":"use-the-builder-cli-tool","depth":2,"charIndex":1770},{"text":"Use Builder in a Front-end Framework","id":"use-builder-in-a-front-end-framework","depth":2,"charIndex":2173},{"text":"1. Install Builder","id":"1-install-builder","depth":3,"charIndex":2305},{"text":"2. Create Builder Instance","id":"2-create-builder-instance","depth":3,"charIndex":2836},{"text":"3. Call Builder Instance Method","id":"3-call-builder-instance-method","depth":3,"charIndex":3584},{"text":"Next Step","id":"next-step","depth":2,"charIndex":4333}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"Introduce to Plugin","content":"#\n\nBuilder provides developers with a lightweight but powerful plugin system to\nbuild itself and any other plugins. Developing plugins to change the Builder's\nbehavior and introduce extra features. such as:\n\n * Modify config of bundlers.\n * Resolve and handle new file types.\n * Modify and compile file modules.\n * Deploy your application.\n\nBuilder can use webpack or Rspack as the bundler, expose unified Node.js API,\nand integrate into different frameworks. Users can painlessly switch between\nbundlers.\n\n\nWrite a plugin#\n\nPlugin module should export an entry function just like (options?:\nPluginOptions) => BuilderPlugin, It is recommended to name plugin functions\nbuilderPluginXXX.\n\n\n\nThe function usually takes an options object and returns the plugin instance,\nwhich manages state through closures.\n\nLet's look at each part:\n\n * name is used to label the plugin\n * setup as the main entry point of plugins\n * api provides context object, lifetime hooks and utils.\n\nThe package name of the plugin needs to contain the conventional builder-plugin\nprefix for identification, just like builder-plugin-foo,\n@scope/builder-plugin-bar, etc.\n\n\nLifetime Hooks#\n\nBuilder uses lifetime planning work internally, and plugins can also register\nhooks to take part in any stage of the workflow and implement their own\nfeatures.\n\nThe full list of Builder's lifetime hooks can be found in the API References.\n\nThe Builder does not take over the hooks of the underlying bundlers, whose\ndocuments can be found here: webpack hooks\n\n\nUse Builder Config#\n\nCustom plugins can usually get config from function parameters, just define and\nuse it at your pleasure.\n\nBut sometimes you may need to read and change the public config of the Builder.\nTo begin with, you should understand how the Builder generates and uses its\nconfig:\n\n * Read, parse config and merge with default values.\n * Plugins modify the config by api.modifyBuilderConfig(...).\n * Normalize the config and provide it to consume, then the config can no longer\n   be modified.\n\nRefer to this tiny example:\n\n\n\nThere are 3 ways to use Builder config:\n\n * register callback with api.modifyBuilderConfig(config => {}) to modify\n   config.\n * use api.getBuilderConfig() to get Builder config.\n * use api.getNormalizedConfig() to get finally normalized config.\n\nWhen normalized, it will again merge the config object with the default values\nand make sure the optional properties exist. So for PluginUploadDist, part of\nits type looks like:\n\n\n\nThe return value type of getNormalizedConfig() is slightly different from that\nof BuilderConfig and is narrowed compared to the types described elsewhere in\nthe documentation. You don't need to fill in the defaults when you use it.\n\nTherefore, the best way to use configuration options is to\n\n * Modify the config with api.modifyBuilderConfig(config => {})\n * Read api.getNormalizedConfig() as the actual config used by the plugin in the\n   further lifetime.\n\n\nModify webpack Config#\n\nPlugins can handle webpack's config by:\n\n * use api.modifyWebpackChain(chain => {}) to modify webpack-chain.\n * use api.modifyWebpackConfig(config => {}) to modify raw webpack config.\n * use api.onAfterCreateCompiler(compiler => {}) to handle webpack instance\n   directly.\n\nWe recommend that you use neutrinojs/webpack-chain's chained api to handle the\nconfig of webpack whenever possible.\n\nBuilder integrated a webpack5-compatible version, which can be found in\nsorrycc/webpack-chain.\n\n\nExamples#\n\n\nModify Loaders#\n\nThe webpack loaders can be used to load and transform various file types. For\nmore information, see concepts and loaders.\n\n\n\n\nAdd Entry Points#\n\n\n\n\nIntegrate webpack Plugins#\n\nIntegrate existing webpack plugins to migrate your applications:\n\n","routePath":"/builder/en/plugins/introduction","lang":"en","toc":[{"text":"Write a plugin","id":"write-a-plugin","depth":2,"charIndex":507},{"text":"Lifetime Hooks","id":"lifetime-hooks","depth":2,"charIndex":1141},{"text":"Use Builder Config","id":"use-builder-config","depth":2,"charIndex":1518},{"text":"Modify webpack Config","id":"modify-webpack-config","depth":2,"charIndex":2943},{"text":"Examples","id":"examples","depth":2,"charIndex":3455},{"text":"Modify Loaders","id":"modify-loaders","depth":3,"charIndex":3467},{"text":"Add Entry Points","id":"add-entry-points","depth":3,"charIndex":3610},{"text":"Integrate webpack Plugins","id":"integrate-webpack-plugins","depth":3,"charIndex":3632}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"Overview","content":"#\n\n\nOfficial Plugins#\n\n * @modern-js/builder-plugin-vue: Used to build Vue 3 App.\n * @modern-js/builder-plugin-vue2: Used to build Vue 2 App.\n * @modern-js/builder-plugin-swc: Use SWC as the transformer and minimizer to\n   improve build performance.\n * @modern-js/builder-plugin-stylus: Use Stylus add CSS preprocessor.\n * @modern-js/builder-plugin-esbuild: Use esbuild as the transformer and\n   minimizer to improve build performance.\n * @modern-js/builder-plugin-node-polyfill: Inject Polyfills of Node core\n   modules in the browser side.\n * @modern-js/builder-plugin-image-compress: Compress the image resources used\n   in the project.\n\nYou can find the source code of these plugins in modern.js/packages/builder\ndirectory.","routePath":"/builder/en/plugins/list","lang":"en","toc":[{"text":"Official Plugins","id":"official-plugins","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"Esbuild Plugin","content":"#\n\nWARNING\n\nThe esbuild feature in the current document is no longer maintained, we\nrecommend using the Rspack + SWC solution, because Rspack + SWC provide better\nbuild performance, richer features, and better compatibility.\n\nPlease refer to 「Use Rspack」 for more information.\n\nesbuild is a front-end build tool based on Golang. It has the functions of\nbundling, compiling and minimizing JavaScript code. Compared with traditional\ntools, the performance is significantly improved. When minimizing code, compared\nto webpack's built-in terser minimizer, esbuild has dozens of times better\nperformance.\n\nModern.js Builder provides esbuild plugin that allow you to use esbuild instead\nof babel-loader, ts-loader and terser for transformation and minification\nprocess. When you enable esbuild in a large project, it can greatly reduce the\ntime required for code compilation and compression, while effectively avoiding\nOOM (heap out of memory) problems.\n\n\nQuick Start#\n\n\nUsed in Modern.js framework#\n\nThe Modern.js framework integrates the Builder's esbuild plugin by default, so\nyou don't need to manually install and register the plugin, just use the\ntools.esbuild configuration:\n\n\n\n\nUse via the Node API#\n\nIf you use the Builder's Node API, you need to manually install and register the\nesbuild plugin.\n\nInstall#\n\nYou can install the plugin with the following command:\n\nRegister#\n\nRegister esbuild plugin through the addPlugins method:\n\n\n\n\nConfig#\n\nThe plugin will enable code transformation and minification by default. You can\nalso customize the behavior of the plugin through configuration.\n\n\nloader#\n\n * Type:\n\n\n\n * Default:\n\n\n\nThis config is used to enable JavaScript/TypeScript transformation, which will\nreplace babel-loader and ts-loader with esbuild-loader.\n\nIf you want to modify the options, you can check the esbuild-loader\ndocumentation.\n\nSet JSX Format#\n\nWhen using esbuild for transformation, esbuild will read the compilerOptions.jsx\nfield in tsconfig.json to determine which JSX syntax to use.\n\nTherefore, you need to set the correct JSX syntax in tsconfig.json.\n\nFor example, React projects need to set compilerOptions.jsx to react-jsx:\n\n\n\nSet the target environment#\n\nUse the target option to set the target environment for transformation. target\ncan be set directly to the JavaScript language version, such as es6, es2020; it\ncan also be set to several target environments, each target environment is an\nenvironment name followed by a version number, such as ['chrome58', 'edge16'\n,'firefox57']. For a detailed introduction of the target option, please refer to\nesbuild - target.\n\ntarget supports setting to the following environments:\n\n * chrome\n * edge\n * firefox\n * ie\n * ios\n * node\n * opera\n * safari\n\n\n\nDisable transformation#\n\nSet loader to false to disable esbuild transformation, and Builder will continue\nto use Babel to transform the code.\n\n\n\n\nminimize#\n\n * Type:\n\n\n\n * Default:\n\n\n\nThis option is used to enable minification for JavaScript and CSS.\n\nIf you want to modify the options, you can check the esbuild-loader\ndocumentation.\n\nSet the target environment#\n\nUse the target option to set the target environment for minification.\n\n\n\nDisable minification#\n\nSet minimize to false to disable esbuild minification, and Builder will continue\nto use Terser to minify the code.\n\n\n\n\nLimitations#\n\nAlthough esbuild can significantly improve the build performance of existing\nwebpack projects, it still has certain limitations that require special\nattention.\n\n\nCompatibility#\n\nAs a compiler (i.e. loader capability), esbuild usually supports at least ES2015\n(that is, ES6) syntax, and does not have the ability to automatically inject\nPolyfill.. If the production environment needs to downgrade to ES5 and below\nsyntax, it is recommended to use SWC compilation.\n\nYou can specify the target syntax version by following config:\n\n\n\nAs a code minify tool (i.e. minimize capability), esbuild can minify the code in\nproduction environment, and usually supports ES2015 syntax at least.\n\nIf you set the compressed target to es5, you need to ensure that all codes have\nbeen compiled to ES5 codes, otherwise it will cause esbuild compilation error:\nTransforming 'xxx' to the configured target environment (\"es5\") is not supported\nyet .\n\nTherefore, for projects that need to be compatible with ES5 and below syntax in\nthe production environment, please be careful to enable the minimize capability,\nand it is recommended to use SWC compression.\n\nYou can specify the target syntax version by following config:\n\n\n\nCaution\n\nProjects that need to be compatible with ES5 and below syntax in the production\nenvironment need to be careful to turn on the minimize config.\n\n\nNot support Babel plugins#\n\nAs a compiler, the syntax transformation function of the original Babel plugins\nsuch as babel-plugin-import is not available after esbuild is turned on. And\nsince the bottom layer of the plugin uses esbuild's Transform API, it does not\nsupport esbuild plugins to customize the compilation process.\n\nIf you have requirements related to Babel plugins such as babel-plugin-import,\nyou can use the SWC plugin.\n\n\nBundle Size#\n\nAlthough the compression speed of esbuild is faster, the compression ratio of\nesbuild is lower than that of terser, so the bundle size will increase, please\nuse it according to the scenes. Generally speaking, esbuild is more suitable for\nscenes that are not sensitive to bundle size.\n\nYou can refer to minification-benchmarks for a detailed comparison between\nminimizers.","routePath":"/builder/en/plugins/plugin-esbuild","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":949},{"text":"Used in Modern.js framework","id":"used-in-modernjs-framework","depth":3,"charIndex":964},{"text":"Use via the Node API","id":"use-via-the-node-api","depth":3,"charIndex":1179},{"text":"Install","id":"install","depth":4,"charIndex":1300},{"text":"Register","id":"register","depth":4,"charIndex":1366},{"text":"Config","id":"config","depth":2,"charIndex":1436},{"text":"loader","id":"loader","depth":3,"charIndex":1592},{"text":"Set JSX Format","id":"set-jsx-format","depth":4,"charIndex":1848},{"text":"Set the target environment","id":"set-the-target-environment","depth":4,"charIndex":2154},{"text":"Disable transformation","id":"disable-transformation","depth":4,"charIndex":2725},{"text":"minimize","id":"minimize","depth":3,"charIndex":2871},{"text":"Set the target environment","id":"set-the-target-environment-1","depth":4,"charIndex":3061},{"text":"Disable minification","id":"disable-minification","depth":4,"charIndex":3163},{"text":"Limitations","id":"limitations","depth":2,"charIndex":3305},{"text":"Compatibility","id":"compatibility","depth":3,"charIndex":3481},{"text":"Not support Babel plugins","id":"not-support-babel-plugins","depth":3,"charIndex":4675},{"text":"Bundle Size","id":"bundle-size","depth":3,"charIndex":5111}],"domain":"","frontmatter":{},"version":""},{"id":44,"title":"Image Compress Plugin","content":"#\n\nWith the image compression plugin, image resources used in the project can be\ncompressed to reduce the size of the artifacts without affecting the visual\nappearance of the image.\n\n\nQuick Start#\n\n\nInstall#\n\nYou can install the plugin with the following command:\n\n\nRegister#\n\nIn upper-level frameworks such as Modern.js, you can register image compress\nplugin through the builderPlugins config:\n\n\n\nIf you are using the Builder's Node API, you can register image compress plugin\nthrough the addPlugins method:\n\n\n\n\nConfig#\n\nThe plugin accepts an array of compressor configuration options, each of which\ncan be either a string or an object. The string can be the name of a built-in\ncompressor and its default configuration enabled. Or use the object format\nconfiguration and specify the compressor in the use field. The remaining fields\nof the object will be used as compressor configuration options.\n\nBy default, the plugin will enable jpeg, png, ico image compressors, which are\nequivalent to the following two examples:\n\n\n\n\n\nThe default configuration can be overridden by specifying a configuration\noption. For example, to allow the jpeg compressor to recognize new extension\nname and to set the quality of the png compressor.\n\n\n\nThe default png compressor is lossy. If you want to replace it with a lossless\ncompressor, you can use the following configuration.\n\n\n\nThe list of configuration options will eventually be converted to the\ncorresponding bundler loader configuration, so compressors follow the same\nbottom-to-top matching rule.\n\nFor example, the png compressor will take precedence over the pngLossless\ncompressor for the following configuration:\n\n\n\nFor more information on compressors, please visit @napi-rs/image.","routePath":"/builder/en/plugins/plugin-image-compress","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":183},{"text":"Install","id":"install","depth":3,"charIndex":198},{"text":"Register","id":"register","depth":3,"charIndex":265},{"text":"Config","id":"config","depth":2,"charIndex":513}],"domain":"","frontmatter":{},"version":""},{"id":45,"title":"Node Polyfill Plugin","content":"#\n\nAbout Node Polyfill\n\nNormally, we don't need to use Node libs on the browser side. However, it is\npossible to use some Node libs when the code will run on both the Node side and\nthe browser side, and Node Polyfill provides browser versions of polyfills for\nthese Node libs.\n\nBy using the Node Polyfill plugin, Node core libs polyfills are automatically\ninjected into the browser-side, allowing you to use these modules on the browser\nside with confidence.\n\n\nQuick Start#\n\n\nUsed in Modern.js framework#\n\nThe Modern.js framework integrates the Builder's Node Polyfill plugin by\ndefault, so you don't need to manually install and register the plugin, just set\nthe output.disableNodePolyfill config to false:\n\n\n\n\nUse via the Node API#\n\nIf you use the Builder's Node API, you need to manually install and register the\nesbuild plugin.\n\nInstall#\n\nYou can install the plugin with the following command:\n\nRegister#\n\nRegister node polyfill plugin through the addPlugins method:\n\n\n\n\nNode Polyfills#\n\n\nGlobals#\n\n * Buffer\n * process\n\nWhen the above global variables are used directly in code, the corresponding\npolyfill will be injected.\n\n\n\n\nModules#\n\n * assert\n * buffer\n * console\n * constants\n * crypto\n * domain\n * events\n * http\n * https\n * os\n * path\n * punycode\n * process\n * querystring\n * stream\n * _stream_duplex\n * _stream_passthrough\n * _stream_readable\n * _stream_transform\n * _stream_writable\n * string_decoder\n * sys\n * timers\n * tty\n * url\n * util\n * vm\n * zlib\n\nWhen the above module is referenced in code via import / require syntax, the\ncorresponding polyfill will be injected.\n\n\n\n\nFallbacks#\n\n * child_process\n * cluster\n * dgram\n * dns\n * fs\n * module\n * net\n * readline\n * repl\n * tls\n\nCurrently there is no polyfill for the above modules on the browser side, so\nwhen you import the above modules, it will automatically fallback to an empty\nobject.\n\n","routePath":"/builder/en/plugins/plugin-node-polyfill","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":460},{"text":"Used in Modern.js framework","id":"used-in-modernjs-framework","depth":3,"charIndex":475},{"text":"Use via the Node API","id":"use-via-the-node-api","depth":3,"charIndex":711},{"text":"Install","id":"install","depth":4,"charIndex":832},{"text":"Register","id":"register","depth":4,"charIndex":898},{"text":"Node Polyfills","id":"node-polyfills","depth":2,"charIndex":974},{"text":"Globals","id":"globals","depth":3,"charIndex":992},{"text":"Modules","id":"modules","depth":3,"charIndex":1132},{"text":"Fallbacks","id":"fallbacks","depth":3,"charIndex":1591}],"domain":"","frontmatter":{},"version":""},{"id":46,"title":"Stylus Plugin","content":"#\n\nStylus is an Expressive, dynamic and robust CSS preprocessor. This chapter\nintroduces how to use Stylus in Builder.\n\n\nQuick Start#\n\n\nInstall#\n\nYou can install the plugin with the following command:\n\n\nRegister#\n\nIn upper-level frameworks such as Modern.js, you can register Stylus plugin\nthrough the builderPlugins config:\n\n\n\nWhen you call the Builder's Node API directly, you can register Stylus plugin\nwith the addPlugins method:\n\n\n\n\nExample#\n\nAfter installing the plugin, you can directly import *.styl or *.module.styl\nfiles into the code without adding other configs.\n\n * normalize.styl:\n\n\n\n * title.module.styl:\n\n\n\n * index.js:\n\n\n\n\nConfig#\n\nIf you need to customize the compilation behavior of Stylus, you can use the\nfollowing configs.\n\n\nstylusOptions#\n\n-Type:\n\n\n\n * Default: undefined\n\nOptions passed to Stylus, please refer to the Stylus documentation for specific\nusage.\n\n\n\n\nsourceMap#\n\n * Type: boolean\n * Default: isDev\n\nWhether to generate Source Map, enabled by default in the development\nenvironment.\n\n","routePath":"/builder/en/plugins/plugin-stylus","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":120},{"text":"Install","id":"install","depth":3,"charIndex":135},{"text":"Register","id":"register","depth":3,"charIndex":202},{"text":"Example","id":"example","depth":2,"charIndex":437},{"text":"Config","id":"config","depth":2,"charIndex":639},{"text":"stylusOptions","id":"stylusoptions","depth":3,"charIndex":746},{"text":"sourceMap","id":"sourcemap","depth":3,"charIndex":886}],"domain":"","frontmatter":{},"version":""},{"id":47,"title":"SWC Plugin","content":"#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js has a out-of-box plugin for SWC, power your Web application with\nPolyfill and minification, we also port some common used Babel plugins to SWC.\n\n\nUsage Scenarios#\n\nBefore using the SWC plugin, please understand the scenarios and limitations of\nthe SWC plugin to determine whether your project is suitable for using it.\n\n\nRspack Scenario#\n\nIf you are already using Rspack as the bundler in your project, then you do not\nneed to use the SWC plugin, because Rspack uses SWC for transpiler and minifier\nby default, and the SWC compilation capabilities are available out of the box.\n\nIf you have configured the current SWC plugin when using Rspack, it will not\nhave any effect.\n\n\nBabel Plugins#\n\nIf your project requires the registration of some custom Babel plugins, you will\nnot be able to register and use Babel plugins after using SWC, since it replaces\nBabel as the transpiler.\n\nFor most common Babel plugins, you can find corresponding replacements in SWC,\nsuch as:\n\n * @babel/preset-env: use presetEnv instead.\n * @babel/preset-react: use presetReact instead.\n * babel-plugin-import: use source.transformImport instead.\n * babel-plugin-lodash: use extensions.lodash instead.\n * @emotion/babel-plugin: use extensions.emotion instead.\n * babel-plugin-styled-components: use extensions.styledComponents instead.\n * @babel/plugin-react-transform-remove-prop-types: use\n   reactUtils.removePropTypes instead.\n\nIf you use Babel plugin capabilities that are not yet supported by SWC, you will\nno longer be able to use them after switching to SWC compilation. You can give\nfeedback via issues under the swc-plugins repository and we will evaluate if\nbuilt-in support is needed.\n\n\nBundle Size#\n\nWhen using SWC for code minification instead of terser and cssnano, there may be\na small change in the bundle size. SWC outperforms terser for JavaScript code\ncompression and slightly underperforms cssnano for CSS code compression.\n\nFor a detailed comparison between minifiers, see minification-benchmarks.\n\n\nQuick Start#\n\n\nUsed in Modern.js framework#\n\nThe Modern.js framework integrates the Builder's SWC plugin, and you can use it\nin the following ways:\n\nFirst, you need to execute pnpm run new to enable the SWC compile:\n\n\n\nAfter the installation, please register the SWC plugin in the modern.config.ts\nfile, then the SWC compilation and compression will be enabled.\n\n\n\n\nUse via the Node API#\n\nIf you use the Builder's Node API, you need to manually install and register the\nSWC plugin of Builder.\n\nInstall#\n\nYou can install the plugin with the following command:\n\nRegister#\n\nRegister SWC plugin through the addPlugins method:\n\n\n\nThat's it! Now you can use SWC transformation and minification in your project.\n\n\nConfig#\n\n * Type:\n\n\n\nThe plugin configuration is based on the SWC configuration. In order to simplify\nsome deep-level configurations and improve development experience, certain\nextensions have been made. When using object-based configuration, for example\nyou can use presetReact and presetEnv to quickly configure React-related\nfeatures and syntax downgrading. Other configurations will also be directly\npassed through to SWC.\n\nWhen using function-based configuration, the default configuration generated by\nthe plugin will be passed in, allowing you to modify it or return a new\nconfiguration.\n\n\npresetReact#\n\n * Type: presetReact in SWC.\n\nPorted from @babel/preset-react. The value you passed will be merged with\ndefault option.\n\nBy default, the plugin will set runtime field based on your react version, if\nreact version is newer than 17.0.0, it will be set to automatic, otherwish\nclassic.\n\n\npresetEnv#\n\n * Type: presetEnv in SWC.\n\nPorted from @babel/preset-env. The value you passed will be merged with default\noption.\n\nDefault option is:\n\n\n\n\njsMinify#\n\n * Type: boolean or compress configuration.\n * Default: { compress: {}, mangle: true }.\n\nIf set it to false, then SWC minification will be disabled, if set it to true\nthen will it applies default option. If you pass an object, then this object\nwill be merged with default option.\n\n\ncssMinify#\n\n * Type:: boolean\n * Default:: true\n\nWhether enable to compress CSS files by SWC. If enabled, it will improve the\nperformance of CSS compression, but the compression ratio will be slightly\nreduced.\n\n\noverrides#\n\n * Type:\n\n\n\n * Default: undefined\n\nSpecify special configuration for specific modules. For example if you want to\nset ie 11 target for foo.ts:\n\n\n\nThis will merged into the default configuration, and do not affect other\nmodules.\n\n\nextensions#\n\n * Type: Object\n\nSome plugins ported from Babel.\n\nextensions.reactUtils#\n\n * Type: Object\n\n\n\nSome little help utils for React.\n\nreactUtils.autoImportReact\n\n * Type: boolean\n\nAutomatically . Mostly used for generated React.createElement`.\n\nreactUtils.removeEffect\n\n * Type: boolean\n\nRemove useEffect call.\n\nreactUtils.removePropTypes\n\n * Type:\n\n\n\nRemove React runtime type checking. This is ported from\n@babel/plugin-react-transform-remove-prop-types, All the configurations remain\nthe same.\n\nextensions.lodash#\n\n * Type:\n\n\n\n * Default:\n\n\n\nPorted from babel-plugin-lodash, it is used to automatically convert references\nto Lodash into on-demand imports, thereby reducing the bundle size of Lodash\ncode.\n\n\n\nextensions.styledComponents#\n\n * Type:\n\n\n\nThis is ported by Next.js team from babel-plugin-styled-components.\n\nextensions.emotion#\n\n * Type:\n\n\n\nThis is ported by Next.js team from @emotion/babel-plugin\n\nextensions.pluginImport#\n\nTIP\n\nBuilder provides the source.transformImport config, so you don't need to\nconfigure extensions.pluginImport manually.\n\nPorted from babel-plugin-import, configurations are the same.\n\nSome configurations can be passed in functions, such as customName,\ncustomStyleName. These JavaScript functions will be called by Rust through\nNode-API, which will cause some performance overhead.\n\nSome simple function logic can be replaced by template language. Therefore, the\nconfiguration of function items such as customName, customStyleName can also be\npassed in strings as templates to replace functions and improve performance.\n\nFor example:\n\n\n\nApply following configurations:\n\n\n\n{{ member }} will be replaced by the imported specifier:\n\n\n\nTemplate customName: 'foo/es/{{ member }}' is the same as customName: (member)\n=> `foo/es/${member}` , but template value has no performance overhead of\nNode-API.\n\nThe template used here is handlebars. There are some useful builtin tools, Take\nthe above import statement as an example:\n\n\n\nTransformed to:\n\n\n\nIn addition to kebabCase, there are cameraCase, snakeCase, upperCase and\nlowerCase can be used as well.\n\n\nLimitation#\n\nDo not support @babel/plugin-transform-runtime and other custom Babel plugins.","routePath":"/builder/en/plugins/plugin-swc","lang":"en","toc":[{"text":"Usage Scenarios","id":"usage-scenarios","depth":2,"charIndex":350},{"text":"Rspack Scenario","id":"rspack-scenario","depth":3,"charIndex":525},{"text":"Babel Plugins","id":"babel-plugins","depth":3,"charIndex":879},{"text":"Bundle Size","id":"bundle-size","depth":3,"charIndex":1878},{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":2201},{"text":"Used in Modern.js framework","id":"used-in-modernjs-framework","depth":3,"charIndex":2216},{"text":"Use via the Node API","id":"use-via-the-node-api","depth":3,"charIndex":2567},{"text":"Install","id":"install","depth":4,"charIndex":2695},{"text":"Register","id":"register","depth":4,"charIndex":2761},{"text":"Config","id":"config","depth":2,"charIndex":2908},{"text":"presetReact","id":"presetreact","depth":3,"charIndex":3505},{"text":"presetEnv","id":"presetenv","depth":3,"charIndex":3804},{"text":"jsMinify","id":"jsminify","depth":3,"charIndex":3956},{"text":"cssMinify","id":"cssminify","depth":3,"charIndex":4249},{"text":"overrides","id":"overrides","depth":3,"charIndex":4461},{"text":"extensions","id":"extensions","depth":3,"charIndex":4703},{"text":"extensions.reactUtils","id":"extensionsreactutils","depth":4,"charIndex":4766},{"text":"extensions.lodash","id":"extensionslodash","depth":4,"charIndex":5208},{"text":"extensions.styledComponents","id":"extensionsstyledcomponents","depth":4,"charIndex":5421},{"text":"extensions.emotion","id":"extensionsemotion","depth":4,"charIndex":5532},{"text":"extensions.pluginImport","id":"extensionspluginimport","depth":4,"charIndex":5624},{"text":"Limitation","id":"limitation","depth":2,"charIndex":6797}],"domain":"","frontmatter":{},"version":""},{"id":48,"title":"Vue Plugin","content":"#\n\nThe Vue plugin provides support for building Vue 3 applications. The plugin\ninternally integrates vue-loader and @vue/babel-plugin-jsx.\n\n\nQuick Start#\n\n\nInstall#\n\nYou can install the plugin with the following command:\n\n\nRegister#\n\nYou can register Vue plugin with the addPlugins method:\n\n\n\nAfter installing the plugin, you can directly import *.vue files in your code or\nuse Vue's JSX syntax without the need for additional configuration.\n\n\nConfig#\n\nIf you need to customize the compilation behavior of Vue, you can use the\nfollowing configs.\n\n\nvueLoaderOptions#\n\n * Type: VueLoaderOptions\n * Default:\n\n\n\nOptions passed to vue-loader, please refer to the vue-loader documentation for\ndetailed usage.\n\n\n\n\nvueJsxOptions#\n\n * Type:\n\n\n\n * Default: {}\n\nOptions passed to @vue/babel-plugin-jsx, please refer to the\n@vue/babel-plugin-jsx documentation for detailed usage.\n\n","routePath":"/builder/en/plugins/plugin-vue","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":140},{"text":"Install","id":"install","depth":3,"charIndex":155},{"text":"Register","id":"register","depth":3,"charIndex":222},{"text":"Config","id":"config","depth":2,"charIndex":443},{"text":"vueLoaderOptions","id":"vueloaderoptions","depth":3,"charIndex":547},{"text":"vueJsxOptions","id":"vuejsxoptions","depth":3,"charIndex":706}],"domain":"","frontmatter":{},"version":""},{"id":49,"title":"Vue 2 Plugin","content":"#\n\nThe Vue 2 plugin provides support for building Vue 2 applications. The plugin\ninternally integrates vue-loader and @vue/babel-preset-jsx.\n\n\nQuick Start#\n\n\nInstall#\n\nYou can install the plugin with the following command:\n\n\nRegister#\n\nYou can register Vue 2 plugin with the addPlugins method:\n\n\n\nAfter installing the plugin, you can directly import *.vue files in your code or\nuse Vue's JSX syntax without the need for additional configuration.\n\n\nConfig#\n\nIf you need to customize the compilation behavior of Vue, you can use the\nfollowing configs.\n\n\nvueLoaderOptions#\n\n * Type: VueLoaderOptions\n * Default:\n\n\n\nOptions passed to vue-loader, please refer to the vue-loader documentation for\ndetailed usage.\n\n\n\nTIP\n\nThe Vue 2 plugin is using the vue-loader v15. Please be aware that there may be\nconfiguration differences between v15 and the latest version.\n\n\nvueJsxOptions#\n\n * Type:\n\n\n\n * Default:\n\n\n\nOptions passed to @vue/babel-preset-jsx, please refer to the\n@vue/babel-preset-jsx documentation for detailed usage.\n\n","routePath":"/builder/en/plugins/plugin-vue2","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":142},{"text":"Install","id":"install","depth":3,"charIndex":157},{"text":"Register","id":"register","depth":3,"charIndex":224},{"text":"Config","id":"config","depth":2,"charIndex":447},{"text":"vueLoaderOptions","id":"vueloaderoptions","depth":3,"charIndex":551},{"text":"vueJsxOptions","id":"vuejsxoptions","depth":3,"charIndex":858}],"domain":"","frontmatter":{},"version":""}]