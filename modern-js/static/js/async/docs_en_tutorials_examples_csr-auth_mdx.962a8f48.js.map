{"version":3,"file":"static/js/async/docs_en_tutorials_examples_csr-auth_mdx.962a8f48.js","sources":["./docs/en/tutorials/examples/csr-auth.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"en%2Ftutorials%2Fexamples%2Fcsr-auth.mdx\"] = {\"toc\":[],\"title\":\"Route Authorization\",\"frontmatter\":{\"title\":\"Route Authorization\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nimport Sandpack from '@site/src/components/Sandpack';\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        ul: \"ul\",\n        li: \"li\",\n        code: \"code\",\n        pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"route-authorization\">{\"Route Authorization\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#route-authorization\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js defaults to the convention-based routing based on React Router 6. For more details, please refer to \"}<_components.a href=\"/guides/basic-features/routes#routing-scheme\">{\"Routing\"}</_components.a>{\".\"}</_components.p>{\"\\n\"}<_components.p>{\"In a web application, if there are multiple routes, we may need to authorize access to some of them before accessing them. For example, in the following scenario:\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"Access to the \"}<_components.code>{\"/\"}</_components.code>{\" route does not require authorization and can be accessed directly.\"}</_components.li>{\"\\n\"}<_components.li>{\"Access to the \"}<_components.code>{\"/protected\"}</_components.code>{\" route requires authorization. If there is no authorization, it will automatically redirect to the \"}<_components.code>{\"/login\"}</_components.code>{\" route. After successful login, it returns to \"}<_components.code>{\"/protected\"}</_components.code>{\".\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}{\"\\n\"}<Sandpack template=\"web-app\"><_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/page.tsx\"'>{'import { Helmet } from \\'@modern-js/runtime/head\\';\\nimport \\'./index.css\\';\\n\\nconst PublicPage = (): JSX.Element => (\\n  <div className=\"container-box\">\\n    <Helmet>\\n      <link\\n        rel=\"icon\"\\n        type=\"image/x-icon\"\\n        href=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/uhbfnupenuhf/favicon.ico\"\\n      />\\n    </Helmet>\\n    <h3>Public</h3>\\n  </div>\\n);\\n\\nexport default PublicPage;\\n\\n'}</_components.code></_components.pre><_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/layout.tsx\"'>{\"import { Link, Outlet } from '@modern-js/runtime/router';\\nimport { AuthProvider, AuthStatus } from './Auth';\\n\\nexport default function Layout() {\\n  return (\\n    <AuthProvider>\\n      <AuthStatus />\\n\\n      <ul>\\n        <li>\\n          <Link to=\\\"/\\\">Public Page</Link>\\n        </li>\\n        <li>\\n          <Link to=\\\"/protected\\\">Protected Page</Link>\\n        </li>\\n      </ul>\\n\\n      <Outlet />\\n    </AuthProvider>\\n  );\\n}\\n\\n\"}</_components.code></_components.pre><_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/fakeAuth.ts\"'>{\"/**\\n * This represents some generic auth provider API, like Firebase.\\n */\\nconst fakeAuthProvider = {\\n  isAuthenticated: false,\\n  signin(callback: VoidFunction) {\\n    fakeAuthProvider.isAuthenticated = true;\\n    setTimeout(callback, 100); // fake async\\n  },\\n  signout(callback: VoidFunction) {\\n    fakeAuthProvider.isAuthenticated = false;\\n    setTimeout(callback, 100);\\n  },\\n};\\n\\nexport { fakeAuthProvider };\\n\\n\"}</_components.code></_components.pre><_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/Auth.tsx\"'>{\"import React from 'react';\\nimport { useNavigate, Navigate, useLocation } from '@modern-js/runtime/router';\\nimport { fakeAuthProvider } from './fakeAuth';\\n\\ninterface AuthContextType {\\n  user: any;\\n  signin: (user: string, callback: VoidFunction) => void;\\n  signout: (callback: VoidFunction) => void;\\n}\\n\\nconst AuthContext = React.createContext<AuthContextType>(null!);\\n\\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\\n  const [user, setUser] = React.useState<any>(null);\\n\\n  const signin = (newUser: string, callback: VoidFunction) =>\\n    fakeAuthProvider.signin(() => {\\n      setUser(newUser);\\n      callback();\\n    });\\n\\n  const signout = (callback: VoidFunction) =>\\n    fakeAuthProvider.signout(() => {\\n      setUser(null);\\n      callback();\\n    });\\n\\n  const value = { user, signin, signout };\\n\\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\\n}\\n\\nexport function useAuth() {\\n  return React.useContext(AuthContext);\\n}\\n\\nexport function AuthStatus() {\\n  const auth = useAuth();\\n  console.log('auth', auth);\\n  const navigate = useNavigate();\\n\\n  if (!auth.user) {\\n    return <p>You are not logged in.</p>;\\n  }\\n\\n  return (\\n    <p>\\n      Welcome {auth.user}!{' '}\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          auth.signout(() => navigate('/'));\\n        }}\\n      >\\n        Sign out\\n      </button>\\n    </p>\\n  );\\n}\\n\\nexport function RequireAuth({ children }: { children: JSX.Element }) {\\n  const auth = useAuth();\\n  const location = useLocation();\\n\\n  if (!auth.user) {\\n    // Redirect them to the /login page, but save the current location they were\\n    // trying to go to when they were redirected. This allows us to send them\\n    // along to that page after they login, which is a nicer user experience\\n    // than dropping them off on the home page.\\n    return <Navigate to=\\\"/login\\\" state={{ from: location }} replace />;\\n  }\\n\\n  return children;\\n}\\n\\n\"}</_components.code></_components.pre><_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/protected/page.tsx\"'>{\"import { RequireAuth } from '../Auth';\\n\\nexport default function ProtectedPage() {\\n  return (\\n    <div className=\\\"container-box\\\">\\n      <RequireAuth>\\n        <h3>Protected</h3>\\n      </RequireAuth>\\n    </div>\\n  );\\n}\\n\\n\"}</_components.code></_components.pre><_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/login/page.tsx\"'>{\"import { useLocation, useNavigate } from '@modern-js/runtime/router';\\nimport { useAuth } from '../Auth';\\n\\nexport default function Login() {\\n  const navigate = useNavigate();\\n  const location = useLocation();\\n  const auth = useAuth();\\n\\n  const from = location.state?.from?.pathname || '/';\\n\\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\\n    event.preventDefault();\\n\\n    const formData = new FormData(event.currentTarget);\\n    const username = formData.get('username') as string;\\n\\n    auth.signin(username, () => {\\n      // Send them back to the page they tried to visit when they were\\n      // redirected to the login page. Use { replace: true } so we don't create\\n      // another entry in the history stack for the login page.  This means that\\n      // when they get to the protected page and click the back button, they\\n      // won't end up back on the login page, which is also really nice for the\\n      // user experience.\\n      navigate(from, { replace: true });\\n    });\\n  }\\n\\n  return (\\n    <div>\\n      <p>You must log in to view the page at {from}</p>\\n\\n      <form onSubmit={handleSubmit}>\\n        <label>\\n          Username: <input name=\\\"username\\\" type=\\\"text\\\" />\\n        </label>{' '}\\n        <button type=\\\"submit\\\">Login</button>\\n      </form>\\n    </div>\\n  );\\n}\\n\\n\"}</_components.code></_components.pre></Sandpack></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","ul","li","code","pre","components","id","className","href","template","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"uNAAA,E,gEAIA,SAASA,EAAkBC,CAAK,EAC5B,IAAMC,EAAcC,OAAOC,MAAM,CAAC,CAC9BC,GAAI,KACJC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,KAAM,OACNC,IAAK,KACT,EAAG,yBAAsBV,EAAMW,UAAU,EACzC,MAAO,uB,UAAE,WAACV,EAAYG,EAAE,EAACQ,GAAG,sB,UAAuB,sBAAsB,UAACX,EAAYI,CAAC,EAACQ,UAAU,gBAAgB,cAAY,OAAOC,KAAK,uB,SAAwB,G,MAAsC,KAAK,WAACb,EAAYK,CAAC,E,UAAE,iHAAiH,UAACL,EAAYI,CAAC,EAACS,KAAK,+C,SAAgD,S,GAA2B,I,GAAqB,KAAK,UAACb,EAAYK,CAAC,E,SAAE,oK,GAAsL,KAAK,WAACL,EAAYM,EAAE,E,UAAE,KAAK,WAACN,EAAYO,EAAE,E,UAAE,iBAAiB,UAACP,EAAYQ,IAAI,E,SAAE,G,GAAwB,sE,GAAwF,KAAK,WAACR,EAAYO,EAAE,E,UAAE,iBAAiB,UAACP,EAAYQ,IAAI,E,SAAE,Y,GAAiC,sGAAsG,UAACR,EAAYQ,IAAI,E,SAAE,Q,GAA6B,iDAAiD,UAACR,EAAYQ,IAAI,E,SAAE,Y,GAAiC,I,GAAsB,K,GAAuB,KAAM,KAAK,WAAC,SAAQ,EAACM,SAAS,U,UAAU,UAACd,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,eAAeG,KAAK,8B,SAA+B,6Z,KAAmc,UAACf,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,eAAeG,KAAK,gC,SAAiC,4b,KAAke,UAACf,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,cAAcG,KAAK,iC,SAAkC,4a,KAAkd,UAACf,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,cAAcG,KAAK,8B,SAA+B,s9D,KAA4/D,UAACf,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,cAAcG,KAAK,wC,SAAyC,wO,KAA8Q,UAACf,EAAYS,GAAG,E,SAAC,UAACT,EAAYQ,IAAI,EAACI,UAAU,cAAcG,KAAK,oC,SAAqC,6zC,UAC98K,CAfA,GAAAC,UAAA,EAAWC,mBAAmB,EAA9B,GAAWA,mBAAmB,CAAK,CAAC,GACpCD,WAAWC,mBAAmB,CAAC,2CAA2C,CAAG,CAAC,IAAM,EAAE,CAAC,MAAQ,sBAAsB,YAAc,CAAC,MAAQ,qBAAqB,CAAC,EAmBlK,MAJA,W,IAAoBlB,EAAQ,UAAR,6CAAQ,CAAC,EACRmB,EAAc,AAAAjB,OAAOC,MAAM,CAAC,CAAC,EAAG,yBAAsBH,EAAMW,UAAU,EAA/ES,OAAO,CACf,OAAOD,EAAY,UAACA,EAAA,mBAAcnB,GAAA,C,SAAO,UAACD,EAAA,KAAAsB,CAAA,AAAAA,EAAA,GAAsBrB,G,IAAuBD,EAAkBC,EAC7G,C"}