{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_micro-frontend_c03-main-app_mdx.2ef98f75.js","sources":["./docs/zh/guides/topic-detail/micro-frontend/c03-main-app.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmicro-frontend%2Fc03-main-app.mdx\"] = {\"toc\":[{\"text\":\"注册子应用信息\",\"id\":\"注册子应用信息\",\"depth\":2},{\"text\":\"直接注册子应用信息\",\"id\":\"直接注册子应用信息\",\"depth\":3},{\"text\":\"自定义远程应用列表\",\"id\":\"自定义远程应用列表\",\"depth\":3},{\"text\":\"渲染子应用\",\"id\":\"渲染子应用\",\"depth\":2},{\"text\":\"子应用组件\",\"id\":\"子应用组件\",\"depth\":3},{\"text\":\"集中式路由\",\"id\":\"集中式路由\",\"depth\":3},{\"text\":\"两种模式混用\",\"id\":\"两种模式混用\",\"depth\":3},{\"text\":\"添加 loading\",\"id\":\"添加-loading\",\"depth\":3},{\"text\":\"增加错误状态\",\"id\":\"增加错误状态\",\"depth\":4},{\"text\":\"避免 loading 闪退\",\"id\":\"避免-loading-闪退\",\"depth\":4},{\"text\":\"增加超时状态\",\"id\":\"增加超时状态\",\"depth\":4}],\"title\":\"开发主应用\",\"frontmatter\":{\"sidebar_position\":3,\"title\":\"开发主应用\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nimport EnableMicroFrontend from \"@site-docs/components/enable-micro-frontend\";\nimport MicroRuntimeConfig from \"@site-docs/components/micro-runtime-config\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        h2: \"h2\",\n        h3: \"h3\",\n        div: \"div\",\n        pre: \"pre\",\n        ol: \"ol\",\n        li: \"li\",\n        strong: \"strong\",\n        ul: \"ul\",\n        h4: \"h4\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"开发主应用\">{\"开发主应用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#开发主应用\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"在上一章 \"}<_components.a href=\"/guides/topic-detail/micro-frontend/c02-development\">{\"体验微前端\"}</_components.a>{\" 通过一个示例演示了如何创建和配置微前端子应用，通过本章你可以进一步了解如何开发主应用，以及它的常见配置。\"}</_components.p>{\"\\n\"}<_components.p>{\"在通过 \"}<_components.code>{\"@modern-js/create\"}</_components.code>{\" 命令创建应用工程后，可以在项目中执行 \"}<_components.code>{\"pnpm run new\"}</_components.code>{\"（实际执行了 \"}<_components.code>{\"modern new\"}</_components.code>{\" 命令），在选择了「微前端」模式后，会安装微前端依赖依赖，只需手动注册插件即可。\"}</_components.p>{\"\\n\"}{\"\\n\"}<EnableMicroFrontend/>{\"\\n\"}<_components.h2 id=\"注册子应用信息\">{\"注册子应用信息\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#注册子应用信息\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"当在 \"}<_components.code>{\"masterApp\"}</_components.code>{\" 配置上提供了信息后，将会认为该应用为主应用，目前存在两种子应用信息的配置方式，这两种方式分别应用于不同的场景。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"直接注册子应用信息\">{\"直接注册子应用信息\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#直接注册子应用信息\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"可以直接通过配置注册子应用信息：\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive tip\"><_components.div className=\"modern-directive-title\">{\"提示\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"可以通过 API \"}<_components.a href=\"/apis/app/runtime/app/define-config\">{\"defineConfig\"}</_components.a>{\" 在运行时进行配置。\\n当参数为函数时无法被序列化到产物代码，所以在涉及到函数之类的配置时请通过 defineConfig 来进行配置\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}{\"\\n\"}<MicroRuntimeConfig/>{\"\\n\"}<_components.h3 id=\"自定义远程应用列表\">{\"自定义远程应用列表\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#自定义远程应用列表\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过该函数可以拉取远程的子应用列表，并将其注册至运行时框架：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"App.tsx\"'>{\"defineConfig(App, {\\n  masterApp: {\\n    manifest: {\\n      getAppList: async () => {\\n        // 可以从其他远程接口获取\\n        return [{\\n          name: 'Table',\\n          entry: 'http://localhost:8001',\\n          // activeWhen: '/table'\\n        }, {\\n          name: 'Dashboard',\\n          entry: 'http://localhost:8002'\\n          // activeWhen: '/dashboard'\\n        }];\\n      },\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"渲染子应用\">{\"渲染子应用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#渲染子应用\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在微前端中分为两种加载子应用的方式：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li><_components.strong>{\"子应用组件\"}</_components.strong>{\" 获取到每个子应用的组件，之后就可以像使用普通的 \"}<_components.code>{\"React\"}</_components.code>{\" 组件一样渲染微前端的子应用。\"}</_components.li>{\"\\n\"}<_components.li><_components.strong>{\"集中式路由\"}</_components.strong>{\" 通过集中式的路由配置，自动根据当前页面 \"}<_components.code>{\"pathname\"}</_components.code>{\" 激活渲染对应的子应用。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.h3 id=\"子应用组件\">{\"子应用组件\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#子应用组件\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"开发者使用 \"}<_components.code>{\"useModuleApps\"}</_components.code>{\" 方法可以获取到各个子应用的组件。\"}</_components.p>{\"\\n\"}<_components.p>{\"再通过 \"}<_components.code>{\"router\"}</_components.code>{\" 组件的结合运用，开发者可以自控式的根据不同的路由渲染不同的子应用。\"}</_components.p>{\"\\n\"}<_components.p>{\"假设我们的子应用列表配置如下：\"}</_components.p>{\"\\n\"}<EnableMicroFrontend/>{\"\\n\"}<_components.p>{\"编辑主应用 \"}<_components.code>{\"App.tsx\"}</_components.code>{\" 文件如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\" meta='title=\"App.tsx\"'>{\"import { useModuleApps } from '@modern-js/plugin-garfish/runtime';\\n\\nimport { RouterProvider, Route, createBrowserRouter, createRoutesFromElements, BrowserRouter, Link, Outlet } from '@modern-js/runtime/router';\\n\\nconst AppLayout = () => (\\n  <>\\n    <div><Link to={'/table'}>加载约定式路由子应用</Link></div>\\n    <div><Link to={'/dashboard'}>加载自控式路由子应用</Link></div>\\n    <div><Link to={'/'}>卸载子应用</Link></div>\\n    <Outlet />\\n  </>\\n)\\n\\nexport default () => {\\n  const { apps, MApp } = useModuleApps();\\n\\n  // 使用的不是 MApp 组件，需要使用 createBrowserRouter 来创建路由\\n  const router = createBrowserRouter(\\n    createRoutesFromElements(\\n      <Route path=\\\"/\\\" element={<AppLayout />}>\\n        {apps.map(app => {\\n          const { Component } = app;\\n          // 模糊匹配，path 需要写成类似 abc/* 的模式\\n          return (\\n            <Route\\n              key={app.name}\\n              path={`${app.name.toLowerCase()}/*`}\\n              element={\\n              <Component\\n                loadable={{\\n                  loading: ({ pastDelay, error }: any) => {\\n                    if (error) {\\n                      return <div>error: {error?.message}</div>;\\n                    } else if (pastDelay) {\\n                      return <div>loading</div>;\\n                    } else {\\n                      return null;\\n                    }\\n                  },\\n                }}\\n              />\\n              }\\n            />\\n          )\\n        })}\\n      </Route>\\n    )\\n  );\\n\\n  return (\\n    // 方法一：使用 MApp 自动根据配置的 activeWhen 参数加载子应用(本项目配置在 modern.config.ts 中)\\n    // <BrowserRouter>\\n    //   <MApp />\\n    // </BrowserRouter>\\n\\n    // 方法二：手动写 Route 组件方式加载子应用，方便于需要鉴权等需要前置操作的场景\\n    <>\\n      <RouterProvider router={router} />\\n    </>\\n  );\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这里通过 \"}<_components.code>{\"Route\"}</_components.code>{\" 组件自定义了 \"}<_components.strong>{\"Table\"}</_components.strong>{\" 的激活路由为 \"}<_components.strong>{\"/table\"}</_components.strong>{\"， \"}<_components.strong>{\"Dashboard\"}</_components.strong>{\" 的激活路由为 \"}<_components.strong>{\"/dashboard\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"集中式路由\">{\"集中式路由\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#集中式路由\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p><_components.strong>{\"集中式路由\"}</_components.strong>{\" 是将子应用的激活路由集中配置的方式。我们给子应用列表信息添加 \"}<_components.code>{\"activeWhen\"}</_components.code>{\" 字段来启用 \"}<_components.strong>{\"集中式路由\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<MicroRuntimeConfig/>{\"\\n\"}<_components.p>{\"然后在主应用中使用 \"}<_components.code>{\"useModuleApp\"}</_components.code>{\" 方法获取 \"}<_components.code>{\"MApp\"}</_components.code>{\" 组件, 并在主应用渲染 \"}<_components.code>{\"MApp\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta=\"title=主应用：App.tsx\">{\"import { useModuleApp } from '@modern-js/plugin-garfish/runtime';\\n\\nfunction App() {\\n  const { MApp } = useModuleApps();\\n\\n  return (\\n    <div>\\n      <MApp />\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这样启动应用后，访问 \"}<_components.code>{\"/table\"}</_components.code>{\" 路由，会渲染 \"}<_components.code>{\"Table\"}</_components.code>{\" 子应用，访问 \"}<_components.code>{\"/dashboard\"}</_components.code>{\" 路由，会渲染 \"}<_components.code>{\"Dashboard\"}</_components.code>{\" 子应用。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"两种模式混用\">{\"两种模式混用\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#两种模式混用\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"当然 \"}<_components.strong>{\"子应用组件\"}</_components.strong>{\" 和 \"}<_components.strong>{\"集中式路由\"}</_components.strong>{\" 是可以混合使用的。\"}</_components.p>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"一部分子应用作为 \"}<_components.strong>{\"子应用组件\"}</_components.strong>{\" 激活，另外一部分作为 \"}<_components.strong>{\"集中式路由\"}</_components.strong>{\" 激活。\"}</_components.li>{\"\\n\"}<_components.li>{\"一部分子应用既可以作为 \"}<_components.strong>{\"集中式路由\"}</_components.strong>{\" 激活，也可以作为 \"}<_components.strong>{\"子应用组件\"}</_components.strong>{\" 激活。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.h3 id=\"添加-loading\">{\"添加 loading\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加-loading\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"通过配置 \"}<_components.code>{\"loadable\"}</_components.code>{\" 配置，可以为「集中式路由」、「子应用」添加 loading 组件，并可以考虑错误、超时、闪烁等情况的出现，从而为用户提供更好的用户体验。该功能的设计与实现参考至 \"}<_components.a href=\"https://github.com/jamiebuilds/react-loadable\" target=\"_blank\" rel=\"noopener noreferrer\">{\"react-loadable\"}</_components.a>{\"，基本功能较为相似。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"function Loading() {\\n  return <div>Loading...</div>;\\n}\\n\\nfunction App(){\\n  return <>\\n    <Table\\n      loadable={{\\n        loading: Loading,\\n      }}\\n    />\\n  <>\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h4 id=\"增加错误状态\">{\"增加错误状态\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#增加错误状态\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"当微前端子应用加载失败或渲染失败时，\"}<_components.code>{\"loading component\"}</_components.code>{\" 将会接收 \"}<_components.code>{\"error\"}</_components.code>{\" 参数（若没有错误时 error 是 null）\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"function Loading({ error }) {\\n  if (error) {\\n    return <div>Error msg {error?.message}</div>;\\n  } else {\\n    return <div>Loading...</div>;\\n  }\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h4 id=\"避免-loading-闪退\">{\"避免 loading 闪退\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#避免-loading-闪退\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"有时 loading 组件的显示时间可能小于 200ms，这个时候会出现 loading 组件闪退的情况。许多用户研究证明，loading 闪退的情况会导致用户感知加载内容的耗时比实际耗时更长，在 loading 小于 200ms 时，不展示内容，用户会认为它更快。\"}</_components.p>{\"\\n\"}<_components.p>{\"所以 loading 组件还提供了 \"}<_components.code>{\"pastDelay\"}</_components.code>{\" 参数，超过设置的延迟展示时才会为 true，可以通过 \"}<_components.code>{\"delay\"}</_components.code>{\" 参数设置延迟的时长\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"function Loading({ error, pastDelay }) {\\n  if (error) {\\n    return <div>Error! {error?.message}</div>;\\n  } else if (pastDelay) {\\n    return <div>Loading...</div>;\\n  } else {\\n    return null;\\n  }\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"delay\"}</_components.code>{\" 的默认值为 \"}<_components.code>{\"200ms\"}</_components.code>{\"，可以通过 \"}<_components.code>{\"loadable\"}</_components.code>{\" 中的 \"}<_components.code>{\"delay\"}</_components.code>{\" 来设置延迟展示的时间\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"\\nfunction App(){\\n  return <>\\n    <Table\\n      loadable={{\\n        loading: Loading,\\n        delay: 300 // 0.3 seconds\\n      }}\\n    />\\n  <>\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h4 id=\"增加超时状态\">{\"增加超时状态\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#增加超时状态\">{\"#\"}</_components.a></_components.h4>{\"\\n\"}<_components.p>{\"有时因为网络的原因，从而导致微前端子应用加载失败，从而导致一直展示 loading 的状态，这对于用户而言非常糟糕，因为他们不知道合适才会获得具体的响应，他们是否需要刷新页面，通过增加超时状态可以很好的解决该问题。\"}</_components.p>{\"\\n\"}<_components.p>{\"loading 组件在超时时会获得 \"}<_components.code>{\"timeOut\"}</_components.code>{\" 参数，当微前端应用加载超时时将会获得 \"}<_components.code>{\"timeOut\"}</_components.code>{\" 属性值为 true\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"function Loading({ error, timeOut, pastDelay }) {\\n  if (error) {\\n    return <div>Error! {error?.message}</div>;\\n  } else if (timeOut) {\\n    return <div>Loading timed out, please refresh the page... </div>;\\n  } else if (pastDelay) {\\n    return <div>Loading...</div>;\\n  } else {\\n    return null;\\n  }\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"超时状态是关闭的，可以通过在 \"}<_components.code>{\"loadable\"}</_components.code>{\" 中设置 \"}<_components.code>{\"timeout\"}</_components.code>{\" 参数开启\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"\\nfunction App(){\\n  return <>\\n    <Table\\n      loadable={{\\n        loading: Loading,\\n        timeOut: 10000 // 10s\\n      }}\\n    />\\n  <>\\n}\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","h2","h3","div","pre","ol","li","strong","ul","h4","components","id","className","href","meta","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}