{"version":3,"file":"static/js/async/docs_zh_guides_advanced-features_bff_frameworks_mdx.1e43ecc0.js","sources":["./docs/zh/guides/advanced-features/bff/frameworks.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fadvanced-features%2Fbff%2Fframeworks.mdx\"] = {\"toc\":[{\"text\":\"函数写法\",\"id\":\"函数写法\",\"depth\":2},{\"text\":\"框架写法\",\"id\":\"框架写法\",\"depth\":2},{\"text\":\"Express\",\"id\":\"express\",\"depth\":3},{\"text\":\"Koa\",\"id\":\"koa\",\"depth\":3}],\"title\":\"运行时框架\",\"frontmatter\":{\"sidebar_position\":3,\"title\":\"运行时框架\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        img: \"img\",\n        h3: \"h3\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"运行时框架\">{\"运行时框架\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#运行时框架\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js 的 BFF 支持不同的运行时框架，当前 Modern.js 的 BFF 支持两种运行时框架 \"}<_components.a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Express.js\"}</_components.a>{\" 和 \"}<_components.a href=\"https://koajs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Koa.js\"}</_components.a>{\"。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"函数写法\">{\"函数写法\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#函数写法\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"在函数写法下，各类运行时框架仅中间件写法存在差异，其他实现基本相同。这里以 Express 为例，介绍如何在 \"}<_components.code>{\"api/_app.ts\"}</_components.code>{\" 中，手写一个中间件，添加权限校验：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { hook } from '@modern-js/runtime/server';\\nimport { Request, Response, NextFunction } from 'express';\\n\\nexport default hook(({ addMiddleware }) => {\\n  addMiddleware(async (req: Request, res: Response, next: NextFunction) => {\\n    if (req.url !== '/api/login') {\\n      const sid = req?.cookies?.sid;\\n      if (!sid) {\\n        res.status(400);\\n        res.json({ code: -1, message: 'need login' });\\n      } else {\\n        next();\\n      }\\n    } else {\\n      next();\\n    }\\n  });\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"然后添加一个普通的 BFF 函数 \"}<_components.code>{\"/api/hello.ts\"}</_components.code>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default async () => {\\n  return 'Hello Modern.js';\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"最后在前端 \"}<_components.code>{\"src/App.tsx\"}</_components.code>{\" 添加接口的访问代码，直接使用一体化的方式调用：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { useState, useEffect } from 'react';\\nimport { get as hello } from '@api/hello';\\n\\nexport default () => {\\n  const [text, setText] = useState('');\\n\\n  useEffect(() => {\\n    async function fetchMyApi() {\\n      const { message } = await hello();\\n      setText(message);\\n    }\\n\\n    fetchMyApi();\\n  }, []);\\n\\n  return <p>{text}</p>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"然后 \"}<_components.code>{\"pnpm run dev\"}</_components.code>{\" 启动项目，访问 \"}<_components.code>{\"http://localhost:8080/\"}</_components.code>{\" 会发现 \"}<_components.code>{\"/api/hello\"}</_components.code>{\" 的请求被拦截了：\"}</_components.p>{\"\\n\"}<_components.p><_components.img src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/aphqeh7uhohpquloj/modern-js/docs/network2.png\" alt=\"Network\"/></_components.p>{\"\\n\"}<_components.p>{\"最后再修改前端代码 \"}<_components.code>{\"src/App.tsx\"}</_components.code>{\"，在访问 \"}<_components.code>{\"/api/hello\"}</_components.code>{\" 前先调用登录接口：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { useState, useEffect } from 'react';\\nimport { get as hello } from '@api/hello';\\nimport { post as login } from '@api/login';\\n\\nexport default () => {\\n  const [text, setText] = useState('');\\n\\n  useEffect(() => {\\n    async function fetchAfterLogin() {\\n      const { code } = await login();\\n      if (code === 0) {\\n        const { message } = await hello();\\n        setText(message);\\n      }\\n    }\\n    fetchAfterLogin();\\n  }, []);\\n\\n  return <p>{text}</p>;\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"刷新页面，可以看到 \"}<_components.code>{\"/api/hello\"}</_components.code>{\" 访问成功：\"}</_components.p>{\"\\n\"}<_components.p><_components.img src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/aphqeh7uhohpquloj/modern-js/docs/network3.png\" alt=\"Network\"/></_components.p>{\"\\n\"}<_components.p>{\"以上代码模拟了在 \"}<_components.code>{\"/api/_app.ts\"}</_components.code>{\" 中添加中间件的方式，实现了简易的登录功能。同样，可以在这个钩子文件中实现其他功能来扩展 BFF Server。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"框架写法\">{\"框架写法\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#框架写法\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"框架写法下，Modern.js 不会收集 \"}<_components.code>{\"api/_app.ts\"}</_components.code>{\" 中的中间件，运行流程由插件自行控制。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"express\">{\"Express\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#express\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Express 的框架写法支持可在 \"}<_components.code>{\"api/app.[tj]s\"}</_components.code>{\" 定义 API Server 的启动逻辑，执行应用的初始化工作，添加全局中间件，声明路由，甚至扩展原有框架等。\"}</_components.p>{\"\\n\"}<_components.p>{\"BFF 函数定义的路由会在 \"}<_components.code>{\"app.ts\"}</_components.code>{\" 文件定义的路由之后注册，所以在这里你也可以拦截 BFF 函数定义的路由，进行预处理或是提前响应。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"api/app.ts\"'>{\"import express from 'express';\\n\\nconst app = express();\\n\\napp.put('/user', function (req, res) {\\n  res.send('Got a PUT request at /user');\\n});\\n\\napp.use(async (req, res, next) => {\\n  console.info(`access url: ${req.url}`);\\n  next();\\n});\\n\\nexport default app;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h3 id=\"koa\">{\"Koa\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#koa\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Koa 框架写法与 Express 类似，支持在 \"}<_components.code>{\"app.[tj]s\"}</_components.code>{\" 定义 API Server 的启动逻辑，执行应用的初始化工作，添加全局中间件，声明路由，扩展原有框架等。\"}</_components.p>{\"\\n\"}<_components.p>{\"BFF 函数定义的路由会在 \"}<_components.code>{\"app.ts\"}</_components.code>{\" 文件定义的路由之后注册，所以在这里你也可以拦截 BFF 函数定义的路由，进行预处理或是提前响应。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive caution\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"在框架写法下，当没有 \"}<_components.code>{\"app.ts\"}</_components.code>{\" 的时候，Modern.js 默认会添加 \"}<_components.code>{\"koa-body\"}</_components.code>{\"；当有 \"}<_components.code>{\"app.ts\"}</_components.code>{\" 时，如果开发者希望使用带有 Body 的 BFF 函数，需要确保 \"}<_components.code>{\"koa-body\"}</_components.code>{\" 中间件已经添加。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta=\"title=api/app.ts\">{\"import koa from 'koa';\\n\\nconst app = new Koa();\\n\\napp.put('/user', function (req, res) {\\n  res.send('Got a PUT request at /user');\\n});\\n\\napp.use(async (ctx, next) => {\\n  console.info(`access url: ${ctx.url}`);\\n  await next();\\n});\\n\\nexport default app;\\n\"}</_components.code></_components.pre></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","code","pre","img","h3","div","components","id","className","href","target","rel","src","alt","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}