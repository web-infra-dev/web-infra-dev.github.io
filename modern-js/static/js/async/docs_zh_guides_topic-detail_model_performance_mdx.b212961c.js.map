{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_performance_mdx.b212961c.js","sources":["./docs/zh/guides/topic-detail/model/performance.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Fperformance.mdx\"] = {\"toc\":[{\"text\":\"Model 拆分\",\"id\":\"model-拆分\",\"depth\":2},{\"text\":\"状态筛选\",\"id\":\"状态筛选\",\"depth\":2},{\"text\":\"衍生状态缓存\",\"id\":\"衍生状态缓存\",\"depth\":2}],\"title\":\"性能优化\",\"frontmatter\":{\"sidebar_position\":8,\"title\":\"性能优化\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"性能优化\">{\"性能优化\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#性能优化\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Reduck 内部已经做了大量性能优化工作，一般情况下不需要考虑性能问题。不过当对性能比较敏感、或者遇到了性能问题，可以考虑从以下 3 个方面，进行更有针对性的性能优化。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"model-拆分\">{\"Model 拆分\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#model-拆分\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"当 \"}<_components.code>{\"useModel\"}</_components.code>{\" 返回 Model 对象的完整 State 时，State 任意部分的变化都会导致调用了 \"}<_components.code>{\"useModel\"}</_components.code>{\" 的组件重新渲染。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    a: '',\\n    b: '',\\n  },\\n  actions: {\\n    setA(state, payload) {\\n      state.a = payload;\\n    },\\n    setB(state, payload) {\\n      state.b = payload;\\n    },\\n  },\\n});\\n\\nfunction ComponentA() {\\n  const [state] = useModel(fooModel);\\n\\n  return <div>{state.a}</div>;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"组件 \"}<_components.code>{\"ComponentA\"}</_components.code>{\" 虽然只需要使用 \"}<_components.code>{\"a\"}</_components.code>{\" 状态，但当 \"}<_components.code>{\"b\"}</_components.code>{\" 状态发送变化时， \"}<_components.code>{\"ComponentA\"}</_components.code>{\" 仍然会重新渲染。这种情况，我们可以考虑把 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 拆分，\"}<_components.code>{\"a\"}</_components.code>{\"、\"}<_components.code>{\"b\"}</_components.code>{\" 分别由不同的 Model 负责管理：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    a: '',\\n  },\\n  actions: {\\n    setA(state, payload) {\\n      state.a = payload;\\n    },\\n  },\\n});\\n\\nconst barModel = model('bar').define({\\n  state: {\\n    b: '',\\n  },\\n  actions: {\\n    setB(state, payload) {\\n      state.b = payload;\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"状态筛选\">{\"状态筛选\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#状态筛选\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p><_components.code>{\"useModel\"}</_components.code>{\" 支持传入 selector 函数，对返回给组件的 State 和 Actions 做筛选。我们可以通过 selector 函数，确保返回给组件的 State 是组件直接需要使用的，从而保证组件不会因为其他无关状态的变化而重新渲染。\"}</_components.p>{\"\\n\"}<_components.p>{\"对于上面同样的例子，我们采用 selector 函数进行性能优化，代码如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    a: '',\\n    b: '',\\n  },\\n  actions: {\\n    setA(state, payload) {\\n      state.a = payload;\\n    },\\n    setB(state, payload) {\\n      state.b = payload;\\n    },\\n  },\\n});\\n\\nfunction ComponentA() {\\n  // 通过传入 selector 函数，只返回 a 状态给组件\\n  const [stateA] = useModel(fooModel, state => state.a);\\n\\n  return <div>{stateA}</div>;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"衍生状态缓存\">{\"衍生状态缓存\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#衍生状态缓存\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"当 Model 存在 \"}<_components.code>{\"computed\"}</_components.code>{\" 时，每次调用\"}<_components.code>{\"useModel\"}</_components.code>{\" 都会执行 \"}<_components.code>{\"computed\"}</_components.code>{\" 函数。\"}</_components.p>{\"\\n\"}<_components.p>{\"考虑如下代码：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const barModel = model('bar').define({\\n  state: {\\n    value: 'bar',\\n  },\\n  computed: {\\n    combineA: [\\n      fooModel, // fooModel 定义同上\\n      (state, fooState) => {\\n        return state + fooState.a;\\n      },\\n    ],\\n  },\\n  actions: {\\n    setValue(state, payload) {\\n      state.value = payload;\\n    },\\n  },\\n});\\n\\nfunction ComponentB() {\\n  const [state, actions] = useModel(fooModel);\\n  const [{ combineA }] = useModel(barModel);\\n  // 省略\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"barModel\"}</_components.code>{\" 的衍生状态 \"}<_components.code>{\"combineA\"}</_components.code>{\" 依赖 \"}<_components.code>{\"barModel\"}</_components.code>{\" 自身状态 和 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 的状态 \"}<_components.code>{\"a\"}</_components.code>{\"，但是即使是 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 的状态 \"}<_components.code>{\"b\"}</_components.code>{\" 发生了变化，组件重新渲染时， \"}<_components.code>{\"combineA\"}</_components.code>{\" （更准确的说法是 \"}<_components.code>{\"combineA\"}</_components.code>{\" 的最后一个函数类型的元素 ）依然会被调用执行。\"}</_components.p>{\"\\n\"}<_components.p>{\"一般情况下，\"}<_components.code>{\"computed\"}</_components.code>{\" 函数中的逻辑都是非常轻量的，但当 \"}<_components.code>{\"computed\"}</_components.code>{\" 函数逻辑比较复杂时，我们可以考虑对计算逻辑做缓存。例如，我们使用 \"}<_components.a href=\"https://github.com/reduxjs/reselect\" target=\"_blank\" rel=\"noopener noreferrer\">{\"reselect\"}</_components.a>{\" 对 \"}<_components.code>{\"barModel\"}</_components.code>{\" 的 \"}<_components.code>{\"combineA\"}</_components.code>{\" 做缓存：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import 'createSelector' from 'reselect';\\n\\n// 创建缓存函数\\nconst selectCombineA = createSelector(\\n  (state) => state.bar.value,\\n  (state) => state.foo.a,\\n  (barState, fooState) => {\\n    return barState + fooState;\\n  }\\n);\\n\\nconst barModel = model(\\\"bar\\\").define({\\n  state: {\\n    value: \\\"bar\\\",\\n  },\\n  computed: {\\n    combineA: [\\n      fooModel,\\n      (state, fooState) => {\\n        return selectCombineA({\\n          foo: fooState,\\n          bar: state,\\n        });\\n      },\\n    ],\\n  },\\n  actions: {\\n    setValue(state, payload) {\\n      state.value = payload;\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"我们创建缓存函数 \"}<_components.code>{\"createSelector\"}</_components.code>{\"，仅当 \"}<_components.code>{\"barModel\"}</_components.code>{\" 的状态发生改变或 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 的 \"}<_components.code>{\"a\"}</_components.code>{\" 状态发生改变时，才会重新计算 \"}<_components.code>{\"combineA\"}</_components.code>{\" 的值。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"本节完整的\"}<_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/performance-optimization\" target=\"_blank\" rel=\"noopener noreferrer\">{\"示例代码\"}</_components.a></_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","code","pre","div","components","id","className","href","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}