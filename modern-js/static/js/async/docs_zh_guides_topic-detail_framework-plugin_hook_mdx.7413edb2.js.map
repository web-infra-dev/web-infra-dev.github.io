{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_framework-plugin_hook_mdx.7413edb2.js","sources":["./docs/zh/guides/topic-detail/framework-plugin/hook.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fframework-plugin%2Fhook.mdx\"] = {\"toc\":[{\"text\":\"基础工作方式\",\"id\":\"基础工作方式\",\"depth\":2},{\"text\":\"不同 Hook 模型的区别\",\"id\":\"不同-hook-模型的区别\",\"depth\":2},{\"text\":\"Pipeline\",\"id\":\"pipeline\",\"depth\":3},{\"text\":\"Waterfall\",\"id\":\"waterfall\",\"depth\":3},{\"text\":\"Workflow\",\"id\":\"workflow\",\"depth\":3},{\"text\":\"Hook 模型对比\",\"id\":\"hook-模型对比\",\"depth\":2}],\"title\":\"Hook 模型\",\"frontmatter\":{\"title\":\"Hook 模型\",\"sidebar_position\":2}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        pre: \"pre\",\n        code: \"code\",\n        h3: \"h3\",\n        div: \"div\",\n        table: \"table\",\n        thead: \"thead\",\n        tr: \"tr\",\n        th: \"th\",\n        tbody: \"tbody\",\n        td: \"td\",\n        ul: \"ul\",\n        li: \"li\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"hook-模型\">{\"Hook 模型\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#hook-模型\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"首先介绍一下 Modern.js 的基础的插件系统中的一些内容，包括 Hook 模型的工作方式、各个 Hook 模型的运行模式、Manager 的工作模式。\"}</_components.p>{\"\\n\"}<_components.p>{\"每种 Hook 模型都是独立的，可以独立管理运行函数。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"基础工作方式\">{\"基础工作方式\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#基础工作方式\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"先以 Pipeline 为例，简单介绍一下 Hook 模型的工作方式。先看一个简单的例子：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { createPipeline } from '@modern-js/plugin';\\n\\n// 1. 创建\\nconst pipeline = createPipeline<number, number>();\\n\\n// 2. 添加函数\\npipeline.use((count, next) => {\\n  return next(count + 1);\\n});\\npipeline.use((count, next) => {\\n  return count * 2;\\n});\\n\\n// 3. 执行\\npipeline.run(1); // 4\\npipeline.run(5); // 12\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在这个例子中，创建了一个 \"}<_components.code>{\"Pipeline<number, number>\"}</_components.code>{\" 类型的 Pipeline（L3），这意味着运行它的时候，你需要传入一个 \"}<_components.code>{\"number\"}</_components.code>{\"，然后你会得到一个 \"}<_components.code>{\"number\"}</_components.code>{\"，而这个模型管理的函数的类型是：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"(count: number, next: (nextCount: number) => number) => number;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这里全是 \"}<_components.code>{\"number\"}</_components.code>{\"，是因为我们创建的是 \"}<_components.code>{\"Pipeline<number, number>\"}</_components.code>{\" ，如果创建的是 \"}<_components.code>{\"Pipeline<number, string>\"}</_components.code>{\" 则运行它入参是 \"}<_components.code>{\"number\"}</_components.code>{\"，返回值是 \"}<_components.code>{\"string\"}</_components.code>{\"，对应管理的函数的类型会是：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"(count: number, next: (nextCount: number) => string) => string;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"创建好 Pipeline 之后，可以通过 \"}<_components.code>{\"use\"}</_components.code>{\" 添加函数（L5、L8），需要注意的是，添加的顺序就是他们默认的运行顺序，在这些函数中，你可以对 \"}<_components.code>{\"count\"}</_components.code>{\" 进行处理、返回一个值，如果你调用了 \"}<_components.code>{\"next\"}</_components.code>{\" 函数，则会运行后面的函数，即如果你添加了三个函数： \"}<_components.code>{\"A\"}</_components.code>{\"、\"}<_components.code>{\"B\"}</_components.code>{\"、\"}<_components.code>{\"C\"}</_components.code>{\"，如果你在 \"}<_components.code>{\"A\"}</_components.code>{\" 中调用 \"}<_components.code>{\"next\"}</_components.code>{\" 那么就会运行 \"}<_components.code>{\"B\"}</_components.code>{\"，同样的，如果你在 \"}<_components.code>{\"B\"}</_components.code>{\" 中调用 \"}<_components.code>{\"next\"}</_components.code>{\" 那么就会运行 \"}<_components.code>{\"C\"}</_components.code>{\"，而在上面的例子中，添加的第一个函数（L5）就运行了 \"}<_components.code>{\"next\"}</_components.code>{\"，所以这里就会运行第二个函数（L8），并且运行的返回值就是 第二个函数的返回值，如果在第一个函数中没有调用 \"}<_components.code>{\"next\"}</_components.code>{\"，直接返回，例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { createPipeline } from '@modern-js/plugin';\\n\\n// 1. 创建\\nconst pipeline = createPipeline<number, number>();\\n\\n// 2. 添加函数\\npipeline.use((count, next) => {\\n  return count + 1;\\n});\\npipeline.use((count, next) => {\\n  return count * 2;\\n});\\n\\n// 3. 执行\\npipeline.run(1); // 2\\npipeline.run(5); // 6\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"则在运行 Pipeline 的时候就不会运行第二个函数，那么 Pipeline 的运行结果则就是第一个函数的返回值。\"}</_components.p>{\"\\n\"}<_components.p>{\"最后，运行 Pipeline 的方式也显而易见就是调用 \"}<_components.code>{\"pipeline.run\"}</_components.code>{\" 。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"不同-hook-模型的区别\">{\"不同 Hook 模型的区别\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#不同-hook-模型的区别\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"上面这部分就是 Pipeline 整体的一个工作模式的描述，其他的 Hook 模型的工作模式基本也是这样，主要的区别点，是函数类型、执行顺序，参数。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"pipeline\">{\"Pipeline\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#pipeline\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"上面的例子就是以 Pipeline 为例描述的，这里就不赘述了，在 Pipeline 这个大类中，提供了两个小类：Sync 和 Async，顾名思义，它们的区别就是管理的函数的类型是 Sync 的还是 Async 的。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"当 Pipeline 中没有函数或者所有函数都调用了 \"}<_components.code>{\"next\"}</_components.code>{\" 函数，则就需要在运行的时候提供：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"pipeline(\\n  {},\\n  {\\n    onLast: () => {\\n      // do something\\n    },\\n  },\\n);\\n\"}</_components.code></_components.pre>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"waterfall\">{\"Waterfall\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#waterfall\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"这种模型顾名思义，他的特点就是参数的顺序递交，即前面一个函数的返回值，将会成为下一个函数的入参，我们也用一个例子来看一下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { createWaterfall } from '@modern-js/plugin';\\n\\n// 1. 创建\\nconst waterfall = createWaterfall<number>();\\n\\n// 2. 添加函数\\nwaterfall.use(count => {\\n  return count + 1;\\n});\\nwaterfall.use(count => {\\n  return count * 2;\\n});\\n\\n// 3. 执行\\nwaterfall.run(1); // 4\\nwaterfall.run(5); // 12\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这个例子中，创建了一个类型为 \"}<_components.code>{\"Waterfall<number> \"}</_components.code>{\"，即这个模型执行的入参和返回值是一样的，这个例子中都是 \"}<_components.code>{\"number\"}</_components.code>{\"，而它管理的函数的类型是：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"(count: number) => number;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"可能简单看这个例子感觉和上面的 Pipeline 功能一样，那需要注意的是，首先这里 Waterfall 管理的函数没有 next 函数作为第二个参数，所以它无法在函数内部通过调用 next 来先运行之后添加的函数，从而修改运行的顺序，其次这里的运行的入参的类型和返回值的类型必须是一样的（而 Pipeline 可以不一样）。\"}</_components.p>{\"\\n\"}<_components.p>{\"同样的，在 Waterfall 这个大类中，也提供了 Sync 和 Async 的小类，分别对应 Sync 和 Async 的函数。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"workflow\">{\"Workflow\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#workflow\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"这种 Hook 模型与上面两种 Hook 模型的区别是，没有那么强的前后参数返回值递交的概念，在这个模型中，每个函数都是基于同样的入参，相对独立运行的，通过一个例子简单看一下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { createWorkflow } from '@modern-js/plugin';\\n\\n// 1. 创建\\nconst workflow = createWorkflow<number, number>();\\n\\n// 2. 添加函数\\nworkflow.use(count => {\\n  return count + 1;\\n});\\nworkflow.use(count => {\\n  return count * 2;\\n});\\n\\n// 3. 执行\\nworkflow.run(1); // [2, 2]\\nworkflow.run(5); // [6, 10]\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"在这个例子中，添加了两个函数，所以运行的结果就是这两个函数运行的结果形成的一个数组。\"}</_components.p>{\"\\n\"}<_components.p>{\"虽然这种模型中没有那么强的前后参数返回值递交的概念，但依旧有执行顺序的区别，在 Workflow 这个大类中，提供了三个小类：Sync、Async、Parallel。他们之间的区别就是函数的执行顺序，当然默认的都是按照添加顺序执行，而在 Sync、Async 则是强制按照添加顺序执行，而 Parallel 则是 Async 模式的一个变体，即它使用的是 \"}<_components.code>{\"Promise.all\"}</_components.code>{\" 来执行所有函数，而 Async 则会 \"}<_components.code>{\"await\"}</_components.code>{\" 前面的函数运行结束。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"hook-模型对比\">{\"Hook 模型对比\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#hook-模型对比\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<div style={{\n        width: \"100%\",\n        overflowX: \"scroll\"\n    }}><div style={{\n        width: \"150%\"\n    }}><_components.table>{\"\\n\"}<_components.thead>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.th/>{\"\\n\"}<_components.th>{\"函数类型\"}</_components.th>{\"\\n\"}<_components.th>{\"执行顺序\"}</_components.th>{\"\\n\"}<_components.th>{\"函数参数来源\"}</_components.th>{\"\\n\"}<_components.th>{\"执行返回值来源\"}</_components.th>{\"\\n\"}<_components.th>{\"倾向处理的任务类型\"}</_components.th>{\"\\n\"}<_components.th>{\"函数 TS 类型\"}</_components.th>{\"\\n\"}</_components.tr>{\"\\n\"}</_components.thead>{\"\\n\"}<_components.tbody>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"Pipeline\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync\"}</_components.td>{\"\\n\"}<_components.td>{\"默认执行第一个添加的函数，可以通过 next 调用之后添加的函数\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的参数来源是运行的参数，之后的函数的参数来源是，前一个函数向 next 函数传递的参数\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"需要修改初始参数\"}</li><li>{\"需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(input: I, next: Next<I, O>) => O\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"AsyncPipeline\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync/Async\"}</_components.td>{\"\\n\"}<_components.td>{\"默认执行第一个添加的函数，可以通过 next 调用之后添加的函数\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的参数来源是运行的参数，之后的函数的参数来源是，前一个函数向 next 函数传递的参数\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"需要修改初始参数\"}</li><li>{\"需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(input: I, next: AsyncNext<I, O>) => O ｜ Promise<O>\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"WaterFall\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync\"}</_components.td>{\"\\n\"}<_components.td>{\"一直顺序执行\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的参数来源是运行的参数，之后的函数的参数来源是，前一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td>{\"最后一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"需要修改初始参数\"}</li><li>{\"不需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(I: I) => I\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"AsyncWaterFall\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync/Async\"}</_components.td>{\"\\n\"}<_components.td>{\"一直顺序执行\"}</_components.td>{\"\\n\"}<_components.td>{\"第一个函数的参数来源是运行的参数，之后的函数的参数来源是，前一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td>{\"最后一个函数的返回值\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"需要修改初始参数\"}</li><li>{\"不需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(I: I) => I ｜ Promise<I>\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"Workflow\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync\"}</_components.td>{\"\\n\"}<_components.td>{\"一直顺序执行\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数的入参都是运行的参数\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数返回值形成的数组\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"不需要修改初始参数\"}</li><li>{\"不需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(I: I) => O\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"AsyncWorkflow\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync/Async\"}</_components.td>{\"\\n\"}<_components.td>{\"一直顺序执行\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数的入参都是运行的参数\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数返回值形成的数组\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"不需要修改初始参数\"}</li><li>{\"不需要修改函数执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(I: I) => O ｜ Promise<O>\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}<_components.tr>{\"\\n\"}<_components.td>{\"ParallelWorkFlow\"}</_components.td>{\"\\n\"}<_components.td>{\"Sync/Async\"}</_components.td>{\"\\n\"}<_components.td>{\"异步执行\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数的入参都是运行的参数\"}</_components.td>{\"\\n\"}<_components.td>{\"所有函数返回值形成的数组\"}</_components.td>{\"\\n\"}<_components.td><ul><li>{\"不需要修改初始参数\"}</li><li>{\"不关心执行顺序\"}</li></ul></_components.td>{\"\\n\"}<_components.td><_components.code>{\"(I: I) => O ｜ Promise<O>\"}</_components.code></_components.td>{\"\\n\"}</_components.tr>{\"\\n\"}</_components.tbody>{\"\\n\"}</_components.table></div></div>{\"\\n\"}<_components.p>{\"Workflow、Waterfall 其实都是 Pipeline 的变体，Pipeline 可以通过特定的写法来实现 Workflow、Waterfall，但都较为麻烦，有许多隐形的约定。为了方便使用，提供了这两种变体来满足这种特殊场景。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","pre","code","h3","div","table","thead","tr","th","tbody","td","ul","li","components","id","className","href","style","width","overflowX","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}