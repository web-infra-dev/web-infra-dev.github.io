{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_model-communicate_mdx.04176c52.js","sources":["./docs/zh/guides/topic-detail/model/model-communicate.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Fmodel-communicate.mdx\"] = {\"toc\":[{\"text\":\"Model 间通信\",\"id\":\"model-间通信\",\"depth\":2},{\"text\":\"Model 内通信\",\"id\":\"model-内通信\",\"depth\":2}],\"title\":\"Model 通信\",\"frontmatter\":{\"sidebar_position\":7,\"title\":\"Model 通信\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        h2: \"h2\",\n        ol: \"ol\",\n        li: \"li\",\n        code: \"code\",\n        pre: \"pre\",\n        div: \"div\",\n        strong: \"strong\",\n        ul: \"ul\",\n        img: \"img\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"model-通信\">{\"Model 通信\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#model-通信\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Model 通信，既指不同 Model 间的通信，也指同一个 Model 内部 Effects、Actions 之间的通信。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"model-间通信\">{\"Model 间通信\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#model-间通信\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Model 之间不是孤立的，是可以进行通信的。主要分为两种场景：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"在 Model 中访问其它 Model 的 State 和 Actions。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 Model 中监听其它 Model 变化。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.p>{\"这里将 \"}<_components.a href=\"/guides/topic-detail/model/quick-start\">{\"快速上手\"}</_components.a>{\" 一节的简单计数器应用改造成一个可设置步频的计数器应用。可以通过设置步频，从而影响每次计数器增加的幅度。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们抽象出两个 Model，分别为 \"}<_components.code>{\"stepModel\"}</_components.code>{\"（步频）、\"}<_components.code>{\"counterModel\"}</_components.code>{\"（计数器）：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { model } from '@modern-js/runtime/model';\\n\\nconst stepModel = model('step').define({\\n  state: 1,\\n});\\n\\nconst counterModel = model('count').define((context, { use, onMount }) => {\\n  const [, , subscribeStep] = use(stepModel);\\n\\n  onMount(() => {\\n    return subscribeStep(() => {\\n      console.log(\\n        `Subscribe in counterModel: stepModel change to ${use(stepModel)[0]}`,\\n      );\\n    });\\n  });\\n\\n  return {\\n    state: {\\n      value: 1,\\n    },\\n    actions: {\\n      add(state) {\\n        const step = use(stepModel)[0];\\n        state.value += step;\\n      },\\n    },\\n  };\\n});\\n\\nexport { stepModel, counterModel };\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"stepModel\"}</_components.code>{\" 只声明一个 \"}<_components.code>{\"state\"}</_components.code>{\"，初始值为 1。\"}</_components.p>{\"\\n\"}<_components.p><_components.code>{\"counterModel\"}</_components.code>{\" 通过 \"}<_components.code>{\"use\"}</_components.code>{\" 函数加载 \"}<_components.code>{\"stepModel\"}</_components.code>{\"，拿到返回的 \"}<_components.code>{\"subscribeStep\"}</_components.code>{\" 函数，用来监听 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 状态的变更。 \"}<_components.code>{\"onMount\"}</_components.code>{\" 是 Model 挂载完成后的钩子函数，\"}<_components.code>{\"counterModel\"}</_components.code>{\" 挂载完成后开始订阅 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 状态的变更，打印出 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 的最新值。\"}</_components.p>{\"\\n\"}<_components.p><_components.code>{\"counterModel\"}</_components.code>{\" 通过 \"}<_components.code>{\"use\"}</_components.code>{\" 函数访问 \"}<_components.code>{\"stepModel\"}</_components.code>{\"，在 \"}<_components.code>{\"add\"}</_components.code>{\" 里可以获取到当前 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 的值（步频），以此值来做自增。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive caution\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"当需要访问其他 Model 的 State 时，必须要在当前 Actions 或 Effects 函数（本例中对应 \"}<_components.code>{\"add\"}</_components.code>{\" 函数 ）真正执行的阶段调用 \"}<_components.code>{\"use\"}</_components.code>{\"，以保证获取的 State 是最新值。因此，我们虽然在 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数中也调用了 \"}<_components.code>{\"use(stepModel)\"}</_components.code>{\"，但是我们并没有解构 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 的 \"}<_components.code>{\"state\"}</_components.code>{\" 值，因为 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数是在 Model 的挂载阶段执行的，这个时候获取到的 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 的 \"}<_components.code>{\"state\"}</_components.code>{\" 可能和 \"}<_components.code>{\"add\"}</_components.code>{\" 执行时获取到的值是不同的。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"修改 \"}<_components.strong>{\"App.tsx\"}</_components.strong></_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { useModel } from '@modern-js/runtime/model';\\nimport { counterModel, stepModel } from './models/count';\\n\\nfunction Counter() {\\n  const [state, actions] = useModel(counterModel);\\n  const [step, stepActions] = useModel(stepModel);\\n\\n  return (\\n    <div>\\n      <div>step: {step}</div>\\n      <button onClick={() => stepActions.setState(step + 1)}>add step</button>\\n      <div>counter: {state.value}</div>\\n      <button onClick={() => actions.add()}>add counter</button>\\n    </div>\\n  );\\n}\\n\\nexport default function App() {\\n  return <Counter />;\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"Modern.js 默认开启 \"}<_components.a href=\"/zh/guides/topic-detail/model/auto-actions\">{\"自动生成 actions\"}</_components.a>{\"，所以 \"}<_components.code>{\"stepModel\"}</_components.code>{\" 中虽然没有手动定义 Actions，但可以使用自动生成的 \"}<_components.code>{\"setState\"}</_components.code>{\"。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"点击 \"}<_components.strong>{\"add step\"}</_components.strong>{\" 增加步频。\"}</_components.li>{\"\\n\"}<_components.li>{\"点击 \"}<_components.strong>{\"add counter\"}</_components.strong>{\" 触发计数器增加。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}<_components.p>{\"最终效果如下：\"}</_components.p>{\"\\n\"}<_components.p><_components.img src=\"https://lf3-static.bytednsdoc.com/obj/eden-cn/aphqeh7uhohpquloj/modern-js/docs/models-communicate.gif\" alt=\"communicate-models\"/></_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"补充信息\"}</_components.div><_components.div className=\"modern-directive-content\">{\"\\n\"}<_components.ul>{\"\\n\"}<_components.li>{\"本节完整的\"}<_components.a href=\"https://github.com/web-infra-dev/modern-js-examples/tree/main/examples/runtime-api/models-communication\" target=\"_blank\" rel=\"noopener noreferrer\">{\"示例代码\"}</_components.a>{\"。\"}</_components.li>{\"\\n\"}<_components.li>{\"相关 API 的更多介绍，请参考：\"}<_components.a href=\"/apis/app/runtime/model/model_#%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\">{\"model\"}</_components.a>{\"。\"}</_components.li>{\"\\n\"}</_components.ul>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"前面 \"}<_components.code>{\"counterModel\"}</_components.code>{\" 的例子，我们是在 Actions 的函数内部调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取其他 Model 对象的。如果只需要调用其它 Model 的 Actions，因为 Actions 都是函数，不存在值过期问题，所以也可以在 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数中调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 的 Actions。例如：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const barModel = model('bar').define({\\n  // 省略\\n});\\n\\nconst fooModel = model('foo').define((context, utils) => {\\n  // 获取 barModel 的 actions\\n  const [, actions] = utils.use(barModel);\\n  return {\\n    // 省略 state、actions\\n    effects: {\\n      async loadA() {\\n        // 省略副作用逻辑\\n        // 调用 barModel 的 action\\n        barModel.actionA();\\n      },\\n      async loadB() {\\n        // 省略副作用逻辑\\n        // 调用 barModel 的 action\\n        barModel.actionB();\\n      },\\n    },\\n  };\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这样，我们不需要在 \"}<_components.code>{\"loadA\"}</_components.code>{\"、\"}<_components.code>{\"loadB\"}</_components.code>{\" 中重复获取 \"}<_components.code>{\"barModel\"}</_components.code>{\" 对象，简化了代码逻辑。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"model-内通信\">{\"Model 内通信\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#model-内通信\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Model 内通信，也主要分为两种场景：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"Effects 函数调用自身 Model 的 Actions 函数、或其他 Effects 函数。\"}</_components.li>{\"\\n\"}<_components.li>{\"Actions 函数调用自身 Model 的 其他 Actions 函数。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.p>{\"在 \"}<_components.a href=\"/guides/topic-detail/model/manage-effects\">{\"副作用管理\"}</_components.a>{\" 一节，我们演示过 Effects 函数如何调用 Actions 函数。\"}</_components.p>{\"\\n\"}<_components.p>{\"这里我们再来举一个例子：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define((context, { use, onMount }) => ({\\n  state: {\\n    a: '',\\n    b: '',\\n  },\\n  actions: {\\n    setA(state, payload) {\\n      state.a = payload;\\n    },\\n    setB(state, payload) {\\n      state.a = payload;\\n    },\\n  },\\n  effects: {\\n    async loadA() {\\n      // 通过 use 获取当前 Model 的 actions\\n      const [, actions] = use(fooModel);\\n      const res = await mockFetchA();\\n      actions.setA(res);\\n    },\\n    async loadB() {\\n      // 通过 use 获取当前 Model 的 actions\\n      const [, actions] = use(fooModel);\\n      const res = await mockFetchB();\\n      actions.setB(res);\\n    },\\n  },\\n}));\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这个例子中，\"}<_components.code>{\"fooModel\"}</_components.code>{\" 的两个 Effects 函数，需要调用自身的 Actions 函数。这里我们在每个 Effects 函数中，都调用了一次 \"}<_components.code>{\"use\"}</_components.code>{\"，为什么不能像 Model 间通信的例子中，在 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数中，统一调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 自身的 Actions 呢？这是因为调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 时，会先检查这个 Model 是否已经挂载，如果还没有挂载，会先执行挂载逻辑，而 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数又是在 Model 的挂载阶段执行的，这样一来，在挂载阶段调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 自身，会出现死循环（代码实际执行过程会抛出错误）。所以，\"}<_components.strong>{\"一定不能在 \"}<_components.code>{\"define\"}</_components.code>{\" 的回调函数中，调用 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 自身对象。\"}</_components.strong></_components.p>{\"\\n\"}<_components.p>{\"不过，我们可以利用 \"}<_components.code>{\"onMount\"}</_components.code>{\" 这个钩子函数，在 Model 挂载完成后，再通过 \"}<_components.code>{\"use\"}</_components.code>{\" 获取 Model 自身对象：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define((context, { use, onMount }) => {\\n  let actions;\\n\\n  onMount(() => {\\n    // fooModel 挂载完成后，通过 use 获取当前 Model 的 actions\\n    [, actions] = use(fooModel);\\n  });\\n\\n  return {\\n    state: {\\n      a: '',\\n      b: '',\\n    },\\n    actions: {\\n      setA(state, payload) {\\n        state.a = payload;\\n      },\\n      setB(state, payload) {\\n        state.a = payload;\\n      },\\n    },\\n    effects: {\\n      async loadA() {\\n        const res = await mockFetchA();\\n        actions.setA(res);\\n      },\\n      async loadB() {\\n        const res = await mockFetchB();\\n        actions.setB(res);\\n      },\\n    },\\n  };\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"这样，我们也可以实现代码的简化。\"}</_components.p></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","h2","ol","li","code","pre","div","strong","ul","img","components","id","className","href","src","alt","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}