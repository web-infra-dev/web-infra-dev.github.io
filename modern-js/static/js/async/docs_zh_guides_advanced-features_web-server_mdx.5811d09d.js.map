{"version":3,"file":"static/js/async/docs_zh_guides_advanced-features_web-server_mdx.5811d09d.js","sources":["./docs/zh/guides/advanced-features/web-server.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Fadvanced-features%2Fweb-server.mdx\"] = {\"toc\":[{\"text\":\"使用 API 扩展 Web Server\",\"id\":\"使用-api-扩展-web-server\",\"depth\":2},{\"text\":\"Hook\",\"id\":\"hook\",\"depth\":3},{\"text\":\"Middleware\",\"id\":\"middleware\",\"depth\":3},{\"text\":\"通过 BFF 托管页面请求\",\"id\":\"通过-bff-托管页面请求\",\"depth\":2},{\"text\":\"完全自定义的 Web Server\",\"id\":\"完全自定义的-web-server\",\"depth\":2}],\"title\":\"自定义 Web Server\",\"frontmatter\":{\"sidebar_position\":13}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        strong: \"strong\",\n        div: \"div\",\n        h2: \"h2\",\n        code: \"code\",\n        pre: \"pre\",\n        h3: \"h3\",\n        ol: \"ol\",\n        li: \"li\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"自定义-web-server\">{\"自定义 Web Server\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#自定义-web-server\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"Modern.js 作为以客户端为中心的开发框架，对服务端的定制能力较弱。而在有些开发场景下，需要定制特殊的服务端逻辑，例如用户鉴权、请求预处理、添加页面渲染骨架等。\"}</_components.p>{\"\\n\"}<_components.p>{\"一些开发者可能会有疑惑，Modern.js 已经提供了 \"}<_components.a href=\"/guides/advanced-features/bff/function\">{\"BFF 能力\"}</_components.a>{\"，为什么还需要\"}<_components.strong>{\"自定义 Web Server\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.p>{\"因为在默认情况下，页面路由并不会经过 BFF，它没有办法为页面访问提供服务端的定制逻辑。之所以这样设计，是因为我们不希望控制页面的服务与 BFF 服务绑定在一起，避免 BFF 的框架限制页面的部署方式。例如将页面与 BFF 分开托管、将页面服务部署到非 Node 的环境上，或是针对部署平台做定制等。\"}</_components.p>{\"\\n\"}<_components.p>{\"出于上述原因，Modern.js 提供了三种方式，让项目可以在根据需求，渐进式的定制服务端能力。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive warning\"><_components.div className=\"modern-directive-title\">{\"WARNING\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"三种扩展方式无法同时工作，开发者需要根据场景选择合适的方式。\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"使用-api-扩展-web-server\">{\"使用 API 扩展 Web Server\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#使用-api-扩展-web-server\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"第一种方式是通过 Modern.js 提供的服务端运行时 API，在特定的生命周期对服务端进行定制。提供这种方式的目的是在部分情况下，开发者并不需要控制完整的 Web Server，只需要添加服务端逻辑即可。\"}</_components.p>{\"\\n\"}<_components.p>{\"这种方式无法控制完整的 Web Server，并且扩展逻辑\"}<_components.strong>{\"只在请求页面时生效\"}</_components.strong>{\"。因此，它适用于服务端逻辑相对简单，不希望额外创建 BFF 或者 BFF 和页面无需公用服务端逻辑场景。\"}</_components.p>{\"\\n\"}<_components.p>{\"可以在项目根目录执行 \"}<_components.code>{\"pnpm run new\"}</_components.code>{\" 命令，开启「自定义 Web Serve」功能：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"? 请选择你想要的操作 创建工程元素\\n? 请选择创建元素类型 新建「自定义 Web Server」源码目录\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"执行命令后，在 \"}<_components.code>{\"modern.config.ts\"}</_components.code>{\" 中注册 \"}<_components.code>{\"@modern-js/plugin-server\"}</_components.code>{\" 插件:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { serverPlugin } from '@modern-js/plugin-server';\\n\\nexport default defineConfig({\\n  plugins: [..., serverPlugin()],\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"开启功能后，项目目录下会自动创建 \"}<_components.code>{\"server/index.ts\"}</_components.code>{\" 文件，可以在这个文件中编写自定义逻辑。Modern.js 提供了 \"}<_components.strong>{\"Hook\"}</_components.strong>{\" 与 \"}<_components.strong>{\"Middleware\"}</_components.strong>{\" 两类 API 来扩展 Web Server。\"}</_components.p>{\"\\n\"}<_components.h3 id=\"hook\">{\"Hook\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#hook\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"Modern.js 提供的 Hook 用于控制 Web Server 中的内置逻辑，所有的页面请求都会经过 Hook。\"}</_components.p>{\"\\n\"}<_components.p>{\"目前提供了两种 Hook，分别是 \"}<_components.code>{\"AfterMatch\"}</_components.code>{\" 和 \"}<_components.code>{\"AfterRender\"}</_components.code>{\"，可以用于修改渲染结果。可以在 \"}<_components.code>{\"server/index.ts\"}</_components.code>{\" 中这样写：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import type {\\n  AfterMatchHook,\\n  AfterRenderHook,\\n} from '@modern-js/runtime/server';\\n\\nexport const afterMatch: AfterMatchHook = (ctx, next) => {\\n  next();\\n};\\n\\nexport const afterRender: AfterRenderHook = (ctx, next) => {\\n  next();\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"项目在使用 Hook 时，应该有以下最佳实践：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"在 afterMatch 中做权限校验。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 afterMatch 做 Rewrite 和 Redirect。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 afterRender 中做 HTML 内容注入。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"详细 API 和更多用法可以查看 \"}<_components.a href=\"/apis/app/runtime/web-server/hook\">{\"Hook\"}</_components.a>{\"。\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.h3 id=\"middleware\">{\"Middleware\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#middleware\">{\"#\"}</_components.a></_components.h3>{\"\\n\"}<_components.p>{\"对于某些项目，可能在服务端有更多的需求，Modern.js 提供了 Middleware 为 Web Server 添加前置中间件。它只能运行在 Node 环境下，因此如果项目被部署到其他环境中，如 Worker 环境，则不可以使用 Middleware。\"}</_components.p>{\"\\n\"}<_components.p>{\"Modern.js 默认提供了一套 API 供项目使用：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"import { Middlewre } from '@modern-js/runtime/server';\\n\\nexport const middleware: Middlewre = (context, next) => {\\n  const {\\n    source: { req, res },\\n  } = context;\\n  console.log(req.url);\\n  next();\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"详细 API 和更多用法可以查看 \"}<_components.a href=\"/apis/app/runtime/web-server/middleware\">{\"Middleware\"}</_components.a>{\"。\\n\"}</_components.p></_components.div></_components.div>{\"\\n\"}<_components.p>{\"项目在使用 Middleware 时，应该有以下最佳实践：\"}</_components.p>{\"\\n\"}<_components.ol>{\"\\n\"}<_components.li>{\"在 Middleware 中可以直接操作原生的请求、响应对象，做数据打点、注入 SSR 渲染可能用到的 Node 服务（数据库、Redis 等）。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 Middleware 里可以做类似功能打标、爬虫优化等功能。\"}</_components.li>{\"\\n\"}<_components.li>{\"在 Middleware 里可以无视后续默认渲染，自定义渲染流程。\"}</_components.li>{\"\\n\"}</_components.ol>{\"\\n\"}<_components.p><_components.strong>{\"总的来说，CSR 项目中，使用 Hook 基本能满足简单场景的所有需求。SSR 项目中，可以使用 Middleware 做更复杂的 Node 扩展。\"}</_components.strong></_components.p>{\"\\n\"}<_components.h2 id=\"通过-bff-托管页面请求\">{\"通过 BFF 托管页面请求\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#通过-bff-托管页面请求\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"第二种方式，是利用 BFF 来托管页面渲染，这种方式下，所有的请求都会先打到 BFF 的服务。\"}</_components.p>{\"\\n\"}<_components.p>{\"因为这种方式可以通过 BFF 统一控制所有请求的服务端逻辑。因此，它适用于服务端逻辑复杂，BFF 和页面需要公用服务端逻辑的场景。但它整体还是依托于 Modern.js 的 Web Server 运行，无法将逻辑运行在已有的服务上。\"}</_components.p>{\"\\n\"}<_components.p>{\"使用这种方式，我们需要先通过 \"}<_components.code>{\"pnpm new\"}</_components.code>{\" 开启「BFF」功能。然后在配置文件中添加 \"}<_components.a href=\"/configure/app/bff/enable-handle-web\"><_components.code>{\"bff.enableHandleWeb\"}</_components.code></_components.a>{\" 配置：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"export default defineConfig({\\n  bff: {\\n    enableHandleWeb: true,\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"当该值设置为 \"}<_components.code>{\"true\"}</_components.code>{\" 时，页面请求流量也会经过 BFF，并且 Modern.js 内置的页面渲染的逻辑默认会作为 BFF 服务的最后一个中间件运行。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"完全自定义的-web-server\">{\"完全自定义的 Web Server\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#完全自定义的-web-server\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"敬请期待\"}</_components.p></_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","strong","div","h2","code","pre","h3","ol","li","components","id","className","href","meta","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}