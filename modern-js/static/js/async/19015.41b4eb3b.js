(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["19015"],{21946:function(e,s,n){"use strict";n.r(s),n.d(s,{default:function(){return a},frontmatter:function(){return c}});var r=n("9880"),t=n("23169");function i(e){let s=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",div:"div",pre:"pre",h2:"h2",strong:"strong"},(0,t.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{id:"custom-request-sdk",children:["Custom request SDK",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-request-sdk",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["Modernjs's BFF is isomorphic in CSR and SSR.In the browser side rely on the ",(0,r.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer",children:"Fetch API"}),"\uFF0COn the server relies on the ",(0,r.jsx)(s.a,{href:"https://www.npmjs.com/package/node-fetch",target:"_blank",rel:"noopener noreferrer",children:"node-fetch"}),".However, in many business scenarios we need to do some additional processing of the request or response, for example:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Write auth information in the request header"}),"\n",(0,r.jsx)(s.li,{children:"Uniform processing of response data or errors"}),"\n",(0,r.jsx)(s.li,{children:"The browser's native fetch function is not available for a particular platform, and other methods of sending requests are required"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["For the above scenario, Modern.js provides the ",(0,r.jsx)(s.code,{children:"configure"})," function\uFF0Cthe customization capabilities range from low to high and can be used to configure ssr pass-through request headers, interceptors, and request SDKs.."]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive caution",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"CAUTION"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"configure"})," function call needs to be called before all BFF requests are sent, to ensure that the default request configuration is overridden."]}),"\n"]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",meta:'title="App.tsx"',children:"import { configure } from '@modern-js/runtime/bff';\n\nconfigure({\n  request: customRequest\n})\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"configure-ssr-pass-through-request-headers",children:["Configure ssr pass-through request headers",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#configure-ssr-pass-through-request-headers",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"In scenarios where both Modern.js SSR and BFF are used, it is often necessary to pass some request headers on SSR page requests to the BFF service."}),"\n",(0,r.jsxs)(s.p,{children:["For example, the project has a page address ",(0,r.jsx)(s.code,{children:"https://website.com"}),", which is an SSR page, and the API interface ",(0,r.jsx)(s.code,{children:"https://website.com/api/info"})," will be called in the component, which requires the user's cookie information for authentication. When the page requests this API interface, it needs to pass the ",(0,r.jsx)(s.code,{children:"cookie"})," requested by the SSR page to BFF."]}),"\n",(0,r.jsx)(s.p,{children:"Currently the following request headers are automatically passed through in Modern.js:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"cookie"}),"\n",(0,r.jsx)(s.li,{children:"x-tt-logid"}),"\n",(0,r.jsx)(s.li,{children:"user-agent"}),"\n",(0,r.jsx)(s.li,{children:"x-tt-stress"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["The request header can be configured via ",(0,r.jsx)(s.code,{children:"configure"}),". For example, in the following example, Modern.js will automatically pass the cookie information of the SSR page request to the BFF service:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",meta:'title="App.tsx"',children:"import { configure } from '@modern-js/runtime/bff';\n\nconfigure({\n  allowedHeaders: ['x-uid']\n})\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"configuring-interceptors",children:["Configuring Interceptors",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#configuring-interceptors",children:"#"})]}),"\n",(0,r.jsx)(s.p,{children:"In certain business scenarios, there is a requirement for unified processing of requests and responses, and interceptors can be configured to fulfill these requirements in such scenarios."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",meta:'title="App.tsx"',children:"configure({\n  // The request here is the default request sdk for bff, and the interceptor function needs to return a new request.\n  // The return value of the new request must be the result of the parse body\n  interceptor(request){\n    return async(url, params) => {\n      const res = await request(url, params);\n      return res.json();\n    };\n  };\n});\n"})}),"\n",(0,r.jsxs)(s.h2,{id:"configure-custom-request-sdk",children:["Configure custom request SDK",(0,r.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#configure-custom-request-sdk",children:"#"})]}),"\n",(0,r.jsxs)(s.p,{children:["If the requirements cannot be met by configuring interceptors alone  and need to further customize the request SDK, you can configure the custom request SDK by using the ",(0,r.jsx)(s.code,{children:"configure"})," function:"]}),"\n",(0,r.jsxs)(s.div,{className:"rspress-directive caution",children:[(0,r.jsx)(s.div,{className:"rspress-directive-title",children:"CAUTION"}),(0,r.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,r.jsxs)(s.p,{children:["Send a request to the BFF service when the server side renders, Modern.js will find the BFF service intranet IP via ",(0,r.jsx)(s.strong,{children:"service discovery"})," and send requests via IP to improve performance. This optimization is ",(0,r.jsx)(s.strong,{children:"lost"})," if a custom request SDK is used."]}),"\n"]})]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",meta:'title="App.tsx"',children:"import nodeFetch from 'node-fetch';\n\nconst customFetch = (input: RequestInfo | URL, init: RequestInit) => {\n  const curFetch = process.env.MODERN_TARGET !== 'node' ? fetch : nodeFetch as unknown as typeof fetch;\n  return curFetch(input, init).then(async res => {\n    const data = await res.json();\n    data.hello = 'hello custom sdk';\n    return data;\n  });\n};\n\nconfigure({\n  request: customFetch,\n});\n"})}),"\n",(0,r.jsx)(s.p,{children:"The configuration custom request SDK has the following conventions:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"configure"})," function allows you to configure a ",(0,r.jsx)(s.code,{children:"request"})," function whose input is the same as the Fetch or node-fetch in the browser, and all BFF functions will send requests through this function"]}),"\n",(0,r.jsxs)(s.li,{children:["The return value of the ",(0,r.jsx)(s.code,{children:"request"})," function must be the actual data returned by the interface, not a Promise, otherwise the BFF function will not return data properly."]}),"\n",(0,r.jsxs)(s.li,{children:["In the case of SSR projects, ",(0,r.jsx)(s.code,{children:"request"})," must support both browser-side and server-side sending of requests."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Example of custom request SDK using axios:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-tsx",meta:'title="App.tsx"',children:"import { configure } from '@modern-js/runtime/bff';\nimport type { Method, AxiosRequestHeaders as Headers } from 'axios';\n\nconfigure({\n  async request(...config: Parameters<typeof fetch>) {\n    const [url, params] = config;\n    const res = await axios({\n      url: url as string,  // Here, because of some incompatibility between fetch and axios types, you need to use `as`\n      method: params?.method as Method,\n      data: params?.body,\n      headers: params?.headers as Headers,\n    });\n    return res.data;\n  },\n});\n"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,t.useMDXComponents)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}var a=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["en%2Fguides%2Fadvanced-features%2Fbff%2Fsdk.mdx"]={toc:[{text:"Configure ssr pass-through request headers",id:"configure-ssr-pass-through-request-headers",depth:2},{text:"Configuring Interceptors",id:"configuring-interceptors",depth:2},{text:"Configure custom request SDK",id:"configure-custom-request-sdk",depth:2}],title:"Custom request SDK"};let c={sidebar_position:4,title:"Custom request SDK"}}}]);