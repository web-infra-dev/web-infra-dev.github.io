{"version":3,"file":"static/js/async/docs_zh_guides_topic-detail_model_computed-state_mdx.2bb7d601.js","sources":["./docs/zh/guides/topic-detail/model/computed-state.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Fguides%2Ftopic-detail%2Fmodel%2Fcomputed-state.mdx\"] = {\"toc\":[{\"text\":\"只依赖自身的 State\",\"id\":\"只依赖自身的-state\",\"depth\":2},{\"text\":\"依赖其他 Model 的 State\",\"id\":\"依赖其他-model-的-state\",\"depth\":2},{\"text\":\"函数类型的衍生状态\",\"id\":\"函数类型的衍生状态\",\"depth\":2}],\"title\":\"衍生状态\",\"frontmatter\":{\"sidebar_position\":4,\"title\":\"衍生状态\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        h2: \"h2\",\n        pre: \"pre\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"衍生状态\">{\"衍生状态\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#衍生状态\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"一些场景中，组件需要对 Model 中的 State 进行进一步计算，才能在组件中使用，这部分逻辑可以直接写在组件内部，也可以通过 Model 的衍生状态实现。\\n衍生状态定义在 Model 中的 \"}<_components.code>{\"computed\"}</_components.code>{\" 字段下。根据依赖的 Model 的不同、返回类型的不同，衍生状态的定义方法可以分为以下 3 种。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"只依赖自身的-state\">{\"只依赖自身的 State\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#只依赖自身的-state\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"衍生状态只依赖当前 Model 的 State，State 会作为第一个参数，传入衍生状态的定义函数中。\"}</_components.p>{\"\\n\"}<_components.p>{\"例如， todo 应用的 State 有 \"}<_components.code>{\"items\"}</_components.code>{\" 和 \"}<_components.code>{\"filter\"}</_components.code>{\"，\"}<_components.code>{\"filter\"}</_components.code>{\" 用于过滤当前页面显示的 todo 项，所以我们定义了一个 \"}<_components.code>{\"visibleTodos\"}</_components.code>{\" 的衍生状态可以直接在组件中使用。示例代码如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"/**\\n *  假设 todo item 结构如下：\\n{\\n    id: string;          // id\\n    text: string;        // todo 事项\\n    completed: boolean;  // 完成状态：0 代表未完成，1 代表完成\\n}\\n**/\\n\\nconst todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n    filter: 'ALL', // ALL: 显示全部；COMPLETED：显示完成的事项；ACTIVE：显示未完成的事项\\n  },\\n  computed: {\\n    visibleTodos: state => {\\n      switch (state.filter) {\\n        case 'ALL':\\n          return state.items;\\n        case 'COMPLETED':\\n          return todos.filter(t => t.completed);\\n        case 'ACTIVE':\\n          return todos.filter(t => !t.completed);\\n        default:\\n          return [];\\n      }\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"衍生状态最终会和 Model 的 State 进行合并，因此，可以通过 Model 的 State 对象访问到衍生状态，例如，\"}<_components.code>{\"visibleTodos\"}</_components.code>{\" 在组件内的使用方式如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"function Todo() {\\n  const [state, actions] = useModel(todoModel);\\n\\n  return (\\n    <div>\\n      <div>\\n        {state.visibleTodos.map(item => (\\n          <div key={item.id}>{item.text}</div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"依赖其他-model-的-state\">{\"依赖其他 Model 的 State\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#依赖其他-model-的-state\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"除了依赖当前 Model 的 State，衍生状态还依赖其他 Model 的 State，这时候衍生状态的定义格式为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"[stateKey]: [...depModels, (selfState, ...depModels) => computedState]\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"下面的示例，演示了 \"}<_components.code>{\"barModel\"}</_components.code>{\" 的衍生状态 \"}<_components.code>{\"combinedValue\"}</_components.code>{\" 是如何依赖 \"}<_components.code>{\"fooModel\"}</_components.code>{\" 的 State 的。\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    value: 'foo',\\n  },\\n});\\n\\nconst barModel = model('bar').define({\\n  state: {\\n    value: 'foo',\\n  },\\n  computed: {\\n    combinedValue: [\\n      fooModel,\\n      (state, fooState) => state.value + fooState.value,\\n    ],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"函数类型的衍生状态\">{\"函数类型的衍生状态\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#函数类型的衍生状态\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"衍生状态还可以返回一个函数。这时候衍生状态的定义格式为：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"[stateKey]: (state) => (...args) => computedState    // 只依赖自身的 state\\n[stateKey]: [...depModels, (selfState, ...depModels) => (...args) => computedState]  // 依赖其他 Model 的 state\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"假设，todo 应用的 state 不存储 \"}<_components.code>{\"filter\"}</_components.code>{\" 状态，而是直接在组件中使用，那么 \"}<_components.code>{\"visibleTodos\"}</_components.code>{\" 可以是一个函数类型的值，这个函数在组件中使用的时候，接收 \"}<_components.code>{\"filter\"}</_components.code>{\" 参数。如下所示：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n  },\\n  computed: {\\n    visibleTodos: state => filter => {\\n      switch (filter) {\\n        case 'ALL':\\n          return state.items;\\n        case 'COMPLETED':\\n          return todos.filter(t => t.completed);\\n        case 'ACTIVE':\\n          return todos.filter(t => !t.completed);\\n        default:\\n          return [];\\n      }\\n    },\\n  },\\n});\\n\\nfunction Todo(props) {\\n  // filter 状态通过 props 传入\\n  const { filter } = props;\\n  const [state, actions] = useModel(todoModel);\\n\\n  // 计算得到最终要显示的 todos\\n  const todos = state.visibleTodos(filter);\\n\\n  return (\\n    <div>\\n      <div>\\n        {todos.map(item => (\\n          <div key={item.id}>{item.text}</div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"更多参考\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.a href=\"/guides/topic-detail/model/computed-state\">{\"使用 Model\"}</_components.a></_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","h2","pre","div","components","id","className","href","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}