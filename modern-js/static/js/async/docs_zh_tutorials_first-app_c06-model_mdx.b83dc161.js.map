{"version":3,"file":"static/js/async/docs_zh_tutorials_first-app_c06-model_mdx.b83dc161.js","sources":["./docs/zh/tutorials/first-app/c06-model.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"zh%2Ftutorials%2Ffirst-app%2Fc06-model.mdx\"] = {\"toc\":[{\"text\":\"实现 Model\",\"id\":\"实现-model\",\"depth\":2},{\"text\":\"使用 Model\",\"id\":\"使用-model\",\"depth\":2}],\"title\":\"添加状态管理\",\"frontmatter\":{}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        strong: \"strong\",\n        div: \"div\",\n        pre: \"pre\",\n        h2: \"h2\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"添加状态管理\">{\"添加状态管理\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#添加状态管理\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"上一章节中，我们把硬编码的 \"}<_components.code>{\"mockData\"}</_components.code>{\" 改成从 Data Loader 中加载。\"}</_components.p>{\"\\n\"}<_components.p>{\"这一章节中，我们会进一步实现项目的功能，例如实现 \"}<_components.strong>{\"Archive\"}</_components.strong>{\" 按钮的功能，把联系人归档。\"}</_components.p>{\"\\n\"}<_components.p>{\"因此会开始编写一些跟 UI 完全无关的业务逻辑，如果继续写在组件代码中，会产生越来越多的面条式代码。为此，我们引入了一种叫做 \"}<_components.strong>{\"业务模型（Model）\"}</_components.strong>{\" 的代码模块，将这些业务逻辑和 UI 解耦。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"注意\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"使用状态管理相关 API，需要先启用配置项 \"}<_components.a href=\"/configure/app/runtime/state\">{\"runtime.state\"}</_components.a>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"modern.config.ts\"'>{\"import { defineConfig } from '@modern-js/app-tools';\\n\\nexport default defineConfig({\\n  runtime: {\\n    state: true,\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.h2 id=\"实现-model\">{\"实现 Model\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#实现-model\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"创建一个完整的 Model 首先需要定义\"}<_components.strong>{\"状态（state）\"}</_components.strong>{\"，包括状态中数据的名称和初始值。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们使用 Model 来管理联系人列表的数据，因此定义如下数据状态：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"const state = {\\n  items: [],\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"使用 TS 语法，可以定义更完整的类型信息，比如 items 里每个对象都应该有 \"}<_components.code>{\"name\"}</_components.code>{\"、\"}<_components.code>{\"email\"}</_components.code>{\" 字段。为了实现归档功能，还需要创建 \"}<_components.code>{\"archived\"}</_components.code>{\" 字段保存这个联系人是否已被归档的状态。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们还需要一个字段用来访问所有已归档的联系人，可以定义 \"}<_components.strong>{\"computed\"}</_components.strong>{\" 类型的字段，对已有的数据做转换：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"const computed = {\\n  archived: ({ items }) => {\\n    return items.filter(item => item.archived);\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"computed\"}</_components.code>{\" 类型字段的定义方式是函数，但使用时可以像普通字段一样通过 state 访问。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"INFO\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"Modern.js 集成了 \"}<_components.a href=\"https://immerjs.github.io/immer/\" target=\"_blank\" rel=\"noopener noreferrer\">{\"Immer\"}</_components.a>{\"，能够像操作 JS 中常规的可变数据一样，去写这种状态转移的逻辑。\"}</_components.p>{\"\\n\"}</_components.div></_components.div>{\"\\n\"}<_components.p>{\"实现 Archive 按钮时，我们需要一个 \"}<_components.code>{\"archive\"}</_components.code>{\" 函数，负责修改指定联系人的 \"}<_components.code>{\"archived\"}</_components.code>{\" 字段，我们把这种函数都叫作 \"}<_components.strong>{\"action\"}</_components.strong>{\"：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"const actions = {\\n  archive(draft, payload) {\\n    const target = draft.items.find(item => item.email === payload);\\n    if (target) {\\n      target.archived = true;\\n    }\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"action 函数是一种\"}<_components.strong>{\"纯函数\"}</_components.strong>{\"，确定的输入得到确定的输出（转移后的状态），不应该有任何副作用。\"}</_components.p>{\"\\n\"}<_components.p>{\"函数的第一个参数是 Immer 提供的 Draft State，第二个参数是 action 被调用时传入的参数（后面会介绍怎么调用）。\"}</_components.p>{\"\\n\"}<_components.p>{\"我们尝试完整实现它们：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-js\">{\"const state = {\\n  items: [],\\n  pending: false,\\n  error: null,\\n};\\n\\nconst computed = {\\n  archived: ({ items }) => {\\n    return items.filter(item => item.archived);\\n  },\\n};\\n\\nconst actions = {\\n  archive(draft, payload) {\\n    const target = draft.items.find(item => item.email === payload);\\n    if (target) {\\n      target.archived = true;\\n    }\\n  },\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"接下来我们把上面的代码连起来，放在同一个 Model 文件里。首先执行以下命令，创建新的文件目录：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-bash\">{\"mkdir -p src/models/\\ntouch src/models/contacts.ts\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"添加 \"}<_components.code>{\"src/models/contacts.ts\"}</_components.code>{\" 的内容：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import { model } from '@modern-js/runtime/model';\\n\\ntype State = {\\n  items: {\\n    avatar: string;\\n    name: string;\\n    email: string;\\n    archived?: boolean;\\n  }[];\\n  pending: boolean;\\n  error: null | Error;\\n};\\n\\nexport default model<State>('contacts').define({\\n  state: {\\n    items: [],\\n    pending: false,\\n    error: null,\\n  },\\n  computed: {\\n    archived: ({ items }: State) => items.filter(item => item.archived),\\n  },\\n  actions: {\\n    archive(draft, payload) {\\n      const target = draft.items.find(item => item.email === payload)!;\\n      if (target) {\\n        target.archived = true;\\n      }\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"我们把一个包含 state，action 等要素的 plain object 称作 \"}<_components.strong>{\"Model Spec\"}</_components.strong>{\"，Modern.js 提供了 \"}<_components.a href=\"/apis/app/runtime/model/model_\">{\"Model API\"}</_components.a>{\"，可以根据 Model Spec 生成 \"}<_components.strong>{\"Model\"}</_components.strong>{\"。\"}</_components.p>{\"\\n\"}<_components.h2 id=\"使用-model\">{\"使用 Model\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#使用-model\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"现在我们直接使用这个 Model，把项目的逻辑补充起来。\"}</_components.p>{\"\\n\"}<_components.p>{\"首先修改 \"}<_components.code>{\"src/components/Item/index.tsx\"}</_components.code>{\"，添加 \"}<_components.strong>{\"Archive 按钮\"}</_components.strong>{\"的 UI 和交互，内容如下：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\">{\"import Avatar from '../Avatar';\\n\\ntype InfoProps = {\\n  avatar: string;\\n  name: string;\\n  email: string;\\n  archived?: boolean;\\n};\\n\\nconst Item = ({\\n  info,\\n  onArchive,\\n}: {\\n  info: InfoProps;\\n  onArchive?: () => void;\\n}) => {\\n  const { avatar, name, email, archived } = info;\\n  return (\\n    <div className=\\\"flex p-4 items-center border-gray-200 border-b\\\">\\n      <Avatar src={avatar} />\\n      <div className=\\\"ml-4 custom-text-gray flex-1 flex justify-between\\\">\\n        <div className=\\\"flex-1\\\">\\n          <p>{name}</p>\\n          <p>{email}</p>\\n        </div>\\n        <button\\n          type=\\\"button\\\"\\n          disabled={archived}\\n          onClick={onArchive}\\n          className={`text-white font-bold py-2 px-4 rounded-full ${\\n            archived\\n              ? 'bg-gray-400 cursor-default'\\n              : 'bg-blue-500 hover:bg-blue-700'\\n          }`}\\n        >\\n          {archived ? 'Archived' : 'Archive'}\\n        </button>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default Item;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"接下来，我们修改 \"}<_components.code>{\"src/routes/page.tsx\"}</_components.code>{\" 和 \"}<_components.code>{\"src/routes/page.loader.ts\"}</_components.code>{\"，为 \"}<_components.code>{\"<Item>\"}</_components.code>{\" 组件传递更多参数：\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\" meta='title=\"src/routes/page.loader.ts\"'>{\"export type LoaderData = {\\n  code: number;\\n  data: {\\n    name: string;\\n    avatar: string;\\n    email: string;\\n  }[];\\n};\\n\\nexport default async (): Promise<LoaderData> => {\\n  const data = new Array(20).fill(0).map(() => {\\n    const firstName = name.firstName();\\n    return {\\n      name: firstName,\\n      avatar: `https://avatars.dicebear.com/api/identicon/${firstName}.svg`,\\n      email: internet.email(),\\n      archived: false,\\n    };\\n  });\\n\\n  return {\\n    code: 200,\\n    data,\\n  };\\n};\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.pre><_components.code className=\"language-tsx\" meta='title=\"src/routes/page.tsx\"'>{\"import { Helmet } from '@modern-js/runtime/head';\\nimport { useModel } from '@modern-js/runtime/model';\\nimport { useLoaderData } from '@modern-js/runtime/router';\\nimport { List } from 'antd';\\nimport { name, internet } from 'faker';\\nimport Item from '../components/Item';\\nimport contacts from '../models/contacts';\\n\\nfunction Index() {\\n  const { data } = useLoaderData() as LoaderData;\\n  const [{ items }, { archive, setItems }] = useModel(contacts);\\n  if (items.length === 0) {\\n    setItems(data);\\n  }\\n\\n  return (\\n    <div className=\\\"container lg mx-auto\\\">\\n      <Helmet>\\n        <title>All</title>\\n      </Helmet>\\n      <List\\n        dataSource={items}\\n        renderItem={info => (\\n          <Item\\n            key={info.name}\\n            info={info}\\n            onArchive={() => {\\n              archive(info.email);\\n            }}\\n          />\\n        )}\\n      />\\n    </div>\\n  );\\n}\\n\\nexport default Index;\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p><_components.code>{\"useModel\"}</_components.code>{\" 是 Modern.js 提供的 hooks API。可以在组件中提供 Model 中定义的 state，或通过 actions 调用 Model 中定义的 side effect 与 action，从而改变 Model 的 state。\"}</_components.p>{\"\\n\"}<_components.p>{\"Model 是业务逻辑，是计算过程，本身不创建也不持有状态。只有在被组件用 hooks API 使用后，才在指定的地方创建状态。\"}</_components.p>{\"\\n\"}<_components.p>{\"执行 \"}<_components.code>{\"pnpm run dev\"}</_components.code>{\"，点击 \"}<_components.strong>{\"Archive 按钮\"}</_components.strong>{\"，可以看到页面 UI 发生了变化。\"}</_components.p>{\"\\n\"}<_components.div className=\"modern-directive note\"><_components.div className=\"modern-directive-title\">{\"NOTE\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p>{\"上述例子中，\"}<_components.code>{\"useLoaderData\"}</_components.code>{\" 其实在每次切换路由时都会执行。因为我们在 Data Loader 里使用了 fake 数据，每次返回的数据是不同的。但我们优先使用了 Model 中的数据，因此切换路由时数据没有发生改变。\"}</_components.p>{\"\\n\"}</_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","strong","div","pre","h2","components","id","className","href","meta","target","rel","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}