"use strict";(self.webpackChunk_modern_js_main_doc=self.webpackChunk_modern_js_main_doc||[]).push([["18456"],{4362:function(e,n,s){s.r(n),s.d(n,{default:function(){return a}});var r=s(39980),d=s(9580);function t(e){let n=Object.assign({h1:"h1",a:"a",ul:"ul",li:"li",strong:"strong",pre:"pre",code:"code",p:"p"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"devsetupmiddlewares",children:["dev.setupMiddlewares",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#devsetupmiddlewares",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Type:"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type ServerAPIs = {\n  sockWrite: (\n    type: string,\n    data?: string | boolean | Record<string, any>,\n  ) => void;\n};\n\ntype SetupMiddlewares = Array<\n  (\n    middlewares: {\n      unshift: (...handlers: RequestHandler[]) => void;\n      push: (...handlers: RequestHandler[]) => void;\n    },\n    server: ServerAPIs,\n  ) => void\n>;\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Default:"})," ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Provides the ability to execute a custom function and apply custom middlewares."}),"\n",(0,r.jsxs)(n.p,{children:["The order among several different types of middleware is: ",(0,r.jsx)(n.code,{children:"unshift"})," => internal middlewares => ",(0,r.jsx)(n.code,{children:"push"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    setupMiddlewares: [\n      (middlewares, server) => {\n        middlewares.unshift((req, res, next) => {\n          next();\n        });\n\n        middlewares.push((req, res, next) => {\n          next();\n        });\n      },\n    ],\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"It is possible to use some server api to meet special scenario requirements:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'sockWrite. Allow send some message to HMR client, and then the HMR client will take different actions depending on the message type. If you send a "content changed" message, the page will reload.'}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export default {\n  dev: {\n    setupMiddlewares: [\n      (middlewares, server) => {\n        // add custom watch & trigger page reload when change\n        watcher.on('change', (changed) => {\n          server.sockWrite('content-changed');\n        });\n      },\n    ],\n  },\n};\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["en%2Fconfigure%2Fapp%2Fdev%2Fsetup-middlewares.mdx"]={toc:[],title:"dev.setupMiddlewares",frontmatter:{sidebar_label:"setupMiddlewares"}}}}]);