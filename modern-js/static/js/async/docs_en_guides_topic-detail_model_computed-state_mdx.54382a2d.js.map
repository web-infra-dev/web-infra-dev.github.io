{"version":3,"file":"static/js/async/docs_en_guides_topic-detail_model_computed-state_mdx.54382a2d.js","sources":["./docs/en/guides/topic-detail/model/computed-state.mdx"],"sourcesContent":["globalThis.__RSPRESS_PAGE_META ||= {};\nglobalThis.__RSPRESS_PAGE_META[\"en%2Fguides%2Ftopic-detail%2Fmodel%2Fcomputed-state.mdx\"] = {\"toc\":[{\"text\":\"Only Depend on the Model\\\\'s Own State\",\"id\":\"only-depend-on-the-models-own-state\",\"depth\":2},{\"text\":\"Dependent State from Other Models\",\"id\":\"dependent-state-from-other-models\",\"depth\":2},{\"text\":\"Derived State with Function Type\",\"id\":\"derived-state-with-function-type\",\"depth\":2}],\"title\":\"Derived State\",\"frontmatter\":{\"sidebar_position\":4,\"title\":\"Derived State\"}};\nimport { useMDXComponents as _provideComponents } from \"@mdx-js/react\";\nfunction _createMdxContent(props) {\n    const _components = Object.assign({\n        h1: \"h1\",\n        a: \"a\",\n        p: \"p\",\n        code: \"code\",\n        h2: \"h2\",\n        pre: \"pre\",\n        div: \"div\"\n    }, _provideComponents(), props.components);\n    return <><_components.h1 id=\"derived-state\">{\"Derived State\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#derived-state\">{\"#\"}</_components.a></_components.h1>{\"\\n\"}<_components.p>{\"In some scenarios, components need to perform further calculations on the State in Model before they can be used in the components. This logic can be directly written in the component or implemented through derived states in Model. Derived states are defined under the \"}<_components.code>{\"computed\"}</_components.code>{\" field in the Model. Depending on the dependencies of the Model and the return type, there are three ways to define derived states.\"}</_components.p>{\"\\n\"}<_components.h2 id=\"only-depend-on-the-models-own-state\">{\"Only Depend on the Model's Own State\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#only-depend-on-the-models-own-state\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"The derived state only depends on the current Model's State, which is passed as the first parameter to the derived state's definition function.\"}</_components.p>{\"\\n\"}<_components.p>{\"For example, the todo application has \"}<_components.code>{\"items\"}</_components.code>{\" and \"}<_components.code>{\"filter\"}</_components.code>{\" in its State, and \"}<_components.code>{\"filter\"}</_components.code>{\" is used to filter the todo items displayed on the current page. Therefore, we define a \"}<_components.code>{\"visibleTodos\"}</_components.code>{\" derived state that can be directly used in the component. The sample code is as follows:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"/**\\n *  Assuming the structure of the todo item is as follows:\\n{\\n    id: string;          // id\\n    text: string;        // todo\\n    completed: boolean;\\n}\\n**/\\n\\nconst todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n    filter: 'ALL', // ALL: show all；COMPLETED: show completed；ACTIVE: show active\\n  },\\n  computed: {\\n    visibleTodos: state => {\\n      switch (state.filter) {\\n        case 'ALL':\\n          return state.items;\\n        case 'COMPLETED':\\n          return todos.filter(t => t.completed);\\n        case 'ACTIVE':\\n          return todos.filter(t => !t.completed);\\n        default:\\n          return [];\\n      }\\n    },\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Derived state will eventually be merged with the Model's State, so the derived state can be accessed through the Model's State object. For example, the \"}<_components.code>{\"visibleTodos\"}</_components.code>{\" can be used in the component as follows:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"function Todo() {\\n  const [state, actions] = useModel(todoModel);\\n\\n  return (\\n    <div>\\n      <div>\\n        {state.visibleTodos.map(item => (\\n          <div key={item.id}>{item.text}</div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"dependent-state-from-other-models\">{\"Dependent State from Other Models\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#dependent-state-from-other-models\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"In addition to depending on the current model's state, derived states may also depend on the state of other models. In this case, the definition format for the derived state is:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"[stateKey]: [...depModels, (selfState, ...depModels) => computedState]\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"The following example demonstrates how the derived state \"}<_components.code>{\"combinedValue\"}</_components.code>{\" of \"}<_components.code>{\"barModel\"}</_components.code>{\" depends on the state of \"}<_components.code>{\"fooModel\"}</_components.code>{\".\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const fooModel = model('foo').define({\\n  state: {\\n    value: 'foo',\\n  },\\n});\\n\\nconst barModel = model('bar').define({\\n  state: {\\n    value: 'foo',\\n  },\\n  computed: {\\n    combinedValue: [\\n      fooModel,\\n      (state, fooState) => state.value + fooState.value,\\n    ],\\n  },\\n});\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.h2 id=\"derived-state-with-function-type\">{\"Derived State with Function Type\"}<_components.a className=\"header-anchor\" aria-hidden=\"true\" href=\"#derived-state-with-function-type\">{\"#\"}</_components.a></_components.h2>{\"\\n\"}<_components.p>{\"Derived states can also return a function. In this case, the definition format for the derived state is:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"[stateKey]: (state) => (...args) => computedState    // Only relies on its own state\\n[stateKey]: [...depModels, (selfState, ...depModels) => (...args) => computedState]  // Relies on the state of other models\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.p>{\"Assuming the \"}<_components.code>{\"filter\"}</_components.code>{\" state is not stored in the state of the todo app, but is instead used directly in the component, \"}<_components.code>{\"visibleTodos\"}</_components.code>{\" can be a function type value. This function receives the \"}<_components.code>{\"filter\"}</_components.code>{\" parameter when used in the component, as shown below:\"}</_components.p>{\"\\n\"}<_components.pre><_components.code className=\"language-ts\">{\"const todoModel = model('todo').define({\\n  state: {\\n    items: [],\\n  },\\n  computed: {\\n    visibleTodos: state => filter => {\\n      switch (filter) {\\n        case 'ALL':\\n          return state.items;\\n        case 'COMPLETED':\\n          return todos.filter(t => t.completed);\\n        case 'ACTIVE':\\n          return todos.filter(t => !t.completed);\\n        default:\\n          return [];\\n      }\\n    },\\n  },\\n});\\n\\nfunction Todo(props) {\\n  // use props pass filter\\n  const { filter } = props;\\n  const [state, actions] = useModel(todoModel);\\n\\n  // get final todos\\n  const todos = state.visibleTodos(filter);\\n\\n  return (\\n    <div>\\n      <div>\\n        {todos.map(item => (\\n          <div key={item.id}>{item.text}</div>\\n        ))}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}</_components.code></_components.pre>{\"\\n\"}<_components.div className=\"modern-directive info\"><_components.div className=\"modern-directive-title\">{\"Additional Reference\"}</_components.div><_components.div className=\"modern-directive-content\"><_components.p><_components.a href=\"/guides/topic-detail/model/computed-state\">{\"Using Models\"}</_components.a>{\"\\n\"}</_components.p></_components.div></_components.div></>;\n}\nfunction MDXContent(props = {}) {\n    const { wrapper: MDXLayout } = Object.assign({}, _provideComponents(), props.components);\n    return MDXLayout ? <MDXLayout {...props}><_createMdxContent {...props}/></MDXLayout> : _createMdxContent(props);\n}\nexport default MDXContent;\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","p","code","h2","pre","div","components","id","className","href","globalThis","__RSPRESS_PAGE_META","MDXLayout","wrapper","_"],"mappings":"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"}