[{"id":0,"title":"Commands","content":"#\n\nModern.js has some built-in commands that can help you quickly start a\ndevelopment server, build production environment code, and more.\n\nThrough this chapter, you can learn about the built-in commands of Modern.js and\nhow to use them.\n\n\nmodern dev#\n\nThe modern dev command is used to start a local development server and compile\nthe source code in the development environment.\n\n\n\nAfter running modern dev, Modern.js will watch source file changes and apply hot\nmodule replacement.\n\n\n\n\nCompile Partial Pages#\n\nIn multi-page (MPA) projects, the --entry option can be added to specify one or\nmore pages to compile. In this way, only part of the code in the project will be\ncompiled, and the dev startup speed will be faster.\n\nFor example, execute modern dev --entry, the entry selector will be displayed in\nthe command line interface:\n\n\n\nFor example, if you select the foo entry, only the code related to the foo entry\nwill be compiled, and the code of other pages will not be compiled.\n\n\nSpecify the page by parameter#\n\nYou can also specify the page name through parameters after --entry, and the\nnames of multiple pages can be separated by commas.\n\n\n\n\nmodern start#\n\nmodern start is an alias of modern dev command, the usage of the two are exactly\nthe same.\n\n\nmodern build#\n\nThe modern build command will build production-ready artifacts in the dist/\ndirectory by default. You can specify the output directory by modifying the\nconfiguration output.distPath.\n\n\n\n\nAnalyze Bundle#\n\nexecute npx modern build --analyze command, can produce an HTML file that\nanalyzes the volume of the bundle while packaging the production code:\n\n\n\nOpen the above HTML file in the browser, you can see the tile diagram of the\nbundled files, and perform package volume analysis and optimization:\n\n> this features based on webpack-bundle-analyzer.\n\n\nmodern new#\n\nThe modern new command is used to enable features in an existing project.\n\nFor example, add application entry, enable some optional features such as\nTailwind CSS, micro frontend, etc.\n\n\n\n\nAdd Entry#\n\nIn the project, execute the new command to add entries as follows:\n\n\n\n\nEnable Features#\n\nIn the project, execute the new command to enable features as follows:\n\n\n\nTIP\n\nThe --config parameter needs to use a JSON string.\n\npnpm does not support the use of JSON strings as parameter values currently. Use\nnpm new to turn on.【Relate Issue】\n\n\nmodern serve#\n\nThe modern serve command is used to start a Modern.js project in the production\nenvironment. It can also be used to preview the artifacts built for the\nproduction environment locally. Please note that you need to execute the build\ncommand beforehand to generate the corresponding artifacts.\n\n\n\nBy default, the project will run in localhost:8080, you can modify the server\nport number with server.port:\n\n\n\n\nmodern upgrade#\n\nExecute the command npx modern upgrade in the project, by default, dependencies\nin the package.json are updated to the latest version.\n\n\n\n\nmodern inspect#\n\nThe modern inspect command is used to view the Rsbuild config and webpack or\nRspack config of the project.\n\n\n\nAfter executing the command npx modern inspect in the project root directory,\nthe following files will be generated in the dist directory of the project:\n\n * rsbuild.config.mjs: The Rsbuild config to use at build time.\n * webpack.config.web.mjs: The webpack config used by to use at build time.\n\n\n\n\nConfiguration Env#\n\nBy default, the inspect command will output the development configs, you can use\nthe --env production option to output the production configs:\n\n\n\n\nVerbose content#\n\nBy default, the inspect command will omit the function content in the config\nobject, you can use the --verbose option to output the full content of the\nfunction:\n\n\n\n\nSSR Configuration#\n\nIf the project has enabled SSR, an additional webpack.config.node.mjs file will\nbe generated in the dist/, corresponding to the webpack configuration at SSR\nbuild time.\n\n\n\n\nmodern lint#\n\nRun ESLint to check the syntax of the code.\n\n\n\nNormally, only the part of the code modified by this commit needs to be checked\nby lint-staged during the git commit phase.\n\n * --no-fix close auto fix by lint.\n\n\nmodern test#\n\nmodern test command will automatically run the test cases.\n\n\n\nTIP\n\nmodern test command need to execute the new command in advance to enable the\nunit test/integration test.\n\nThe effect is as follows:\n\n\n\nINFO\n\nFiles match *.test.(js|ts) in api/ or src/ folders will be recognized as test\ncases by default.","routePath":"/en/apis/app/commands","lang":"en","toc":[{"text":"modern dev","id":"modern-dev","depth":2,"charIndex":239},{"text":"Compile Partial Pages","id":"compile-partial-pages","depth":3,"charIndex":487},{"text":"Specify the page by parameter","id":"specify-the-page-by-parameter","depth":3,"charIndex":988},{"text":"modern start","id":"modern-start","depth":2,"charIndex":1153},{"text":"modern build","id":"modern-build","depth":2,"charIndex":1261},{"text":"Analyze Bundle","id":"analyze-bundle","depth":3,"charIndex":1463},{"text":"modern new","id":"modern-new","depth":2,"charIndex":1827},{"text":"Add Entry","id":"add-entry","depth":3,"charIndex":2028},{"text":"Enable Features","id":"enable-features","depth":3,"charIndex":2111},{"text":"modern serve","id":"modern-serve","depth":2,"charIndex":2377},{"text":"modern upgrade","id":"modern-upgrade","depth":2,"charIndex":2798},{"text":"modern inspect","id":"modern-inspect","depth":2,"charIndex":2954},{"text":"Configuration Env","id":"configuration-env","depth":3,"charIndex":3380},{"text":"Verbose content","id":"verbose-content","depth":3,"charIndex":3547},{"text":"SSR Configuration","id":"ssr-configuration","depth":3,"charIndex":3731},{"text":"modern lint","id":"modern-lint","depth":2,"charIndex":3924},{"text":"modern test","id":"modern-test","depth":2,"charIndex":4148}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":1,"title":"**/*.[tj]s","content":"#\n\nFiles that declare API routes in the BFF Function Mode. Except for some\nconvention files, files in the api directory will be registered as the routes.\n\nINFO\n\nUsing the api directory requires enabling the BFF feature, and you need to run\nthe new command in the project to enable the \"BFF\" feature.\n\nThis file supports using the js or ts language, but you must use esm syntax to\nexport functions.\n\n\nRouting File Convention#\n\n\nDefault Routing#\n\nThe routing system will map files named index to the previous directory.\n\n * api/index.ts -> $BASENAME/\n * api/user/index.ts -> $BASENAME/user\n\n\nNested Routing#\n\nThe routing system also supports parsing nested files. If you create a nested\nfolder structure, the files will still automatically resolve routes in the same\nway.\n\n * api/hello.ts -> $BASENAME/hello\n * api/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Routing#\n\nThe routing system supports generating dynamic routes through file directories\nnamed with [].\n\n * api/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nThe $BASENAME can be configured in modern.config.js, and the default value is\n/api.\n\n\nAllow List#\n\nBy default, all files in the api directory will be parsed as BFF function files,\nbut we also set a white list for these files that are not parsed:\n\n * Files whose names start with _. For example: _utils.ts.\n * All files in folders whose names start with _. For example: _utils/index.ts,\n   _utils/cp.ts.\n * Test files. For example: foo.test.ts.\n * TypeScript type files. For example: hello.d.ts.\n * Files under node_modules.\n\n\nFunction Definition#\n\nIn addition to the routing rules above, there are also conventions for function\ndefinitions and exports in the code.\n\nFunctions are exported by name, and the name of the exported function is the\nHTTP method accepted by the corresponding interface, that is:\n\n\n\nBy exporting functions in this way, you will get a GET interface.\n\nThe application project supports 9 Method definitions, namely: GET, POST, PUT,\nDELETE, CONNECT, TRACE, PATCH, OPTION, HEAD, that is, these Methods can be used\nas the names of the exported functions.\n\nThe name is case-insensitive, that is, if it is GET, it can be written as get,\nGet, GEt, GET, all of which can be accurately recognized. The default export,\nthat is, export default xxx, will be mapped to Get.\n\nBecause delete is a keyword in JavaScript, you can use del or DELETE instead.\n\nMultiple functions with different Methods can be defined in one file, but if\nmultiple functions with the same Method are defined, only the first one will\ntake effect.\n\nINFO\n\nIt should be noted that the defined functions should all be asynchronous, which\nis related to the type when calling the function.","routePath":"/en/apis/app/hooks/api/api","lang":"en","toc":[{"text":"Routing File Convention","id":"routing-file-convention","depth":2,"charIndex":399},{"text":"Default Routing","id":"default-routing","depth":3,"charIndex":426},{"text":"Nested Routing","id":"nested-routing","depth":3,"charIndex":589},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":850},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1240},{"text":"Function Definition","id":"function-definition","depth":2,"charIndex":1680}],"domain":"","frontmatter":{"title":"**/*.[tj]s","sidebar_position":1},"version":""},{"id":2,"title":"_app.[tj]s","content":"#\n\nIn the BFF Function Mode, this file can add pre-middleware for BFF functions.\n\nNOTE\n\nFor specific examples, please refer to hook.","routePath":"/en/apis/app/hooks/api/app","lang":"en","toc":[],"domain":"","frontmatter":{"title":"_app.[tj]s","sidebar_position":2},"version":""},{"id":3,"title":"lambda/*.[tj]s","content":"#\n\nFiles that declare API routes under the BFF Framework Mode. Except for\nconvention files, files under the lambda/ directory will be registered as the\nroutes.\n\nINFO\n\nUsing the api directory requires enabling the BFF function, and you need to run\nthe new command to enable the \"BFF\" function under the project.\n\nTIP\n\nThis file supports using js or ts language, but must export functions using esm\nsyntax.\n\n\nRouting File Convention#\n\n\nDefault Routing#\n\nThe routing system will map files named index to the previous directory.\n\n * api/lambda/index.ts -> $BASENAME/\n * api/lambda/user/index.ts -> $BASENAME/user\n\n\nNested Routing#\n\nThe routing system also supports parsing nested files. If you create a nested\nfolder structure, the files will still automatically resolve routes in the same\nway.\n\n * api/lambda/hello.ts -> $BASENAME/hello\n * api/lambda/user/list.ts -> $BASENAME/user/list\n\n\nDynamic Routing#\n\nThe routing system supports generating dynamic routes through file directories\nnamed with [].\n\n * api/lambda/user/[username]/info.ts -> $BASENAME/user/:username/info\n * api/lambda/user/[username]/delete.ts -> $BASENAME/user/:username/delete\n * api/lambda/article/[id]/info.ts -> $BASENAME/article/:id/info\n\nThe $BASENAME can be configured in modern.config.js, and the default value is\n/api.\n\n\nAllow List#\n\nBy default, all files in the lambda directory are parsed as BFF function files,\nbut we also set up a whitelist so that these files are not parsed:\n\n * Files named starting with _. For example: _utils.ts.\n * All files in a folder named starting with _. For example: _utils/index.ts,\n   _utils/cp.ts.\n * Test files. For example: foo.test.ts.\n * TypeScript type files. For example: hello.d.ts.\n * Files under node_module.\n\n\nFunction Definition#\n\nCompletely consistent with the Function Definition under the function mode.","routePath":"/en/apis/app/hooks/api/lambda","lang":"en","toc":[{"text":"Routing File Convention","id":"routing-file-convention","depth":2,"charIndex":406},{"text":"Default Routing","id":"default-routing","depth":3,"charIndex":433},{"text":"Nested Routing","id":"nested-routing","depth":3,"charIndex":610},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":885},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":1296},{"text":"Function Definition","id":"function-definition","depth":2,"charIndex":1730}],"domain":"","frontmatter":{"title":"lambda/*.[tj]s","sidebar_position":3},"version":""},{"id":4,"title":"test.[tj]s","content":"#\n\nApp's BFF test file, support for writing test cases in the api/ directory which\nfile with suffix .test.[tj]s.\n\nINFO\n\nTo use unit test and integration test, you need to execute the new command in\nadvance to enable the unit test/integration test.","routePath":"/en/apis/app/hooks/api/test","lang":"en","toc":[],"domain":"","frontmatter":{"title":"test.[tj]s","sidebar_position":4},"version":""},{"id":5,"title":"html/","content":"#\n\nYou can inject custom HTML fragments at different locations of the default\ninternal HTML template through the config/html directory.\n\nFor specific usage, please refer to: Custom HTML.","routePath":"/en/apis/app/hooks/config/html","lang":"en","toc":[],"domain":"","frontmatter":{"title":"html/","sidebar_position":1},"version":""},{"id":6,"title":"icon/","content":"#\n\n\nFavicon#\n\nWhen there is a favicon.* file in the config directory at the root of the\nproject, Modern.js will automatically set the file to the html.favicon\nconfiguration option for generating the favicon icon on the page:\n\n\n\nAfter the build is completed, you can see the following tags automatically\ngenerated in HTML:\n\n\n\n\nOrder#\n\nWhen setting up the favicon, Modern.js looks for files in the following order:\n\n * favicon.png\n * favicon.jpg\n * favicon.jpeg\n * favicon.svg\n * favicon.ico\n\n\nApple Touch Icon#\n\nWhen there is an icon.* file in the config directory at the root of the project,\nModern.js will automatically set the file to the html.appIcon configuration\noption for generating the Apple Touch Icon icon under the iOS system.\n\n\n\nAfter the build is completed, you can see the following tags automatically\ngenerated in HTML:\n\n\n\n\nOrder#\n\nWhen setting up the app icon, Modern.js looks for files in the following order:\n\n * icon.png\n * icon.jpg\n * icon.jpeg\n * icon.svg\n * icon.ico","routePath":"/en/apis/app/hooks/config/icon","lang":"en","toc":[{"text":"Favicon","id":"favicon","depth":2,"charIndex":3},{"text":"Order","id":"order","depth":3,"charIndex":325},{"text":"Apple Touch Icon","id":"apple-touch-icon","depth":2,"charIndex":491},{"text":"Order","id":"order-1","depth":3,"charIndex":838}],"domain":"","frontmatter":{"title":"icon/","sidebar_position":2},"version":""},{"id":7,"title":"mock/","content":"#\n\nWhen there is a config/mock/index.js file in the project directory, Modern.js\nwill automatically enable the Mock service during development.","routePath":"/en/apis/app/hooks/config/mock","lang":"en","toc":[],"domain":"","frontmatter":{"title":"mock/","sidebar_position":5},"version":""},{"id":8,"title":"public/","content":"#\n\nAny static assets can be placed in the public/ directory, and the files will be\ndeployed to the corresponding application domain by the server.\n\n\nDescription#\n\nThe file routing is based on the convention of the directory structure, where\npublic/ is the root directory corresponding to the root path of the Web\napplication.\n\nFor example, the config/public/sdk/index.js file will be deployed under\n${domain}/sdk/index.js after deployment.\n\n\nScenarios#\n\nFor example, authentication files required by third-party systems such as\nrobots.txt and auth.xml.\n\nOr SDKs for other business parties (requiring unchanged routing), or HTML files\nwithout entry.\n\nINFO\n\nFor static assets (such as SVG images) that need to be imported through import\nin the source code, it is recommended to manage them in the src/assets\ndirectory.\n\n\nCode Compression#\n\nIf the file in the directory is a .js file, it will be automatically compressed\nduring production environment construction.\n\nIf the file ends with .min.js, it will not be compressed.","routePath":"/en/apis/app/hooks/config/public","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":148},{"text":"Scenarios","id":"scenarios","depth":2,"charIndex":441},{"text":"Code Compression","id":"code-compression","depth":2,"charIndex":818}],"domain":"","frontmatter":{"title":"public/","sidebar_position":3},"version":""},{"id":9,"title":"storybook/","content":"#\n\nModern.js supports debugging using Storybook. When configuring Storybook, you\nneed to configure it in the config/storybook directory of the project.\n\nPlease refer to Storybook Configuration for Storybook configuration.\n\nINFO\n\nEnabling the Storybook function requires running the new command to enable it\nunder the project first.\n\nExample#\n\nFor the webpack configuration of the Storybook Manager app section, you can\nconfigure it by adding the ./config/storybook/main.js file to configure it.\n\n\n\n\nLimitation#\n\nThere are some limitations when using the config/storybook directory for\nconfiguration:\n\n * The location where the Story file is stored cannot be modified, that is, the\n   stories configuration cannot be modified in the main.js file.\n * It is not supported to modify Webpack and Babel related configurations in\n   main.js, related requirements can be passed through tools.webpack\n   /tools.babel modify.","routePath":"/en/apis/app/hooks/config/storybook","lang":"en","toc":[{"text":"Example","id":"example","depth":4,"charIndex":332},{"text":"Limitation","id":"limitation","depth":3,"charIndex":498}],"domain":"","frontmatter":{"title":"storybook/","sidebar_position":7},"version":""},{"id":10,"title":"upload/","content":"#\n\nAny static assets can be placed in the upload/ directory.\n\n\nDescription#\n\nIn the development environment, the static assets in this directory will be\nhosted under the /upload path. After building the application, the files in this\ndirectory will be copied to the dist directory.\n\nThis file convention is mainly used for developers to use plugins to proactively\nupload static assets to the CDN.\n\n\nScenarios#\n\nFor example, SDKs for project use only, such as google-analysis.js (usually\nrequires HTTP caching).\n\nPictures, font files, common CSS, etc.\n\n\nCode Compression#\n\nIf the file in the directory is a .js file, it will be automatically compressed\nduring production environment construction.\n\nIf the file ends with .min.js, it will not be compressed.\n\n\nMore Usage#\n\nIn React components, you can add this prefix through Environment Variables:\n\n\n\nIn addition, whether it is in Custom HTML or any HTML file under config/public/,\nyou can directly use HTML tags to reference resources in the config/upload/\ndirectory:\n\n\n\nIf you set the dev.assetPrefix or output.assetPrefix prefix, you can also use\ntemplate syntax to add the prefix directly:\n\n\n\nINFO\n\nModern.js does not support using files under config/upload/ through URLs in\nconfig/public/*.css (such as background-image).","routePath":"/en/apis/app/hooks/config/upload","lang":"en","toc":[{"text":"Description","id":"description","depth":2,"charIndex":62},{"text":"Scenarios","id":"scenarios","depth":2,"charIndex":398},{"text":"Code Compression","id":"code-compression","depth":2,"charIndex":552},{"text":"More Usage","id":"more-usage","depth":2,"charIndex":756}],"domain":"","frontmatter":{"title":"upload/","sidebar_position":4},"version":""},{"id":11,"title":"modern.config.[tj]s","content":"#\n\nThe Modern.js configuration file. Through this file, you can personalize the\nconfiguration of various aspects of the current project.\n\nTo learn more about how to use the configuration, please refer to Configuration\nUsage.","routePath":"/en/apis/app/hooks/modern-config","lang":"en","toc":[],"domain":"","frontmatter":{"title":"modern.config.[tj]s","sidebar_position":8},"version":""},{"id":12,"title":"index.[tj]s","content":"#\n\nA file that extends the Modern.js Web Server. You can add Hooks or Middleware to\nthe Web Server started by the application project in this file.\n\nYou can intercept and process requests and responses, perform authentication and\nrole verification, preprocess requests, and catch exceptions. You can also\ninsert specific business logic into the built-in processing logic (including\nroute matching, resource addressing, header injection, page rendering, and\nstatic web hosting).","routePath":"/en/apis/app/hooks/server/index_","lang":"en","toc":[],"domain":"","frontmatter":{"title":"index.[tj]s","sidebar_position":1},"version":""},{"id":13,"title":"test.[tj]s","content":"#\n\nCustom Web Server test directory.\n\nThe application supports testing custom Web Server. You can directly create\nfiles with the suffix .test.[tj]s under the server/ directory of the project to\nwrite test cases.\n\nINFO\n\nEnabling unit testing and integration testing requires running the new command\nto enable the \"Unit Testing/Integration Testing\" function under the project\nfirst.","routePath":"/en/apis/app/hooks/server/test","lang":"en","toc":[],"domain":"","frontmatter":{"title":"test.[tj]s","sidebar_position":2},"version":""},{"id":14,"title":"shared/","content":"#\n\nShared source code directory. When there is common code in api/, server/, and\nsrc/ in the project, you can put these codes in the shared directory instead of\ndirectly referencing them.","routePath":"/en/apis/app/hooks/shared","lang":"en","toc":[],"domain":"","frontmatter":{"title":"shared/","sidebar_position":5},"version":""},{"id":15,"title":"App.[tj]sx","content":"#\n\nThe identifier for the entry points when the application uses Self-controlled\nRouting.\n\nApp.[tj]sx is not the actual entry. Modern.js will generate the real entry for\napplication. The content is roughly as follows:\n\n\n\nNOTE\n\nIn the multi-entry scenario, each entry can have its own App.[jt]sx. See Entries\nfor details.","routePath":"/en/apis/app/hooks/src/app","lang":"en","toc":[],"domain":"","frontmatter":{"title":"App.[tj]sx","sidebar_position":1},"version":""},{"id":16,"title":"index.[tj]s","content":"#\n\nThe identifier for the entry point when the application uses custom bootstrap.\n\nIn general, the App.[tj]sx hook file can already meet our needs. When we need to\nadd custom behavior before bootstrap or completely take over the webpack\npackaging entry, we can place index.[tj]s in the src or entry directory. There\nare two cases below:\n\n\nAdd custom behavior before bootstrap#\n\nJust export a function in src/index.[tj]s:\n\n\n\n\nCompletely take over the webpack entry#\n\nWhen there is no default export function in src/index.[tj]sx?, the file is the\nreal webpack packaging entry file and the code can be organized directly as\nusing create-react-app and other scaffolding tools:\n\n","routePath":"/en/apis/app/hooks/src/index_","lang":"en","toc":[{"text":"Add custom behavior before bootstrap","id":"add-custom-behavior-before-bootstrap","depth":2,"charIndex":338},{"text":"Completely take over the webpack entry","id":"completely-take-over-the-webpack-entry","depth":2,"charIndex":424}],"domain":"","frontmatter":{"title":"index.[tj]s","sidebar_position":4},"version":""},{"id":17,"title":"pages/","content":"#\n\nThe identifier for the entry point when the application uses the Pages entry\ntype.\n\nINFO\n\nCompatible with Modern.js 1.0 Pages entry. It is recommended to use conventional\nrouting.\n\nWhen the project structure is of the Pages entry type, the client-side routing\nconfiguration will be obtained by analyzing the files in the src/pages\ndirectory.\n\nFor example, the following directory structure:\n\n\n\nThe corresponding generated routing configuration is:\n\n\n\nFiles under the pages directory that meet the following conditions will not be\ntreated as routing files:\n\n * Files whose suffix is not .(j|t)sx?.\n * .d.ts type definition files.\n * Test files ending in .test.(j|t)sx? or .spec.(j|t)sx? or .e2e.(j|t)sx?.\n\nTIP\n\nIt is recommended to only write entry code in the pages directory and write\nbusiness logic in the independent features directory outside the pages\ndirectory. In this way, most of the files under the pages directory will be\nrouting files, and there is no need for additional filtering rules.\n\n\nDynamic Routing#\n\nIf the directory name of the route file is named with [], the generated route\nwill be used as a dynamic route.\n\nFor example, the following directory structure:\n\n\n\nThe corresponding generated routing configuration is:\n\n\n\nOn the basis of dynamic routing, special routing suffixes (*, ?, +) can be\nadded.\n\nFor example: src/pages/users/[id]*.tsx will result in the route /users/:id*.\n\n\nGlobal Layout#\n\nWhen the entire application needs a global layout, it can be achieved through\npages/_app.tsx. The specific writing method is as follows:\n\n\n\nThe above Component is the component matched when accessing a specific route.\n\nFor example, the following directory structure:\n\n\n\n * Accessing / corresponds to the Component component in pages/index.js.\n * Accessing /a corresponds to the Component component in pages/a/index.js.\n * Accessing /a/b corresponds to the Component component in pages/a/b/index.js.\n\nAdvantages of global layout\n * Preserve the state of the global layout when the page changes.\n * Add global styles.\n * ComponentDidCatch error handling.\n * Use defineConfig to dynamically configure the runtime configuration.\n\n\nPartial Layout#\n\nWhen developing an application, there are scenarios where sub-routes under the\nsame route share a layout.\n\nFor this scenario, Modern.js conventionally has a similar effect to global\nlayout when there is _layout.js under the directory.\n\nFor example, the following directory structure:\n\n\n\n\n\nThe Component parameter is the component corresponding to a specific accessed\nroute, for example:\n\n * Accessing /a corresponds to the Component component in pages/a/index.js.\n * Accessing /a/b corresponds to the Component component in pages/a/b/index.js.\n\nIn this way, pages/a/_layout.js can be used to meet the layout needs of shared\nroutes under the a directory.\n\n\n404 Route#\n\npages/404.[tj]sx is conventionally the default 404 route.\n\nFor example, the following directory structure:\n\n\n\nThe generated routing configuration is as follows:\n\n\n\nAll unmatched routes will be matched to pages/404.[tj]s.","routePath":"/en/apis/app/hooks/src/pages","lang":"en","toc":[{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":1005},{"text":"Global Layout","id":"global-layout","depth":3,"charIndex":1405},{"text":"Partial Layout","id":"partial-layout","depth":3,"charIndex":2148},{"text":"404 Route","id":"404-route","depth":3,"charIndex":2821}],"domain":"","frontmatter":{"title":"pages/","sidebar_position":3},"version":""},{"id":18,"title":"routes/","content":"#\n\nThe identifier for the entry point when the application uses Conventional\nRouting.\n\nConventional routing uses routes/ as the convention for the entry point and\nanalyzes the files in the src/routes directory to obtain the client-side routing\nconfiguration.\n\nAny layout.[tj]sx and page.[tj]sx under src/routes will be used as the\napplication's routes:\n\n\n\n\nBasic Example#\n\nThe directory name under routes will be used as the mapping of the route URL.\nlayout.tsx is used as the layout component and page.tsx is used as the content\ncomponent in the routing. They are the leaf nodes of the entire route. For\nexample, the following directory structure:\n\n\n\nwill generate two routes:\n\n * /\n * /user\n\n\nDynamic Routing#\n\nIf the directory name of the route file is named with [], the generated route\nwill be used as a dynamic route. For example, the following file directory:\n\n\n\nThe routes/[id]/page.tsx file will be converted to the /:id route. Except for\nthe /blog route that can be matched exactly, all other /xxx routes will be\nmatched to this route.\n\nIn the component, you can use useParams to obtain the corresponding named\nparameter.\n\nWhen using the loader function to obtain data, params will be passed as an input\nparameter to the loader function, and the corresponding parameter can be\nobtained through the attribute of params.\n\n\nLayout Component#\n\nIn the following example, a common layout component can be added to all route\ncomponents by adding layout.tsx:\n\n\n\nIn the layout component, you can use to represent the child components:\n\n\n\nNOTE\n\nis a new API in React Router 6. For details, see Outlet.","routePath":"/en/apis/app/hooks/src/routes","lang":"en","toc":[{"text":"Basic Example","id":"basic-example","depth":2,"charIndex":356},{"text":"Dynamic Routing","id":"dynamic-routing","depth":2,"charIndex":694},{"text":"Layout Component","id":"layout-component","depth":2,"charIndex":1330}],"domain":"","frontmatter":{"title":"routes/","sidebar_position":2},"version":""},{"id":19,"title":"*.[server|node].[tj]sx","content":"#\n\nUsed in the application project to place server-side code. When *.tsx and\n*.[server|node].tsx coexist, SSR will prefer to use the *.[server|node].tsx file\ninstead of the *.tsx file when rendering on the server.","routePath":"/en/apis/app/hooks/src/server","lang":"en","toc":[],"domain":"","frontmatter":{"title":"*.[server|node].[tj]sx","sidebar_position":8},"version":""},{"id":20,"title":"**/*.stories.[tj]sx","content":"#\n\nApplication project Storybook files.\n\nYou can create files in the *.stories.(js|jsx|ts|tsx|mdx) format in the project\nsource code directory src/ as Storybook files.\n\nRun the npm run dev story command in the project to use these files to debug\nrelevant content in Storybook.\n\nINFO\n\nTo use Storybook, you need to enable the \"Storybook\" mode by running the new\ncommand in the project first.","routePath":"/en/apis/app/hooks/src/stories","lang":"en","toc":[],"domain":"","frontmatter":{"title":"**/*.stories.[tj]sx","sidebar_position":7},"version":""},{"id":21,"title":"**/*.test.[tj]sx?","content":"#\n\nApplication project test files.\n\nThe application project supports creating files with the suffix .test.[tj]sx? in\nthe project source code directory (src) to write test cases.\n\nINFO\n\nTo use unit testing and integration testing, you need to enable the \"Unit\nTesting / Integration Testing\" feature by running the new command in the project\nfirst.","routePath":"/en/apis/app/hooks/src/test","lang":"en","toc":[],"domain":"","frontmatter":{"title":"**/*.test.[tj]sx?","sidebar_position":6},"version":""},{"id":22,"title":"defineConfig","content":"#\n\nFor dynamically configuring applications runtime features.\n\n\nUsage#\n\n\n\nRuntime configurations can usually be configured under the runtime of the\nmodern.config.js, such as the router configuration.\n\nThe configuration in modern.config.js is determined at build time, If some\nconfiguration parameters are obtained at runtime, or if the configuration\nparameters are from a module (such as a component), then need use defineConfig\nAPI configuration on runtime.\n\nINFO\n\n@modern-js/app-tools has the same name API, Used to provide TS type for\nconfiguration, please distinguish them.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * Component: App root Component.\n * config: runtime config.\n\n\nExample#\n\n\n\n 1. defineConfig can configuring runtime.state、runtime.router etc.\n\n 2. defineConfig before configuring a property, such as router, you need to make\n    sure that the modern.config.js has been configured to enable this feature.\n\n 3. defineConfig incoming configuration will be merged with the configuration in\n    modern.config.js. Taking router as an example, the final application\n    configuration is as follows:\n\n","routePath":"/en/apis/app/runtime/app/define-config","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":63},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":579},{"text":"Input","id":"input","depth":3,"charIndex":603},{"text":"Example","id":"example","depth":2,"charIndex":674}],"domain":"","frontmatter":{"title":"defineConfig"},"version":""},{"id":23,"title":"hook","content":"#\n\nUsed to add framework middleware under BFF function mode, the middleware will\nexecute before BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * options: a range of hooks provided by Modern.js.\n   * addMiddleware: add middlewares for BFF.\n\n\nExample#\n\nmiddleware for different frameworks should be different(an example is when using\nthe koa framework):\n\n","routePath":"/en/apis/app/runtime/bff/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":111},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":206},{"text":"Input","id":"input","depth":3,"charIndex":230},{"text":"Example","id":"example","depth":2,"charIndex":337}],"domain":"","frontmatter":{"title":"hook"},"version":""},{"id":24,"title":"useContext","content":"#\n\nUsed to get the request context in the BFF function.\n\n\nUsage#\n\naccording to the framework extend plugin, export from the corresponding\nnamespace:\n\n\n\n\nFunction Signature#\n\nfunction useContext(): any\n\n\nExample#\n\nDevelopers can get more request information through context, such as browser\nUA(an example is when using the koa framework):\n\n\n\nCAUTION\n\nonly in BFF function, useContext API can be used.\n\nAlthough the useContext API is supported in any framework extend plugin, the\ntypes of return values are different.","routePath":"/en/apis/app/runtime/bff/use-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":57},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":152},{"text":"Example","id":"example","depth":2,"charIndex":202}],"domain":"","frontmatter":{"title":"useContext"},"version":""},{"id":25,"title":"bootstrap","content":"#\n\nUsed to start and mount App, usually not manually called. This API is only\nrequired when using Custom Bootstrap.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * AppComponent: The ReactElement instance created by createApp.\n * rootId: DOM root element id to mount, such as \"root\".\n * root: The return value of ReactDOM.createRoot, used for scenarios where the\n   root needs to be destroyed outside of the bootstrap function.\n * ReactDOM: The ReactDOM object, used to differentiate between React 18 and\n   React 17 APIs.\n\n\nExample#\n\n\n\nINFO\n\nsince @modern-js/runtime/plugins is a alias, when used in a ts project, its type\nneeds to be declared, Just add the following type declarations to\nsrc/modern-app-env.d.ts:\n\n\n\nWARNING\n\nbootstrap only supported for use in CSR.","routePath":"/en/apis/app/runtime/core/bootstrap","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":117},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":128},{"text":"Input","id":"input","depth":3,"charIndex":152},{"text":"Example","id":"example","depth":2,"charIndex":523}],"domain":"","frontmatter":{"title":"bootstrap"},"version":""},{"id":26,"title":"createApp","content":"#\n\nUsed to create custom entries, custom runtime plugins. This API is only required\nwhen using Custom App.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * options: optional configuration.\n   * plugins: custom plugin extensions.\n\n\nExample#\n\n\nCreate Custom Entry#\n\nFor details, see bootstrap.\n\n\nCustom Plugins#\n\n","routePath":"/en/apis/app/runtime/core/create-app","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":108},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":119},{"text":"Input","id":"input","depth":3,"charIndex":143},{"text":"Example","id":"example","depth":2,"charIndex":229},{"text":"Create Custom Entry","id":"create-custom-entry","depth":3,"charIndex":240},{"text":"Custom Plugins","id":"custom-plugins","depth":3,"charIndex":292}],"domain":"","frontmatter":{"title":"createApp"},"version":""},{"id":27,"title":"useLoader","content":"#\n\nuseLoader is an Isomorphic API, usually used to make asynchronous requests.\nDuring Server-Side Rendering (SSR), the server uses useLoader to prefetch the\ndata, which is then reused on the client side.\n\nTIP\n\nThe useLoader API is currently not supported when using Rspack as the bundler.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\n\n\nINFO\n\nruntimeContext can refer to useRuntimeContext.\n\n\nInput#\n\n * loaderFn: function for loading data, returning a Promise.\n * options: optional configuration.\n   * onSuccess: successful callback.\n   * onError: error callback.\n   * initialData: the initial data before the first execution,.\n   * skip: when the value is true, the function does not execute.\n   * params: when the result of the params serialization changes, the function\n     is re-executed. params is also passed in as the second argument of the\n     function.\n   * static: when the value is true, useLoader is used for SSG.\n\n\nReturn Value#\n\n * data: return data on successful execution.\n * loading: indicates whether the function is in execution.\n * error: error message when function execution fails.\n * reload: the function can be re-executed after the call.\n   * params: when the value is undefined, the last value will be reused;\n     otherwise, the function will be re-executed with the new value.\n * reloading: during the execution of the call to reload, the value of reloading\n   is true.\n\n\nExample#\n\n","routePath":"/en/apis/app/runtime/core/use-loader","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":290},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":301},{"text":"Input","id":"input","depth":3,"charIndex":379},{"text":"Return Value","id":"return-value","depth":3,"charIndex":917},{"text":"Example","id":"example","depth":2,"charIndex":1389}],"domain":"","frontmatter":{"title":"useLoader"},"version":""},{"id":28,"title":"useModuleApps","content":"#\n\nReturns the React components of all micro-front-end sub-applications, allowing\nfor flexible control over routing.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\nfunction useModuleApps(): Record>\n\nReturns the React components wrapped around each subapp.\n\n\nExample#\n\nYou need to configure the micro-front-end sub-application information first.\n\n\n\n\n\nGet the Home and Contact sub-application components(the same as name in the\nconfig) through useModuleApps(). After that, you can load the child application\njust like a normal React component.\n\n\nCentralized Routing#\n\nCentralized Routing is a way to centrally configure the activation routes of\nsub-applications. Add activeWhen config to enable Centralized Routing.\n\n\n\nThen use the useModuleApp method to get the MApp component in the main\napplication, and render the MApp in the main application.\n\n\n\nAfter starting the application in this way, accessing the /dashboard route will\nrender the Dashboard, and accessing the /table route will render the TableList.\n\n\nLoad Animation#\n\nYou can customize the transition animation of the component loading process as\nfollows.\n\n","routePath":"/en/apis/app/runtime/core/use-module-apps","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":118},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":129},{"text":"Example","id":"example","depth":2,"charIndex":244},{"text":"Centralized Routing","id":"centralized-routing","depth":3,"charIndex":530},{"text":"Load Animation","id":"load-animation","depth":2,"charIndex":997}],"domain":"","frontmatter":{"title":"useModuleApps"},"version":""},{"id":29,"title":"useRuntimeContext","content":"#\n\nUsed to get the runtime context and can only be used in function components.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\n\n\n\nReturn Value#\n\n * request: additional information in the request context.\n   * params: dynamic parameters in the request path.\n   * pathname: the pathname of the request.\n   * query: the query of the request.\n   * headers: the header info of the request.\n   * cookie: the cookie of the request.\n * store: when the runtime.state is enabled, this value is the Reduck global\n   store.\n * router: When the runtime.router is enabled, this value exists.\n   * location: The current location reflected by the router. The same as\n     [useLocation] the return value of\n     (/apis/app/runtime/router/router.html#uselocation).\n   * navigate: Navigate to the given path. The same as the return value of\n     useNavigate.\n\n\nExample#\n\n","routePath":"/en/apis/app/runtime/core/use-runtime-context","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":81},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":92},{"text":"Return Value","id":"return-value","depth":3,"charIndex":116},{"text":"Example","id":"example","depth":2,"charIndex":828}],"domain":"","frontmatter":{"title":"useRuntimeContext"},"version":""},{"id":30,"title":"Provider","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nProvider is a component that injects Reduck's Store into the application's\ncomponent tree, making the Model accessible to components inside the component\ntree. Normally, Provider is defined at the top level of the component tree.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * store: the Store object created by createStore.\n * config: this config to create Reduck Store, same as config param in\n   createApp.\n\n\nExample#\n\n","routePath":"/en/apis/app/runtime/model/Provider","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":448},{"text":"Input","id":"input","depth":3,"charIndex":472},{"text":"Example","id":"example","depth":2,"charIndex":618}],"domain":"","frontmatter":{"sidebar_position":8,"title":"Provider"},"version":""},{"id":31,"title":"Auto actions","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nReduck can automatically generate Actions according to the type of State, for\neasy to modify State.\n\nTIP\n\ncan use runtime.state.autoActions close auto actions feature.\n\n\nExample#\n\n\nBasic Data Type#\n\nState type in string、number、boolean、null, generate setState Action.\n\n\n\n\nArray#\n\nState type is Array, generate the following Actions:\n\n * push: adds one or more elements to the end of the array.\n * pop: removes the last element from the array.\n * shift: removes the first element from the array.\n * unshift: adds one or more elements to the beginning of the array.\n   * usage: arr.unshift(element1, ..., elementN)\n   * elementN: the element or elements to add to the beginning of the array.\n * filter: filter element.\n\n * concat: concat array.\n\n * splice: modify the array by deleting or replacing existing elements or adding\n   new elements in place, and return the modified array(Note that it is\n   different from the native splice return value).\n   * usage: splice(start[, deleteCount[, item1[, item2[, ...]]]])\n   * start: specifies the start position of the modification(counting from 0).\n   * deleteCount: an integer representing the number of array elements to\n     remove.\n   * item, item2, ...: The elements to add to the array, starting at the start\n     position. If not specified, splice will only delete array elements.\n\n\n\n\nPlainObject#\n\nState type is PlainObject, base on the names contained in State, generate\nset${key}(Camel-Case) Actions.\n\n","routePath":"/en/apis/app/runtime/model/auto-actions","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":386},{"text":"Basic Data Type","id":"basic-data-type","depth":3,"charIndex":397},{"text":"Array","id":"array","depth":3,"charIndex":487},{"text":"PlainObject","id":"plainobject","depth":3,"charIndex":1551}],"domain":"","frontmatter":{"sidebar_position":6,"title":"Auto actions"},"version":""},{"id":32,"title":"connect","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see connect.\n\nConnect is the same as useModel and is the corresponding HOC-style API. It is\nrecommended to use the Hook-style useModel first.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * models: passed one or more Models. When models is an array type parameter,\n   the last two params can be a function for filtering State (SelectStateToProps\n   type) and a function for filtering Actions (SelectActionsToProps type).\n   \n   * SelectStateToProps: modelStates is an array of the State of the passed\n     Model object, ownProps is the props received by current component. The data\n     returned by SelectStateToProps is passed to the props of the component.\n     When the SelectStateToProps parameter is not passed in models, the States\n     of all Models are merged and passed to the props of the component.\n   \n   * SelectActionsToProps: modelActions is an array of the Action of the passed\n     Model object, ownProps is the props received by current component. returned\n     by SelectActionsToProps is passed to the props of the component. When the\n     SelectActionsToProps parameter is not passed in models, the Action of all\n     Models are merged and passed to the props of the component.\n\n * options: Optional parameter for auxiliary configuration. Currently supports\n   setting forwardRef, which is used to control whether to forward the ref of\n   the component. The default value is false, which means that the ref is not\n   forwarded. Set to { forwardRef: true }, which means to forward ref.\n\n\nReturn Type#\n\nReturns a HOC: receives an component, returns a component with extra State and\nActions injected on props.\n\n\nExample#\n\n\nBasic#\n\n\n\n\nSelect State & Actions#\n\n\n\n\nForwarding Ref#\n\n","routePath":"/en/apis/app/runtime/model/connect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":497},{"text":"Input","id":"input","depth":3,"charIndex":521},{"text":"Return Type","id":"return-type","depth":3,"charIndex":1849},{"text":"Example","id":"example","depth":2,"charIndex":1971},{"text":"Basic","id":"basic","depth":3,"charIndex":1982},{"text":"Select State & Actions","id":"select-state--actions","depth":3,"charIndex":1993},{"text":"Forwarding Ref","id":"forwarding-ref","depth":3,"charIndex":2021}],"domain":"","frontmatter":{"sidebar_position":5,"title":"connect"},"version":""},{"id":33,"title":"createApp","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nReduck will call createApp to create a global application by default. If the\nentire application only needs one Store, then there is no need to call createApp\nmanually.Only need to use createApp when you need to create a Store locally in\nthe app.\n\nCAUTION\n\nNote that the exported createApp in @modern-js/runtime/model is used to manage\nstate, while the exported createApp in @modern-js/runtime is used to create the\nentire application. The two are differently.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * config\n   * StoreConfig: the same as createStore params.\n   * devTools: the default value is true. when it is an object type, configuring\n     Options of Redux DevTools.\n   * autoActions: the default value is true.if auto generate Actions.\n\n\nReturn Value#\n\nReduck App, consists of the following properties:\n\n * Provider: inject shared Store into locally component tree, same as Provider.\n * useModel: get the Model mounted by the app's local Store, same as useModel.\n * useStaticModel: get the Model mounted by the app's local Store. same as\n   useStaticModel.\n * useLocalModel: get the Model mounted by the app's local Store. same as\n   useLocalModel.\n * useStore: get the Store used locally by the app. same as useStore.\n\n\nExample#\n\nuse createApp, local states can be created to isolate the states between\ndifferent Reduck applications.\n\n","routePath":"/en/apis/app/runtime/model/create-app","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":678},{"text":"Input","id":"input","depth":3,"charIndex":702},{"text":"Return Value","id":"return-value","depth":3,"charIndex":955},{"text":"Example","id":"example","depth":2,"charIndex":1438}],"domain":"","frontmatter":{"sidebar_position":11,"title":"createApp"},"version":""},{"id":34,"title":"createStore","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\ncreateStore is used to create a Store. Reduck’s Store based on Redux's Store\nimplementatio. Used to store the state of the application and managing the state\nand Model.\n\nIn general, this API is only used when you need to have full control over the\ncreation of the Store. For example, to customize a Store, pass in the 'Provider'\ncomponent to use.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * config: store options.\n   * initialState: set the initial state for store.\n   * models: set the Model to mount to the Store in advance(No need for normal\n     use).\n   * middlewares: set Redux middleware.\n   * enhancers: set Redux Store enhancer.\n   * plugins: set Reduck plugin.experimental API, not recommended.\n\n\nReturn Value#\n\nReduck Store:\n\n * use: mount and fetch Model objects dynamically. Usage is the same as\n   'useModel', but can be used outside of React components.\n * unmount: unmount the Model object, and the Model State is cleared from the\n   Store.\n * ReduxStore: Redux Store API.\n\n\nExample#\n\n","routePath":"/en/apis/app/runtime/model/create-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":565},{"text":"Input","id":"input","depth":3,"charIndex":589},{"text":"Return Value","id":"return-value","depth":3,"charIndex":916},{"text":"Example","id":"example","depth":2,"charIndex":1200}],"domain":"","frontmatter":{"sidebar_position":10,"title":"createStore"},"version":""},{"id":35,"title":"handleEffect","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nAn asynchronous function type Effect usually has three states that need to be\nprocessed: in request, request successful, and request failed. The way to handle\nthese states is to write the Action functions (pending, fulfilled, rejected).\n\nWith the help of the handleEffect API, we can generate default Action functions\nto handle different results at each stage of an asynchronous request. The\nstructure of the State returned by the Action generated by handleEffect is as\nfollows:\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * ns: the default returned State structure is flat, By setting this parameter,\n   the returned State can be mounted under the field named by the ns. For\n   example, if ns is set to \"data\", the returned structure is:\n\n\n\n * result: the default value is \"result\". This parameter corresponds to the\n   field name that stores the fulfilled state results. For example, set result\n   to \"items\", the returned State structure is:\n\n\n\nif result is false, then returned State has no result:\n\n\n\n * pending: the default value is \"pending\". Change the name of the pending field\n   in the returned State. Usage is the same as result.\n\n * error: the default value is \"error\". Change the name of the error field in\n   the returned State. Usage is the same as result.\n\n * combineMode: the default value is \"merge\". Get fulfilled state results. There\n   are two ways to deal with it (The data types that can be automatically\n   processed here are also limited to simple object or array types):\n   \n   * \"merge\": the previous data is merged with the current data. the data is an\n     array type, operation is similar to [].concat(lastData, currentData). the\n     data is an object, operation is similar to {...lastData, ...curData}.\n   * \"replace\": the current data directly replaces the previous data.\n\n * omitResultNamespace: the default value is false. When the result is an object\n   type, you want to mount the result directly on the State of the Model, rather\n   than on \"result\", you can set it to true. For example:\n\n\n\n\nReturn Type#\n\nObjects are processed by actions in pending, fulfilled, and rejected states.\n\nMore\n\nManage Effect.","routePath":"/en/apis/app/runtime/model/handle-effect","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":699},{"text":"Input","id":"input","depth":3,"charIndex":723},{"text":"Return Type","id":"return-type","depth":3,"charIndex":2240}],"domain":"","frontmatter":{"sidebar_position":7,"title":"handleEffect"},"version":""},{"id":36,"title":"model","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nmodel#\n\nCreate a Model for managing application state.\n\nfunction model(name: string): { define: function }\n\n * name: string, the unique id of the Model created.\n\n\n\n\ndefine#\n\nUsed to define the detailed structure of the Model, supporting passing in an\nobject type or function type parameter.\n\n\nObject Type#\n\nfunction define(modelDesc: ModelDesc): Model;\n\n * modelDesc: ModelDesc, definition of Model structure, includes\n   state、computed、actions、effects etc. props.\n\n\n\n\nFunction Type#\n\nfunction define((context: Context, utils: Utils) => ModelDesc): Model;\n\n * context: Reduck Context, can get underlying store object. store support all\n   Redux Store API, also mounts the use method for consuming the Model, and the\n   unmount method for unmounting the Model.\n * utils: commonly used tool like use、onMount. use is the same as store.use,\n   onMount is the hook function after the Model is mounted.\n\n\n\nFor example, through use, you can get the state and actions of the Model itself\nand other Models.\n\n\n\n\nInput#\n\nModelDesc.state#\n\nDefine the state of the Model. Technically, any type of State is supported, but\nin practice it is recommended to use a JSON serializable type.\n\n\n\nModelDesc.actions#\n\nDefine the Actions of the Model. The function type of Actions is:\n\n\n\nReduck internally integrates immer, which can directly return the original\nstate. When the Action has no explicit return value, Reduck internally returns a\nmodified new State object.\n\nModelDesc.computed#\n\nDefines the derived state of the Model. The definition of derived state supports\ntwo types:\n\n 1. Depends only on the state of the Model itself\n\n\n\n 2. Depends on the state of other Models\n\n\n\n\n\nModelDesc.effects#\n\nDefines the Effects of the Model. The function types defined in Effects are:\n\n\n\n\n\nMore\n\nDefine Model.","routePath":"/en/apis/app/runtime/model/model_","lang":"en","toc":[{"text":"model","id":"model-1","depth":2,"charIndex":-1},{"text":"define","id":"define","depth":2,"charIndex":531},{"text":"Object Type","id":"object-type","depth":3,"charIndex":659},{"text":"Function Type","id":"function-type","depth":3,"charIndex":835},{"text":"Input","id":"input","depth":3,"charIndex":1368},{"text":"ModelDesc.state","id":"modeldescstate","depth":4,"charIndex":1376},{"text":"ModelDesc.actions","id":"modeldescactions","depth":4,"charIndex":1540},{"text":"ModelDesc.computed","id":"modeldesccomputed","depth":4,"charIndex":1813},{"text":"ModelDesc.effects","id":"modeldesceffects","depth":4,"charIndex":2026}],"domain":"","frontmatter":{"sidebar_position":1,"title":"model"},"version":""},{"id":37,"title":"useLocalModel","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTo use the State in the Model as a local state, the effect is similar to React's\nuseState. useLocalModel API same as useModel. For detail, see useModel.\n\n\nExample#\n\n\n\nmodelA was loaded twice with useLocalModel above, because useLocalModel consumes\nlocal state, so state and state1 are also completely isolated.\n\nMore\n\nUse Model.","routePath":"/en/apis/app/runtime/model/use-local-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":371}],"domain":"","frontmatter":{"sidebar_position":4,"title":"useLocalModel"},"version":""},{"id":38,"title":"useModel","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nTIP\n\nThe original type of Reduck is complex. The following type definition shows the\nsimplified type information. For the original type, see model.\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * models: Array of Model objects, which can be passed in as an array type\n   parameter, or all Models can be passed in as parameters one by one.\n * stateSelector: Optional parameters, used to filter State calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the first element of the useModel return value array.\n * actionSelector: Optional parameters, used to filter Action calculations. The\n   first n parameters are the States corresponding to n Models, and the returned\n   data is used as the second element of the useModel return value array.\n\n\nReturn Value#\n\nReturns an array with each value:\n\n * state: return value of stateSelector. if there is no stateSelector, will\n   combine all incoming Model States(including derived states) and return them.\n   If there is an attribute of the same name in the State of different Models,\n   the following State will override the previous State. when state changes, the\n   component call useModel will re-render.\n * actions: return value of actionSelector. if there is no actionSelector, will\n   combine all incoming Model Action(including Effect) and return them. If there\n   is an attribute of the same name in the Action of different Models, the\n   following Action will override the previous Action.\n * subscribe: A function that subscribes to State changes. This function is\n   called when the State of any Model passed in changes.\n\n\nExample#\n\n\nBasic#\n\n\n\n\nSelector Usage#\n\n\n\nMore\n\nuse Model.","routePath":"/en/apis/app/runtime/model/use-model","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":366},{"text":"Input","id":"input","depth":3,"charIndex":390},{"text":"Return Value","id":"return-value","depth":3,"charIndex":1013},{"text":"Example","id":"example","depth":2,"charIndex":1848},{"text":"Basic","id":"basic","depth":3,"charIndex":1859},{"text":"Selector Usage","id":"selector-usage","depth":3,"charIndex":1870}],"domain":"","frontmatter":{"sidebar_position":2,"title":"useModel"},"version":""},{"id":39,"title":"useStaticModel","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nIf want to consume a Model in the form of React Hook in the component, and can\nget the current latest state at any time, but you don't want the Model state to\nbe updated, which will cause the component to be re-rendered, we can use\nuseStaticModel.\n\nuseStaticModel API is same as useModel.For detail, see useModel.\n\nTo ensure that the latest state is always available, be careful not to\ndeconstruct the returned state.\n\n\n\n\nExample#\n\nThe following App component consumes the userModel state, but does not use it\ndirectly in JSX. It can be found that changes in the userModel state do not\nnecessarily cause the component to re-render. This situation can be optimized\nusing useStaticModel.\n\n\n\nMore\n\nUse Model.","routePath":"/en/apis/app/runtime/model/use-static-model","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":638}],"domain":"","frontmatter":{"sidebar_position":3,"title":"useStaticModel"},"version":""},{"id":40,"title":"useStore","content":"#\n\ninformation\n\nBy default, the export package name for all APIs in this section is:\n@modern-js/runtime/model.\n\nIf Reduck is integrated separately from Modern.js, the export package name is:\n@modern-js-reduck/react.\n\nuseStore Used to get the store shared by the current component tree.\n\n\nFunction Signature#\n\n\n\n\nReturn Type#\n\n * ReduckStore: Reduck Store, type refer to the return type of createStore.\n\nMore\n\nUse Model.","routePath":"/en/apis/app/runtime/model/use-store","lang":"en","toc":[{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":287},{"text":"Return Type","id":"return-type","depth":3,"charIndex":311}],"domain":"","frontmatter":{"sidebar_position":9,"title":"useStore"},"version":""},{"id":41,"title":"router","content":"#\n\nINFO\n\nThe router solution based on react-router 6.\n\n\nhooks#\n\n\nuseNavigate#\n\n\n\nThe useNavigate hook returns a function that lets you navigate programmatically.\n\n\n\n\nuseLocation#\n\n\n\nThe useLocation hook returns the current location object. A new location object\nwould be returned whenever the current location changes.\n\n\n\n\nuseParams#\n\n\n\nThe useParams hook returns an object of key/value pairs of the dynamic params\nfrom the current URL that were matched by the .\n\n\n\n\nuseRouteError#\n\n\n\nuseRouteError returns the nearest ancestor Route error。\n\n\n\n\nComponents#\n\n\nLink#\n\n\n\nA is an element that lets the user navigate to another page by clicking or\ntapping on it.\n\n\n\n\nNavLink#\n\n\n\nA is a special kind of that knows whether or not it is \"active\".\n\n\nOutlet#\n\n\n\nAn should be used in parent route elements to render their child route elements.\nThis allows nested UI to show up when child routes are rendered.\n\n\n\n\nRoute#\n\n\n\nRoute represents the route information. A Route object couples URL segments to\ncomponents, data loading and data mutations.\n\nRoute can be used as a plain object, passing to the router creation functions:\n\n\n\nYou can also declare your routes with JSX and createRoutesFromElements, the\nprops to the element are identical to the properties of the route objects:\n\n\n\n\nMore#\n\nYou can access to React Router to get the full API information.","routePath":"/en/apis/app/runtime/router/router","lang":"en","toc":[{"text":"hooks","id":"hooks","depth":2,"charIndex":55},{"text":"useNavigate","id":"usenavigate","depth":3,"charIndex":64},{"text":"useLocation","id":"uselocation","depth":3,"charIndex":165},{"text":"useParams","id":"useparams","depth":3,"charIndex":322},{"text":"useRouteError","id":"userouteerror","depth":3,"charIndex":466},{"text":"Components","id":"components","depth":2,"charIndex":544},{"text":"Link","id":"link","depth":3,"charIndex":558},{"text":"NavLink","id":"navlink","depth":3,"charIndex":661},{"text":"Outlet","id":"outlet","depth":3,"charIndex":740},{"text":"Route","id":"route","depth":3,"charIndex":901},{"text":"More","id":"more","depth":2,"charIndex":1273}],"domain":"","frontmatter":{"title":"router","sidebar_position":1},"version":""},{"id":42,"title":"NoSSR","content":"#\n\nThe content wrapped by NoSSR will not be rendered at the server, nor will it be\nrendered during the client side hydrate. it will only be rendered immediately\nafter the entire app is rendered.\n\n\nUsage#\n\n\n\n\nExample#\n\nIn the following code, the Time component is used to display the current time.\nSince the time obtained by server-side rendering and client side hydrate are\ndiff, React will throw an exception. For this case, you can use NoSSR to\noptimize:\n\n\n\n\nScene#\n\nIn CSR, it is often necessary to render different content according to the\nbrowser UA, or a parameter of the current page URL. If the application switches\ndirectly to SSR at this time, it is very likely that the results will not meet\nthe expectations.\n\nModern.js provides complete browser side information in the SSR context, which\ncan be used to determine the rendering result of the component on the server\nside.\n\nEven so, if there is too much logic in the application, or the developer wants\nto use the context later, or does not want some content to be rendered at the\nserver side. developer can use the NoSSR component to exclude this part from\nserver-side rendering.","routePath":"/en/apis/app/runtime/ssr/no-ssr","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":196},{"text":"Example","id":"example","depth":2,"charIndex":207},{"text":"Scene","id":"scene","depth":2,"charIndex":460}],"domain":"","frontmatter":{"title":"NoSSR"},"version":""},{"id":43,"title":"PreRender","content":"#\n\nA Helmet-like HOC without content implements SPA routing-level caching, manner\nwithout additional configuration.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\nThe PreRender provides a set of configuration for controlling caching rules,\nexpiration times, caching algorithms, and more.\n\n\n\n\nInput#\n\n * interval: set the time the cache keep fresh, seconds. During this time, the\n   cache will be used directly and not invoke asynchronous rendering.\n * staleLimit: sets the time when the cache is completely expired,\n   seconds.During this time, The cache can be returned and asynchronous\n   rendering will be invoke, otherwise must wait for the re-rendered result.\n * level: sets the calculation rule level for the cache identity, usually used\n   with includes and matches. The default value is 0.\n\n\n\n * includes: sets the content that needs to be included in the cache identifier,\n   used when the level is not 0. The default value is null.\n * matches: sets the rewriting rule for the value of query or header in cache\n   identity, usually used in cache category, supports regular expressions. The\n   default value is null.\n\n\nExample#\n\n\n\nThe following example shows how to add the parameters in the query and header\ninto the cache identifier calculation:\n\n\n\nThe following example shows how not to let the test channel affect the online\ncache:\n\n","routePath":"/en/apis/app/runtime/ssr/pre-render","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":117},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":128},{"text":"Input","id":"input","depth":3,"charIndex":278},{"text":"Example","id":"example","depth":2,"charIndex":1113}],"domain":"","frontmatter":{"title":"PreRender"},"version":""},{"id":44,"title":"CSS-In-JS API","content":"#\n\nUse Style Component to write CSS.\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\nsee styled-component API.\n\n\nExample#\n\n","routePath":"/en/apis/app/runtime/utility/css-in-js","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":49},{"text":"Example","id":"example","depth":2,"charIndex":98}],"domain":"","frontmatter":{"title":"CSS-In-JS API"},"version":""},{"id":45,"title":"Head","content":"#\n\nUsed to add html elements (such as title, meta, script, etc.) to the element,\nsupports SSR.\n\n\nUsage#\n\n\n\n\nExample#\n\n\n\n\nMore#\n\nFor detail, see react-helmet.","routePath":"/en/apis/app/runtime/utility/head","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":96},{"text":"Example","id":"example","depth":2,"charIndex":107},{"text":"More","id":"more","depth":2,"charIndex":120}],"domain":"","frontmatter":{"title":"Head"},"version":""},{"id":46,"title":"loadable","content":"#\n\nUsed to create Loadable component\n\n\nUsage#\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\nloadFn#\n\nUsed to load component.\n\n\n\noptions.resolveComponent#\n\nType: (module: Module, props: Props) => React.ComponentType\n\nmodule is the component returned by loadFn, and props is the props parameter\naccepted by the component.\n\nBy default, we think that the default export of file is a react component, so we\ncan render the component directly. But when the component is named export, or we\nneed to dynamically determine which component needs to be rendered according to\nthe props, we can use resolveComponent. Here is an example:\n\n\n\n\n\noptions.fallback#\n\nWhether to display fallback content during loading.\n\noptions.ssr#\n\nWhether to support SSR, the default value is true.\n\n\nReturn Value#\n\nLoadableComponent#\n\n","routePath":"/en/apis/app/runtime/utility/loadable","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":38},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":49},{"text":"Input","id":"input","depth":3,"charIndex":73},{"text":"loadFn","id":"loadfn","depth":4,"charIndex":81},{"text":"options.resolveComponent","id":"optionsresolvecomponent","depth":4,"charIndex":117},{"text":"options.fallback","id":"optionsfallback","depth":4,"charIndex":617},{"text":"options.ssr","id":"optionsssr","depth":4,"charIndex":689},{"text":"Return Value","id":"return-value","depth":3,"charIndex":756},{"text":"LoadableComponent","id":"loadablecomponent","depth":4,"charIndex":771}],"domain":"","frontmatter":{"title":"loadable"},"version":""},{"id":47,"title":"Hook","content":"#\n\nUsed to extend Modern.js built-in Web Server, all page requests are handled by\nthese hooks.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\n\n\n\nFunction Signature#\n\n\n\ndifferent Hooks additionally provide different contexts. Currently Modern.js\nsupport AfterMatch and AfterRender.\n\n\n\n\nInput#\n\n * context: Hook context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * router: provides methods on routing.\n   * template: provides methods on content.\n * next: call next listener (not affect the server process, only current hook).\n\n\nExample#\n\n\nRedirect#\n\nRedirect to pages outside the site, for example to login page:\n\n\n\n\nRewrite#\n\nRewrite to pages of the current site, for example, the same route returns pages\nthat are adapted to different UA:\n\n\n\n\nHTML Inject#\n\nInject some HTML content to the page, such as scripts, page skeletons, etc.:\n\n","routePath":"/en/apis/app/runtime/web-server/hook","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":143},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":273},{"text":"Input","id":"input","depth":3,"charIndex":413},{"text":"Example","id":"example","depth":2,"charIndex":748},{"text":"Redirect","id":"redirect","depth":3,"charIndex":759},{"text":"Rewrite","id":"rewrite","depth":3,"charIndex":837},{"text":"HTML Inject","id":"html-inject","depth":3,"charIndex":965}],"domain":"","frontmatter":{"title":"Hook"},"version":""},{"id":48,"title":"Middleware","content":"#\n\nUsed to extend the built-in Web Server of Modern.js, unlike Hook, Middleware can\ndirectly operate Node's origin request and response, and can be extended using\nthe framework plugin.\n\nNOTE\n\nIn the next major release, Modern.js will use new middleware to replace this\napproach.\n\nIt is recommended to use UnstableMiddleware to handle page requests.\n\nNOTE\n\nFor more detail, see Extend Web Server.\n\n\nUsage#\n\n\n\nINFO\n\nBefore using this API, please execute pnpm run new to create a new \"Custom Web\nServer\" source code directory.\n\n\n\n\nFunction Signature#\n\n\n\n\nInput#\n\n * context: Middleware context.\n   * response: provides a series of methods to process the response.\n   * request: provides a series of methods to get request info.\n   * source: provides Node.js native req and res object.\n * next: call next listener (not affect the server process, only current hook).\n\nWARNING\n\nThe execution of the next function does not affect built-in processes, only\ncontrols whether the next middleware executes. Rendering processes are\ninterrupted only when the response is written.\n\n\nExample#\n\n\nTracking#\n\n\n\n\nInject Tools & Data#\n\nModern.js provides res.locals to store local variables for the current request.\n\n\n\n\nFramework Extension#\n\nMiddleware can also use runtime framework extensions like BFF.\n\nWhen using framework runtime extensions, type information is exported from\n@modern-js/runtime/{namespace}. Middleware can use framework syntax, such as\nframework middleware writing, the following is pseudo-code:\n\n\n\nBy default, the framework extension capability of Web Server is turned off after\ninstalling the framework extension plugin. If you want to use the framework\nextension, you can turn it on through 'server.enableFrameworkExt'.\n\nINFO\n\nThe type name exported by the framework extension may not 'Middleware', but is\nnamed by the framework extension plugin.","routePath":"/en/apis/app/runtime/web-server/middleware","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":397},{"text":"Function Signature","id":"function-signature","depth":2,"charIndex":527},{"text":"Input","id":"input","depth":3,"charIndex":551},{"text":"Example","id":"example","depth":2,"charIndex":1067},{"text":"Tracking","id":"tracking","depth":3,"charIndex":1078},{"text":"Inject Tools & Data","id":"inject-tools--data","depth":3,"charIndex":1092},{"text":"Framework Extension","id":"framework-extension","depth":3,"charIndex":1198}],"domain":"","frontmatter":{"title":"Middleware"},"version":""},{"id":49,"title":"Unstable Middleware","content":"#\n\nUsed to extend the built-in Web Server in Modern.js. UnstableMiddleware will\nreplace Middleware in the future.\n\n\nUsage#\n\n\n\n\nTypes#\n\nUnstableMiddleware\n\n\n\nUnstableMiddlewareContext\n\n\n\nUnstableNext\n\n\n\n\nExamples#\n\n\nWeb Server Timing#\n\n\n\n\nInjecting Server Data for DataLoader Consumption#\n\n\n\n\n\n\n\n\nRedirect#\n\n\n\n\nModify Response#\n\n","routePath":"/en/apis/app/runtime/web-server/unstable_middleware","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":115},{"text":"Types","id":"types","depth":2,"charIndex":126},{"text":"Examples","id":"examples","depth":2,"charIndex":202},{"text":"Web Server Timing","id":"web-server-timing","depth":3,"charIndex":214},{"text":"Injecting Server Data for DataLoader Consumption","id":"injecting-server-data-for-dataloader-consumption","depth":3,"charIndex":237},{"text":"Redirect","id":"redirect","depth":3,"charIndex":295},{"text":"Modify Response","id":"modify-response","depth":3,"charIndex":309}],"domain":"","frontmatter":{"title":"Unstable Middleware"},"version":""},{"id":50,"title":"Overview","content":"#\n\nWelcome to Modern.js blog!\n\nYou can find the latest update of Modern.js and our thought processes here.\nOccasionally we explain the infrastructure behind it.\n\n\nAnnouncing Modern.js v2: support Rspack#\n\n> Published on 16.03.2023\n\nWe are excited to announce the release of Modern.js v2!\n\nModern.js is a suite of infrastructure tools we built for web development inside\nBytedance (we call ourself Web Infra). Since we open sourced this project a\nlittle more than a year ago, there were dozens of contributors helped us on\ndevelopment; we aggregated more than 2,000 pull requests and Modern.js started\nto support build tool like Rspack, features like nested routes, Streaming SSR\nand there are more to come!\n\nWe are extremely proud of what we have achieved so far, you can also refer to\nthis article(English version under construction)👈🏻 to see what has changed\nover the last year in Modern.js.\n\n\nWhat is Streaming SSR in React 18#\n\n> Published on 16.12.2022\n\nSince React 18, React supports a new type of SSR (streaming SSR) and it brought\ntwo advantages over the React tool chain:\n\n * Streaming HTML: Server will be able to transmit HTML to browser parts by\n   parts, rather than waiting until the whole page being rendered. Client side\n   will render the page faster thus dramatically increase performance benchmark\n   scores like TTFB(Time to First Byte), FCP(First Contentful Paint) and more.\n\n * Selective Hydration: On the client side, browser can hydrate only the HTML\n   elements that has already been rendered, without needing to wait until the\n   whole page finish rendering and all the javascript bundle being loaded.\n\nTo understand its design further, check out this Github Discussion by Dan\nAbramov or watch this talk.\n\nOr read more from us at here(Further content in English under construction).\n\n\nIntroducing React Server Component in Modern.js#\n\n> Published on 01.12.2022\n\nTo explain the experimental React Server Component, the one-liner given by the\nReact Team was: zero-bundle-size React Server Components.\n\nWe agreed with the React team that this is where the whole direction will move\nforward in React. Open source maintainers and contributors inside the React\ncommunity are also actively building an eco-system around it.\n\nRead more from React team at here or more from us at here\n\n\nUpdates during Sept - Oct in 2022#\n\n> Published on 01.11.2022\n\nWe updated Modern.js to v1.21.0 during Sept - Oct. Major upgrade includes:\n\n * support pnpm v7\n * added typescript compiler option on server side\n\nRead more (English version under construction)\n\n\nUpdates during July - August in 2022#\n\n> Published on 2022.09.05\n\nModern.js upgraded to v1.17.0 during July to August in 2022. Major updates\ninclude:\n\n * Support React 18\n * Unifying packages: All the Modern.js package version numbers are unified, and\n   added version update command line in CLI.\n * Support npm module bundle building: We support bundling npm module output.\n * Reduck v1.1: We released Reduck v1.1 and updated all our documentations.\n\nRead more (English version under construction)","routePath":"/en/community/blog/overview","lang":"en","toc":[{"text":"Announcing Modern.js v2: support Rspack","id":"announcing-modernjs-v2-support-rspack","depth":2,"charIndex":162},{"text":"What is Streaming SSR in React 18","id":"what-is-streaming-ssr-in-react-18","depth":2,"charIndex":897},{"text":"Introducing React Server Component in Modern.js","id":"introducing-react-server-component-in-modernjs","depth":2,"charIndex":1812},{"text":"Updates during Sept - Oct in 2022","id":"updates-during-sept---oct-in-2022","depth":2,"charIndex":2305},{"text":"Updates during July - August in 2022","id":"updates-during-july---august-in-2022","depth":2,"charIndex":2564}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":51,"title":"Contributing Guide","content":"#\n\nThanks for that you are interested in contributing to Modern.js. Before starting\nyour contribution, please take a moment to read the following guidelines.\n\n\nSetup the Dev Environment#\n\n\nFork the Repo#\n\nFork this repository to your own GitHub account and then clone it to your local.\n\n\nInstall Node.js#\n\nWe recommend using Node.js 18. You can check your currently used Node.js version\nwith the following command:\n\n\n\nIf you do not have Node.js installed in your current environment, you can use\nnvm or fnm to install it.\n\nHere is an example of how to install the Node.js 18 LTS version via nvm:\n\n\n\n\nInstall pnpm#\n\n\n\n\nInstall Dependencies#\n\n\n\nWhat this will do:\n\n * Install all dependencies\n * Create symlinks between packages in the monorepo\n * Run the prepare script to build all packages (this will take some time, but\n   is necessary to make ensure all packages are built)\n\n> A full rebuild of all packages is generally not required after this. If a new\n> feature you are developing requires an updated version of another package, it\n> is usually sufficient to build the changed dependencies.\n\n\nSet Git Email#\n\nPlease make sure you have your email set up in . This will be needed later when\nyou want to submit a pull request.\n\nCheck that your git client is already configured the email:\n\n\n\nSet the email to global config:\n\n\n\nSet the email for local repo:\n\n\n\n\nMaking Changes and Building#\n\nOnce you have set up the local development environment in your forked repo, we\ncan start development.\n\n\nCheckout A New Branch#\n\nIt is recommended to develop on a new branch, as it will make things easier\nlater when you submit a pull request:\n\n\n\n\nBuild the Package#\n\nTo build the package you want to change, first open the package directory, then\nrun the build command:\n\n\n\nAlternatively, you can build the package from the root directory of the\nrepository using the --filter option:\n\n\n\nBuild all packages:\n\n\n\nIf you need to clean all node_modules/* in the project, run the reset command:\n\n\n\n\nTesting#\n\n\nAdd New Tests#\n\nIf you've fixed a bug or added code that should be tested, then add some tests.\n\nYou can add unit test cases in the /tests folder. The test syntax is based on\nJest and Vitest.\n\n\nRun Unit Tests#\n\nBefore submitting a pull request, it's important to make sure that the changes\nhaven't introduced any regressions or bugs. You can run the unit tests for the\nproject by executing the following command:\n\n\n\nAlternatively, you can run the unit tests of single package using the --filter\noption:\n\n\n\n\nRun E2E Tests#\n\nIn addition to the unit tests, the Modern.js also includes end-to-end (E2E)\ntests, which checks the functionality of the application as a whole.\n\nYou can run the test:e2e command to run the E2E tests:\n\n\n\nIf you need to run a specified test, you can add keywords to filter:\n\n\n\n\nLinting#\n\nTo help maintain consistency and readability of the codebase, we use a ESLint to\nlint the codes.\n\nYou can run the Linter by executing the following command:\n\n\n\n\nBenchmarking#\n\nYou can input !bench-framework or !bench-module in the comment area of the PR to\ndo benchmarking on @modern-js/app-tools and @modern-js/module-tools respectively\n(you need to have Collaborator and above permissions).\n\nYou can focus on metrics related to build time and bundle size based on the\ncomparison table output by comments to assist you in making relevant performance\njudgments and decisions.\n\nDependencies installation-related metrics base on publishing process, so the\ndata is relatively lagging and is for reference only.\n\n\nDocumentation#\n\nCurrently Modern.js provides documentation in English and Chinese. If you can\nuse Chinese, please update both documents at the same time. Otherwise, just\nupdate the English documentation.\n\nYou can find all the documentation in the packages/document folder:\n\n\n\nThis website is built with Rspress, the document content can be written using\nmarkdown or mdx syntax. You can refer to the Rspress Website for detailed usage.\n\nThe source code of Rspress can be found in this repo.\n\n\nSubmitting Changes#\n\n\nAdd a Changeset#\n\nModern.js is using Changesets to manage the versioning and changelogs.\n\nIf you've changed some packages, you need add a new changeset for the changes.\nPlease run change command to select the changed packages and add the changeset\ninfo.\n\n\n\n\nCommitting your Changes#\n\nCommit your changes to your forked repo, and create a pull request.\n\n\nFormat of PR titles#\n\nThe format of PR titles follow Conventional Commits.\n\nAn example:\n\n\n\n\nPublishing#\n\nWe use Modern.js Monorepo Solution to manage version and changelog.\n\nRepository maintainers can publish a new version of all packages to npm.\n\nHere are the steps to publish (we generally use CI for releases and avoid\npublishing npm packages locally):\n\n 1. Pull latest code from the main branch.\n 2. Install:\n\n\n\n 3. Build packages:\n\n\n\n 4. Bump version:\n\n\n\n 5. Commit the version change.\n\n","routePath":"/en/community/contributing-guide","lang":"en","toc":[{"text":"Setup the Dev Environment","id":"setup-the-dev-environment","depth":2,"charIndex":159},{"text":"Fork the Repo","id":"fork-the-repo","depth":3,"charIndex":188},{"text":"Install Node.js","id":"install-nodejs","depth":3,"charIndex":287},{"text":"Install pnpm","id":"install-pnpm","depth":3,"charIndex":599},{"text":"Install Dependencies","id":"install-dependencies","depth":3,"charIndex":617},{"text":"Set Git Email","id":"set-git-email","depth":3,"charIndex":1098},{"text":"Making Changes and Building","id":"making-changes-and-building","depth":2,"charIndex":1362},{"text":"Checkout A New Branch","id":"checkout-a-new-branch","depth":3,"charIndex":1496},{"text":"Build the Package","id":"build-the-package","depth":3,"charIndex":1638},{"text":"Testing","id":"testing","depth":2,"charIndex":1983},{"text":"Add New Tests","id":"add-new-tests","depth":3,"charIndex":1994},{"text":"Run Unit Tests","id":"run-unit-tests","depth":3,"charIndex":2188},{"text":"Run E2E Tests","id":"run-e2e-tests","depth":3,"charIndex":2501},{"text":"Linting","id":"linting","depth":2,"charIndex":2794},{"text":"Benchmarking","id":"benchmarking","depth":2,"charIndex":2965},{"text":"Documentation","id":"documentation","depth":2,"charIndex":3514},{"text":"Submitting Changes","id":"submitting-changes","depth":2,"charIndex":4006},{"text":"Add a Changeset","id":"add-a-changeset","depth":3,"charIndex":4028},{"text":"Committing your Changes","id":"committing-your-changes","depth":3,"charIndex":4286},{"text":"Format of PR titles","id":"format-of-pr-titles","depth":3,"charIndex":4382},{"text":"Publishing","id":"publishing","depth":2,"charIndex":4474}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":52,"title":"Releases","content":"#\n\n\nChangelog#\n\nPlease visit GitHub - Releases to see what has changed with each release of\nModern.js.\n\n\nVersion Specification#\n\nModern.js follows the Semantic Versioning specification.\n\n * Major version: Contains incompatible API changes.\n * Minor version: Contains backward compatible functional changes.\n * Patch version: Contains backwards compatible bug fixes\n\n\nRelease Cycle#\n\n * Modern.js generally releases an official release every Thursday.\n * If critical bugs appear, we will release a revised version on the same day.\n * We expect to keep Modern.js v2 stable and compatible, there are currently no\n   plans to release the next major version.\n\n\nVersion Upgrade#\n\nWhen you need to upgrade the Modern.js version in your project, you can use the\nmodern upgrade command, refer to Upgrade.\n\n","routePath":"/en/community/releases","lang":"en","toc":[{"text":"Changelog","id":"changelog","depth":2,"charIndex":3},{"text":"Version Specification","id":"version-specification","depth":2,"charIndex":104},{"text":"Release Cycle","id":"release-cycle","depth":2,"charIndex":366},{"text":"Version Upgrade","id":"version-upgrade","depth":2,"charIndex":655}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":53,"title":"Showcase","content":"#\n\nWelcome to the Modern.js showcase page! Here, we present a collection of\nwebsites that have been built using Modern.js.\n\nIf you have built a website using Modern.js, we would love for you to share it\nwith the community. Simply reply to the GitHub discussion thread with a link to\nyour website. We will collect content on a regular basis and display it on the\ncurrent page.\n\n\nThe Cases#","routePath":"/en/community/showcase","lang":"en","toc":[{"text":"The Cases","id":"the-cases","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_position":0},"version":""},{"id":54,"title":"Meet the Team","content":"#\n\nThe development of Modern.js is driven by ByteDance's Modern.js team and\ncommunity contributors.\n\n\nCore Team Members#\n\nThe Modern.js core team members:\n\n\nAll Contributors#\n\nThanks to the following friends for their contributions to Modern.js:","routePath":"/en/community/team","lang":"en","toc":[{"text":"Core Team Members","id":"core-team-members","depth":2,"charIndex":101},{"text":"All Contributors","id":"all-contributors","depth":2,"charIndex":156}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":55,"title":"autoLoadPlugins","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to configure whether Modern.js enables auto-registration of plugins.\n\n\nManual Registration Plugin#\n\nBy default, installing the plugin requires you to register the plugin manually\nin the modern.config.ts.\n\n\n\n\nAuto Registration plugin#\n\nIn addition to means registration, Modern.js also provides a way to\nautomatically register plugins: set the autoLoadPlugin configuration option to\ntrue.\n\n\n\nModern.js will help you automatically register the plugin by following these\nsteps\n\n 1. Modern.js maintains an official list of plugins internally.\n\n\n\n 2. Modern.js will read your package.json and collect the dependency\n    information.\n\n\n\n 3. Modern.js observes that when you install dependencies such as\n    @modern-js/plugin-tailwindcss and @modern-js/app-tools, automatic plugin\n    registration will be imported.\n\nYou can notice that this approach is relatively black-box and you are not even\naware of the process of loading the plugin. We want to expose more details to\nthe developer and be able to let the developer control the process.\n\nTherefore we recommend you to register the plugin manually.","routePath":"/en/configure/app/auto-load-plugin","lang":"en","toc":[{"text":"Manual Registration Plugin","id":"manual-registration-plugin","depth":3,"charIndex":114},{"text":"Auto Registration plugin","id":"auto-registration-plugin","depth":3,"charIndex":251}],"domain":"","frontmatter":{"sidebar_position":22},"version":""},{"id":56,"title":"enableHandleWeb","content":"#\n\n * Type: boolean\n\n * Default: false\n\nCAUTION\n\nPlease use the new command in the root directory of the current project to\nenable BFF functionality first.\n\nBy default, the BFF service can only handle requests for BFF APIs.\n\nWhen this value is set to true, page request will also pass through BFF, and the\ndefault logic for page rendering built in Modern.js will run as the last\nmiddleware of the BFF service.\n\n","routePath":"/en/configure/app/bff/enable-handle-web","lang":"en","toc":[],"domain":"","frontmatter":{"title":"enableHandleWeb"},"version":""},{"id":57,"title":"bff.prefix","content":"#\n\n * Type: string\n\n * Default: /api\n\nCAUTION\n\nPlease use the new command in the root directory of the current project to\nenable BFF functionality first.\n\nBy default, the prefix for accessing routes in the BFF API directory is /api, as\nshown in the following directory structure:\n\n\n\nThe route corresponding to api/hello.ts when accessed is\nlocalhost:8080/api/hello.\n\nThis configuration option can modify the default route prefix:\n\n\n\nThe corresponding route for api/hello.ts when accessed is\nlocalhost:8080/api-demo/hello.","routePath":"/en/configure/app/bff/prefix","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"prefix"},"version":""},{"id":58,"title":"builderPlugins","content":"#\n\n * Type: RsbuildPlugin[]\n * Default: []\n\nUsed to configure the Rsbuild plugin.\n\nRsbuild is the build tool of Modern.js, please read Build Engine for background.\nIf you want to know how to write Rsbuild plugins, you can refer to Rsbuild -\nPlugin System.\n\n\nPrecautions#\n\nThis option is used to configure the Rsbuild plugins. If you need to configure\nother types of plugins, please select the corresponding configs:\n\n * Use plugins to configure Modern.js framework plugins.\n * Use tools.bundlerChain to configure Rspack or webpack plugins.\n * Use tools.babel to configure Babel plugins.\n\n\nWhen to use#\n\nIn most scenarios, we recommend you to use the Modern.js framework plugin, which\ncan be registered through the plugins config. Because the API provided by the\nframework plugin is richer and more capable, while the API provided by the\nRsbuild plugin can only be used to build scenes.\n\nWhen you need to reference some existing Rsbuild plugins (and there is no\nrelated capability in Modern.js), or reuse Rsbuild plugins between different\nframeworks, you can use the builderPlugins field to register them.\n\n\nExample#\n\nBelow is an example of using the Rsbuild plugin.\n\n\nUsing plugins on npm#\n\nTo use a plugin on npm, you need to install the plugin through the package\nmanager and import it.\n\n\n\n\nUsing local plugins#\n\nUse the plugin in the local code repository, you can import it directly through\nthe relative path import.\n\n\n\n\nPlugin configuration options#\n\nIf the plugin provides some custom configuration options, you can pass in the\nconfiguration through the parameters of the plugin function.\n\n","routePath":"/en/configure/app/builder-plugins","lang":"en","toc":[{"text":"Precautions","id":"precautions","depth":2,"charIndex":257},{"text":"When to use","id":"when-to-use","depth":2,"charIndex":588},{"text":"Example","id":"example","depth":2,"charIndex":1106},{"text":"Using plugins on npm","id":"using-plugins-on-npm","depth":3,"charIndex":1167},{"text":"Using local plugins","id":"using-local-plugins","depth":3,"charIndex":1292},{"text":"Plugin configuration options","id":"plugin-configuration-options","depth":3,"charIndex":1424}],"domain":"","frontmatter":{"sidebar_position":21},"version":""},{"id":59,"title":"deploy.microFrontend","content":"#\n\n * Type: object\n * Default: { enableHtmlEntry: true, externalBasicLibrary: false }\n\n\n\nDevelopers can configure micro-frontend sub-application information using the\ndeploy.microFrontend object.\n\nCAUTION\n\nTo enable the \"Micro Frontend\" features, run pnpm run new first.\n\n\nExample#\n\n\n\n\nConfiguration#\n\n\nenableHtmlEntry#\n\n * Type: boolean\n * Default: true\n\nSpecifies whether to enable the HTML entry. By default, it is set to true, which\nmeans the sub-application is built in HTML mode. Garfish supports the html\nentry, so you can enable this option to experience the corresponding features.\nWhen using the HTML entry, simply point the sub-application entry to the HTML\nfile.\n\nSet it to false to indicate that the sub-application is built as js. After\nbuilding the sub-application as js, it cannot run independently. When using the\nJS entry, point the entry file of the sub-application to the JS file of the\nsub-application.\n\n\nexternalBasicLibrary#\n\n * Type: boolean\n * Default: false\n\nSpecifies whether to use the external base library. When set to true, the\ncurrent child application will be externalized for react and react-dom. The main\napplication of Modern.js will automatically setExternal these two base\nlibraries. If you are using other frameworks, please add react and react-dom\ndependencies through Garfish.setExternal.","routePath":"/en/configure/app/deploy/microFrontend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":272},{"text":"Configuration","id":"configuration","depth":2,"charIndex":285},{"text":"enableHtmlEntry","id":"enablehtmlentry","depth":3,"charIndex":302},{"text":"externalBasicLibrary","id":"externalbasiclibrary","depth":3,"charIndex":925}],"domain":"","frontmatter":{"sidebar_label":"microFrontend"},"version":""},{"id":60,"title":"dev.assetPrefix","content":"#\n\n * Type: boolean | string\n * Default: '/'\n\nSet the URL prefix of static assets in the development environment.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the development environment. In the production\nenvironment, please use the output.assetPrefix to set the URL prefix.\n\n\nBoolean Type#\n\nIf assetPrefix is set to true, the URL prefix will be http://localhost:port/:\n\n\n\nThe script URL will be:\n\n\n\nIf assetPrefix is set to false or not set, / is used as the default value.\n\n\nString type#\n\nWhen the value of assetPrefix is string type, the string will be used as the URL\nprefix:\n\n\n\nThe script URL will be:\n\n\n\n\nDifferences from Native Configuration#\n\ndev.assetPrefix corresponds to the following native configurations:\n\n * output.publicPath configuration in webpack.\n * output.publicPath configuration in Rspack.\n\nThe differences from the native configuration are as follows:\n\n * dev.assetPrefix only takes effect in the development environment.\n * dev.assetPrefix automatically appends a trailing / by default.\n * The value of dev.assetPrefix is written to the process.env.ASSET_PREFIX\n   environment variable.","routePath":"/en/configure/app/dev/asset-prefix","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":478},{"text":"String type","id":"string-type","depth":3,"charIndex":678},{"text":"Differences from Native Configuration","id":"differences-from-native-configuration","depth":3,"charIndex":812}],"domain":"","frontmatter":{"sidebar_label":"assetPrefix"},"version":""},{"id":61,"title":"dev.beforeStartUrl","content":"#\n\n * Type: () => Promise | void\n * Default: undefined\n\ndev.beforeStartUrl is used to execute a callback function before opening the\nstartUrl, this config needs to be used together with dev.startUrl.\n\n","routePath":"/en/configure/app/dev/before-start-url","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"beforeStartUrl"},"version":""},{"id":62,"title":"dev.client","content":"#\n\nConfigure the client code injected by Modern.js during the development process.\nThis can be used to set the WebSocket URL for HMR.\n\n * Type:\n\n\n\n * Default:\n\n\n\nFor detailed usage, please refer to Rsbuild - dev.client.","routePath":"/en/configure/app/dev/client","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"client"},"version":""},{"id":63,"title":"dev.hmr","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to enable Hot Module Replacement.\n\nIf hmr is set to false, the HMR and react-refresh will no longer work.\n\n","routePath":"/en/configure/app/dev/hmr","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"hmr"},"version":""},{"id":64,"title":"dev.host","content":"#\n\n * Type: string\n * Default: 0.0.0.0\n\nSpecify the host that the dev server listens to.\n\nBy default, the dev server will listen to 0.0.0.0, which means listening to all\nnetwork interfaces, including localhost and public network addresses.\n\nIf you want the dev server to listen only on localhost, you can set it to:\n\n","routePath":"/en/configure/app/dev/host","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"host"},"version":""},{"id":65,"title":"dev.https","content":"#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nAfter configuring this option, you can enable HTTPS Dev Server, and disabling\nthe HTTP Dev Server.\n\nHTTP:\n\n\n\nHTTPS:\n\n\n\nAutomatically generate certificates#\n\nYou can directly set https to true, Builder will automatically generate the\nHTTPS certificate based on devcert.\n\nWhen using this method, you need to manually install the devcert dependency in\nyour project:\n\n\n\nThen configure dev.https to true:\n\n\n\nThe devcert has some limitations, it does not currently support IP addresses\nyet.\n\nTIP\n\nThe https proxy automatically installs the certificate and needs root authority,\nplease enter the password according to the prompt.The password is only used to\ntrust the certificate, and will not be leaked or be used elsewhere.\n\nManually set the certificate#\n\nYou can also manually pass in the certificate and the private key required in\nthe dev.https option. This parameter will be directly passed to the createServer\nmethod of the https module in Node.js.\n\nFor details, please refer to https.createServer.\n\n","routePath":"/en/configure/app/dev/https","lang":"en","toc":[{"text":"Automatically generate certificates","id":"automatically-generate-certificates","depth":4,"charIndex":189},{"text":"Manually set the certificate","id":"manually-set-the-certificate","depth":4,"charIndex":790}],"domain":"","frontmatter":{"sidebar_label":"https"},"version":""},{"id":66,"title":"dev.port","content":"#\n\n * Type: number\n * Default: 8080\n\nSpecify a port number for Dev Server to listen.\n\nBy default, Dev Server listens on port 8080 and automatically increments the\nport number when the port is occupied.\n\n\nExample#\n\nSet the port to 3000:\n\n","routePath":"/en/configure/app/dev/port","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":203}],"domain":"","frontmatter":{"sidebar_label":"port"},"version":""},{"id":67,"title":"dev.progressBar","content":"#\n\n * Type:\n\n\n\n * Default: true\n\nWhether to display progress bar during compilation.\n\n\n\nIf you need to modify the text displayed on the left side of the progress bar,\nyou can set the id option:\n\n","routePath":"/en/configure/app/dev/progress-bar","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"progressBar"},"version":""},{"id":68,"title":"dev.proxy","content":"#\n\n * Type: string | Object\n * Default: null\n\nThis option is used to configure a global proxy based on whistle in the\ndevelopment environment, which can be used to view and modify HTTP/HTTPS\nrequests, responses, and can also be used as a proxy server.\n\n\nRegister Plugin#\n\nBefore using this option, you need to install and register the\n@modern-js/plugin-proxy plugin:\n\nAfter the installation, please register the plugin in the modern.config.ts file:\n\n\n\n\nObject Type#\n\nWhen the value of dev.proxy is object type, the key of the object corresponds to\nthe matching pattern, and the value of the object corresponds to the matching\ntarget.\n\nExample:\n\n\n\nPlease refer to whistle - Matching Patterns for detailed usage.\n\n\nString Type#\n\nWhen the value of dev.proxy is string type, it can be used to specify a separate\nproxy file, for example:\n\n\n\n\n\n\nStart Proxy#\n\nExecute dev, when the prompt is as follows, the proxy server starts\nsuccessfully:\n\n\n\nAccess the localhost:8899 to view the Network and configure proxy rules on the\nUI interface:\n\n\n\nINFO\n\nThe https agent automatically installs the certificate to obtain root\nprivileges. Please enter the password as prompted. ** The password is only used\nwhen the certificate is trusted and will not be leaked or used for other links\n**.","routePath":"/en/configure/app/dev/proxy","lang":"en","toc":[{"text":"Register Plugin","id":"register-plugin","depth":3,"charIndex":253},{"text":"Object Type","id":"object-type","depth":3,"charIndex":452},{"text":"String Type","id":"string-type","depth":3,"charIndex":712},{"text":"Start Proxy","id":"start-proxy","depth":3,"charIndex":838}],"domain":"","frontmatter":{"sidebar_label":"proxy"},"version":""},{"id":69,"title":"dev.startUrl","content":"#\n\n * Type: boolean | string | string[] | undefined\n * Default: undefined\n\ndev.startUrl is used to set the URL of the page that automatically opens in the\nbrowser when Dev Server starts.\n\nBy default, no page will be opened.\n\nYou can set it to the following values:\n\n\n\n\nPort placeholder#\n\nSince the port number may change, you can use the placeholder to refer to the\ncurrent port number, and Builder will automatically replace the placeholder with\nthe actual listening port number.\n\n\n\n\nOpen the specified browser#\n\nOn MacOS, you can open the specified browser when Dev Server starts, by set\nenvironment variable BROWSER, support values:\n\n * Google Chrome Canary\n * Google Chrome Dev\n * Google Chrome Beta\n * Google Chrome\n * Microsoft Edge\n * Brave Browser\n * Vivaldi\n * Chromium","routePath":"/en/configure/app/dev/start-url","lang":"en","toc":[{"text":"Port placeholder","id":"port-placeholder","depth":3,"charIndex":268},{"text":"Open the specified browser","id":"open-the-specified-browser","depth":3,"charIndex":484}],"domain":"","frontmatter":{"sidebar_label":"startUrl"},"version":""},{"id":70,"title":"experiments.lazyCompilation","content":"#\n\n * Type:\n\n\n\n * Default: false\n\nUsed to enable the lazy compilation (i.e. compile on demand). When this config\nis enabled, Builder will compile entrypoints and dynamic imports only when they\nare used. It will improve the compilation startup time of the project.\n\nLazy compilation only takes effect in the development.\n\n\nLazy Compilation for Dynamic Imports#\n\nLazy compile async modules introduced by dynamic import:\n\n\n\nWhen imports option is enabled, all async modules will only be compiled when\nrequested. If your project is a single-page application, and routing is split\nthrough dynamic import, there will be a significant effect of speeding up\ncompilation.\n\n\nLazy Compilation for Entires#\n\nIn addition to lazy compilation for async modules, you can also choose to lazily\ncompile both entries and async modules at the same time.\n\n\n\nThe above config can also be simplified to:\n\n\n\nWhen entries option is enabled, all pages will not be compiled when the\ncompilation is started, and the page will be compiled only when you visit it.\n\nWhen using lazy compilation for entries, there are some considerations:\n\n * Only work for multi-page applications, no work for single-page applications.\n * when you visit a page, there will be a white screen for a period of time due\n   to waiting for the page to be compiled.\n\n\nLimitations#\n\nDisable split chunks#\n\nWhen you enable lazy compilation, in order to ensure the compilation results,\nBuilder will disable split chunks in the development. This will not affect the\nbuild results in the production, but will cause a difference between the build\nresults of the development and production.\n\nUse proxy#\n\nLazy Compilation relies on the local development server of webpack. When you\nproxy a domain name to localhost, Lazy Compilation will not work properly.\nTherefore, if you need to develop with proxy, please disable Lazy Compilation.\n\nOther Potential Issues#\n\nConsidering that Lazy Compilation is still an experimental feature of webpack,\nyou may encounter some potential issues while using it, such as changes in the\nbehavior of compiled artifacts or compilation errors.\n\nWhen you encounter these issues, you can refer to webpack Issues to find\nsolutions or disable the lazyCompilation configuration option.","routePath":"/en/configure/app/experiments/lazy-compilation","lang":"en","toc":[{"text":"Lazy Compilation for Dynamic Imports","id":"lazy-compilation-for-dynamic-imports","depth":3,"charIndex":321},{"text":"Lazy Compilation for Entires","id":"lazy-compilation-for-entires","depth":3,"charIndex":664},{"text":"Limitations","id":"limitations","depth":3,"charIndex":1312},{"text":"Disable split chunks","id":"disable-split-chunks","depth":4,"charIndex":1326},{"text":"Use proxy","id":"use-proxy","depth":4,"charIndex":1629},{"text":"Other Potential Issues","id":"other-potential-issues","depth":4,"charIndex":1873}],"domain":"","frontmatter":{"sidebar_label":"lazyCompilation"},"version":""},{"id":71,"title":"experiments.sourceBuild","content":"#\n\n * Type: boolean | PluginSourceBuildOptions\n * Default: false\n * Version: MAJOR_VERSION.46.0\n\nUsed to enable the ability for source code building. When this configuration\noption is enabled, Builder will read the source code files corresponding to the\nsource field in the sub-project's package.json and compile them.\n\n\n\nMore detail can see \"Source Code Build Mode\"。\n\n\nOptions#\n\nexperiments.sourceBuild is implemented based on Rsbuild's Source Build plugin.\nYou can pass plugin options like this:\n\n","routePath":"/en/configure/app/experiments/source-build","lang":"en","toc":[{"text":"Options","id":"options","depth":3,"charIndex":369}],"domain":"","frontmatter":{"sidebar_label":"sourceBuild"},"version":""},{"id":72,"title":"html.appIcon","content":"#\n\n * Type: string\n * Default: undefined\n\nSet the file path of the apple-touch-icon icon for the iOS system, can be set as\na relative path relative to the project root directory, or as an absolute path\nto the file. Setting it as a CDN URL is not currently supported.\n\nAfter config this option, the icon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\n\n\nSet to an absolute path:\n\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n","routePath":"/en/configure/app/html/app-icon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":437}],"domain":"","frontmatter":{"sidebar_label":"appIcon"},"version":""},{"id":73,"title":"html.crossorigin","content":"#\n\n * Type: boolean | 'anonymous' | 'use-credentials'\n * Default: false\n\nSet the crossorigin attribute of the\n\nThe","routePath":"/en/configure/app/html/crossorigin","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Optional Values","id":"optional-values","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"crossorigin"},"version":""},{"id":74,"title":"html.disableHtmlFolder","content":"#\n\n * Type: boolean\n * Default: false\n\nRemove the folder of the HTML files. When this option is enabled, the generated\nHTML file path will change from [name]/index.html to [name].html.\n\n\nExample#\n\nBy default, the structure of HTML files in the dist directory is:\n\n\n\nEnable the html.disableHtmlFolder config:\n\n\n\nAfter recompiling, the directory structure of the HTML files in dist is:\n\n\n\n> If you want to set the path of the HTML files, use the output.distPath.html\n> config.","routePath":"/en/configure/app/html/disable-html-folder","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":186}],"domain":"","frontmatter":{"sidebar_label":"disableHtmlFolder"},"version":""},{"id":75,"title":"html.faviconByEntries","content":"#\n\n * Type: Record\n * Default: undefined\n\nSet different favicon for different pages.\n\nThe usage is same as favicon, and you can use the \"entry name\" as the key to set\neach page individually.\n\nfaviconByEntries will overrides the value set in favicon.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\nfavicon instead.\n\n\nExample#\n\n\n\nAfter recompiling, you will see:\n\n * The favicon for page foo is ./src/assets/foo.png.\n * The favicon for other pages is ./src/assets/default.png.","routePath":"/en/configure/app/html/favicon-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":357}],"domain":"","frontmatter":{"sidebar_label":"faviconByEntries"},"version":""},{"id":76,"title":"html.favicon","content":"#\n\n * Type: string ｜ Function\n * Default: undefined\n\nSet the favicon icon path for all pages, can be set as:\n\n * a URL.\n * an absolute path to the file.\n * a relative path relative to the project root directory.\n\nAfter config this option, the favicon will be automatically copied to the dist\ndirectory during the compilation, and the corresponding link tag will be added\nto the HTML.\n\n\nExample#\n\nSet as a relative path:\n\n\n\nSet to an absolute path:\n\n\n\nSet to a URL:\n\n\n\nAfter recompiling, the following tags are automatically generated in the HTML:\n\n\n\nFor detailed usage, please refer to Rsbuild - html.favicon.","routePath":"/en/configure/app/html/favicon","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":385}],"domain":"","frontmatter":{"sidebar_label":"favicon"},"version":""},{"id":77,"title":"html.injectByEntries","content":"#\n\n * Type: Record\n * Default: undefined\n\nSet different script tag inject positions for different pages.\n\nThe usage is same as inject, and you can use the \"entry name\" as the key to set\neach page individually.\n\ninjectByEntries will overrides the value set in inject.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\ninject instead.\n\n\nExample#\n\n\n\nAfter recompiling, you will see:\n\n * The script tag of the page foo will be injected inside the body tag.\n * The script tag of other pages will be injected inside the head tag.","routePath":"/en/configure/app/html/inject-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":373}],"domain":"","frontmatter":{"sidebar_label":"injectByEntries"},"version":""},{"id":78,"title":"html.inject","content":"","routePath":"/en/configure/app/html/inject","lang":"en","toc":[{"text":"Default inject position","id":"default-inject-position","depth":4,"charIndex":-1},{"text":"Inject into body","id":"inject-into-body","depth":4,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"inject"},"version":""},{"id":79,"title":"html.metaByEntries","content":"#\n\n * Type: Record\n * Default: undefined\n\nSet different meta tags for different pages.\n\nThe usage is same as meta, and you can use the \"entry name\" as the key to set\neach page individually.\n\nmetaByEntries will overrides the value set in meta.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\nmeta instead.\n\n\nExample#\n\n\n\nAfter compiling, you can see that the meta of the page foo is:\n\n\n\nThe meta of other pages is:\n\n","routePath":"/en/configure/app/html/meta-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":347}],"domain":"","frontmatter":{"sidebar_label":"metaByEntries"},"version":""},{"id":80,"title":"html.meta","content":"#\n\n * Type: Object | Function\n * Default: undefined\n\nConfigure the tag of the HTML.\n\n\nExample#\n\nWhen the value of a meta object is a string, the key of the object is\nautomatically mapped to name, and the value is mapped to content.\n\nFor example to set description:\n\n\n\nThe generated meta tag in HTML is:\n\n\n\nFor detailed usage, please refer to Rsbuild - html.meta.","routePath":"/en/configure/app/html/meta","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":85}],"domain":"","frontmatter":{"sidebar_label":"meta"},"version":""},{"id":81,"title":"html.mountId","content":"","routePath":"/en/configure/app/html/mount-id","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Notes","id":"notes","depth":3,"charIndex":-1},{"text":"Update Relevant Code","id":"update-relevant-code","depth":4,"charIndex":-1},{"text":"Custom Templates","id":"custom-templates","depth":4,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"mountId"},"version":""},{"id":82,"title":"html.scriptLoading","content":"","routePath":"/en/configure/app/html/script-loading","lang":"en","toc":[{"text":"defer","id":"defer","depth":3,"charIndex":-1},{"text":"blocking","id":"blocking","depth":3,"charIndex":-1},{"text":"module","id":"module","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"scriptLoading"},"version":""},{"id":83,"title":"html.tagsByEntries","content":"#\n\n * Type: Record>\n * Default: undefined\n\nUsed for multiple entry applications, injecting different tags for each entry.\n\nThe usage is the same as tags, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntagsByEntries will override the value set in tags.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\ntags instead.\n\n\nExample#\n\n\n\nCompile the application and you can see a tag injected on the foo page:\n\n\n\nAnd for any other pages:\n\n","routePath":"/en/configure/app/html/tags-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":385}],"domain":"","frontmatter":{"sidebar_label":"tagsByEntries"},"version":""},{"id":84,"title":"html.tags","content":"","routePath":"/en/configure/app/html/tags","lang":"en","toc":[{"text":"Tag Object","id":"tag-object","depth":4,"charIndex":-1},{"text":"Tags Handler","id":"tags-handler","depth":4,"charIndex":-1},{"text":"Limitation","id":"limitation","depth":4,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"tags"},"version":""},{"id":85,"title":"html.templateByEntries","content":"#\n\n * Type: Object\n * Default: undefined\n\nSet different template file for different pages.\n\nThe usage is same as template, and you can use the \"entry name\" as the key to\nset each page individually.\n\ntemplateByEntries will overrides the value set in template.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\ntemplate instead.\n\n\nExample#\n\n","routePath":"/en/configure/app/html/template-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":367}],"domain":"","frontmatter":{"sidebar_label":"templateByEntries"},"version":""},{"id":86,"title":"html.templateParametersByEntries","content":"#\n\n * Type: Object\n * Default: undefined\n\nSet different template parameters for different pages.\n\nThe usage is same as templateParameters, and you can use the \"entry name\" as the\nkey to set each page individually.\n\ntemplateParametersByEntries will overrides the value set in templateParameters.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\ntemplateParameters instead.\n\n\nExample#\n\n","routePath":"/en/configure/app/html/template-parameters-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":413}],"domain":"","frontmatter":{"sidebar_label":"templateParametersByEntries"},"version":""},{"id":87,"title":"html.templateParameters","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nDefine the parameters in the HTML template, corresponding to the\ntemplateParameters config of html-webpack-plugin. You can use the config as an\nobject or a function.\n\nIf it is an object, it will be merged with the default parameters. For example:\n\n\n\nIf it is a function, the default parameters will be passed in, and you can\nreturn an object to override the default parameters. For example:\n\n\n\nFor detailed usage, please refer to Rsbuild - html.templateParameters.","routePath":"/en/configure/app/html/template-parameters","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"templateParameters"},"version":""},{"id":88,"title":"html.template","content":"#\n\n * Type: string | Function\n * Default:\n\nDefine the path to the HTML template, corresponding to the template config of\nhtml-webpack-plugin.\n\n\nExample#\n\nReplace the default template with a custom HTML template file, you can add the\nfollowing config:\n\n\n\nFor detailed usage, please refer to Rsbuild - html.template.","routePath":"/en/configure/app/html/template","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":143}],"domain":"","frontmatter":{"sidebar_label":"template"},"version":""},{"id":89,"title":"html.titleByEntries","content":"#\n\n * Type: Record\n * Default: undefined\n\nSet different title for different pages.\n\nThe usage is same as title, and you can use the \"entry name\" as the key to set\neach page individually.\n\ntitleByEntries will overrides the value set in title.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the function usage of\ntitle instead.\n\n\nExample#\n\n\n\nAfter recompiling, you can see:\n\n * The title of the page foo is TikTok.\n * The title of other pages is ByteDance.","routePath":"/en/configure/app/html/title-by-entries","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":347}],"domain":"","frontmatter":{"sidebar_label":"titleByEntries"},"version":""},{"id":90,"title":"html.title","content":"#\n\n * Type: string ｜ Function\n * Default: undefined\n\nSet the title tag of the HTML page, for example:\n\n\n\nFor detailed usage, please refer to Rsbuild - html.title.","routePath":"/en/configure/app/html/title","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"title"},"version":""},{"id":91,"title":"output.assetPrefix","content":"#\n\n * Type: string\n * Default: '/'\n\nWhen using CDN in the production environment, you can use this option to set the\nURL prefix of static assets.\n\nassetPrefix will affect the URLs of most of the static assets, including\nJavaScript files, CSS files, images, videos, etc. If an incorrect value is\nspecified, you'll receive 404 errors while loading these resources.\n\nThis config is only used in the production environment. In the development\nenvironment, please use the dev.assetPrefix to set the URL prefix.\n\nAfter setting, the URLs of JavaScript, CSS and other static files will be\nprefixed with output.assetPrefix:\n\n\nExample#\n\n\n\nAfter building, you can see that the JS files are loaded from:\n\n\n\n\nDifferences from Native Configuration#\n\noutput.assetPrefix corresponds to the following native configurations:\n\n * output.publicPath configuration in webpack.\n * output.publicPath configuration in Rspack.\n\nThe differences from the native configuration are as follows:\n\n * output.assetPrefix only takes effect in the production environment.\n * output.assetPrefix automatically appends a trailing / by default.\n * The value of output.assetPrefix is written to the process.env.ASSET_PREFIX\n   environment variable.","routePath":"/en/configure/app/output/asset-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":616},{"text":"Differences from Native Configuration","id":"differences-from-native-configuration","depth":3,"charIndex":695}],"domain":"","frontmatter":{"sidebar_label":"assetPrefix"},"version":""},{"id":92,"title":"output.assetsRetry","content":"#\n\n * Type: Object\n\noutput.assetsRetry is used to configure the retry of assets.The type of\nAssetsRetryOptions is as follows:\n\n\n\n * Default: undefined\n\nSince the ability will inject some extra runtime code into HTML, we have\ndisabled this ability by default. If you need to enable it, you can configure it\nin the form of an object, for example:\n\n\n\nWhen you enable this ability, the default config of assetsRetry is as follows:\n\n\n\n\nExample#\n\nYou can also customize your retry logic using the assetsRetry options.\n\nFor example, setting assetsRetry.domain to specify the retry domain when assets\nfail to load.\n\n\n\nAfter adding the above configuration, when assets fail to load from the cdn1.com\ndomain, the request domain will automatically fallback to cdn2.com.\n\nIf the assets request for cdn2.com also fails, the request will fallback to\ncdn3.com.\n\nassetsRetry is implemented based on the Assets Retry plugin of Rsbuild and\nprovides the same configuration options. You can refer to Rsbuild - Assets Retry\nPlugin to understand all available configuration options.","routePath":"/en/configure/app/output/assets-retry","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":430}],"domain":"","frontmatter":{"sidebar_label":"assetsRetry"},"version":""},{"id":93,"title":"output.charset","content":"#\n\n * Type: 'ascii' | 'utf8'\n * Default: 'ascii'\n\nBy default, Builder's output is ASCII-only and will escape all non-ASCII\ncharacters.\n\nIf you want to output the original characters without using escape sequences,\nyou can set output.charset to utf8.\n\n\n\nBuilder will automatically add to the generated HTML files if output.charset is\nutf8.","routePath":"/en/configure/app/output/charset","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"charset"},"version":""},{"id":94,"title":"output.cleanDistPath","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to clean all files in the dist path before starting compilation.\n\nBy default, Builder clean up the dist file, you can disable this behavior by\nsetting cleanDistPath to false.\n\n","routePath":"/en/configure/app/output/clean-dist-path","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"cleanDistPath"},"version":""},{"id":95,"title":"output.convertToRem","content":"#\n\n * Type: boolean | object\n * Default: false\n\nBy setting output.convertToRem, the Builder can do the following things:\n\n * Convert px to rem in CSS.\n * Insert runtime code into the HTML template to set the fontSize of the root\n   element.\n\n\nBoolean Type#\n\nIf output.convertToRem is set to true, Rem processing capability will be turned\non.\n\n\n\nAt this point, the rem configuration defaults as follows:\n\n\n\n\nObject Type#\n\nWhen the value of output.convertToRem is object type, The Builder will perform\nRem processing based on the current configuration.\n\noptions:\n\nNAME                       TYPE       DEFAULT   DESCRIPTION\nenableRuntime              boolean    true      Whether to generate runtime code to calculate and set the\n                                                font size of the root element\ninlineRuntime              boolean    true      Whether to inline the runtime code to HTML. If set to false,\n                                                the runtime code will be extracted into a separate\n                                                convert-rem.[version].js file and output to the dist\n                                                directory\nrootFontSize               number     50        The root element font size\nmaxRootFontSize            number     64        The root element max font size\nwidthQueryKey              string     ''        Get clientWidth from the url query based on widthQueryKey\nscreenWidth                number     375       The screen width for UI design drawings (Usually, fontSize =\n                                                (clientWidth * rootFontSize) / screenWidth)\nexcludeEntries             string[]   []        To exclude some page entries from injecting runtime code, it\n                                                is usually used with pxtorem.exclude\nsupportLandscape           boolean    false     Use height to calculate rem in landscape\nuseRootFontSizeBeyondMax   boolean    false     Whether to use rootFontSize when large than maxRootFontSize\npxtorem                    object               postcss-pxtorem options\n\n\nExample#\n\n","routePath":"/en/configure/app/output/convert-to-rem","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":242},{"text":"Object Type","id":"object-type","depth":3,"charIndex":406},{"text":"Example","id":"example","depth":3,"charIndex":2098}],"domain":"","frontmatter":{"sidebar_label":"convertToRem"},"version":""},{"id":96,"title":"output.copy","content":"#\n\n * Type: CopyPluginOptions | CopyPluginOptions['patterns']\n * Default: undefined\n\nCopies the specified file or directory to the dist directory.\n\nFor example, copy the files under src/assets to the dist directory:\n\n\n\nFor more detailed configuration, please refer to: copy-webpack-plugin.","routePath":"/en/configure/app/output/copy","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"copy"},"version":""},{"id":97,"title":"output.cssModuleLocalIdentName","content":"#\n\n * Type: string\n * Default:\n\n\n\nSets the format of the className generated by CSS Modules after compilation.\n\n\nDefault Value#\n\ncssModuleLocalIdentName has different default values in development and\nproduction.\n\nIn a production, Builder will generate shorter class names to reduce the bundle\nsize.\n\n\n\n\nTemplate String#\n\nYou can use the following template strings in cssModuleLocalIdentName:\n\n * [name] - the basename of the asset.\n * [local] - original class.\n * [hash] - the hash of the string.\n * [folder] - the folder relative path.\n * [path] - the relative path.\n * [file] - filename and path.\n * [ext] - extension with leading dot.\n * [hash::]: hash with hash settings.\n\nTIP\n\nWhen using Rspack as the bundler, currently does not support custom .\n\n\nExample#\n\nSet cssModuleLocalIdentName to other value:\n\n","routePath":"/en/configure/app/output/css-module-local-ident-name","lang":"en","toc":[{"text":"Default Value","id":"default-value","depth":3,"charIndex":112},{"text":"Template String","id":"template-string","depth":3,"charIndex":303},{"text":"Example","id":"example","depth":3,"charIndex":754}],"domain":"","frontmatter":{"sidebar_label":"cssModuleLocalIdentName"},"version":""},{"id":98,"title":"output.cssModules","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSetup css modules configuration.\n\n\ncssModules.auto#\n\nThe auto configuration option allows CSS modules to be automatically enabled\nbased on their filenames.\n\n * Type: boolean | RegExp | ((resourcePath: string) => boolean)\n\n * Default: undefined\n\nType description:\n\n * undefined: According to the output.disableCssModuleExtension configuration\n   option to determine which style files to enable CSS modules.\n * true: enable CSS modules for all files matching\n   /\\.module\\.\\w+$/i.test(filename) regexp.\n * false: disables CSS Modules.\n * RegExp: enable CSS modules for all files matching /RegExp/i.test(filename)\n   regexp.\n * function: enable CSS Modules for files based on the filename satisfying your\n   filter function check.\n\n\n\n\ncssModules.exportLocalsConvention#\n\nStyle of exported class names.\n\n * Type: 'asIs' | 'camelCase' | 'camelCaseOnly' | 'dashes' | 'dashesOnly'\n\n * Default: 'camelCase'\n\nType description:\n\n * asIs Class names will be exported as is.\n * camelCase Class names will be camelized, the original class name will not to\n   be removed from the locals.\n * camelCaseOnly Class names will be camelized, the original class name will be\n   removed from the locals.\n * dashes Only dashes in class names will be camelized.\n * dashesOnly Dashes in class names will be camelized, the original class name\n   will be removed from the locals.\n\n","routePath":"/en/configure/app/output/css-modules","lang":"en","toc":[{"text":"cssModules.auto","id":"cssmodulesauto","depth":3,"charIndex":64},{"text":"cssModules.exportLocalsConvention","id":"cssmodulesexportlocalsconvention","depth":3,"charIndex":761}],"domain":"","frontmatter":{"sidebar_label":"cssModules"},"version":""},{"id":99,"title":"output.dataUriLimit","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSet the size threshold to inline static assets such as images and fonts.\n\nBy default, static assets will be Base64 encoded and inline into the page if the\nsize is less than 10KB.\n\nYou can adjust the threshold by setting the dataUriLimit config.\n\nDetail:\n\n * svg: The threshold of the SVG image.\n * font: The threshold of the font file.\n * image: The threshold of non-SVG images.\n * media: The threshold of media assets such as videos.\n\n\nExample#\n\nSet the threshold of images to 5000 Bytes, and set media assets not to be\ninlined:\n\n","routePath":"/en/configure/app/output/data-uri-limit","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":466}],"domain":"","frontmatter":{"sidebar_label":"dataUriLimit"},"version":""},{"id":100,"title":"output.disableCssExtract","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to disable CSS extract and inline CSS files into JS files.\n\nBy default, Builder will extract CSS into a separate .css file and output it to\nthe dist directory. When this option is set to true, CSS files will be inlined\ninto JS files and inserted on the page at runtime via","routePath":"/en/configure/app/output/disable-css-extract","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"disableCssExtract"},"version":""},{"id":101,"title":"output.disableCssModuleExtension","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to treat all .css files in the source directory as CSS Modules.\n\nBy default, only the *.module.css files are treated as CSS Modules. After\nenabling this config, all *.css style files in the source directory will be\nregarded as CSS Modules.\n\n.sass, .scss and .less files are also affected by disableCssModuleExtension.\n\nTIP\n\nWe do not recommend enabling this config, because after enabling\ndisableCssModuleExtension, CSS Modules files and ordinary CSS files cannot be\nclearly distinguished, which is not conducive to long-term maintenance.\n\n\nExample#\n\n\n\n\nDetailed#\n\nThe following is a detailed explanation of the CSS Modules rules:\n\ndisableCssModuleExtension is false (default)#\n\nThe following files are treated as CSS Modules:\n\n * all *.module.css files\n\nThe following files are treated as normal CSS:\n\n * all *.css files (excluding .module)\n * all *.global.css files\n\ndisableCssModuleExtension is true#\n\nThe following files are treated as CSS Modules:\n\n * *.css and *.module.css files in the source directory\n * *.module.css files under node_modules\n\nThe following files are treated as normal CSS:\n\n * all *.global.css files\n * *.css files under node_modules (without .module)\n\nTIP\n\nFor CSS Modules files inside node_modules, please always use the *.module.css\nsuffix.","routePath":"/en/configure/app/output/disable-css-module-extension","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":587},{"text":"Detailed","id":"detailed","depth":3,"charIndex":600},{"text":"disableCssModuleExtension is false (default)","id":"disablecssmoduleextension-is-false-default","depth":4,"charIndex":678},{"text":"disableCssModuleExtension is true","id":"disablecssmoduleextension-is-true","depth":4,"charIndex":915}],"domain":"","frontmatter":{"sidebar_label":"disableCssModuleExtension"},"version":""},{"id":102,"title":"output.disableFilenameHash","content":"#\n\n * Type: boolean\n * Default: false\n\nRemove the hash from the name of static files after production build.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. You can disable this behavior through the output.disableFilenameHash\nconfig.\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use the boolean usage of\noutput.filenameHash instead.\n\n\nExample#\n\nBy default, the filename is:\n\n\n\nAdd output.disableFilenameHash config:\n\n\n\nAfter rebuild, the filenames become:\n\n","routePath":"/en/configure/app/output/disable-filename-hash","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":396}],"domain":"","frontmatter":{"sidebar_label":"disableFilenameHash"},"version":""},{"id":103,"title":"output.disableInlineRuntimeChunk","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to control whether to inline the bundler's runtime code into HTML.\n\nWhat is runtimeChunk\n\nBuilder will generate a builder-runtime.js file in the dist directory, which is\nthe runtime code of webpack or Rspack.\n\nruntimeChunk is a piece of runtime code, which is provided by webpack or Rspack,\nthat contains the necessary module processing logic, such as module loading,\nmodule parsing, etc. See Runtime for details.\n\nIn the production environment, Builder will inline the runtimeChunk file into\nthe HTML file by default instead of writing it to the dist directory. This is\ndone to reduce the number of file requests.\n\n\nDisable Inlining#\n\nIf you don't want the runtimeChunk file to be inlined into the HTML file, you\ncan set disableInlineRuntimeChunk to true and a separate builder-runtime.js file\nwill be generated.\n\n\n\n\nMerge Into Page Chunk#\n\nIf you don't want to generate a separate runtimeChunk file, but want the\nruntimeChunk code to be bundled into the page chunk, you can set the config like\nthis:\n\n","routePath":"/en/configure/app/output/disable-inline-runtime-chunk","lang":"en","toc":[{"text":"Disable Inlining","id":"disable-inlining","depth":3,"charIndex":660},{"text":"Merge Into Page Chunk","id":"merge-into-page-chunk","depth":3,"charIndex":861}],"domain":"","frontmatter":{"sidebar_label":"disableInlineRuntimeChunk"},"version":""},{"id":104,"title":"output.disableMinimize","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to disable code minification on production builds.\n\nBy default, JS and CSS code is minified during the production build to improve\nthe page performance. If you do not want to the code to be minified, you can set\ndisableMinimize to true.\n\n\n\nTIP\n\nThis configuration is usually used for debugging and troubleshooting. It is not\nrecommended to disable code minification in production environments, as it will\nsignificantly degrade the page performance.","routePath":"/en/configure/app/output/disable-minimize","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableMinimize"},"version":""},{"id":105,"title":"output.disableNodePolyfill","content":"#\n\n * Type: boolean\n * Default: true\n\nThis config is used to control whether to inject the Polyfill of the Node module\ninto the code.\n\nBy default, we will not inject Node Polyfill into the code to avoid bundle size\nincrease. If you need to inject Node Polyfill, you can set\noutput.disableNodePolyfill to false:\n\n\n\nThis config is implemented based on the Node Polyfill plugin of Rsbuild, you can\nread Rsbuild - Node Polyfill Plugin documentation for details.","routePath":"/en/configure/app/output/disable-node-polyfill","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableNodePolyfill"},"version":""},{"id":106,"title":"output.disableSourceMap","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nWhether to disable Source Map generation.\n\nWhat is a Source Map\n\nSource Map is an information file that saves the source code mapping\nrelationship. It records each location of the compiled code and the\ncorresponding pre-compilation location. With Source Map, you can directly view\nthe source code when debugging the compiled code.\n\nBy default, Builder's Source Map generation rules are:\n\n * In development build, SourceMap of JS files and CSS files will be generated,\n   which is convenient for debugging.\n * In production build, the Source Map of JS files will be generated for\n   debugging and troubleshooting online problems; the Source Map of CSS files\n   will not be generated.\n\nIf the project does not need Source Map, you can turned off it to speed up the\ncompile speed.\n\n\n\nIf you want to enable Source Map in development and disable it in the\nproduction, you can set to:\n\n\n\nIf you need to individually control the Source Map of JS files or CSS files, you\ncan refer to the following settings:\n\n","routePath":"/en/configure/app/output/disable-source-map","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableSourceMap"},"version":""},{"id":107,"title":"output.disableSvgr","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to transform SVGs into React components. If true, will treat all .svg\nfiles as assets.\n\nBy default, when an SVG resource is referenced in a JS file, Builder will call\nSVGR to convert the SVG into a React component. If you are sure that all SVG\nresources in your project are not being used as React components, you can turn\noff this conversion by setting disableSvgr to true to improve build performance.\n\n","routePath":"/en/configure/app/output/disable-svgr","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableSvgr"},"version":""},{"id":108,"title":"output.disableTsChecker","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to disable TypeScript type checker during compilation.\n\nBy default, Builder will run the TypeScript type checker in a separate process\nduring the build process. Its checking logic is consistent with TypeScript's\nnative tsc command. You can use tsconfig.json or Builder's tools.tsChecker\nconfig to customize the checking behavior.\n\n\nBlocking Compilation#\n\n * In development build, type errors will not block the compilation process.\n * In production build, type errors will cause the build to fail to ensure the\n   stability of the production code.\n\n\nExample#\n\nDisable TypeScript type checker:\n\n\n\nDisable type checker in development:\n\n\n\nDisable type checker in production:\n\n\n\nTIP\n\nIt is not recommended to disable type checker in production, which will reduce\nthe stability of the production code, please use it with caution.","routePath":"/en/configure/app/output/disable-ts-checker","lang":"en","toc":[{"text":"Blocking Compilation","id":"blocking-compilation","depth":3,"charIndex":378},{"text":"Example","id":"example","depth":3,"charIndex":596}],"domain":"","frontmatter":{"sidebar_label":"disableTsChecker"},"version":""},{"id":109,"title":"output.distPath","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSet the directory of the dist files. Builder will output files to the\ncorresponding subdirectory according to the file type.\n\nDetail:\n\n * root: The root directory of all files.\n * html: The output directory of HTML files.\n * js: The output directory of JavaScript files.\n * css: The output directory of CSS style files.\n * svg: The output directory of SVG images.\n * font: The output directory of font files.\n * wasm: The output directory of WebAssembly files.\n * image: The output directory of non-SVG images.\n * media: The output directory of media assets, such as videos.\n * server: The output directory of server bundles when target is node.\n * worker: The output directory of worker bundles when target is service-worker.\n\n\nRoot Directory#\n\nThe root is the root directory of the build artifacts and can be specified as a\nrelative or absolute path. If the value of root is a relative path, it will be\nappended to the project's root directory to form an absolute path.\n\nOther directories can only be specified as relative paths and will be output\nrelative to the root directory.\n\n\nExample#\n\nThe JavaScript files will be output to the distPath.root + distPath.js\ndirectory, which is dist/static/js.\n\nIf you need to output JavaScript files to the build/resource/js directory, you\ncan add following config:\n\n","routePath":"/en/configure/app/output/dist-path","lang":"en","toc":[{"text":"Root Directory","id":"root-directory","depth":3,"charIndex":758},{"text":"Example","id":"example","depth":3,"charIndex":1113}],"domain":"","frontmatter":{"sidebar_label":"distPath"},"version":""},{"id":110,"title":"output.enableAssetFallback","content":"#\n\n * Type: boolean\n * Default: false\n\nIf this option is enabled, all unrecognized files will be emitted to the dist\ndirectory; otherwise, an exception will be thrown.\n\n\nExample#\n\nEnable the config:\n\n\n\nImport a module of unknown type in code:\n\n\n\nAfter compilation, foo.xxx will be output to the dist/static/media directory.\n\nYou can control the output path and filename after fallback through the\noutput.distPath.media and output.filename.media configs.\n\nTIP\n\nEnabling this config will change the rules structure in the webpack config. In\nmost cases, we do not recommend using this config.","routePath":"/en/configure/app/output/enable-asset-fallback","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":169}],"domain":"","frontmatter":{"sidebar_label":"enableAssetFallback"},"version":""},{"id":111,"title":"output.enableAssetManifest","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to generate a manifest file that contains information of all assets.\n\n\nExample#\n\nEnable asset manifest:\n\n\n\nAfter compiler, there will be a dist/manifest.json file:\n\n\n\nIf the current project has multiple types of build artifacts, such as including\nSSR build artifacts, multiple manifest.json files will be generated.\n\n * web artifact: asset-manifest.json\n * node artifact: asset-manifest-node.json","routePath":"/en/configure/app/output/enable-asset-manifest","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":117}],"domain":"","frontmatter":{"sidebar_label":"enableAssetManifest"},"version":""},{"id":112,"title":"output.enableCssModuleTSDeclaration","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to generate a TypeScript declaration file for CSS modules.\n\n\nExample#\n\nEnable CSS module TypeScript declaration:\n\n\n\nAfter building, there will be a .d.ts file for each CSS module file. For example\n\n","routePath":"/en/configure/app/output/enable-css-module-tsdeclaration","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":107}],"domain":"","frontmatter":{"sidebar_label":"enableCssModuleTSDeclaration"},"version":""},{"id":113,"title":"output.disableInlineRouteManifests","content":"#\n\n * Type: boolean\n * Default: false\n\nWhen using convention-based routing, the framework injects routing information\ninto the client for optimization purposes. By default, routing information is\ninjected into the html, but when this is configured to true, routing information\nis injected into a separate JS file.\n\nExample:\n\n","routePath":"/en/configure/app/output/enable-inline-route-manifests","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableInlineRouteManifests"},"version":""},{"id":114,"title":"output.enableInlineScripts","content":"#\n\n * Type:\n\n\n\n * Default: false\n\nWhether to inline output scripts files (.js files) into HTML with\n\n\nUsing RegExp#\n\nIf you need to inline part of the JS files, you can set enableInlineScripts to a\nregular expression that matches the URL of the JS file that needs to be inlined.\n\nFor example, to inline main.js into HTML, you can add the following\nconfiguration:\n\n\n\nTIP\n\nThe production filename includes a hash value by default, such as\nstatic/js/main.18a568e5.js. Therefore, in regular expressions, \\w+ is used to\nmatch the hash.\n\n\nUsing Function#\n\nYou can also set output.enableInlineScripts to a function that accepts the\nfollowing parameters:\n\n * name: The filename, such as static/js/main.18a568e5.js.\n * size: The file size in bytes.\n\nFor example, if we want to inline assets that are smaller than 10KB, we can add\nthe following configuration:\n\n","routePath":"/en/configure/app/output/enable-inline-scripts","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":101},{"text":"Using Function","id":"using-function","depth":3,"charIndex":532}],"domain":"","frontmatter":{"sidebar_label":"enableInlineScripts"},"version":""},{"id":115,"title":"output.enableInlineStyles","content":"","routePath":"/en/configure/app/output/enable-inline-styles","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":-1},{"text":"Using RegExp","id":"using-regexp","depth":3,"charIndex":-1},{"text":"Using Function","id":"using-function","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"enableInlineStyles"},"version":""},{"id":116,"title":"output.enableLatestDecorators","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to use the new decorator proposal.\n\nBy default, Builder uses the legacy decorator proposal when compiling\ndecorators.\n\nWhen output.enableLatestDecorators is set to true, the Builder will compile with\nthe new decorator proposal (version 2018-09).\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use source.decorators\ninstead.\n\n","routePath":"/en/configure/app/output/enable-latest-decorators","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"enableLatestDecorators"},"version":""},{"id":117,"title":"output.externals","content":"#\n\n * Type: string | object | function | RegExp\n\n * Default: undefined\n\nAt build time, prevent some import dependencies from being packed into bundles\nin your code, and instead fetch them externally at runtime.\n\nFor more information, please see: webpack Externals\n\n\nExample#\n\nExclude the react-dom dependency from the build product. To get this module at\nruntime, the value of react-dom will globally retrieve the ReactDOM variable.\n\n\n\nTIP\n\nWhen the build target is Web Worker, externals will not take effect. This is\nbecause the Worker environment can not access global variables.","routePath":"/en/configure/app/output/externals","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":265}],"domain":"","frontmatter":{"sidebar_label":"externals"},"version":""},{"id":118,"title":"output.filenameHash","content":"#\n\n * Type: boolean | string\n * Default: true\n\nWhether to add a hash value to the filename after the production build.\n\n\nExample#\n\nBy default, the filename of the output files will include a hash value:\n\n\n\nYou can set output.filenameHash to false to disable this behavior:\n\n\n\nAfter rebuilding, the output filenames becomes:\n\n\n\nFor detailed usage, please refer to Rsbuild - output.filenameHash.","routePath":"/en/configure/app/output/filename-hash","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":120}],"domain":"","frontmatter":{"sidebar_label":"filenameHash"},"version":""},{"id":119,"title":"output.filename","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nSets the filename of dist files.\n\nAfter the production build, there will be a hash in the middle of the filename\nby default. This behavior can be disabled through the output.disableFilenameHash\nconfig.\n\nThe following are the details of each filename:\n\n * js: The name of the JavaScript file.\n * css: The name of the CSS style file.\n * svg: The name of the SVG image.\n * font: The name of the font file.\n * image: The name of a non-SVG image.\n * media: The name of a media asset, such as a video.\n\n\nExample#\n\nTo set the name of the JavaScript file to [name]_script.js, use the following\nconfiguration:\n\n\n\nFilename hash\n\nUsually, we only set the filename hash in the production mode (i.e., when\nprocess.env.NODE_ENV === 'production').\n\nIf you set the filename hash in the development mode, it may cause HMR to fail\n(especially for CSS files). This is because every time the file content changes,\nthe hash value changes, preventing tools like mini-css-extract-plugin from\nreading the latest file content.\n\n\nFilename of Async Modules#\n\nWhen you import a module via dynamic import, the module will be bundled into a\nsingle file, and its default naming rules are as follows:\n\n * In the development environment, the filename will be generated based on the\n   module path, such as dist/static/js/async/src_add_ts.js.\n * In the production environment, it will be a random numeric id, such as\n   dist/static/js/async/798.27e3083e.js. This is to avoid leaking the source\n   code path in the production environment, and the number of characters is also\n   less.\n\n\n\nIf you want to specify a fixed name for the async module, you can use the magic\ncomments provided by the bundler to achieve this, using webpackChunkName to\nspecify the module name:\n\n\n\nAfter specifying the module name as above, the generated file will be\ndist/static/js/async/my-chunk-name.js.","routePath":"/en/configure/app/output/filename","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":527},{"text":"Filename of Async Modules","id":"filename-of-async-modules","depth":3,"charIndex":1033}],"domain":"","frontmatter":{"sidebar_label":"filename"},"version":""},{"id":120,"title":"output.legalComments","content":"#\n\n * Type: 'linked' | 'inline' | 'none'\n * Default: 'linked'\n\nConfigure how to handle the legal comment.\n\nA \"legal comment\" is considered to be any statement-level comment in JS or\nrule-level comment in CSS that contains @license or @preserve or that starts\nwith //! or /*!. These comments are preserved in output files by default since\nthat follows the intent of the original authors of the code.\n\nThis behavior can be configured by using one of the following options:\n\n * linked: Extract all legal comments to a .LEGAL.txt file and link to them with\n   a comment.\n * inline: Preserve all legal comments in original position.\n * none: Remove all legal comments.\n\n\nExample#\n\nRemove all legal comments:\n\n","routePath":"/en/configure/app/output/legal-comments","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":665}],"domain":"","frontmatter":{"sidebar_label":"legalComments"},"version":""},{"id":121,"title":"output.overrideBrowserslist","content":"#\n\n * Type: string[] | Record\n * Default: undefined\n\nSpecifies the range of target browsers that the project is compatible with. This\nvalue will be used by @babel/preset-env and autoprefixer to identify the\nJavaScript syntax that need to be transformed and the CSS browser prefixes that\nneed to be added.\n\nPriority#\n\nThe overrideBrowserslist config will override the .browserslistrc config file in\nthe project and the browserslist field in package.json.\n\nIn most cases, it is recommended to use the .browserslistrc file rather than the\noverrideBrowserslist config. Because the .browserslistrc file is the official\nconfig file, it is more general and can be recognized by other libraries in the\ncommunity.\n\nDefault Value#\n\nIf there is no browserslist configs defined in the project, nor\noverrideBrowserslist defined, then Builder will set the default browserslist to:\n\n\n\n\nExample#\n\nAn example compatible with mobile scenarios:\n\n\n\nCheck out the browserslist documentation to learn more about browserslist.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different browser\nranges for different targets. At this point, you need to set\noverrideBrowserslist to an object whose key is the corresponding build target.\n\nFor example to set different ranges for web and node:\n\n","routePath":"/en/configure/app/output/override-browserslist","lang":"en","toc":[{"text":"Priority","id":"priority","depth":4,"charIndex":305},{"text":"Default Value","id":"default-value","depth":4,"charIndex":705},{"text":"Example","id":"example","depth":3,"charIndex":870},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":1004}],"domain":"","frontmatter":{"sidebar_label":"overrideBrowserslist"},"version":""},{"id":122,"title":"output.polyfill","content":"#\n\n * Type: 'entry' | 'usage' | 'ua' | 'off'\n * Default: 'entry'\n\nVia output.polyfill you can configure how the polyfill is injected.\n\n\nConfig#\n\nentry#\n\nPolyfill is injected in every entry file when output.polyfill is configured as\n'entry'.\n\nEquivalent to useBuiltIns: 'entry' configuration in @babel/preset-env.\n\nusage#\n\nPolyfill is injected in each file based on the API used in the code.\n\nEquivalent to useBuiltIns: 'usage' configuration in @babel/preset-env.\n\nua#\n\nThe Polyfill code is dynamically delivered according to the currently requested\nUA information.\n\nThe dynamic delivery feature needs to be used with the upper-level framework.\nFor more details, please refer to Modern.js - Polyfill At Runtime.\n\noff#\n\nPolyfill is not injected. When using this option, you need to ensure code\ncompatibility yourself.","routePath":"/en/configure/app/output/polyfill","lang":"en","toc":[{"text":"Config","id":"config","depth":3,"charIndex":135},{"text":"entry","id":"entry","depth":4,"charIndex":144},{"text":"usage","id":"usage","depth":4,"charIndex":313},{"text":"ua","id":"ua","depth":4,"charIndex":463},{"text":"off","id":"off","depth":4,"charIndex":711}],"domain":"","frontmatter":{"sidebar_label":"polyfill"},"version":""},{"id":123,"title":"output.splitRouteChunks","content":"#\n\n * Type: boolean\n * Default: true\n\nWhen using convention-based routing, the framework will split js and css based\non the route to load on demand. If your project does not want to split js and\ncss based on routes, you can set this option to false.\n\nExample:\n\n","routePath":"/en/configure/app/output/splitRouteChunks","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"splitRouteChunks"},"version":""},{"id":124,"title":"output.ssg","content":"#\n\n * Type: boolean | object | function\n * Default: undefined\n\nEnable the SSG for Self-controlled Routing or Conventional Routing.\n\nINFO\n\nFor more routes detail, see Routing.\n\n\nExample#\n\n\nSingle Entry#\n\nWhen the configuration is set to true, the SSG of all entries will be enabled by\ndefault.\n\nFor self-controlled routing, the root route of the entry will be rendered. For\nconvention routing, every route in the entry will be rendered.\n\nFor example, the src/ directory has the following file structure that satisfies\nconventional routing:\n\n\n\nMake the following config in modern.config.[tj]s:\n\n\n\nAfter executing pnpm build to build the application. The dist/ directory will\ngenerate three HTML for each of the three routes (only one HTML if SSG not\nenabled), and all HTML has been rendered.\n\nFor example the following self-controlled routing:\n\n\n\nAlso using the above configuration, after executing pnpm run build, only the\nentry route / will generate the rendered HTML.\n\n\nMulti Entries#\n\noutput.ssg can also be configured according to the entries, and the rules that\nthe configuration takes effect are also determined by the entries routing\nmethod.\n\nFor example the following directory structure:\n\n\n\nBy default, all entryA entrances are rendered at build time after setting\noutput.ssg to true. You can configure false to cancel the default behavior of\nthe specified entries. For example, to cancel the rendering of the entryA at\nbuild time:\n\n\n\n\nConfigure Route#\n\nAs mentioned above, Self-Controlled Routing only enables SSG configuration for\nentries route by default.\n\nSet specific routes in output.ssg can tell Modern.js to enable the SSG of these\nclient side routes. For example, the content of the above src/App.tsx file is:\n\n\n\nWhen set like this in modern.config.[jt]s, the /about route will also enable\nSSG:\n\n\n\nModern.js will automatically concat the complete URL according to the entry and\nhand it over to the SSG plugin to complete the rendering.\n\nRequest headers can also be configured for specific entries or routes, for\nexample:\n\n\n\nINFO\n\nThe headers set in the route override the headers set in the entry.\n\n\nPrevent Default#\n\nBy default, Conventional Routing all turn on SSG. Modern.js provides another\nfield to prevent the default SSG behavior.\n\nFor example, the following directory structure , /、/user and /user/profle all\nhave SSG enabled:\n\n\n\nYou can set this to disable the default behavior of a client-side route:\n\n\n\n\nDynamic Params#\n\nSome routes may be dynamic, such as the /user/:id in a self-controlled route or\nthe route generated by the user/[id]/page.tsx file in a conventional route.\n\nconfigure specific parameters in output.ssg to render the route of the specified\nparameters, for example:\n\n\n\nThe features of dynamic routing and SSG is useful when generating static pages\nin real time based on CMS system.","routePath":"/en/configure/app/output/ssg","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":176},{"text":"Single Entry","id":"single-entry","depth":3,"charIndex":187},{"text":"Multi Entries","id":"multi-entries","depth":3,"charIndex":970},{"text":"Configure Route","id":"configure-route","depth":3,"charIndex":1443},{"text":"Prevent Default","id":"prevent-default","depth":3,"charIndex":2116},{"text":"Dynamic Params","id":"dynamic-params","depth":3,"charIndex":2431}],"domain":"","frontmatter":{"sidebar_label":"ssg"},"version":""},{"id":125,"title":"output.svgDefaultExport","content":"#\n\n * Type: 'url' | 'component'\n * Default: 'url'\n\noutput.svgDefaultExport is used to configure the default export type of SVG\nfiles.\n\nWhen output.svgDefaultExport is set to url , the default export of SVG files is\nthe URL of the file. For example:\n\n\n\nWhen output.svgDefaultExport is set to component , the default export of SVG\nfiles is the React component of the file. For example:\n\n\n\nAt this time, you can also specify the ?url query to import the URL, for\nexample:\n\n","routePath":"/en/configure/app/output/svg-default-export","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"svgDefaultExport"},"version":""},{"id":126,"title":"output.tempDir","content":"#\n\n * Type: string\n * Default: ''\n\nWhen developing or building a project, Modern.js generates real Webpack entries\nand HTML templates, placing them in a temporary directory.\n\nIf you want to start a project with multiple configurations at the same time,\nyou can use this configuration to generate files in different temporary\ndirectories to avoid interference with each other.\n\nThe configuration can be a relative or absolute path, but paths outside the\nproject should be avoided.\n\nExample:\n\n","routePath":"/en/configure/app/output/temp-dir","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"tempDir"},"version":""},{"id":127,"title":"performance.buildCache","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\n * Bundler: only support webpack\n\nControls the Builder's caching behavior during the build process.\n\nBuilder will enable build cache by default to improve the compile speed, the\ngenerated cache files are write to the ./node_modules/.cache/webpack directory\nby default.\n\nYou can configure the cache path with buildCache, e.g.\n\n\n\nYou can also disable the build cache by setting it to false:\n\n\n\n\ncacheDigest#\n\ncacheDigest is used to add some environment variables that will affect the build\nresults. The Builder will set the cache name based on the cacheDigest content\nand the current build mode to ensure that different cacheDigests can hit\ndifferent caches.\n\nExample#\n\nThe current project needs to set different extensions according to different\nAPP_ID. By default, since the code & configuration & dependencies of the current\nproject have not changed, the previous cache will be hit.\n\nBy adding APP_ID to cacheDigest, different cache results will be searched when\nAPP_ID changes, thereby avoiding hitting cache results that do not meet\nexpectations.\n\n","routePath":"/en/configure/app/performance/build-cache","lang":"en","toc":[{"text":"cacheDigest","id":"cachedigest","depth":3,"charIndex":422},{"text":"Example","id":"example","depth":4,"charIndex":687}],"domain":"","frontmatter":{"sidebar_label":"buildCache"},"version":""},{"id":128,"title":"performance.bundleAnalyze","content":"#\n\n * Type: Object | undefined\n\nUsed to enable the webpack-bundle-analyzer plugin to analyze the size of the\noutput.\n\nBy default, Builder does not enable webpack-bundle-analyzer. When this feature\nis enabled, the default configuration is as follows:\n\n\n\n\nEnable Bundle Analyze#\n\nYou have two ways to enable webpack-bundle-analyzer to analyze the size of the\noutput files:\n\n * Add the environment variable BUNDLE_ANALYZE=true, for example:\n\n\n\n * Configure performance.bundleAnalyze to enable it permanently:\n\n\n\nAfter enabling it, Builder will generate an HTML file that analyzes the size of\nthe output files, and print the following log in the Terminal:\n\n\n\nYou can manually open the file in the browser and view the detail of the bundle\nsize. When an area is larger, it indicates that its corresponding bundle size is\nlarger.\n\n\n\n\nOverride Default Configuration#\n\nYou can override the default configuration through performance.bundleAnalyze,\nsuch as enabling the server mode:\n\n\n\n\nSize Types#\n\nIn the webpack-bundle-analyzer panel, you can control size types in the upper\nleft corner (default is Parsed):\n\n * Stat: The size obtained from the stats object of the bundler, which reflects\n   the size of the code before minification.\n * Parsed: The size of the file on the disk, which reflects the size of the code\n   after minification.\n * Gzipped: The file size requested in the browser reflects the size of the code\n   after minification and gzip.\n\n\nGenerate stats.json#\n\nBy setting generateStatsFile to true, stats JSON file will be generated in\nbundle output directory.\n\n\n\n\nNotes#\n\n 1. Enabling the server mode will cause the build process to not exit normally.\n 2. Enabling bundleAnalyzer will reduce build speed. Therefore, this\n    configuration should not be enabled during daily development, and it is\n    recommended to enable it on demand through the BUNDLE_ANALYZE environment\n    variable.\n 3. Since no code minification and other optimizations are performed in the dev\n    phase, the real output size cannot be reflected, so it is recommended to\n    analyze the output size in the build phase.","routePath":"/en/configure/app/performance/bundle-analyze","lang":"en","toc":[{"text":"Enable Bundle Analyze","id":"enable-bundle-analyze","depth":3,"charIndex":253},{"text":"Override Default Configuration","id":"override-default-configuration","depth":3,"charIndex":827},{"text":"Size Types","id":"size-types","depth":3,"charIndex":976},{"text":"Generate stats.json","id":"generate-statsjson","depth":3,"charIndex":1445},{"text":"Notes","id":"notes","depth":3,"charIndex":1571}],"domain":"","frontmatter":{"sidebar_label":"bundleAnalyze"},"version":""},{"id":129,"title":"performance.chunkSplit","content":"#\n\n * Type: Object\n * Default: { strategy: 'split-by-experience' }\n\nperformance.chunkSplit is used to configure the chunk splitting strategy. The\ntype of ChunkSplit is as follows:\n\n\n\n\nchunkSplit.strategy#\n\nBuilder supports the following chunk splitting strategies:\n\n * split-by-experience: an empirical splitting strategy, automatically splits\n   some commonly used npm packages into chunks of moderate size.\n\n * split-by-module: split by NPM package granularity, each NPM package\n   corresponds to a chunk.\n\n * split-by-size: automatically split according to module size.\n\n * all-in-one: bundle all codes into one chunk.\n\n * single-vendor: bundle all NPM packages into a single chunk.\n\n * custom: custom chunk splitting strategy.\n\n\nDefault Strategy#\n\nBuilder adopts the split-by-experience strategy by default, which is a strategy\nwe have developed from experience. Specifically, when the following npm packages\nare referenced in your project, they will automatically be split into separate\nchunks:\n\n * lib-polyfill.js: includes core-js, @babel/runtime, @swc/helpers, tslib.\n * lib-react.js: includes react, react-dom.\n * lib-router.js: includes react-router, react-router-dom, history,\n   @remix-run/router.\n * lib-lodash.js: includes lodash, lodash-es.\n * lib-antd.js: includes antd.\n * lib-arco.js: includes @arco-design/web-react.\n * lib-semi.js: includes @douyinfe/semi-ui.\n\nTIP\n\nIf the above npm packages are not installed or used in the project, the\ncorresponding chunk will not be generated.\n\nIf you want to use other splitting strategies, you can specify it via\nperformance.chunkSplit.strategy.\n\nTIP\n\nThe split-by-module strategy is not supported when using Rspack as the bundler.\n\n\nchunkSplit.minSize#\n\n * Type: number\n * Default: 10000\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nminimum size of a chunk via performance.chunkSplit.minSize, the unit is bytes.\nThe default value is 10000. For example:\n\n\n\n\nchunkSplit.maxSize#\n\n * Type: number\n * Default: Infinity\n\nWhen performance.chunkSplit.strategy is split-by-size, you can specify the\nmaximum size of a chunk via performance.chunkSplit.maxSize, the unit is bytes.\nThe default value is Infinity. For example:\n\n\n\n\nchunkSplit.forceSplitting#\n\n * Type: RegExp[] | Record\n * Default: []\n\nVia performance.chunkSplit.forceSplitting, you can specify the NPM packages that\nneed to be forced to split.\n\nFor example, split the axios library under node_modules into axios.js:\n\n\n\nThis is an easier way than configuring webpack's splitChunks directly.\n\nTIP\n\nChunks split using the forceSplitting configuration will be inserted into the\nHTML file as resources requested for the initial screen using","routePath":"/en/configure/app/performance/chunk-split","lang":"en","toc":[{"text":"chunkSplit.strategy","id":"chunksplitstrategy","depth":3,"charIndex":183},{"text":"Default Strategy","id":"default-strategy","depth":3,"charIndex":732},{"text":"chunkSplit.minSize","id":"chunksplitminsize","depth":3,"charIndex":1692},{"text":"chunkSplit.maxSize","id":"chunksplitmaxsize","depth":3,"charIndex":1947},{"text":"chunkSplit.forceSplitting","id":"chunksplitforcesplitting","depth":3,"charIndex":2208},{"text":"chunkSplit.splitChunks","id":"chunksplitsplitchunks","depth":3,"charIndex":-1},{"text":"chunkSplit.override","id":"chunksplitoverride","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"chunkSplit"},"version":""},{"id":130,"title":"performance.dnsPrefetch","content":"#\n\n * Type: undefined | string[]\n\n * Default: undefined\n\nSpecifies that the user agent should preemptively perform DNS resolution for the\ntarget resource's origin, refer to dns-prefetch.\n\nAfter this property is set, the domain name can be resolved before the resource\nis requested, reducing request latency and improving loading performance.\n\nSee Using dns-prefetch for more details.\n\n\nExample#\n\n","routePath":"/en/configure/app/performance/dns-prefetch","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":385}],"domain":"","frontmatter":{"sidebar_label":"dnsPrefetch"},"version":""},{"id":131,"title":"performance.preconnect","content":"#\n\n * Type: undefined | Array\n\n\n\n * Default: undefined\n\nSpecifies that the user agent should preemptively connect to the target\nresource's origin, refer to preconnect.\n\nConfiguring this property will establish a connection with the server. If the\nsite is HTTPS, this process includes DNS resolution, TCP connection\nestablishment, and TLS handshake. Combining Preconnect and DnsPrefetch can\nfurther reduce the delay of cross-domain requests.\n\n\nExample#\n\n","routePath":"/en/configure/app/performance/preconnect","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":442}],"domain":"","frontmatter":{"sidebar_label":"preconnect"},"version":""},{"id":132,"title":"performance.prefetch","content":"#\n\n * Type: undefined | true | PrefetchOption\n\n\n\n * Default: undefined\n\nSpecifies that the user agent should preemptively fetch and cache the target\nresource as it is likely to be required for a followup navigation. Refer to\nprefetch.\n\n\nBoolean Type#\n\nWhen setting performance.prefetch to true, resources will be prefetched\naccording to the following configuration:\n\n\n\n\nObject Type#\n\nWhen the value of performance.prefetch is object type, the Builder will enable\nthe prefetch capability for the specified resource according to the current\nconfiguration.\n\nprefetch.type#\n\nThe type field controls which resources will be pre-fetched, and supports\nsecondary filtering of specified resources through include and exclude.\n\nCurrently supported resource types are as follows:\n\n * async-chunks: prefetch all asynchronous resources (on the current page),\n   including asynchronous js and its associated css, image, font and other\n   resources.\n * initial: prefetch all non-async resources (on the current page). It should be\n   noted that if the current script has been added to the html template, no\n   additional pre-fetching will be performed.\n * all-chunks: prefetch all resources (on the current page), including all\n   asynchronous and non-asynchronous resources.\n * all-assets: prefetch all resources, and resources of other pages will be\n   included in the MPA scenario.\n\nExample#\n\nWhen you want to prefetch all image resources in png format on the current page,\nyou can configure it as follows:\n\n","routePath":"/en/configure/app/performance/prefetch","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":236},{"text":"Object Type","id":"object-type","depth":3,"charIndex":369},{"text":"prefetch.type","id":"prefetchtype","depth":4,"charIndex":554},{"text":"Example","id":"example","depth":4,"charIndex":1370}],"domain":"","frontmatter":{"sidebar_label":"prefetch"},"version":""},{"id":133,"title":"performance.preload","content":"#\n\n * Type: undefined | true | PreloadOption\n\n\n\n * Default: undefined\n\nSpecifies that the user agent must preemptively fetch and cache the target\nresource for current navigation according to the potential destination given by\nthe as attribute (and the priority associated with the corresponding\ndestination). Refer to preload.\n\n\nBoolean Type#\n\nWhen setting performance.preload to true, resources will be preloaded according\nto the following configuration:\n\n\n\n\nObject Type#\n\nWhen the value of performance.preload is object type, the Builder will enable\nthe preload capability for the specified resource according to the current\nconfiguration.\n\npreload.type#\n\nThe type field controls which resources will be pre-fetched, and supports\nsecondary filtering of specified resources through include and exclude.\n\nCurrently supported resource types are as follows:\n\n * async-chunks: preload all asynchronous resources (on the current page),\n   including asynchronous js and its associated css, image, font and other\n   resources.\n * initial: preload all non-async resources (on the current page). It should be\n   noted that if the current script has been added to the html template, no\n   additional pre-fetching will be performed.\n * all-chunks: preload all resources (on the current page), including all\n   asynchronous and non-asynchronous resources.\n * all-assets: preload all resources, and resources of other pages will be\n   included in the MPA scenario.\n\nExample#\n\nWhen you want to preload all image resources in png format on the current page,\nyou can configure it as follows:\n\n","routePath":"/en/configure/app/performance/preload","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":328},{"text":"Object Type","id":"object-type","depth":3,"charIndex":459},{"text":"preload.type","id":"preloadtype","depth":4,"charIndex":642},{"text":"Example","id":"example","depth":4,"charIndex":1453}],"domain":"","frontmatter":{"sidebar_label":"preload"},"version":""},{"id":134,"title":"performance.printFileSize","content":"#\n\n * Type: boolean\n * Default: true\n\nWhether to print the file sizes after production build.\n\n\n\n\nExample#\n\nDisable the logs:\n\n","routePath":"/en/configure/app/performance/print-file-size","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":97}],"domain":"","frontmatter":{"sidebar_label":"printFileSize"},"version":""},{"id":135,"title":"performance.profile","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether capture timing information for each module, same as the profile config\nof webpack / Rspack.\n\n\nExample#\n\n\n\nWhen turned on, webpack / Rspack generates a JSON file with some statistics\nabout the module that includes information about timing information for each\nmodule.","routePath":"/en/configure/app/performance/profile","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":140}],"domain":"","frontmatter":{"sidebar_label":"profile"},"version":""},{"id":136,"title":"performance.removeConsole","content":"#\n\n * Type: boolean | ConsoleType[]\n * Default: false\n\nWhether to remove console.xx in production build.\n\nRemove all consoles#\n\nWhen removeConsole is set to true, all types of console.xx are removed:\n\n\n\nRemove specific console#\n\nYou can also specify to remove only certain types of console.xx, such as\nconsole.log and console.warn:\n\n\n\nThe following types of console are currently supported:\n\n","routePath":"/en/configure/app/performance/remove-console","lang":"en","toc":[{"text":"Remove all consoles","id":"remove-all-consoles","depth":4,"charIndex":105},{"text":"Remove specific console","id":"remove-specific-console","depth":4,"charIndex":202}],"domain":"","frontmatter":{"sidebar_label":"removeConsole"},"version":""},{"id":137,"title":"performance.removeMomentLocale","content":"#\n\n * Type: boolean\n * Default: false\n\nWhether to remove the locales of moment.js.\n\nmoment.js contains a lot of locales by default, which will increase the bundle\nsize.\n\nWhen moment.js is used in the project, it is recommended to enable this option\nto automatically exclude all locales:\n\n\n\nOnce enabled, you can load a specific locale via:\n\n","routePath":"/en/configure/app/performance/remove-moment-locale","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"removeMomentLocale"},"version":""},{"id":138,"title":"performance.transformLodash","content":"#\n\n * Type: boolean\n * Default: true\n * Bundler: only support webpack\n\nSpecifies whether to modularize the import of lodash and remove unused lodash\nmodules to reduce the code size of lodash.\n\nThis optimization is implemented using babel-plugin-lodash and swc-plugin-lodash\nunder the hood.\n\n\nExample#\n\nThis option is enabled by default, and Builder will automatically redirects the\ncode references of lodash to sub-paths.\n\nFor example:\n\n\n\nThe transformed code will be:\n\n\n\n\nDisabling the Transformation#\n\nIn some cases, the import transformation of lodash may generate unexpected code.\nIn such cases, you can manually disable this optimization:\n\n","routePath":"/en/configure/app/performance/transform-lodash","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":291},{"text":"Disabling the Transformation","id":"disabling-the-transformation","depth":3,"charIndex":472}],"domain":"","frontmatter":{"sidebar_label":"transformLodash"},"version":""},{"id":139,"title":"plugins","content":"#\n\n * Type: CliPlugin[]\n * Default: []\n\nUsed to configure custom Modern.js framework plugins.\n\nRefer to How to Develop Plugins for how to write custom plugins.\n\n\nNote#\n\nThis option is used to configure framework plugins. If you need to configure\nother types of plugins, please choose the corresponding configuration method:\n\n * Use builderPlugins to configure Modern.js Builder plugins.\n * Use tools.bundlerChain to configure Rspack or webpack plugins.\n * Use tools.babel to configure Babel plugins.\n\n\nPlugin types#\n\nModern.js has three types of plugins:\n\n * CLI plugins, applicable to local development, compilation and construction\n   stages, can extend various capabilities in the command line and compilation\n   stages.\n * Server plugins, applicable to the server.\n * Runtime plugins, applicable to the front-end runtime.\n\nCurrently, Modern.js has opened up the ability to customize CLI plugins, and\nServer plugins and Runtime plugins will be opened up later.\n\n\nPlugin execution order#\n\nBy default, custom plugins are executed in the order of the plugins array, and\nthe execution time of built-in Modern.js plugins is earlier than that of custom\nplugins.\n\nWhen the plugin sets options that control the order, such as pre and post, the\nexecution order will be adjusted based on the declared fields. Refer to\nRelationship between plugins for more information.\n\n\nExample#\n\nThe following is an example of using CLI plugins.\n\n\nUse plugins on npm#\n\nTo use plugins from npm registry, you need to first install the plugins , and\nimport them in modern.config.ts.\n\n\n\n\nUse local plugins#\n\nTo use local plugins, import them directly using a relative path.\n\n\n\n\nPlugin configuration#\n\nIf the plugin provides some custom configuration options, they can be passed in\nas parameters to the plugin function.\n\n","routePath":"/en/configure/app/plugins","lang":"en","toc":[{"text":"Note","id":"note","depth":2,"charIndex":161},{"text":"Plugin types","id":"plugin-types","depth":2,"charIndex":501},{"text":"Plugin execution order","id":"plugin-execution-order","depth":2,"charIndex":965},{"text":"Example","id":"example","depth":2,"charIndex":1363},{"text":"Use plugins on npm","id":"use-plugins-on-npm","depth":3,"charIndex":1425},{"text":"Use local plugins","id":"use-local-plugins","depth":3,"charIndex":1561},{"text":"Plugin configuration","id":"plugin-configuration","depth":3,"charIndex":1651}],"domain":"","frontmatter":{"sidebar_position":9},"version":""},{"id":140,"title":"Overview","content":"#\n\nThis section describes configuration of the Runtime plugin.\n\n\nConfiguration#\n\n\nruntime#\n\n * Type: Object\n\nThe runtime is configured as follows:\n\nBase#\n\nConfigure in modern.config.ts:\n\n\n\nDefineConfig#\n\nConfigure using defineConfig API:\n\nINFO\n\nWhen there is a function in the runtime configuration, it can only be configured\nthis way.\n\nINFO\n\nUsing runtime configuration, you can solve the problem that runtime plugin\nconfiguration needs to be at runtime to get specific content.\n\nRuntime plugin runtime configuration and configuration directly in\nmodern.config.ts are merged by default, and runtime configuration takes\nprecedence.\n\nWARNING\n\nThe defineConfig API only accepts the specific configuration of Runtime plugins.\nEnabling the plugin is determined through modern.config.ts configuration.\"\n\n\nruntimeByEntries#\n\n * Type: Object\n\nIntroduction#\n\nAdd the runtime configuration according to the entry. The option attribute is\nconsistent with the runtime. The specified value will be replaced and merged\nwith the content of the runtime attribute.\n\n","routePath":"/en/configure/app/runtime/intro","lang":"en","toc":[{"text":"Configuration","id":"configuration","depth":2,"charIndex":64},{"text":"runtime","id":"runtime","depth":3,"charIndex":81},{"text":"Base","id":"base","depth":4,"charIndex":147},{"text":"DefineConfig","id":"defineconfig","depth":4,"charIndex":188},{"text":"runtimeByEntries","id":"runtimebyentries","depth":3,"charIndex":799},{"text":"Introduction","id":"introduction","depth":4,"charIndex":835}],"domain":"","frontmatter":{"sidebar_label":"Overview","sidebar_position":1},"version":""},{"id":141,"title":"runtime.masterApp","content":"#\n\n * Type: Object\n\nINFO\n\nFirst you need to enable the \"micro frontend\" function using new command.\n\n\nExample#\n\n\n\n\nmanifest#\n\n\n\n\ngetAppList?#\n\nThrough the getAppList configuration, you can customize how to get remote list\ndata\n\n\n\n\napps#\n\nWhen apps is an object, it represents the information of the child application\nmodule Array.\n\n\n\n * name: The name of the module.\n * entry: The entry of the module.\n\n\nOther Config#\n\nIn the masterApp configuration, developers can pass through options supported by\nGarfish\n\nAll supported configuration options see here.","routePath":"/en/configure/app/runtime/master-app","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":101},{"text":"manifest","id":"manifest","depth":2,"charIndex":114},{"text":"getAppList?","id":"getapplist","depth":3,"charIndex":128},{"text":"apps","id":"apps","depth":3,"charIndex":230},{"text":"Other Config","id":"other-config","depth":3,"charIndex":403}],"domain":"","frontmatter":{"sidebar_label":"masterApp"},"version":""},{"id":142,"title":"runtime.router","content":"#\n\n * Type: boolean | Object\n * Default: false\n\nWhen enabled, the router option provides routing management for Modern.js\nconventional routes. It is based on React Router 6.\n\n\nbasename#\n\n * Type: string\n * Default: ``\n\nThe basename option specifies the subpath where the app is deployed, for\nsituations where it cannot be deployed to the root domain.\n\n\nsupportHtml5History#\n\n * Type: boolean\n * Default: true\n\nIf the value of supportHtml5History is true, BrowserRouter would be used,\notherwise HashRouter would be used. BrowserRouter is recommended.\n\nWARNING\n\nWhen SSR is enabled, supportHtml5History is not supported.","routePath":"/en/configure/app/runtime/router","lang":"en","toc":[{"text":"basename","id":"basename","depth":2,"charIndex":175},{"text":"supportHtml5History","id":"supporthtml5history","depth":2,"charIndex":352}],"domain":"","frontmatter":{"sidebar_label":"router"},"version":""},{"id":143,"title":"runtime.state","content":"#\n\n * Type: boolean | object\n * Default: false\n\nOnce state is enabled, you can use Model for state management.\n\nThe specific configuration options are as follows:\n\n\nmodels#\n\n * Type: Array\n * Default: []\n\nRegister model objects that are mounted in advance, and these models will be\nmounted immediately after the Reduck store is created. Generally, there is no\nneed to mount in advance.\n\n\ninitialState#\n\n * Type: Object\n * Default: {}\n\nUsed to set the initial state of the global store. Generally used for SSR to\ninitialize data during the hydration phase.\n\n\nimmer#\n\n * Type: boolean\n * Default: true\n\nWhether to enable to update the state with mutable, it is enabled by default,\nand set to false if you want to disable it.\n\n\neffects#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the side effect management feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\nautoActions#\n\n * Type: boolean\n * Default: true\n\nWhether to enable the auto-generated actions feature, it is enabled by default,\nand set to false if you want to disable it.\n\n\ndevtools#\n\n * Type: boolean | EnhancerOptions\n * Default: true\n\nWhether to enable devtools, it is enabled by default, and all parameters of\nredux-devtools-extension are supported at the same time. If you want to disable\nit, set it to false.","routePath":"/en/configure/app/runtime/state","lang":"en","toc":[{"text":"models","id":"models","depth":2,"charIndex":164},{"text":"initialState","id":"initialstate","depth":2,"charIndex":387},{"text":"immer","id":"immer","depth":2,"charIndex":557},{"text":"effects","id":"effects","depth":2,"charIndex":724},{"text":"autoActions","id":"autoactions","depth":2,"charIndex":895},{"text":"devtools","id":"devtools","depth":2,"charIndex":1070}],"domain":"","frontmatter":{"sidebar_label":"state"},"version":""},{"id":144,"title":"security.checkSyntax","content":"#\n\n * Type:\n\n\n\n * Default: false\n\nUsed to analyze whether there is incompatible advanced syntax in the build\nartifacts under the current browser scope. If any incompatible syntax is found,\ndetailed information will be printed to the terminal.\n\n\nEnable Detection#\n\nYou can set checkSyntax to true to enable syntax checking.\n\n\n\nWhen you enable checkSyntax, Builder will perform the detection during\nproduction builds. If any incompatible advanced syntax is detected in the build\nartifacts, error logs will be printed to the terminal, and the current build\nprocess will be terminated.\n\n\nError Logs#\n\nThe format of the error logs is as follows, including the source file, artifact\nlocation, error reason, and source code:\n\n\n\nTIP\n\nCurrently, syntax checking is implemented based on AST parser. Each time it\nperforms a check, it can only identify the first incompatible syntax found in\nthe file. If there are multiple incompatible syntaxes in the file, you need to\nfix the detected syntax and re-run the check.output.disableMinimize to true and\nrebuild again.\n\nIf the corresponding source location is not shown in the log, try setting\n\n\nSolutions#\n\nIf a syntax error is detected, you can handle it in the following ways:\n\n * If you want to downgrade this syntax to ensure good code compatibility, you\n   can compile the corresponding module through the source.include config.\n * If you don't want to downgrade the syntax, you can adjust the project's\n   browserslist to match the syntax.\n * If you do not want to check the syntax of certain products, you can use the\n   checkSyntax.exclude configuration to exclude the files to be checked.\n\n\nOptions#\n\ncheckSyntax.targets#\n\n * Type: string[]\n * Default: The browserslist configuration of the current project\n\ntargets is the target browser range of the project. Its value is a standard\nbrowserslist array. If you are not familiar with the usage of browserslist,\nplease refer to \"Browserslist\".\n\nBuilder will read the value of targets and automatically deduce the minimum\nECMAScript syntax version that can be used in the build artifacts, such as ES5\nor ES6.\n\n * Example:\n\nFor example, if the target browsers to be compatible with in the project are\nChrome 53 and later versions, you can add the following configuration:\n\n\n\nBuilder will deduce that the ECMAScript syntax version that can be used with\nchrome >= 53 is ES6. When the build artifacts contain ES2016 or higher syntax,\nit triggers syntax error prompts.\n\nTIP\n\nPlease note that Builder does not support automatic analysis of syntax versions\nabove ES6 based on targets. If the syntax version compatible with your build\nartifacts exceeds ES6, please use checkSyntax.ecmaVersion to set it.\n\ncheckSyntax.ecmaVersion#\n\n * Type: 3 | 5 | 6 | 2015 | 2016 | 2017 | 2018 | 2019 | 2020 | 2021 | 2022 |\n   'latest'\n * Default: Automatically analyzed based on targets\n\necmaVersion represents the minimum ECMAScript syntax version that can be used in\nthe build artifact. The priority of ecmaVersion is higher than targets.\n\n * Example:\n\nFor example, if the minimum ECMAScript syntax version that can be used in the\nbuild artifacts is ES2020, you can add the following configuration:\n\n\n\nAt this time, the build artifacts can include all syntax supported by ES2020,\nsuch as optional chaining.\n\ncheckSyntax.exclude#\n\n * Type: RegExp | RegExp[]\n * Default: undefined\n\nexclude is used to exclude a portion of files during detection. You can pass in\none or more regular expressions to match the paths of source files. Files that\nmatch the regular expression will be ignored and will not trigger syntax\nchecking.\n\n * Example:\n\nFor example, to ignore files under the node_modules/foo directory:\n\n","routePath":"/en/configure/app/security/check-syntax","lang":"en","toc":[{"text":"Enable Detection","id":"enable-detection","depth":3,"charIndex":244},{"text":"Error Logs","id":"error-logs","depth":3,"charIndex":583},{"text":"Solutions","id":"solutions","depth":3,"charIndex":1130},{"text":"Options","id":"options","depth":3,"charIndex":1635},{"text":"checkSyntax.targets","id":"checksyntaxtargets","depth":4,"charIndex":1645},{"text":"checkSyntax.ecmaVersion","id":"checksyntaxecmaversion","depth":4,"charIndex":2688},{"text":"checkSyntax.exclude","id":"checksyntaxexclude","depth":4,"charIndex":3278}],"domain":"","frontmatter":{"sidebar_label":"checkSyntax"},"version":""},{"id":145,"title":"security.nonce","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nAdd a random attribute value --- nonce, to the scripts resources introduced for\nHTML. This allows the browser to determine whether the script can be executed\nwhen it parses inline scripts with matching nonce values.\n\nIntroduce nonce#\n\nThe nonce mechanism plays a crucial role in Content Security Policy (CSP),\nenhancing webpage security. It allows developers to define a unique and random\nstring value, i.e., nonce, for inline","routePath":"/en/configure/app/security/nonce","lang":"en","toc":[{"text":"Introduce nonce","id":"introduce-nonce","depth":4,"charIndex":254},{"text":"Example","id":"example","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"nonce"},"version":""},{"id":146,"title":"security.sri","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n * Bundler: only support webpack\n\nAdding an integrity attribute (integrity) to sub-resources introduced by HTML\nallows the browser to verify the integrity of the introduced resource, thus\npreventing tampering with the downloaded resource.\n\nEnabling this option will set the webpack output.crossOriginLoading\nconfiguration option to anonymous.\n\nIntroduce SRI#\n\nSubresource Integrity (SRI) is a security feature that enables browsers to\nverify that resources they fetch (for example, from a CDN) are delivered without\nunexpected manipulation. It works by allowing you to provide a cryptographic\nhash that a fetched resource must match.\n\nFor script tags, the result is to refuse to execute the code; for CSS links, the\nresult is not to load the styles.\n\nFor more on subresource integrity, see Subresource Integrity - MDN.\n\nExample#\n\nBy default, SRI is not turned on, and when it is, its default configuration is\nas follows:\n\n\n\nYou can customize the configuration options according to your own needs:\n\n","routePath":"/en/configure/app/security/sri","lang":"en","toc":[{"text":"Introduce SRI","id":"introduce-sri","depth":4,"charIndex":380},{"text":"Example","id":"example","depth":4,"charIndex":856}],"domain":"","frontmatter":{"sidebar_label":"sri"},"version":""},{"id":147,"title":"server.baseUrl","content":"#\n\n * Type: string | string[]\n * Default: undefined\n\nUniformly set the prefix of server-side routes (commonly used in situations\nwhere multiple applications share the same domain name to distinguish traffic).\n\n\n\nAfter running dev, you will see that the route access will have the\ncorresponding prefix added:\n\n","routePath":"/en/configure/app/server/base-url","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"baseUrl"},"version":""},{"id":148,"title":"server.enableFrameworkExt","content":"#\n\n * Type: boolean\n * Default: false\n\nBy default, when the custom Web Server feature is enabled, the Middleware will\nuse the Modern.js's syntax.\n\nEnabling server.enableFrameworkExt allows the use of syntax extensions from\nother frameworks.\n\n\n\n\nExample#\n\nDefault usage:\n\n\n\nAfter enabling it, the Middleware type will be exported from other namespaces,\nand syntax extensions from frameworks can be used:\n\n\n\nNOTE\n\nThe above code is pseudocode, and the specific usage needs to refer to the\ncorresponding framework extension.","routePath":"/en/configure/app/server/enable-framework-ext","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":244}],"domain":"","frontmatter":{"sidebar_label":"enableFrameworkExt"},"version":""},{"id":149,"title":"server.port","content":"#\n\n * Type: number\n * Default: 8080\n\nWhen running the dev, start, and serve commands, Modern.js will start with 8080\nas the default port and automatically increase the port number when the port is\noccupied. You can use this configuration to modify the port number that the\nServer starts with:\n\n\n\n\nDifference between server.port and dev.port#\n\nIn most cases, we recommend using server.port instead of dev.port to set the\nport number, and the differences between them are as follows:\n\n * dev.port only works in the development environment, while server.port works\n   in both the development and production environments.\n * In the development environment, dev.port has a higher priority than\n   server.port.\n\nWhen you set both dev.port and server.port, dev.port will take effect in the\ndevelopment environment, and server.port will take effect in the production\nenvironment. For example, in the following example, the port number listened to\nin the development environment is 3001, and the port number listened to in the\nproduction environment is 3002.\n\n","routePath":"/en/configure/app/server/port","lang":"en","toc":[{"text":"Difference between `server.port` and `dev.port`","id":"difference-between-serverport-and-devport","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_label":"port"},"version":""},{"id":150,"title":"server.publicRoutes","content":"#\n\n * Type: Object\n * Default: Server-side routing rules generated based on file conventions, with\n   one route rule generated for each file.\n\nThis configuration option only applies to server-side routing and can customize\nthe access route of resources under config/public/.\n\nThe key of the object is the relative file path of the config/public/ (without\nusing ./), and the value can be a string.\n\n","routePath":"/en/configure/app/server/public-routes","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"publicRoutes"},"version":""},{"id":151,"title":"server.routes","content":"#\n\n * Type: Object\n * Default: Server-side routing rules generated based on file conventions, with\n   one route rule generated for each entry, and the entry name is equal to the\n   route path.\n\nThis configuration option only applies to server-side routing and can customize\nthe access route of application entries.\n\n\nCustom access routes#\n\nThe key of the object is the name of the current application entry, and the\nvalue can be a string | Array.\n\nWhen the value type is string, the current value represents the route path for\naccessing the entry.\n\n\n\nMultiple access routes can also be set for the entry through Array:\n\n\n\nAt this time, the page-a entry can be accessed through both the /a and /b\nroutes.\n\nAfter executing the dev command, you can view two route records for the page-a\nentry in dist/route.json:\n\n\n\n\nCustom response headers#\n\nResponse headers can be set by configuring the resHeaders of the entry:\n\n\n\nNOTE\n\nThis configuration takes effect in both the production and development\nenvironments, and different response headers can be set according to the\nNODE_ENV to distinguish between environments. However, if you only need to set\nresponse headers in the development environment, it is recommended to use\ntools.devServer.headers.","routePath":"/en/configure/app/server/routes","lang":"en","toc":[{"text":"Custom access routes","id":"custom-access-routes","depth":2,"charIndex":316},{"text":"Custom response headers","id":"custom-response-headers","depth":2,"charIndex":813}],"domain":"","frontmatter":{"sidebar_label":"routes"},"version":""},{"id":152,"title":"server.ssrByEntries","content":"#\n\n * Type: Object\n * Default: undefined\n\nSet SSR options by entry, and the properties inside the option are the same as\nssr. The specified value will be replaced and merged with the content of the SSR\nattribute, for example:\n\nINFO\n\nThe \"entry name\" defaults to the directory name. In a few cases, when defining\nan entry through source.entries, the entry name is the key of the source.entries\nobject.\n\n\n\nIn the above configuration, the project enables SSR as a whole, but the SSR\nrendering ability is disabled for the page-a entry.","routePath":"/en/configure/app/server/ssr-by-entries","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"ssrByEntries"},"version":""},{"id":153,"title":"server.ssr","content":"#\n\n * Type: boolean\n * Default: false\n\nEnalbe SSR configuration.\n\n\nBoolean Type#\n\nWhen the value type is boolean, it indicates whether to enable SSR deployment\nmode. The default is false to disable it.\n\n\n\n\nObject Type#\n\nWhen the value type is Object, the following properties can be configured:\n\n * mode: string = 'string', which defaults to using renderToString for\n   rendering. Configure stream to enable streaming rendering.\n * forceCSR: boolean = false, which is off by default for forcing CSR rendering.\n   Configure true to force CSR by adding ?csr=true or adding\n   x-modern-ssr-fallback header when accessing the page.\n * inlineScript: boolean = true, by default, SSR data is injected into HTML as\n   inline scripts and assigned directly to global variables. Configure false to\n   distribute JSON instead of assigning to global variables, this configuration\n   doesn't work in Streaming SSR.\n * disablePrerender: boolean = fasle, To ensure compatibility with the old data\n   request method (useLoader), by default, Modern.js performs pre-rendering of\n   components. However, if developers want to reduce one rendering when there is\n   no use of the useLoader API in your project, you can set the configuration\n   disablePrerender=true.\n * unsafeHeaders: string[] = [], For safety reasons, Modern.js does not add\n   excessive content to SSR_DATA. Developers can use this configuration to\n   specify the headers that need to be injected.\n * scriptLoading: 'defer' | 'blocking' | 'module' | 'async', The configuration\n   is the same as html.scriptLoading, supporting SSR injected script set to\n   async loading. The priority is ssr.scriptLoading > html.scriptLoading.\n\n\n\n\nActive Fallback#\n\nIn a production environment, there are scenarios where it is necessary to\nactively fallback an SSR project to CSR. Examples include\n\n 1. When the SSR fails, a fallback to the CSR is required to ensure product\n    availability.\n\n 2. When the SSR is working normally, but there are rendering failures during\n    csr, debugging is required.\n\n 3. When the SSR server is under heavy load, it may be necessary to fallback\n    some traffic directly to the CSR to avoid service downtime.\n\nBy configuring server.ssr.forceCSR to true in the project, you can control this\nbehavior through query strings or request headers.\n\nFor example, in a custom Web Server middleware, you can actively fallback when\ntraffic exceeds a certain threshold:\n\n","routePath":"/en/configure/app/server/ssr","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":66},{"text":"Object Type","id":"object-type","depth":3,"charIndex":205},{"text":"Active Fallback","id":"active-fallback","depth":3,"charIndex":1677}],"domain":"","frontmatter":{"sidebar_label":"ssr"},"version":""},{"id":154,"title":"source.aliasStrategy","content":"#\n\n * Type: 'prefer-tsconfig' | 'prefer-alias'\n * Default: 'prefer-tsconfig'\n\nsource.aliasStrategy is used to control the priority between the paths option in\ntsconfig.json and the alias option in the bundler.\n\n\nprefer-tsconfig#\n\nBy default, source.aliasStrategy is set to 'prefer-tsconfig'. In this case, both\nthe paths option in tsconfig.json and the alias option in the bundler will take\neffect, but the paths option in tsconfig has a higher priority.\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * source.alias:\n\n\n\nSince the tsconfig paths have a higher priority, the following will happen:\n\n * @common will use the value defined in tsconfig paths, pointing to\n   ./src/common-1\n * @utils will use the value defined in source.alias, pointing to ./src/utils\n\n\nprefer-alias#\n\nIf the value of source.aliasStrategy is set to prefer-alias, the paths option in\ntsconfig.json will only be used to provide TypeScript type definitions and will\nnot affect the bundling result. In this case, the bundler will only read the\nalias option as the path alias.\n\n\n\nFor example, if the following configurations are set at the same time:\n\n * tsconfig paths:\n\n\n\n * source.alias:\n\n\n\nSince the tsconfig paths are only used to provide types, only the @common alias\nwill be effective, pointing to the ./src/common-2 directory.\n\nIn most cases, you don't need to use prefer-alias, but you can consider using it\nif you need to dynamically generate some alias configurations. For example,\ngenerating the alias option based on environment variables:\n\n","routePath":"/en/configure/app/source/alias-strategy","lang":"en","toc":[{"text":"prefer-tsconfig","id":"prefer-tsconfig","depth":3,"charIndex":211},{"text":"prefer-alias","id":"prefer-alias","depth":3,"charIndex":813}],"domain":"","frontmatter":{"sidebar_label":"aliasStrategy"},"version":""},{"id":155,"title":"source.alias","content":"#\n\n * Type: Record | Function\n * Default: undefined\n\nCreate aliases to import or require certain modules, same as the resolve.alias\nconfig of webpack and Rspack.\n\nTIP\n\nFor TypeScript projects, you only need to configure compilerOptions.paths in the\ntsconfig.json file. The Builder will automatically recognize it, so there is no\nneed to configure the source.alias option separately. For more details, please\nrefer to Path Aliases.\n\n\nObject Type#\n\nThe alias can be an Object, and the relative path will be automatically\nconverted to absolute path.\n\n\n\nWith above configuration, if @common/Foo.tsx is import in the code, it will be\nmapped to the /src/common/Foo.tsx path.\n\n\nFunction Type#\n\nThe alias can be a function, it will accept the previous alias object, and you\ncan modify it.\n\n\n\nYou can also return a new object as the final result in the function, which will\nreplace the previous alias object.\n\n\n\n\nExact Matching#\n\nBy default, source.alias will automatically match sub-paths, for example, with\nthe following configuration:\n\n\n\nIt will match as follows:\n\n\n\nYou can add the $ symbol to enable exact matching, which will not automatically\nmatch sub-paths.\n\n\n\nIt will match as follows:\n\n\n\n\nHandling npm packages#\n\nYou can use alias to resolve an npm package to a specific directory.\n\nFor example, if multiple versions of the react are installed in the project, you\ncan alias react to the version installed in the root node_modules directory to\navoid bundling multiple copies of the React code.\n\n\n\nWhen using alias to handle npm packages, please be aware of whether different\nmajor versions of the package are being used in the project.\n\nFor example, if a module or npm dependency in your project uses the React 18\nAPI, and you alias React to version 17, the module will not be able to reference\nthe React 18 API, resulting in code exceptions.","routePath":"/en/configure/app/source/alias","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":432},{"text":"Function Type","id":"function-type","depth":3,"charIndex":670},{"text":"Exact Matching","id":"exact-matching","depth":3,"charIndex":903},{"text":"Handling npm packages","id":"handling-npm-packages","depth":3,"charIndex":1190}],"domain":"","frontmatter":{"sidebar_label":"alias"},"version":""},{"id":156,"title":"source.configDir","content":"#\n\n * Type: string\n * Default: ./config\n\nModern.js supports placing some files in the ./config folder to customize HTML\ntemplates, icons, static assets, etc. For details, please refer to File\nConvention.\n\nThis option allows you to customize the directory of the configuration files.\n\nFor example, adjust the assets directory to the resources directory:\n\n","routePath":"/en/configure/app/source/config-dir","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"configDir"},"version":""},{"id":157,"title":"source.decorators","content":"#\n\n * Type:\n\n\n\n * Default:\n\n\n\nUsed to configure the decorators syntax.\n\n\nExample#\n\nModern.js uses legacy syntax by default (Stage 1 proposal), equivalent to\nTypeScript's experimentalDecorators: true.\n\nYou can adjust the decorator syntax to the Stage 3 decorator proposal by setting\ndecorators.version to 2022-03.\n\n\n\nFor detailed usage, please refer to Rsbuild - source.decorators.","routePath":"/en/configure/app/source/decorators","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":72}],"domain":"","frontmatter":{"sidebar_label":"decorators"},"version":""},{"id":158,"title":"source.define","content":"#\n\n * Type: Record\n * Default: {}\n\nReplaces variables in your code with other values or expressions at compile\ntime. This can be useful for allowing different behavior between development\nbuilds and production builds.\n\nEach key passed into options is an identifier or multiple identifiers joined\nwith ..\n\n * If the value is a string it will be used as a code fragment.\n * If the value isn't a string, it will be stringified (including functions).\n * If the value is an object all keys are defined the same way.\n * If you prefix typeof to the key, it's only defined for typeof calls.\n\nFor more information please visit webpack - DefinePlugin.\n\nTIP\n\nWhen using Rspack as the bundler, the supported types can be found in\nRspack.builtins.define.\n\n\nExample#\n\n\n\nExpressions will be replaced with the corresponding code fragments:\n\n","routePath":"/en/configure/app/source/define","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":743}],"domain":"","frontmatter":{"sidebar_label":"define"},"version":""},{"id":159,"title":"source.disableDefaultEntries","content":"#\n\n * Type: boolean\n * Default: false\n\nUsed to disable the functionality of automatically identifying page entry points\nbased on directory structure.\n\nINFO\n\nBy default, Modern.js automatically determines the entry points of pages based\non directory conventions, as described in Entries.\n\nTo disable this default behavior, set the following:\n\n\n\nAfter disabling the default behavior, you will need to use the source.entries\nconfiguration to define custom entry points.\n\nWARNING\n\nWe recommend organizing your code using the directory conventions provided by\nModern.js to make better use of the framework's functionality and to avoid some\nredundant configurations.","routePath":"/en/configure/app/source/disable-default-entries","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableDefaultEntries"},"version":""},{"id":160,"title":"source.disableEntryDirs","content":"#\n\n * Type: string[]\n * Default: []\n\nBy default, Modern.js identifies the application entry point based on the src\ndirectory. You can use this option to prevent some directories from being\nrecognized as application entry points.\n\nFor example, with the following configuration and directory structure:\n\n\n\n\n\nWithout setting this configuration option, Modern.js will produce two entries\nbased on the project directory:\n\n * one\n * two\n\nAfter setting this configuration option, the src/one directory will not be\nrecognized as an entry directory.\n\nA common use case is to configure the src/common and src/components directories\nin this option to prevent them from being recognized as application entry\npoints.","routePath":"/en/configure/app/source/disable-entry-dirs","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"disableEntryDirs"},"version":""},{"id":161,"title":"source.enableAsyncEntry","content":"#\n\n * Type: boolean\n * Default: false\n\nThis option is used for webpack Module Federation scenario.\n\nWhen this option is enabled, Modern.js will wrap the automatically generated\nentry files with dynamic import (Asynchronous Boundaries), allowing page code to\nconsume remote modules generated by Module Federation.\n\n\nBackground#\n\nModule Federation (MF) is a feature of Webpack. It allows a JavaScript\napplication to dynamically load code from another application, and in the\nprocess, share dependencies. If an application consuming a federated module does\nnot have a dependency needed by the federated code, Webpack will download the\nmissing dependency from that federated build origin.\n\nThis allows for the creation of micro-frontend-style applications, where\nmultiple systems can share code and be dynamically updated without having to\nrebuild the entire application.\n\nModern.js provides an example project for Module Federation. Please refer to\nmodule-federation-examples - modernjs.\n\nYou can also read the webpack Module Federation documentation to learn more\nconcepts.\n\n\nExample#\n\nFirst, enable this option in the configuration file:\n\n\n\nThen run the dev or build command, and you will see that the files automatically\ngenerated by Modern.js have the following structure:\n\n\n\nThe contents of index.js are as follows:\n\n\n\nAt this point, you can consume any remote module in the current page.\n\nINFO\n\nModern.js does not have ModuleFederationPlugin plugin built in. Please configure\nthe ModuleFederationPlugin yourself via tools.bundlerChain.","routePath":"/en/configure/app/source/enable-async-entry","lang":"en","toc":[{"text":"Background","id":"background","depth":2,"charIndex":314},{"text":"Example","id":"example","depth":2,"charIndex":1073}],"domain":"","frontmatter":{"sidebar_label":"enableAsyncEntry"},"version":""},{"id":162,"title":"source.entriesDir","content":"#\n\n * Type: string\n * Default: ./src\n\nBy default, Modern.js scans the src directory to identify page entries. You can\ncustomize the directory used for identifying page entries with this option.\n\nFor example, with the following configuration and directory structure:\n\n\n\n\n\nModern.js will generate the build entries a and b based on the ./src/pages\ndirectory structure. The result is as follows:\n\n","routePath":"/en/configure/app/source/entries-dir","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"entriesDir"},"version":""},{"id":163,"title":"source.entries","content":"#\n\n * Type:\n\n\n\n * Default: The entry object calculated based on the directory structure of the\n   current project.\n\nUsed to configure custom page entries.\n\nWhen to use\n\nFor most scenarios, the entry automatically generated by Modern.js based on the\ndirectory structure can meet the requirements. For details, please refer to\nEntry.\n\nIf you need to customize page entries, you can set them through this option.\n\n\nString#\n\nWhen the value of the entries object is of type string, it represents the file\npath of the entry module:\n\n\n\nBy default, the configured entry is equivalent to App.[jt]sx, which means that\nthe specified entry file only needs to export the root component of the\napplication.\n\nFor example, the following directory structure:\n\n\n\nThe above directory does not conform to the directory structure convention of\nModern.js, so Modern.js will not get any default entries when analyzing the\ndirectory structure.\n\nIf you do not want to change the directory structure (such as project\nmigration), you can customize the entry through source.entries:\n\n\n\n\nObject#\n\nWhen the value is Object, the following attributes can be configured:\n\n * entry: string, the entry file path.\n * disableMount: boolean = false, disable Modern.js's behavior of automatically\n   generating entry code.\n * customBootstrap: string = '', specify the file path of custom Bootstrap.\n\n\n\n\nDisable entry file generation#\n\nBy default, the configured entry is equivalent to App.[jt]sx, and Modern.js will\nautomatically generate an entry file to reference the entry you configured.\n\nIf you want to disable the logic of Modern.js automatically generating entry\nfiles, you can set the disableMount property to true.\n\n\n\n\nConventional Routing#\n\nIf you need to enable conventional routing for a custom entry, you can set entry\nto a directory path:\n\n\n\n\nEntry Merge Rules#\n\nAfter setting source.entries, if disableDefaultEntries: true is not set,\nModern.js will merge the custom entry with the entry obtained by analyzing the\ndirectory structure.\n\nThe merge rule is:\n\n * Compare the entry paths set by the custom entry setting and the default entry\n   path. When the entry paths are the same, the custom entry will override the\n   default entry.\n\nFor example, the following directory structure:\n\n\n\nModern.js will analyze the src/ directory and get the default entries chat and\nhome. When the user configures as follows in the modern.config.ts file:\n\n\n\nIt can be seen that the path of the custom entry index is the same as the path\nof the default entry home. During the merge process, index will override home,\nand the final entry is as follows:\n\n * chat -> ./src/chat/App.tsx\n * index -> ./src/home/index.ts","routePath":"/en/configure/app/source/entries","lang":"en","toc":[{"text":"String","id":"string","depth":2,"charIndex":411},{"text":"Object","id":"object","depth":2,"charIndex":1058},{"text":"Disable entry file generation","id":"disable-entry-file-generation","depth":3,"charIndex":1363},{"text":"Conventional Routing","id":"conventional-routing","depth":3,"charIndex":1688},{"text":"Entry Merge Rules","id":"entry-merge-rules","depth":2,"charIndex":1817}],"domain":"","frontmatter":{"sidebar_label":"entries"},"version":""},{"id":164,"title":"source.exclude","content":"#\n\n * Type: Array\n * Default: []\n\nSpecifies JavaScript/TypeScript files that do not need to be compiled. The usage\nis consistent with Rule.exclude in webpack, which supports passing in strings or\nregular expressions to match the module path.\n\nFor example:\n\n","routePath":"/en/configure/app/source/exclude","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"exclude"},"version":""},{"id":165,"title":"source.globalVars","content":"#\n\n * Type: Record | Function\n * Default:\n\n\n\nUsed to define global variables. It can replace expressions like process.env.FOO\nin your code after compile. Such as:\n\n\n\n\nExample#\n\nIn the following example, the ENABLE_VCONSOLE and APP_CONTEXT are injected into\nthe code:\n\n\n\nYou can use them directly in your code:\n\n\n\n\nFunction Usage#\n\n * Type:\n\n\n\nYou can set source.globalVars to a function to dynamically setting some\nenvironment variables.\n\nFor example, dynamically set according to the build target:\n\n\n\n\nDifference with define#\n\nYou can take source.globalVars as the syntax sugar of source.define, the only\ndifference is that source.globalVars will automatically stringify the value,\nwhich makes it easier to set the value of global variables. The values of\nglobalVars should be JSON-safe to ensure it can be serialized.\n\n\n\n\nPrecautions#\n\nsource.globalVars injects environment variables through string replacement, so\nit cannot take effect on dynamic syntaxes such as destructuring.\n\nWhen using destructuring assignment, Builder will not be able to determine\nwhether the variable NODE_ENV is associated with the expression\nprocess.env.NODE_ENV to be replaced, so the following usage is invalid:\n\n","routePath":"/en/configure/app/source/global-vars","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":166},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":313},{"text":"Difference with define","id":"difference-with-define","depth":3,"charIndex":502},{"text":"Precautions","id":"precautions","depth":3,"charIndex":823}],"domain":"","frontmatter":{"sidebar_label":"globalVars"},"version":""},{"id":166,"title":"source.include","content":"#\n\n * Type: RuleSetCondition[]\n * Default:\n\n\n\nThe source.include is used to specify additional JavaScript files that need to\nbe compiled.\n\nTo avoid redundant compilation, by default, Rsbuild only compiles JavaScript\nfiles in the current directory and TypeScript and JSX files in all directories.\nIt does not compile JavaScript files under node_modules.\n\nThrough the source.include config, you can specify directories or modules that\nneed to be compiled by Rsbuild. The usage of source.include is consistent with\nRule.include in Rspack, which supports passing in strings or regular expressions\nto match the module path.\n\nFor example:\n\n\n\n\nCompile Npm Packages#\n\nA typical usage scenario is to compile npm packages under node_modules, because\nsome third-party dependencies have ES6+ syntax, which may cause them to fail to\nrun on low-version browsers. You can solve the problem by using this config to\nspecify the dependencies that need to be compiled.\n\nTake query-string as an example, you can add the following config:\n\n\n\nThe above two methods match the absolute paths of files using \"path prefixes\"\nand \"regular expressions\" respectively. It is worth noting that all referenced\nmodules in the project will be matched. Therefore, you should avoid using overly\nloose values for matching to prevent compilation performance issues or\ncompilation errors.\n\n\nCompile Sub Dependencies#\n\nWhen you compile an npm package via source.include, Builder will only compile\nthe matching module by default, not the Sub Dependencies of the module.\n\nTake query-string for example, it depends on the decode-uri-component package,\nwhich also has ES6+ code, so you need to add the decode-uri-component package to\nsource.include as well.\n\n\n\n\nCompile Libraries in Monorepo#\n\nWhen developing in Monorepo, if you need to refer to the source code of other\nlibraries in Monorepo, you can add the corresponding library to source.include:\n\n\n\n\nCompile CommonJS Module#\n\nBabel cannot compile CommonJS modules by default, and if you compile a CommonJS\nmodule, you may get a runtime error message exports is not defined.\n\nWhen you need to compile a CommonJS module using source.include, you can set\nBabel's sourceType configuration to unambiguous.\n\n\n\nSetting sourceType to unambiguous may have some other effects, please refer to\nBabel official documentation.\n\n\nMatching Symlink#\n\nIf you match a module that is symlinked to the current project, then you need to\nmatch the real path of the module, not the symlinked path.\n\nFor example, if you symlink the packages/foo path in Monorepo to the\nnode_modules/foo path of the current project, you need to match the packages/foo\npath, not the node_modules/foo path.\n\nThis behavior can be controlled via webpack's resolve.symlinks config.\n\n\nPrecautions#\n\nNote that source.include should not be used to compile the entire node_modules\ndirectory. For example, the following usage is wrong:\n\n\n\nIf you compile the entire node_modules, not only will the build time be greatly\nincreased, but also unexpected errors may occur. Because most of the npm\npackages in node_modules are already compiled, there is usually no need for a\nsecond compilation. In addition, exceptions may occur after npm packages such as\ncore-js are compiled.","routePath":"/en/configure/app/source/include","lang":"en","toc":[{"text":"Compile Npm Packages","id":"compile-npm-packages","depth":3,"charIndex":636},{"text":"Compile Sub Dependencies","id":"compile-sub-dependencies","depth":3,"charIndex":1351},{"text":"Compile Libraries in Monorepo","id":"compile-libraries-in-monorepo","depth":3,"charIndex":1717},{"text":"Compile CommonJS Module","id":"compile-commonjs-module","depth":3,"charIndex":1911},{"text":"Matching Symlink","id":"matching-symlink","depth":3,"charIndex":2326},{"text":"Precautions","id":"precautions","depth":3,"charIndex":2747}],"domain":"","frontmatter":{"sidebar_label":"include"},"version":""},{"id":167,"title":"source.mainEntryName","content":"#\n\n * Type: string\n * Default: main\n\nThis option is used to configure the main entry name of Modern.js.\n\nBy default, the default main entry name of Modern.js is main. When using a\nsingle entry or the entry name is the same as the name field in package.json,\nthe corresponding entry will be used as the main entry. This configuration can\nbe used to modify the name of the main entry.\n\nFor example, change the main entry name to index:\n\n\n\nAfter building, the corresponding HTML output path will be changed to\ndist/html/index/index.html.\n\nINFO\n\nWhen the main entry name is modified, other **ByEntries configurations also need\nto be adjusted to use the modified entry name.","routePath":"/en/configure/app/source/mainEntryName","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"mainEntryName"},"version":""},{"id":168,"title":"source.moduleScopes","content":"#\n\n * Type: Array | Function\n * Default: undefined\n * Bundler: only support webpack\n\nRestrict importing paths. After configuring this option, all source files can\nonly import code from the specific paths, and import code from other paths is\nnot allowed.\n\n\nExample#\n\nFirst, we configure moduleScopes to only include the src directory:\n\n\n\nThen we import the utils/a module outside the src directory in src/App.tsx:\n\n\n\nAfter compiling, there will be a reference path error:\n\n\n\nIf we configure the utils directory in moduleScopes, the error will disappear.\n\n\n\n\nArray Type#\n\nYou can directly set several paths like this:\n\n\n\n\nFunction Type#\n\nmoduleScopes also supports setting as a function, which can be modified instead\nof overriding the default value:\n\n","routePath":"/en/configure/app/source/module-scopes","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":255},{"text":"Array Type","id":"array-type","depth":3,"charIndex":556},{"text":"Function Type","id":"function-type","depth":3,"charIndex":619}],"domain":"","frontmatter":{"sidebar_label":"moduleScopes"},"version":""},{"id":169,"title":"source.preEntry","content":"#\n\n * Type: string | string[]\n * Default: undefined\n\nAdd a script before the entry file of each page. This script will be executed\nbefore the page code. It can be used to execute global logics, such as injecting\npolyfills, setting global styles, etc.\n\nAdd a single script#\n\nFirst create a src/polyfill.ts file:\n\n\n\nThen configure src/polyfill.ts to source.preEntry:\n\n\n\nRe-run the compilation and visit any page, you can see that the code in\nsrc/polyfill.ts has been executed, and the I am a polyfill is logged in the\nconsole.\n\nAdd global style#\n\nYou can also configure the global style through source.preEntry, this CSS code\nwill be loaded earlier than the page code, such as introducing a normalize.css\nfile:\n\n\n\nAdd multiple scripts#\n\nYou can add multiple scripts by setting preEntry to an array, and they will be\nexecuted in array order:\n\n","routePath":"/en/configure/app/source/pre-entry","lang":"en","toc":[{"text":"Add a single script","id":"add-a-single-script","depth":4,"charIndex":251},{"text":"Add global style","id":"add-global-style","depth":4,"charIndex":525},{"text":"Add multiple scripts","id":"add-multiple-scripts","depth":4,"charIndex":711}],"domain":"","frontmatter":{"sidebar_label":"preEntry"},"version":""},{"id":170,"title":"source.resolveExtensionPrefix","content":"#\n\n * Type: string | Record\n * Default: undefined\n\nAdd a prefix to resolve.extensions.\n\nIf multiple files share the same name but have different extensions, Builder\nwill resolve the one with the extension listed first in the array and skip the\nrest.\n\n\nExample#\n\n\n\nWith the configuration above, the extensions array will become:\n\n\n\nWhen import './foo' in the code, the foo.web.js file will be resolved first,\nthen the foo.js file.\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nextension prefix for different targets. At this point, you need to set\nresolveExtensionPrefix to an object whose key is the corresponding build target.\n\nFor example to set different extension prefix for web and node:\n\n\n\nWhen import './foo' in the code, the foo.node.js file will be resolved for node\ntarget, and the foo.web.js file will be resolved for web target.","routePath":"/en/configure/app/source/resolve-extension-prefix","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":251},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":430}],"domain":"","frontmatter":{"sidebar_label":"resolveExtensionPrefix"},"version":""},{"id":171,"title":"source.resolveMainFields","content":"#\n\n * Type:\n\n\n\n * Default: undefined\n\nThis config will determine which field of package.json you use to import the npm\nmodule. Same as the resolve.mainFields config of webpack.\n\n\nExample#\n\n\n\nSet according to Targets#\n\nWhen you build multiple targets at the same time, you can set different\nmainFields for different targets. At this point, you need to set\nresolveMainFields to an object whose key is the corresponding build target.\n\nFor example to set different mainFields for web and node:\n\n","routePath":"/en/configure/app/source/resolve-main-fields","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":178},{"text":"Set according to Targets","id":"set-according-to-targets","depth":4,"charIndex":190}],"domain":"","frontmatter":{"sidebar_label":"resolveMainFields"},"version":""},{"id":172,"title":"source.transformImport","content":"#\n\nUsed to import the code and style of the component library on demand, which is\nequivalent to babel-plugin-import.\n\nThe difference between it and babel-plugin-import is that source.transformImport\nis not coupled with Babel. Builder will automatically identify whether the\ncurrently used tools is Babel, SWC or Rspack, and apply the corresponding\non-demand import configuration.\n\n * Type:\n\n\n\n * Default:\n\nWhen the Ant Design component library <= 4.x version is installed in the\nproject, Builder will automatically add the following default configurations:\n\n\n\nWhen the Arco Design component library is installed in the project, Builder will\nautomatically add the following default configurations:\n\n\n\nTIP\n\nWhen you add configurations for antd or @arco-design/web-react, the priority\nwill be higher than the default configurations mentioned above.\n\n\nExample#\n\nWhen using the above antd default configuration:\n\n\n\nThe source code is as follows:\n\n\n\nIt will be transformed into:\n\n\n\n\nDisable Default Config#\n\nYou can manually set transformImport: false to disable the default config.\n\n\n\nFor example, if you use externals to avoid bundling antd, because\ntransformImport will convert the imported path of antd by default, the matching\npath changes and externals cannot take effect. At this time, you can disable\ntransformImport to avoid this problem.\n\n\nConfiguration#\n\nlibraryName#\n\n * Type: string\n\nThe original import path that needs to be transformed.\n\nlibraryDirectory#\n\n * Type: string\n * Default: 'lib'\n\nUsed to splice the transformed path, the splicing rule is\n${libraryName}/${libraryDirectory}/${member}, where member is the imported\nmember.\n\nExample:\n\n\n\nOut:\n\n\n\nstyle#\n\n * Type: boolean\n * Default: undefined\n\nDetermines whether to import related styles. If it is true, the path\n${libraryName}/${libraryDirectory}/${member}/style will be imported. If it is\nfalse or undefined, the style will not be imported.\n\nWhen it is set to true:\n\n\n\nOut:\n\n\n\nstyleLibraryDirectory#\n\n * Type: string\n * Default: undefined\n\nThis configuration is used to splice the import path when importing styles. If\nthis configuration is specified, the style configuration option will be ignored.\nThe spliced import path is ${libraryName}/${styleLibraryDirectory}/${member}.\n\nWhen it is set to styles:\n\n\n\nOut:\n\n\n\ncamelToDashComponentName#\n\n * Type: boolean\n * Default: true\n\nWhether to convert camelCase imports to kebab-case.\n\nExample:\n\n\n\nOut:\n\n\n\ntransformToDefaultImport#\n\n * Type: boolean\n * Default: true\n\nWhether to convert import statements to default imports.\n\nExample:\n\n\n\nOut:\n\n\n\ncustomName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported path after conversion. The input is the imported member.\nFor example, configure it as (member) => `my-lib/${member}` , which will convert\nto .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.\n\ncustomStyleName#\n\n * Type: ((member: string) => string | undefined) | string\n * Default: undefined\n\nNote\n * Function-type configurations can only be used in Webpack builds.\n * Template-type configurations can only be used in Rspack builds or Webpack\n   builds that use SWC.\n\nCustomize the imported style path after conversion. The input is the imported\nmember. For example, configure it as (member) => `my-lib/${member}` , which will\nconvert to .\n\nWhen using Rspack to build, function configurations cannot be used, but you can\nuse handlebars template strings. For the above function configuration, you can\nuse the following template instead of my-lib/{{ member }}, or use some built-in\nhelper methods, such as my-lib/{{ kebabCase member }} to convert it to\nkebab-case format. In addition to kebabCase, there are also camelCase,\nsnakeCase, upperCase, and lowerCase that can be used.","routePath":"/en/configure/app/source/transform-import","lang":"en","toc":[{"text":"Example","id":"example","depth":3,"charIndex":847},{"text":"Disable Default Config","id":"disable-default-config","depth":3,"charIndex":976},{"text":"Configuration","id":"configuration","depth":3,"charIndex":1343},{"text":"libraryName","id":"libraryname","depth":4,"charIndex":1359},{"text":"libraryDirectory","id":"librarydirectory","depth":4,"charIndex":1446},{"text":"style","id":"style","depth":4,"charIndex":1662},{"text":"styleLibraryDirectory","id":"stylelibrarydirectory","depth":4,"charIndex":1945},{"text":"camelToDashComponentName","id":"cameltodashcomponentname","depth":4,"charIndex":2284},{"text":"transformToDefaultImport","id":"transformtodefaultimport","depth":4,"charIndex":2419},{"text":"customName","id":"customname","depth":4,"charIndex":2559},{"text":"customStyleName","id":"customstylename","depth":4,"charIndex":3432}],"domain":"","frontmatter":{"sidebar_label":"transformImport"},"version":""},{"id":173,"title":"tools.autoprefixer","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of autoprefixer by tools.autoprefixer.\n\n\nObject Type#\n\nWhen tools.autoprefixer is configured as Object type, it is merged with the\ndefault config through Object.assign. For example:\n\n\n\n\nFunction Type#\n\nWhen tools.autoprefixer is a Function, the default config is passed as the first\nparameter and can be directly modified or returned as the final result. For\nexample:\n\n","routePath":"/en/configure/app/tools/autoprefixer","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":111},{"text":"Function Type","id":"function-type","depth":3,"charIndex":256}],"domain":"","frontmatter":{"sidebar_label":"autoprefixer"},"version":""},{"id":174,"title":"tools.babel","content":"#\n\n * Type: Object | Function\n * Default: undefined\n\nWith tools.babel you can modify the options of babel-loader.\n\n\nUsage Scenarios#\n\nPlease note the limitations of tools.babel in the following usage scenarios:\n\n * Rspack scenario: When using Rspack as the bundler, using the tools.babel\n   option will significantly slow down the Rspack's build speed. This is because\n   Rspack defaults to using SWC for compilation, and configuring Babel will\n   cause the code to be compiled twice, resulting in additional compilation\n   overhead.\n * webpack + SWC scenario: When using webpack as the bundler, if you use\n   Builder's SWC plugin for code compilation, the tools.babel option will not\n   take effect.\n\n\nFunction Type#\n\nWhen tools.babel is of type Function, the default Babel configuration will be\npassed as the first parameter. You can directly modify the configuration object\nor return an object as the final babel-loader configuration.\n\n\n\nThe second parameter of the tools.babel function provides some more convenient\nutility functions. Please continue reading the documentation below.\n\nTIP\n\nThe above example is just for reference, usually you don't need to manually\nconfigure babel-plugin-import, because the Builder already provides a more\ngeneral source.transformImport configuration.\n\n\nObject Type#\n\nWhen tools.babel's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\nCAUTION\n\nNote that Object.assign is a shallow copy and will completely overwrite the\nbuilt-in presets or plugins array, please use it with caution.\n\n\n\n\nUtil Functions#\n\nWhen tools.babel is a Function, the tool functions available for the second\nparameter are as follows:\n\naddPlugins#\n\n * Type: (plugins: BabelPlugin[]) => void\n\nAdd some Babel plugins. For example:\n\n\n\naddPresets#\n\n * Type: (presets: BabelPlugin[]) => void\n\nAdd Babel preset configuration. (No need to add presets in most cases)\n\n\n\nremovePlugins#\n\n * Type: (plugins: string | string[]) => void\n\nTo remove the Babel plugin, just pass in the name of the plugin to be removed,\nyou can pass in a single string or an array of strings.\n\n\n\nremovePresets#\n\n * Type: (presets: string | string[]) => void\n\nTo remove the Babel preset configuration, pass in the name of the preset to be\nremoved, you can pass in a single string or an array of strings.\n\n\n\nmodifyPresetEnvOptions#\n\n * Type: (options: PresetEnvOptions) => void\n\nModify the configuration of @babel/preset-env, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\n\n\nmodifyPresetReactOptions#\n\n * Type: (options: PresetReactOptions) => void\n\nModify the configuration of @babel/preset-react, the configuration you pass in\nwill be shallowly merged with default config. For example:\n\n\n\naddIncludes#\n\nDeprecated, please use source.include instead, both have the same functionality.\n\naddExcludes#\n\nDeprecated, please use source.exclude instead, both have the same functionality.\n\n\nDebugging Babel Configuration#\n\nAfter modifying the babel-loader configuration through tools.babel, you can view\nthe final generated configuration in Builder debug mode.\n\nFirst, enable debug mode by using the DEBUG=builder parameter:\n\n\n\nThen open the generated (webpack|rspack).config.web.js file and search for the\nbabel-loader keyword to see the complete babel-loader configuration.","routePath":"/en/configure/app/tools/babel","lang":"en","toc":[{"text":"Usage Scenarios","id":"usage-scenarios","depth":3,"charIndex":115},{"text":"Function Type","id":"function-type","depth":3,"charIndex":702},{"text":"Object Type","id":"object-type","depth":3,"charIndex":1292},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1566},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":1686},{"text":"addPresets","id":"addpresets","depth":4,"charIndex":1782},{"text":"removePlugins","id":"removeplugins","depth":4,"charIndex":1912},{"text":"removePresets","id":"removepresets","depth":4,"charIndex":2113},{"text":"modifyPresetEnvOptions","id":"modifypresetenvoptions","depth":4,"charIndex":2323},{"text":"modifyPresetReactOptions","id":"modifypresetreactoptions","depth":4,"charIndex":2533},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":2749},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":2845},{"text":"Debugging Babel Configuration","id":"debugging-babel-configuration","depth":3,"charIndex":2942}],"domain":"","frontmatter":{"sidebar_label":"babel"},"version":""},{"id":175,"title":"tools.bundlerChain","content":"#\n\n * Type: Function | undefined\n * Default: undefined\n\nYou can modify the webpack and Rspack configuration by configuring\ntools.bundlerChain which is type of Function. The function receives two\nparameters, the first is the original bundler chain object, and the second is an\nobject containing some utils.\n\nWhat is BundlerChain\n\nBundler chain is a subset of webpack chain, which contains part of the webpack\nchain API that you can use to modify both webpack and Rspack configuration.\n\nConfigurations modified via bundler chain will work on both webpack and Rspack\nbuilds. Note that the bundler chain only supports modifying the configuration of\nthe non-differentiated parts of webpack and Rspack. For example, modifying the\ndevtool configuration option (webpack and Rspack have the same devtool property\nvalue type), or adding an Rspack-compatible webpack plugin.\n\n> tools.bundlerChain is executed earlier than tools.webpackChain / tools.webpack\n> / tools.rspack and thus will be overridden by changes in others.\n\nFor more information, please refer to Rsbuild#tools.bundlerChain","routePath":"/en/configure/app/tools/bundler-chain","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"bundlerChain"},"version":""},{"id":176,"title":"tools.cssExtract","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nThe config of CssExtractRspackPlugin / mini-css-extract-plugin can be modified\nthrough tools.cssExtract.\n\nFor detailed usage, please refer to Rsbuild - tools.cssExtract.","routePath":"/en/configure/app/tools/css-extract","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"cssExtract"},"version":""},{"id":177,"title":"tools.cssLoader","content":"#\n\n * Type: Object | Function\n * Default: undefined\n\nThe config of css-loader can be modified through tools.cssLoader. The default\nconfig is as follows:\n\n\n\nFor detailed usage, please refer to Rsbuild - tools.cssLoader.","routePath":"/en/configure/app/tools/css-loader","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"cssLoader"},"version":""},{"id":178,"title":"tools.devServer","content":"#\n\n * Type: Object\n * Default: {}\n\nThe config of DevServer can be modified through tools.devServer.\n\nTIP\n\nModern.js does not directly use webpack-dev-server or @rspack/dev-server, but\nimplement DevServer based on webpack-dev-middleware.\n\n\nOptions#\n\nafter#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware after all other middleware\ninternally within the server.\n\n\n\nwebpack-dev-server uses Express as the server-side framework. Modern.js does not\nuse any framework, and the req and res in the above middleware are all native\nNode objects. Therefore, the Express middleware used in webpack-dev-server may\nnot be directly usable in Modern.js.\n\nIf you want to migrate the Express middleware used in webpack-dev-server, you\ncan use the following method to pass the Express app as middleware:\n\n\n\nbefore#\n\n * Type: Array\n * Default: []\n\nProvides the ability to execute custom middleware prior to all other middleware\ninternally within the server.\n\n\n\nclient#\n\nWARNING\n\nDeprecated: This configuration is deprecated, please use dev.client instead.\n\n * Type:\n\n\n\n * Default:\n\n\n\nThe config of HMR client, which are usually used to set the WebSocket URL of\nHMR.\n\ncompress#\n\n * Type: boolean\n * Default: true\n\nWhether to enable gzip compression for served static assets.\n\nIf you want to disable the gzip compression, you can set compress to false:\n\n\n\ndevMiddleware#\n\n * Type:\n\n\n\n * Default:\n\n\n\nThe config of devMiddleware. Current options is the subset of\nwebpack-dev-middleware.\n\nheaders#\n\n * Type: Record\n * Default: undefined\n\nAdds headers to all responses.\n\n\n\nhistoryApiFallback#\n\n * Type: boolean | ConnectHistoryApiFallbackOptions\n * Default: false\n\nThe index.html page will likely have to be served in place of any 404 responses.\nEnable devServer.historyApiFallback by setting it to true:\n\n\n\nFor more options and information, see the connect-history-api-fallback\ndocumentation.\n\nhot#\n\n * Type: boolean\n * Default: true\n\nEnable Hot Module Replacement feature.\n\nhttps#\n\n * Type: boolean | { key: string; cert: string }\n * Default: false\n\nBy default, DevServer will be served over HTTP. It can optionally be served over\nHTTPS by setting devServer.https to true, and will disable the HTTP server.\n\nYou can also manually pass in the certificate and corresponding private key\nrequired by the HTTPS server:\n\n\n\nliveReload#\n\n * Type: boolean\n * Default: true\n\nBy default, the DevServer will reload/refresh the page when file changes are\ndetected (devServer.hot option must be disabled in order for liveReload to take\neffect). Disable devServer.liveReload by setting it to false.\n\nsetupMiddlewares#\n\n * Type:\n\n\n\n * Default: undefined\n\nProvides the ability to execute a custom function and apply custom middlewares.\n\nThe order among several different types of middleware is: devServer.before =>\nunshift => internal middlewares => push => devServer.after.\n\n\n\nIt is possible to use some server api to meet special scenario requirements:\n\n * sockWrite. Allow send some message to hmr client, and then the hmr client\n   will take different actions depending on the message type. If you send a\n   \"content changed\" message, the page will reload.\n\n\n\nproxy#\n\n * Type: Record | Record\n * Default: undefined\n\nProxying some URLs.\n\n\n\nA request to /api/users will now proxy the request to\nhttp://localhost:3000/api/users.\n\nIf you don't want /api to be passed along, we need to rewrite the path:\n\n\n\nThe DevServer Proxy makes use of the http-proxy-middleware package. Check out\nits documentation for more advanced usages.\n\nThe full type definition of DevServer Proxy is:\n\n\n\nIn addition to the http-proxy-middleware option, we also support the bypass and\ncontext configuration:\n\n * bypass: bypass the proxy based on the return value of a function.\n   * Return null or undefined to continue processing the request with proxy.\n   * Return false to produce a 404 error for the request.\n   * Return a path to serve from, instead of continuing to proxy the request.\n * context: If you want to proxy multiple, specific paths to the same target,\n   you can use an array of one or more objects with a context property.\n\n\n\n\n\nwatch#\n\n * Type: boolean\n * Default: true\n\nWhether to watch files change in directories such as mock/, server/, api/.","routePath":"/en/configure/app/tools/dev-server","lang":"en","toc":[{"text":"Options","id":"options","depth":3,"charIndex":238},{"text":"after","id":"after","depth":4,"charIndex":248},{"text":"before","id":"before","depth":4,"charIndex":822},{"text":"client","id":"client","depth":4,"charIndex":975},{"text":"compress","id":"compress","depth":4,"charIndex":1181},{"text":"devMiddleware","id":"devmiddleware","depth":4,"charIndex":1368},{"text":"headers","id":"headers","depth":4,"charIndex":1498},{"text":"historyApiFallback","id":"historyapifallback","depth":4,"charIndex":1581},{"text":"hot","id":"hot","depth":4,"charIndex":1903},{"text":"https","id":"https","depth":4,"charIndex":1984},{"text":"liveReload","id":"livereload","depth":4,"charIndex":2327},{"text":"setupMiddlewares","id":"setupmiddlewares","depth":4,"charIndex":2595},{"text":"proxy","id":"proxy","depth":4,"charIndex":3157},{"text":"watch","id":"watch","depth":4,"charIndex":4114}],"domain":"","frontmatter":{"sidebar_label":"devServer"},"version":""},{"id":179,"title":"tools.esbuild","content":"#\n\n * Type: Object\n * Default: undefined\n\nWARNING\n\nThe esbuild feature in the current document is no longer maintained, we\nrecommend using the Rspack + SWC solution, because Rspack + SWC provide better\nbuild performance, richer features, and better compatibility.\n\nPlease refer to 「Use Rspack」 for more information.\n\n\nIntroduction#\n\nesbuild is a front-end build tool based on Golang. It has the functions of\nbundling, compiling and minimizing JavaScript code. Compared with traditional\ntools, the performance is significantly improved. When minimizing code, compared\nto webpack's built-in terser minimizer, esbuild has dozens of times better\nperformance.\n\nModern.js Builder provides esbuild plugin that allow you to use esbuild instead\nof babel-loader, ts-loader and terser for transformation and minification\nprocess. When you enable esbuild in a large project, it can greatly reduce the\ntime required for code compilation and compression, while effectively avoiding\nOOM (heap out of memory) problems.\n\n\nConfiguration#\n\nYou can set the esbuild compilation behavior through the tools.esbuild config.\n\n\n\nFor config details, please refer to Modern.js Builder - Esbuild Plugin\nConfiguration.","routePath":"/en/configure/app/tools/esbuild","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":317},{"text":"Configuration","id":"configuration","depth":2,"charIndex":1004}],"domain":"","frontmatter":{"sidebar_label":"esbuild"},"version":""},{"id":180,"title":"tools.htmlPlugin","content":"#\n\n * Type: false | Object | Function\n * Default:\n\n\n\nThe configs of html-webpack-plugin or @rspack/plugin-html can be modified\nthrough tools.htmlPlugin.\n\n\nObject Type#\n\nWhen tools.htmlPlugin is Object type, the value will be merged with the default\nconfig via Object.assign.\n\n\n\n\nFunction Type#\n\nWhen tools.htmlPlugin is a Function:\n\n * The first parameter is the default config, which can be modified directly.\n * The second parameter is also an object, containing the entry name and the\n   entry value.\n * The Function can return a new object as the final config.\n\n\n\n\nBoolean Type#\n\nThe built-in html-webpack-plugin plugins can be disabled by set tools.htmlPlugin\nto false.\n\n\n\n\nDisable JS/CSS minify#\n\nBy default, Builder will compresses JavaScript/CSS code inside HTML during the\nproduction build to improve the page performance. This ability is often helpful\nwhen using custom templates or inserting custom scripts.\n\nHowever, when output.enableInlineScripts or output.enableInlineStyles is turned\non, inline JavaScript/CSS code will be repeatedly compressed, which will have a\ncertain impact on build performance. You can modify the default minify behavior\nby modifying the tools.htmlPlugin.minify configuration.\n\n","routePath":"/en/configure/app/tools/html-plugin","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":154},{"text":"Function Type","id":"function-type","depth":3,"charIndex":278},{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":568},{"text":"Disable JS/CSS minify","id":"disable-jscss-minify","depth":3,"charIndex":678}],"domain":"","frontmatter":{"sidebar_label":"htmlPlugin"},"version":""},{"id":181,"title":"tools.less","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of less-loader via tools.less.\n\n\nObject Type#\n\nWhen tools.less is configured as Object type, it is merged with the default\nconfig through Object.assign in a shallow way. It should be noted that\nlessOptions is merged through deepMerge in a deep way. For example:\n\n\n\n\nFunction Type#\n\nWhen tools.less is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor example:\n\n\n\n\nModifying Less Version#\n\nIn some scenarios, if you need to use a specific version of Less instead of the\nbuilt-in Less v4 in Builder, you can install the desired Less version in your\nproject and set it up using the implementation option of the less-loader.\n\n\n\n\nUtil Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files less-loader does not compile, You can pass in one or\nmore regular expressions to match the path of less files, for example:\n\n","routePath":"/en/configure/app/tools/less","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":103},{"text":"Function Type","id":"function-type","depth":3,"charIndex":336},{"text":"Modifying Less Version","id":"modifying-less-version","depth":3,"charIndex":599},{"text":"Util Function","id":"util-function","depth":3,"charIndex":860},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":876}],"domain":"","frontmatter":{"sidebar_label":"less"},"version":""},{"id":182,"title":"tools.minifyCss","content":"#\n\n * Type: Object | Function | undefined\n * Default:\n\n\n\nWhen building for production, Builder will minimize the CSS code through\ncss-minimizer-webpack-plugin. The config of css-minimizer-webpack-plugin can be\nmodified via tools.minifyCss.\n\n\nObject Type#\n\nWhen tools.minifyCss is Object type, it will be merged with the default config\nvia Object.assign.\n\nFor example, modify the preset config of cssnano:\n\n\n\n\nFunction Type#\n\nWhen tools.minifyCss is Function type, the default config is passed in as the\nfirst parameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\n","routePath":"/en/configure/app/tools/minify-css","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":241},{"text":"Function Type","id":"function-type","depth":3,"charIndex":408}],"domain":"","frontmatter":{"sidebar_label":"minifyCss"},"version":""},{"id":183,"title":"tools.postcss","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nBuilder integrates PostCSS by default, you can configure postcss-loader through\ntools.postcss.\n\n\nFunction Type#\n\nWhen the value is a Function, the internal default config is passed as the first\nparameter, and the config object can be modified directly without returning, or\nan object can be returned as the final result; the second parameter is a set of\ntool functions for modifying the postcss-loader config.\n\nFor example, you need to add a PostCSS plugin on the basis of the original\nplugin, and push a new plugin to the postcssOptions.plugins array:\n\n\n\nWhen you need to pass parameters to the PostCSS plugin, you can pass them in by\nfunction parameters:\n\n\n\ntools.postcss can return a config object and completely replace the default\nconfig:\n\n\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. Note that Object.assign is a shallow copy and will completely\noverwrite the built-in presets or plugins array, please use it with caution.\n\n\n\n\nUtil Functions#\n\naddPlugins#\n\n * Type: (plugins: PostCSSPlugin | PostCSSPlugin[]) => void\n\nFor adding additional PostCSS plugins, You can pass in a single PostCSS plugin,\nor an array of PostCSS plugins.\n\n\n\nTIP\n\nBuilder uses the PostCSS v8 version. When you use third-party PostCSS plugins,\nplease pay attention to whether the PostCSS version is compatible. Some legacy\nplugins may not work in PostCSS v8.","routePath":"/en/configure/app/tools/postcss","lang":"en","toc":[{"text":"Function Type","id":"function-type","depth":3,"charIndex":141},{"text":"Object Type","id":"object-type","depth":3,"charIndex":792},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1035},{"text":"addPlugins","id":"addplugins","depth":4,"charIndex":1052}],"domain":"","frontmatter":{"sidebar_label":"postcss"},"version":""},{"id":184,"title":"tools.pug","content":"#\n\n * Type: true | Object | Function | undefined\n * Default: false\n\nConfigure the Pug template engine.\n\n\nBoolean Type#\n\nPug template engine is not enabled by default, you can enable it by setting\ntools.pug to true.\n\n\n\nWhen enabled, you can use index.pug as the template file in html.template\nconfig.\n\n\nObject Type#\n\nWhen tools.terser is Object type, you can passing the Pug options:\n\n\n\nFor detailed options, please refer to Pug API Reference.\n\n\nFunction Type#\n\nWhen tools.pug is Function type, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or a value\ncan be returned as the final result.\n\n","routePath":"/en/configure/app/tools/pug","lang":"en","toc":[{"text":"Boolean Type","id":"boolean-type","depth":3,"charIndex":104},{"text":"Object Type","id":"object-type","depth":3,"charIndex":301},{"text":"Function Type","id":"function-type","depth":3,"charIndex":444}],"domain":"","frontmatter":{"sidebar_label":"pug"},"version":""},{"id":185,"title":"tools.rspack","content":"#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support Rspack\n\ntools.rspack is used to configure Rspack.\n\n\nObject Type#\n\ntools.rspack can be configured as an object to be deep merged with the built-in\nRspack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\n\n\n\nFunction Type#\n\ntools.rspack can be configured as a function. The first parameter of this\nfunction is the built-in Rspack configuration object, you can modify this\nobject, and then return it. For example:\n\n\n\nTIP\n\nThe object returned by the tools.rspack function is used directly as the final\nRspack configuration and is not merged with the built-in Rspack configuration.\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nrspack#\n\n * Type: typeof import('@rspack/core')\n\nThe Rspack instance. For example:\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional Rspack rules.\n\nFor example:\n\n\n\nprependPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal Rspack plugins array, and the\nplugin will be executed first.\n\n\n\nappendPlugins#\n\n * Type: (plugins: RspackPluginInstance | RspackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal Rspack plugins array, the\nplugin will be executed last.\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal Rspack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal webpack-bundle-analyzer:\n\n\n\nmergeConfig#\n\n * Type: (...configs: RspackConfig[]) => RspackConfig\n\nUsed to merge multiple Rspack configs, same as webpack-merge.\n\n","routePath":"/en/configure/app/tools/rspack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":140},{"text":"Function Type","id":"function-type","depth":3,"charIndex":329},{"text":"Utils","id":"utils","depth":3,"charIndex":821},{"text":"env","id":"env","depth":4,"charIndex":829},{"text":"isProd","id":"isprod","depth":4,"charIndex":1010},{"text":"target","id":"target","depth":4,"charIndex":1146},{"text":"isServer","id":"isserver","depth":4,"charIndex":1292},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":1408},{"text":"rspack","id":"rspack","depth":4,"charIndex":1539},{"text":"addRules","id":"addrules","depth":4,"charIndex":1625},{"text":"prependPlugins","id":"prependplugins","depth":4,"charIndex":1737},{"text":"appendPlugins","id":"appendplugins","depth":4,"charIndex":1944},{"text":"removePlugin","id":"removeplugin","depth":4,"charIndex":2144},{"text":"mergeConfig","id":"mergeconfig","depth":4,"charIndex":2342}],"domain":"","frontmatter":{"sidebar_label":"rspack"},"version":""},{"id":186,"title":"tools.sass","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nYou can modify the config of sass-loader via tools.sass.\n\n\nObject Type#\n\nWhen tools.sass is Object type, it is merged with the default config through\nObject.assign. It should be noted that sassOptions is merged through deepMerge\nin a deep way.\n\nFor example:\n\n\n\n\nFunction Type#\n\nWhen tools.sass is a Function, the default config is passed as the first\nparameter, which can be directly modified or returned as the final result. The\nsecond parameter provides some utility functions that can be called directly.\nFor Example:\n\n\n\n\nModifying Sass Version#\n\nIn some scenarios, if you need to use a specific version of Sass instead of the\nbuilt-in Dart Sass v1 in Builder, you can install the desired Sass version in\nyour project and set it up using the implementation option of the sass-loader.\n\n\n\n\nUtility Function#\n\naddExcludes#\n\n * Type: (excludes: RegExp | RegExp[]) => void\n\nUsed to specify which files sass-loader does not compile, You can pass in one or\nmore regular expressions to match the path of sass files, for example:\n\n","routePath":"/en/configure/app/tools/sass","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":103},{"text":"Function Type","id":"function-type","depth":3,"charIndex":306},{"text":"Modifying Sass Version","id":"modifying-sass-version","depth":3,"charIndex":569},{"text":"Utility Function","id":"utility-function","depth":3,"charIndex":835},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":854}],"domain":"","frontmatter":{"sidebar_label":"sass"},"version":""},{"id":187,"title":"tools.styleLoader","content":"#\n\n * Type: Object | Function\n * Default: {}\n\nThe config of style-loader can be set through tools.styleLoader.\n\nIt is worth noting that Builder does not enable style-loader by default. You can\nuse output.disableCssExtract config to enable it.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default config via\nObject.assign. For example:\n\n\n\n\nFunction Type#\n\nWhen the value is a Function, the default config is passed in as the first\nparameter. You can modify the config object directly, or return an object as the\nfinal config. For example:\n\n","routePath":"/en/configure/app/tools/style-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":244},{"text":"Function Type","id":"function-type","depth":3,"charIndex":361}],"domain":"","frontmatter":{"sidebar_label":"styleLoader"},"version":""},{"id":188,"title":"tools.styledComponents","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\ntools.styledComponents config is corresponding to\nbabel-plugin-styled-components, or @swc/plugin-styled-components when using SWC\nplugin.\n\nWhen the value is an Object, use the Object.assign function to merge with the\ndefault config. For example:\n\n\n\nWhen the config is a Function, the first parameter is the default configuration,\nand the second parameter provides some utility functions that can be called\ndirectly:\n\n\n\nThe feature is enabled by default, and you can configure tools.styledComponents\nto false to disable this behavior, which can improve build performance:\n\n","routePath":"/en/configure/app/tools/styled-components","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_label":"styledComponents"},"version":""},{"id":189,"title":"tools.swc","content":"#\n\n * Type: Object | Function\n * Default: undefined\n\n\nIntroduction#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js has a out-of-box plugin for SWC, power your Web application with\nPolyfill and minification, we also port some common used Babel plugins to SWC.\n\nTIP\n\nWhen using Rspack as the bundler, SWC will be used for transpiling and\ncompression by default, so you don't need to install or configure the SWC\nplugin.\n\n\nUsed in Rspack mode#\n\nYou can set the options of builtin:swc-loader through tools.swc.\n\n\n\nFor more usage, please refer to Rsbuild - tools.swc.\n\n\nUsed in Webpack mode#\n\nFirst, you need to execute pnpm run new to enable the SWC compile:\n\n\n\nAfter the installation, please register the SWC plugin in the modern.config.ts\nfile, then the SWC compilation and compression will be enabled.\n\n\n\n\nConfig#\n\nYou can set the SWC compilation behavior through the tools.swc config.\n\n\n\nOr using function to have more customize config, or to modify the default\nconfig.\n\n\n\nFor config details, please refer to Modern.js Builder - SWC Plugin\nConfiguration.","routePath":"/en/configure/app/tools/swc","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":53},{"text":"Used in Rspack mode","id":"used-in-rspack-mode","depth":2,"charIndex":575},{"text":"Used in Webpack mode","id":"used-in-webpack-mode","depth":2,"charIndex":720},{"text":"Config","id":"config","depth":3,"charIndex":960}],"domain":"","frontmatter":{"sidebar_label":"swc"},"version":""},{"id":190,"title":"tools.tailwindcss","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nUsed to modify the configuration of Tailwind CSS.\n\n\nEnabling Tailwind CSS#\n\nBefore using tools.tailwindcss, you need to enable the Tailwind CSS plugin for\nModern.js.\n\nPlease refer to the section Using Tailwind CSS for instructions on how to enable\nit.\n\n\nFunction Type#\n\nWhen tools.tailwindcss's type is Function, the default tailwindcss config will\nbe passed in as the first parameter, the config object can be modified directly,\nor a value can be returned as the final result.\n\n\n\n\nObject Type#\n\nWhen tools.tailwindcss's type is Object, the config will be shallow merged with\ndefault config by Object.assign.\n\n\n\n\nNotes#\n\nPlease note:\n\n * If you are using both the tailwind.config.{ts,js} file and tools.tailwindcss\n   option, the configuration defined in tools.tailwindcss will take precedence\n   and override the content defined in tailwind.config.{ts,js}.\n * If you are using the source.designSystem configuration option simultaneously,\n   the theme configuration of Tailwind CSS will be overridden by the value of\n   source.designSystem.\n\nThe usage of other configurations follows the same approach as the official\nusage of Tailwind CSS. Please refer to tailwindcss - Configuration for more\ndetails.\n\n\nAbout source.designSystem#\n\nsource.designSystem is a deprecated configuration option in Modern.js.\n\nStarting from Modern.js v2.33.0, you can use the theme configuration option of\nTailwind CSS as a replacement for source.designSystem. It is no longer necessary\nto split the theme configuration and set it on designSystem.\n\n * Previous usage:\n\n\n\n * Current usage:\n\n","routePath":"/en/configure/app/tools/tailwindcss","lang":"en","toc":[{"text":"Enabling Tailwind CSS","id":"enabling-tailwind-css","depth":3,"charIndex":96},{"text":"Function Type","id":"function-type","depth":3,"charIndex":298},{"text":"Object Type","id":"object-type","depth":3,"charIndex":526},{"text":"Notes","id":"notes","depth":3,"charIndex":657},{"text":"About source.designSystem","id":"about-sourcedesignsystem","depth":3,"charIndex":1249}],"domain":"","frontmatter":{"sidebar_label":"tailwindcss"},"version":""},{"id":191,"title":"tools.terser","content":"#\n\n * Type: Object | Function | undefined\n * Default:\n\n\n\n * Bundler: only support webpack\n\nWhen building for production, Builder will minimize the JavaScript code through\nterser-webpack-plugin. The config of terser-webpack-plugin can be modified via\ntools.terser.\n\n\nObject Type#\n\nWhen tools.terser is Object type, it will be merged with the default config via\nObject.assign.\n\nFor example, to exclude some files from minification:\n\n\n\n\nFunction Type#\n\nWhen tools.terser is Function type, the default config is passed in as the first\nparameter, the config object can be modified directly, or a value can be\nreturned as the final result.\n\n\n\nDisable code minification\n\nIf you need to disable code minification, you can use the output.disableMinimize\nconfiguration.","routePath":"/en/configure/app/tools/terser","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":265},{"text":"Function Type","id":"function-type","depth":3,"charIndex":433}],"domain":"","frontmatter":{"sidebar_label":"terser"},"version":""},{"id":192,"title":"tools.tsChecker","content":"#\n\n * Type: Object | Function\n * Default:\n\n\n\nBy default, the fork-ts-checker-webpack-plugin is enabled for type checking. You\ncan use output.disableTsChecker config to disable it.\n\n\nObject Type#\n\nWhen the value of tsChecker is of type Object, it will be deeply merged with the\ndefault configuration.\n\n\n\n\nFunction Type#\n\nWhen the value of tsChecker is of type Function, the default configuration will\nbe passed as the first argument. You can directly modify the configuration\nobject or return an object as the final configuration.\n\n","routePath":"/en/configure/app/tools/ts-checker","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":181},{"text":"Function Type","id":"function-type","depth":3,"charIndex":303}],"domain":"","frontmatter":{"sidebar_label":"tsChecker"},"version":""},{"id":193,"title":"tools.tsLoader","content":"#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nAlternatives for ts-loader\n\nUsing babel-loader or Rspack instead of ts-loader can significantly improve\ncompilation speed and provide better extendability.\n\nts-loader cannot be used with certain features such as source.transformImport\nand tools.styledComponents provided by Babel & SWC.\n\nts-loader is not enabled by default in the project. When tools.tsLoader is not\nundefined, builder will use ts-loader instead of babel-loader to compile\nTypeScript code.\n\n\nObject Type#\n\nWhen this value is an Object, it is merged with the default configuration via\nObject.assign.\n\nThe default configuration is as follows:\n\n\n\nYou can override the default configuration via the tools.tsLoader configuration\noption:\n\n\n\n\nFunction Type#\n\nWhen this value is a Function, the default configuration is passed in as the\nfirst parameter, the configuration object can be modified directly, or an object\ncan be returned as the final configuration.The second parameter is the util\nfunctions to modify the ts-loader configuration. For example:\n\n\n\n\nUtil Functions#\n\naddIncludes#\n\nDeprecated, please use source.include instead, both have the same functionality.\n\naddExcludes#\n\nDeprecated, please use source.exclude instead, both have the same functionality.","routePath":"/en/configure/app/tools/ts-loader","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":556},{"text":"Function Type","id":"function-type","depth":3,"charIndex":800},{"text":"Util Functions","id":"util-functions","depth":3,"charIndex":1116},{"text":"addIncludes","id":"addincludes","depth":4,"charIndex":1133},{"text":"addExcludes","id":"addexcludes","depth":4,"charIndex":1229}],"domain":"","frontmatter":{"sidebar_label":"tsLoader"},"version":""},{"id":194,"title":"tools.webpackChain","content":"#\n\n * Type: Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\nYou can modify the webpack configuration by configuring tools.webpackChain which\nis type of Function. The function receives two parameters, the first is the\noriginal webpack chain object, and the second is an object containing some\nutils.\n\nCompared with tools.webpack, webpack-chain not only supports chained calls, but\nalso can locate built-in Rule or Plugin based on aliases, so as to achieve\nprecise config modification. We recommend using tools.webpackChain instead of\ntools.webpack.\n\n> tools.webpackChain is executed earlier than tools.webpack and thus will be\n> overridden by changes in tools.webpack.\n\n\nUtils#\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current environment. For\nexample:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\n\n\nCHAIN_ID#\n\nSome common Chain IDs are predefined in the Builder, and you can use these IDs\nto locate the built-in Rule or Plugin.\n\nTIP\n\nPlease note that some of the rules or plugins listed below are not available by\ndefault. They will only be included in the webpack configuration when you enable\nspecific options or register certain plugins.\n\nFor example, the RULE.STYLUS rule exists only when the Stylus plugin is\nregistered.\n\nCHAIN_ID.RULE#\n\nID            DESCRIPTION\nRULE.JS       Rule for js\nRULE.TS       Rule for ts\nRULE.CSS      Rule for css\nRULE.LESS     Rule for less\nRULE.SASS     Rule for sass\nRULE.STYLUS   Rule for stylus(requires Stylus plugin)\nRULE.SVG      Rule for svg\nRULE.PUG      Rule for pug\nRULE.TOML     Rule for toml\nRULE.YAML     Rule for yaml\nRULE.WASM     Rule for WASM\nRULE.NODE     Rule for node\nRULE.FONT     Rule for font\nRULE.IMAGE    Rule for image\nRULE.MEDIA    Rule for media\n\nCHAIN_ID.ONE_OF#\n\nONE_OF.XXX can match a certain type of rule in the rule array.\n\nID                  DESCRIPTION\nONE_OF.SVG          Rules for SVG, automatic choice between data URI and\n                    separate file\nONE_OF.SVG_URL      Rules for SVG, output as a separate file\nONE_OF.SVG_INLINE   Rules for SVG, inlined into bundles as data URIs\nONE_OF.SVG_ASSETS   Rules for SVG, automatic choice between data URI and\n                    separate file\n\nCHAIN_ID.USE#\n\nUSE.XXX can match a certain loader.\n\nID                                DESCRIPTION\nUSE.TS                            correspond to ts-loader\nUSE.CSS                           correspond to css-loader\nUSE.LESS                          correspond to less-loader\nUSE.SASS                          correspond to sass-loader\nUSE.STYLUS                        correspond to stylus-loader\nUSE.PUG                           correspond to pug-loader\nUSE.VUE                           correspond to vue-loader\nUSE.TOML                          correspond to toml-loader\nUSE.YAML                          correspond to yaml-loader\nUSE.NODE                          correspond to node-loader\nUSE.URL                           correspond to url-loader\nUSE.SVGR                          correspond to @svgr/webpack\nUSE.BABEL                         correspond to babel-loader\nUSE.STYLE                         correspond to style-loader\nUSE.POSTCSS                       correspond to postcss-loader\nUSE.CSS_MODULES_TS                correspond to css-modules-typescript-loader\nUSE.MINI_CSS_EXTRACT              correspond to mini-css-extract-plugin.loader\nUSE.RESOLVE_URL_LOADER_FOR_SASS   correspond to resolve-url-loader\n\nCHAIN_ID.PLUGIN#\n\nPLUGIN.XXX can match a certain webpack plugin.\n\nID                             DESCRIPTION\nPLUGIN.HMR                     correspond to HotModuleReplacementPlugin\nPLUGIN.COPY                    correspond to CopyWebpackPlugin\nPLUGIN.HTML                    correspond to HtmlWebpackPlugin, you need to splice the\n                               entry name when using: ${PLUGIN.HTML}-${entryName}\nPLUGIN.DEFINE                  correspond to DefinePlugin\nPLUGIN.IGNORE                  correspond to IgnorePlugin\nPLUGIN.BANNER                  correspond to BannerPlugin\nPLUGIN.PROGRESS                correspond to Webpackbar\nPLUGIN.APP_ICON                correspond to AppIconPlugin\nPLUGIN.MANIFEST                correspond to WebpackManifestPlugin\nPLUGIN.TS_CHECKER              correspond to ForkTsCheckerWebpackPlugin\nPLUGIN.INLINE_HTML             correspond to InlineChunkHtmlPlugin\nPLUGIN.BUNDLE_ANALYZER         correspond to WebpackBundleAnalyzer\nPLUGIN.MINI_CSS_EXTRACT        correspond to MiniCssExtractPlugin\nPLUGIN.VUE_LOADER_PLUGIN       correspond to VueLoaderPlugin\nPLUGIN.REACT_FAST_REFRESH      correspond to ReactFastRefreshPlugin\nPLUGIN.NODE_POLYFILL_PROVIDE   correspond to ProvidePlugin for node polyfills\nPLUGIN.SUBRESOURCE_INTEGRITY   correspond to webpack-subresource-integrity\nPLUGIN.ASSETS_RETRY            correspond to webpack static asset retry plugin in Builder\nPLUGIN.AUTO_SET_ROOT_SIZE      correspond to automatically set root font size plugin in\n                               Builder\n\nCHAIN_ID.MINIMIZER#\n\nMINIMIZER.XXX can match a certain minimizer.\n\nID                  DESCRIPTION\nMINIMIZER.JS        correspond to TerserWebpackPlugin\nMINIMIZER.CSS       correspond to CssMinimizerWebpackPlugin\nMINIMIZER.ESBUILD   correspond to ESBuildPlugin\nMINIMIZER.SWC       correspond to SwcWebpackPlugin\n\n\nExamples#\n\nFor usage examples, please refer to: WebpackChain usage examples.","routePath":"/en/configure/app/tools/webpack-chain","lang":"en","toc":[{"text":"Utils","id":"utils","depth":3,"charIndex":698},{"text":"env","id":"env","depth":4,"charIndex":706},{"text":"isProd","id":"isprod","depth":4,"charIndex":887},{"text":"target","id":"target","depth":4,"charIndex":1023},{"text":"isServer","id":"isserver","depth":4,"charIndex":1174},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":1290},{"text":"webpack","id":"webpack","depth":4,"charIndex":1421},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":1504},{"text":"CHAIN_ID","id":"chain_id","depth":4,"charIndex":1606},{"text":"CHAIN_ID.RULE","id":"chain_idrule","depth":4,"charIndex":2034},{"text":"CHAIN_ID.ONE_OF","id":"chain_idone_of","depth":4,"charIndex":2518},{"text":"CHAIN_ID.USE","id":"chain_iduse","depth":4,"charIndex":2977},{"text":"CHAIN_ID.PLUGIN","id":"chain_idplugin","depth":4,"charIndex":4203},{"text":"CHAIN_ID.MINIMIZER","id":"chain_idminimizer","depth":4,"charIndex":5744},{"text":"Examples","id":"examples","depth":3,"charIndex":6058}],"domain":"","frontmatter":{"sidebar_label":"webpackChain"},"version":""},{"id":195,"title":"tools.webpack","content":"#\n\n * Type: Object | Function | undefined\n * Default: undefined\n * Bundler: only support webpack\n\ntools.webpack is used to configure webpack.\n\n> tools.bundlerChain is also used to modify the webpack configuration, and the\n> function is more powerful. It is recommended to use tools.bundlerChain first.\n\n\nObject Type#\n\ntools.webpack can be configured as an object to be deep merged with the built-in\nwebpack configuration through webpack-merge.\n\nFor example, add resolve.alias configuration:\n\n\n\n\nFunction Type#\n\ntools.webpack can be configured as a function. The first parameter of this\nfunction is the built-in webpack configuration object, you can modify this\nobject, and then return it. For example:\n\n\n\nTIP\n\nThe object returned by the tools.webpack function is used directly as the final\nwebpack configuration and is not merged with the built-in webpack configuration.\n\n\nUtils#\n\nThe second parameter of this function is an object, which contains some utility\nfunctions and properties, as follows:\n\nenv#\n\n * Type: 'development' | 'production' | 'test'\n\nThe env parameter can be used to determine whether the current environment is\ndevelopment, production or test. For example:\n\n\n\nisProd#\n\n * Type: boolean\n\nThe isProd parameter can be used to determine whether the current environment is\nproduction. For example:\n\n\n\ntarget#\n\n * Type: 'web' | 'node' | 'modern-web' | 'web-worker'\n\nThe target parameter can be used to determine the current target. For example:\n\n\n\nisServer#\n\n * Type: boolean\n\nDetermines whether the target environment is node, equivalent to target ===\n'node'.\n\n\n\nisWebWorker#\n\n * Type: boolean\n\nDetermines whether the target environment is web-worker, equivalent to target\n=== 'web-worker'.\n\n\n\nwebpack#\n\n * Type: typeof import('webpack')\n\nThe webpack instance. For example:\n\n\n\nHtmlWebpackPlugin#\n\n * Type: typeof import('html-webpack-plugin')\n\nThe HtmlWebpackPlugin instance:\n\n\n\naddRules#\n\n * Type: (rules: RuleSetRule | RuleSetRule[]) => void\n\nAdd additional webpack rules.\n\nFor example:\n\n\n\nprependPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins to the head of the internal webpack plugins array, and\nthe plugin will be executed first.\n\n\n\nappendPlugins#\n\n * Type: (plugins: WebpackPluginInstance | WebpackPluginInstance[]) => void\n\nAdd additional plugins at the end of the internal webpack plugins array, the\nplugin will be executed last.\n\n\n\nremovePlugin#\n\n * Type: (name: string) => void\n\nRemove the internal webpack plugin, the parameter is the constructor.name of the\nplugin.\n\nFor example, remove the internal fork-ts-checker-webpack-plugin:\n\n\n\nmergeConfig#\n\n * Type: (...configs: WebpackConfig[]) => WebpackConfig\n\nUsed to merge multiple webpack configs, same as webpack-merge.\n\n","routePath":"/en/configure/app/tools/webpack","lang":"en","toc":[{"text":"Object Type","id":"object-type","depth":3,"charIndex":303},{"text":"Function Type","id":"function-type","depth":3,"charIndex":494},{"text":"Utils","id":"utils","depth":3,"charIndex":872},{"text":"env","id":"env","depth":4,"charIndex":999},{"text":"isProd","id":"isprod","depth":4,"charIndex":1180},{"text":"target","id":"target","depth":4,"charIndex":1316},{"text":"isServer","id":"isserver","depth":4,"charIndex":1462},{"text":"isWebWorker","id":"iswebworker","depth":4,"charIndex":1578},{"text":"webpack","id":"webpack","depth":4,"charIndex":1709},{"text":"HtmlWebpackPlugin","id":"htmlwebpackplugin","depth":4,"charIndex":1792},{"text":"addRules","id":"addrules","depth":4,"charIndex":1894},{"text":"prependPlugins","id":"prependplugins","depth":4,"charIndex":2007},{"text":"appendPlugins","id":"appendplugins","depth":4,"charIndex":2217},{"text":"removePlugin","id":"removeplugin","depth":4,"charIndex":2420},{"text":"mergeConfig","id":"mergeconfig","depth":4,"charIndex":2626}],"domain":"","frontmatter":{"sidebar_label":"webpack"},"version":""},{"id":196,"title":"Configuring Modern.js","content":"#\n\nThere are two configurations in the Modern.js, a compile configuration and a\nserver runtime configuration.\n\nThe compile configuration can be configured in two places:\n\n * modern.config.(ts|js|mjs) file in the root path\n * package.json file\n\nINFO\n\nConfigurations in both package.json and modern.config.ts file are not supported\nfor the same configuration. Configuration in modern.config.ts is recommended.\n\nServer runtime configuration can be configured in the\nmodern.server-runtime.config.(ts|js|mjs) file in the root path.\n\n\nConfigure in the configuration file#\n\nModern.js configuration files are defined in the root path of the project, and\nsupports .ts, .js and .mjs formats:\n\n * modern.config.ts\n * modern.config.js\n * modern.config.mjs\n\n\nmodern.config.ts (recommended)#\n\nWe recommend using configuration files in .ts format, which provides friendly\nTypeScript type hints to help you avoid configuration errors.\n\nImport the defineConfig tool function from @modern-js/app-tools, which will help\nyou with configuration type derivation and type completion:\n\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\n\n\n\nmodern.config.js#\n\nIf you are developing a non-TypeScript project, you can use the configuration\nfile in .js format:\n\n\n\nYou can also configure depending on your environment with process.env.NODE_ENV:\n\n\n\n\nExport Configuration Function#\n\nModern.js supports exporting a function in the configuration file, and you can\ndynamically compute the configuration in the function and return it to\nModern.js.\n\n\n\nThis function takes the following parameters:\n\n * env: same as the value of process.env.NODE_ENV.\n   * When running modern dev or modern start, the value of env is development.\n   * When running modern build or modern serve, the value of env is production.\n   * When running modern test, the value of env is test.\n * command: corresponds to the currently running command, such as dev, start,\n   build, serve.\n\n\nExport Async Function#\n\nModern.js also supports exporting an asynchronous function in the configuration\nfile, you can perform some asynchronous operations in the function:\n\n\n\n\nSpecify the Configuration File#\n\nYou can specify the name of the configuration file using the --config option.\n\nFor example, if you need to use the modern.prod.config.js file when running\nbuild, you can add the following scripts to package.json:\n\n\n\nYou can also abbreviate the --config option to -c:\n\n\n\n\nConfigure in package.json (not recommended)#\n\nIn addition to configuration files, configuration options can also be set the\nmodernConfig field in the package.json, such as:\n\n\n\nDue to the limitation of the JSON file format, only simple types such as\nnumbers, strings, boolean values, arrays, etc. can be defined in package.json.\nWhen we need to set the value of the function type, it is recommended to do so\nin the Modern.js configuration file.\n\n\nNote#\n\n * It is not recommended to use both package.json and modern.config.t[j]s for\n   configuration. If both are used and a configuration conflict occurs,\n   Modern.js will prompt error on the command line.\n * @modern-js/runtime exports the defineConfig API of the same name, please pay\n   attention to the distinction.\n\n\nDebug configuration locally#\n\nTo facilitate local debugging configuration locally, Modern.js supports creating\nmodern.config.local.(ts|js|mjs) files in the root directory of the project to\noverride modern.config.(ts|js|mjs) configurations.\n\n\nExample#\n\nFor example, the port number is configured as 3000 in modern.config.ts:\n\n\n\nIf you need to change the port number to 3001 to debugging locally, but you\ndon't want to change the modern.config.ts file of the current project, you can\ncreate a modern.config.local.ts file and add the following configuration:\n\n\n\nThe configuration in the modern.config.local.ts file will be deep merged with\nthe configuration in modern.config.ts and override the configurations in\nmodern.config.ts, so server.port will be is overridden by 3001.\n\n\nNote#\n\nWhen using modern.config.local.ts, please note the following:\n\n * The modern.config.local.ts file is only loaded when running modern dev or\n   modern start commands, and will not be loaded when running modern build.\n * The modern.config.local.ts file overrides not only over modern.config.ts, but\n   also the modernConfig field in package.json.\n * As modern.config.local.ts is only used for local debugging, it is not\n   recommended to commit it to the repository, please ensure that the project's\n   .gitignore file contains modern.config.local.ts.\n\n\n\n\nMerge Multiple Configurations#\n\nIn some cases, you may need to merge multiple configurations into one\nconfiguration. You can use the mergeConfig util to merge multiple\nconfigurations.\n\nThe mergeConfig function accepts an array as a parameter, and each item in the\narray is a configuration object. mergeConfig will deeply merge each\nconfiguration object in the array, automatically merge multiple functions into\nan array, and returns a merged configuration object.\n\n\nExample#\n\n\n\nIn the above example, the merged configuration object is:\n\n\n\n\nConfiguration Type#\n\nModern.js exports AppUserConfig type, which corresponds to the type of Modern.js\nconfiguration object:\n\n\n\nWhen using Rspack as the bundler, due to some differences in configuration types\nbetween webpack and Rspack, you need to specify <'rspack'> generic type for\ndefineConfig:\n\n","routePath":"/en/configure/app/usage","lang":"en","toc":[{"text":"Configure in the configuration file","id":"configure-in-the-configuration-file","depth":2,"charIndex":528},{"text":"modern.config.ts (recommended)","id":"modernconfigts-recommended","depth":3,"charIndex":745},{"text":"modern.config.js","id":"modernconfigjs","depth":3,"charIndex":1238},{"text":"Export Configuration Function","id":"export-configuration-function","depth":3,"charIndex":1442},{"text":"Export Async Function","id":"export-async-function","depth":3,"charIndex":2049},{"text":"Specify the Configuration File","id":"specify-the-configuration-file","depth":3,"charIndex":2225},{"text":"Configure in package.json (not recommended)","id":"configure-in-packagejson-not-recommended","depth":2,"charIndex":2529},{"text":"Note","id":"note","depth":3,"charIndex":2975},{"text":"Debug configuration locally","id":"debug-configuration-locally","depth":2,"charIndex":3299},{"text":"Example","id":"example","depth":3,"charIndex":3541},{"text":"Note","id":"note-1","depth":3,"charIndex":4075},{"text":"Merge Multiple Configurations","id":"merge-multiple-configurations","depth":2,"charIndex":4636},{"text":"Example","id":"example-1","depth":3,"charIndex":5102},{"text":"Configuration Type","id":"configuration-type","depth":2,"charIndex":5176}],"domain":"","frontmatter":{"sidebar_position":0},"version":""},{"id":197,"title":"Frameworks","content":"#\n\nModern.js's BFF supports different runtime frameworks, currently Modern.js's BFF\nsupports two runtime frameworks: Express.js and Koa.js.\n\n\nFunction Mode#\n\nUnder the function writing, only the middleware writing method of various\nruntime frameworks is different, and other implementations are basically the\nsame. Take Express as an example to introduce how to write a middleware by hand\nin the api/_ app.ts and add permission verification:\n\n\n\nThen add a normal BFF function /api/hello.ts:\n\n\n\nFinally, add the access code of the interface in the front-end src/App.tsx, and\ncall it directly in an integrated way:\n\n\n\nThen exec pnpm run dev starts the project, and accessing http://localhost:8080/\nwill find that the request for'/api/hello 'is blocked:\n\n\n\nFinally, modify the front-end code src/App.tsx to call the login interface\nbefore accessing /api/hello:\n\n\n\nRefresh the page and you can see that /api/hello was accessed successfully:\n\n\n\nThe above code simulates the way to add middleware to the /api/_app.ts to\nachieve an easy login function. Also, other functions can be implemented in this\nhook file to extend BFF Server.\n\n\nFramework Mode#\n\nUnder the framework writing, Modern.js does not collect middleware in the\napi/_app.ts, and the running process is controlled by the plugin itself.\n\n\nExpress#\n\nThe framework writing of Express supports defining the startup logic of API\nServer in api/app.[tj]s. performing the initialization work of the application,\nadding global middleware, declaring routes, and even extending the original\nframework.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\n\n\n\nKoa#\n\nThe Koa framework is written in a similar way to Express. It supports defining\nthe startup logic of API Server in app.[tj]s, performing the initialization work\nof the application, adding global middleware, declaring routes, extending the\noriginal framework, etc.\n\nThe route defined by the BFF function will be registered after the route defined\nby the app.ts file, so here you can also intercept the route defined by the BFF\nfunction, preprocess or respond in advance.\n\nCAUTION\n\nUse the framework writing, when there is no app.ts, Modern.js will add koa-body\nby default. When there is app.ts, if the developer wants to use the BFF function\nwith Body, he needs to ensure that the koa-body middleware has been added.\n\n","routePath":"/en/guides/advanced-features/bff/frameworks","lang":"en","toc":[{"text":"Function Mode","id":"function-mode","depth":2,"charIndex":141},{"text":"Framework Mode","id":"framework-mode","depth":2,"charIndex":1128},{"text":"Express","id":"express","depth":3,"charIndex":1294},{"text":"Koa","id":"koa","depth":3,"charIndex":1757}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":198,"title":"Basic Usage","content":"#\n\nApplications developed with Modern.js can define API functions in the api/\ndirectory, which can be called by the front-end to send requests without writing\nfront and back-end glue layer code, At the same time, it ensures the type safety\nof the front and back end\n\n\nEnable BFF#\n\n 1. Execute pnpm new and select \"Enable BFF\"\n\n 2. Add the following code to modern.config.[tj]s according to the chosen\n    runtime framework:\n\n\nBFF Function#\n\nThe functions that are allowed to be called through integration are called BFF\nfunctions. Here is the simplest BFF function to write, creating an api/hello.ts\nfile:\n\n\n\nThen directly import the function in src/App.tsx and call:\n\n\n\nINFO\n\nModern.js generator has already configured the @api alias in tsconfig.json, so\nyou can import functions directly by aliases.\n\nThe functions import in src/App.tsx will be automatically converted into\ninterface calls, so there is no need to call the interface through fetch.\n\nExecute pnpm run dev, then open http://localhost:8080/ to see that the page has\ndisplayed the content returned by the BFF function. In Network, you can see that\nthe page sent a request to http://localhost:8080/api/hello.\n\n\n\n\nAPI Routes#\n\nIn Modern.js, the BFF function routing system is implemented based on the file\nsystem, and it is also a conventional routing system.\n\nIn Function Mode, All files under api/ will map to an interface. In Framework\nMode, All files under api/lambda will map to an interface\n\nNOTE\n\nFunction Mode & Framework Mode will introduce soon.\n\nAll routes generated by BFF functions have a prefix, and the default value is\n/api. The prefix can be set through bff.prefix.\n\nSeveral routing conventions are described as follow.\n\n\nDefault Route#\n\nFiles named index.[jt]s are mapped to the previous directory.\n\n * api/index.ts -> {prefix}/\n * api/user/index.ts -> {prefix}/user\n\n\nMulti-layer Routing#\n\nSupports parsing nested files, if you create a nested folder structure, the\nfiles will still automatically parse routes in the same way.\n\n * api/hello.ts -> {prefix}/hello\n * api/user/list.ts -> {prefix}/user/list\n\n\nDynamic Routing#\n\nCreate folders or files named with [xxx] to support dynamic named routing\nparameters.\n\n * api/user/[username]/info.ts -> {prefix}/user/:username/info\n * api/user/username/[action].ts -> {prefix}/user/username/:action\n\n\nAllow List#\n\nBy default, all files in the'api/'directory will be parsed as BFF function\nfiles, but the following files will not be parsed:\n\n * file name start with _, for example _utils.ts.\n * files in directory which name start with _, for example\n   _utils/index.ts、_utils/cp.ts.\n * test files, for example foo.test.ts.\n * type files, for example hello.d.ts.\n * files in node_module.\n\n\nRESTful API#\n\nModern.js BFF functions need to be defined according to the RESTful API\nstandard, follow the HTTP Method specification, and do not allow free parameter\ndefinition.\n\nINFO\n\nAssuming that the function allows free definition of parameters, the resulting\nroute must be called by the private protocol (the reason is that the request\nparameters cannot be distinguished from the request body), and cannot implement\nany RESTful API.\n\nIf the service is only used for the application itself, there is no problem. but\nits non-standard interface definition cannot be integrated into the larger\nsystem. In the case of multiple systems working together (such as BFF low-code\nconstruction), other systems also need to follow the private protocol.\n\n\nFunction Named Export#\n\nModern.js the export name of the BFF function determines the Method of the\ncorresponding interface of the function, such as get, post and so on.\n\nFor example, following the example, a GET interface can be exported.\n\n\n\nFollowing the example below, a POST interface can be exported.\n\n\n\n * Modern.js supports 9 definitions for HTTP Method:\n   GET、POST、PUT、DELETE、CONNECT、TRACE、PATCH、OPTIONS、HEAD, can be exported using\n   these methods as functions.\n\n * The name is size insensitive, if GET, can write get、Get、GEt、GET, can be\n   accurately identified. But default export as export default xxx will be map\n   to Get.\n\n * Multiple functions of different Methods can be defined in one file, but if\n   multiple functions of the same Method are defined, only the first will take\n   effect.\n\nINFO\n\nIt should be noted that the defined functions should all be asynchronous, which\nis related to the type when the function is called, which will be mentioned\nlater.\n\n\nFunction Parameter Rule#\n\nAs mentioned above, in order to meet the design criteria of RESTful APIs, the\nBFF function in Modern.js needs to follow certain imported parameter rules.\n\nThe function parameters are divided into two parts, the dynamic part in the\nrequest path and the request option RequestOption.\n\nDynamic Path#\n\nDynamic routing will be used as imported parameters in the first part of the\nfunction, and each imported parameter corresponds to a dynamic route. For\nexample, in the following example, uid will be passed into the function as the\nfirst two parameters:\n\n\n\nPass dynamic parameters directly when calling:\n\n\n\nRequestOption#\n\nThe parameter after Dynamic Path is the object RequestOption containing\nquerystring and request body, which is used to define the types of data and\nquery.\n\nIn normal functions without dynamic routing, the incoming data and query can be\nobtained from the first imported parameter, for example:\n\n\n\nWhen a function file uses dynamic routing rules, dynamic routing before the\nRequestOption parameter.\n\n\n\nAlso pass in the parameters according to the function definition:\n\n\n\nAs mentioned earlier, the defined functions should be asynchronous because they\nare automatically converted to HTTP interface calls when called by the front\nend.\n\nso in order to keep the type definition consistent with the actual calling, it\nis necessary to set the BFF function to asynchronous when defining it.","routePath":"/en/guides/advanced-features/bff/function","lang":"en","toc":[{"text":"Enable BFF","id":"enable-bff","depth":2,"charIndex":267},{"text":"BFF Function","id":"bff-function","depth":2,"charIndex":425},{"text":"API Routes","id":"api-routes","depth":2,"charIndex":1175},{"text":"Default Route","id":"default-route","depth":3,"charIndex":1700},{"text":"Multi-layer Routing","id":"multi-layer-routing","depth":3,"charIndex":1848},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":2086},{"text":"Allow List","id":"allow-list","depth":3,"charIndex":2323},{"text":"RESTful API","id":"restful-api","depth":2,"charIndex":2711},{"text":"Function Named Export","id":"function-named-export","depth":3,"charIndex":3458},{"text":"Function Parameter Rule","id":"function-parameter-rule","depth":3,"charIndex":4436},{"text":"Dynamic Path","id":"dynamic-path","depth":4,"charIndex":4745},{"text":"RequestOption","id":"requestoption","depth":4,"charIndex":5065}],"domain":"","frontmatter":{"sidebar_position":1,"title":"Basic Usage"},"version":""},{"id":199,"title":"BFF","content":"#\n\nIn the development of the concept of front back separation, the front-end part\ncan do more and more things, and the front-end needs some UI-oriented data\ninterfaces, so the industry introduced the concept of BFF (Backends for\nFrontends).\n\nThe main problems it to solve include:\n\n * Aggregation, mapping, clipping, and proxying of lower-level APIs according to\n   their own business needs.\n * Cache data for some specific scenarios to improve performance and thus\n   improve user experience.\n * Quickly development of new products based on existing interfaces.\n * Interface with third-party systems, such as login authentication.\n\nModern.js officially supported the BFF and provided the Integrated BFF to\nfurther strengthen the BFF's capabilities, mainly including the following\ncapabilities:\n\n * Quick development and debugging go live, running, building, and deploying BFF\n   code in the same project.\n * Minimal pure function call, directly import BFF function on the front end,\n   and can be automatically converted into HTTP request when called.\n * No private protocol, follow RESTful API specification, all BFF interfaces are\n   standardized.\n * Full TypeScript support.\n * Meet user preferences and support multi-frame extension writing.","routePath":"/en/guides/advanced-features/bff/","lang":"en","toc":[],"domain":"","frontmatter":{"title":"BFF"},"version":""},{"id":200,"title":"Custom request SDK","content":"#\n\nModernjs's BFF is isomorphic in CSR and SSR.In the browser side rely on the\nFetch API，On the server relies on the node-fetch.However, in many business\nscenarios we need to do some additional processing of the request or response,\nfor example:\n\n * Write auth information in the request header\n * Uniform processing of response data or errors\n * The browser's native fetch function is not available for a particular\n   platform, and other methods of sending requests are required\n\nFor the above scenario, Modern.js provides the configure function，the\ncustomization capabilities range from low to high and can be used to configure\nssr pass-through request headers, interceptors, and request SDKs..\n\nCAUTION\n\nThe configure function call needs to be called before all BFF requests are sent,\nto ensure that the default request configuration is overridden.\n\n\n\n\nConfigure ssr pass-through request headers#\n\nIn scenarios where both Modern.js SSR and BFF are used, it is often necessary to\npass some request headers on SSR page requests to the BFF service.\n\nFor example, the project has a page address https://website.com, which is an SSR\npage, and the API interface https://website.com/api/info will be called in the\ncomponent, which requires the user's cookie information for authentication. When\nthe page requests this API interface, it needs to pass the cookie requested by\nthe SSR page to BFF.\n\nCurrently the following request headers are automatically passed through in\nModern.js:\n\n * cookie\n * x-tt-logid\n * user-agent\n * x-tt-stress\n\nThe request header can be configured via configure. For example, in the\nfollowing example, Modern.js will automatically pass the cookie information of\nthe SSR page request to the BFF service:\n\n\n\n\nConfiguring Interceptors#\n\nIn certain business scenarios, there is a requirement for unified processing of\nrequests and responses, and interceptors can be configured to fulfill these\nrequirements in such scenarios.\n\n\n\n\nConfigure custom request SDK#\n\nIf the requirements cannot be met by configuring interceptors alone and need to\nfurther customize the request SDK, you can configure the custom request SDK by\nusing the configure function:\n\nCAUTION\n\nSend a request to the BFF service when the server side renders, Modern.js will\nfind the BFF service intranet IP via service discovery and send requests via IP\nto improve performance. This optimization is lost if a custom request SDK is\nused.\n\n\n\nThe configuration custom request SDK has the following conventions:\n\n * The configure function allows you to configure a request function whose input\n   is the same as the Fetch or node-fetch in the browser, and all BFF functions\n   will send requests through this function\n * The return value of the request function must be the actual data returned by\n   the interface, not a Promise, otherwise the BFF function will not return data\n   properly.\n * In the case of SSR projects, request must support both browser-side and\n   server-side sending of requests.\n\nExample of custom request SDK using axios:\n\n","routePath":"/en/guides/advanced-features/bff/sdk","lang":"en","toc":[{"text":"Configure ssr pass-through request headers","id":"configure-ssr-pass-through-request-headers","depth":2,"charIndex":856},{"text":"Configuring Interceptors","id":"configuring-interceptors","depth":2,"charIndex":1730},{"text":"Configure custom request SDK","id":"configure-custom-request-sdk","depth":2,"charIndex":1949}],"domain":"","frontmatter":{"sidebar_position":4,"title":"Custom request SDK"},"version":""},{"id":201,"title":"BFF Type","content":"#\n\nRuntime framework support is also an important part of BFF. Modern.js supports\nextending BFF's runtime framework through plugins, and provides a series of\nbuilt-in plugins, developers can directly use the conventions and ecology of the\nframework.\n\nThe plugin is compatible with most of the specifications of these frameworks,\nand each framework needs to provide two types of ways to extend the writing of\nBFF functions, namely Function Mode and Framework Mode.\n\nNOTE\n\nWhether the current api/ directory structure is written as a framework is\ndetermined by the corresponding plugin, Modern.js don't care.\n\n\nFunction Mode#\n\nWhen the plugin considers that it is currently written as a function, it must\nsupport writing middleware in the api/_ app.ts to extend the BFF function.\n\nModern.js collects the middleware in the api/_app.ts and passes it to the\nplugin, which injects the middleware into the runtime, for example:\n\n\n\nNOTE\n\nThe writing of middleware for different plugins is not the same, see Runtime\nFramework for details.\n\n\nFramework Mode#\n\nFramework writing is a way of using frame structure to extend BFF functions.\nCompared with function writing, although frame writing can use more frame\nstructure and make the entire BFF Server clearer in complex scenarios, it is\nalso more complex and requires more attention to the content at the framework\nlevel.\n\nIn the framework writing method, all BFF functions need to be written in the\napi/lambda/ directory, and the hook file _app.[tj]s cannot be used.\n\nIn most cases, the function writing method can cover the customization\nrequirements of most BFF functions. Only when your project server level logic is\nmore complex, the code needs to be layered, or you need to use more elements of\nthe framework, you need to use the framework writing method.\n\nNOTE\n\nThe directory structure of different plugin frameworks is not the same, see\nRuntime Frameworks for details.","routePath":"/en/guides/advanced-features/bff/type","lang":"en","toc":[{"text":"Function Mode","id":"function-mode","depth":2,"charIndex":608},{"text":"Framework Mode","id":"framework-mode","depth":2,"charIndex":1031}],"domain":"","frontmatter":{"sidebar_position":2,"title":"BFF Type"},"version":""},{"id":202,"title":"Improve Build Performance","content":"#\n\nModern.js optimizes build performance by default, but as the project becomes\nlarger, you may encounter some build performance problems.\n\nThis document provides some optional speed-up strategies, developers can choose\nsome of them to improve the build performance.\n\n📢 Notice\n\nThe strategies in Bundle Size Optimization can also be used to improve build\nperformance, so we won't repeat them here.\n\n\nGeneral optimization strategy#\n\nThe following are some general optimization strategies, which can speed up the\ndevelopment build and production build, and some of them also optimize the\nbundle size.\n\n\nUpgrade Node.js version#\n\nIn general, updating Node.js to the latest LTS release will help improve build\nperformance.\n\nEspecially for devices with Apple M1/M2 chips, it is recommended to use Node 18.\n\nNode >= 16 provides Apple Silicon binaries by default, so the performance on\nM1/M2 models will be greatly improved than Node 14. According to our tests,\nAfter switching from Node 14 to Node >= 16, the compilation speed can be\nimproved by more than 100%.\n\nYou can switch to Node 18 by following steps:\n\n\n\n\nUsing Rspack build#\n\nIf you have higher build performance requirements, you can easily switch to\nRspack build mode, see Using Rspack for more information.\n\n\nUsing SWC or esbuild#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nesbuild is a front-end build tool based on Golang. It has the functions of\nbundling, compiling and minimizing JavaScript code. Compared with traditional\ntools, the performance is significantly improved. When minimizing code, compared\nto webpack's built-in terser minimizer, esbuild has dozens of times better\nperformance.\n\nModern.js provides SWC plugin and esbuild plugin that allow you to use SWC or\nesbuild instead of babel-loader, ts-loader and terser for transformation and\nminification process. See:\n\n * SWC plugin document\n * esbuild plugin document\n\nSWC vs esbuild\n\nThe SWC compiled outputs has better compatibility, supports polyfills such as\ncore-js, and has more complete features, so it is recommended to use the SWC\nplugin first.\n\n\nAvoid using ts-loader#\n\nBy default, Modern.js uses Babel to compile TS files. After enabling the\ntools.tsLoader option, ts-loader will be used to compile TS files.\n\nPlease avoid using ts-loader because it requires additional parsing and type\nchecking, which will slow down the build.\n\n\n\nSee the tools.tsLoader documentation for details.\n\n\nDevelopment optimization strategies#\n\nThe following are strategies for improve build performance in development\nenvironment.\n\n\nAdjust Source Map format#\n\nIn order to provide a good debugging experience, Modern.js uses the\ncheap-module-source-map format Source Map by default in the development\nenvironment, which is a high-quality Source Map format and will bring certain\nperformance overhead.\n\nYou can improve build speed by adjusting the source map format of your\ndevelopment environment.\n\nFor example to disable Source Map:\n\n\n\nOr set the source map format of the development environment to the cheapest eval\nformat:\n\n\n\n> For detailed differences between different Source Map formats, see webpack -\n> devtool.\n\n\nAdjust Browserslist for development#\n\nThis strategy is similar to \"Adjust Browserslist\", the difference is that we can\nset different browserslist for development and production environment, thereby\nreducing the compilation overhead in the development environment.\n\nFor example, you can add the following config to package.json, which means that\nonly the latest browsers are compatible in the development environment, and the\nactual browsers are compatible in the production environment:\n\n\n\nNote that this strategy can lead to some differences in the build result of\ndevelopment production environment.\n\n\nProduction optimization strategies#\n\nThe following are strategies for improve build performance in production\nenvironment.\n\n\nDisable Source Map#\n\nIf your project does not need Source Map in the production, you can turn it off\nthrough the disableSourceMap config to improve the build speed.\n\n\n\nSee output.disableSourceMap for details.","routePath":"/en/guides/advanced-features/build-performance","lang":"en","toc":[{"text":"General optimization strategy","id":"general-optimization-strategy","depth":2,"charIndex":400},{"text":"Upgrade Node.js version","id":"upgrade-nodejs-version","depth":3,"charIndex":601},{"text":"Using Rspack build","id":"using-rspack-build","depth":3,"charIndex":1107},{"text":"Using SWC or esbuild","id":"using-swc-or-esbuild","depth":3,"charIndex":1264},{"text":"Avoid using ts-loader","id":"avoid-using-ts-loader","depth":3,"charIndex":2223},{"text":"Development optimization strategies","id":"development-optimization-strategies","depth":2,"charIndex":2562},{"text":"Adjust Source Map format","id":"adjust-source-map-format","depth":3,"charIndex":2689},{"text":"Adjust Browserslist for development","id":"adjust-browserslist-for-development","depth":3,"charIndex":3276},{"text":"Production optimization strategies","id":"production-optimization-strategies","depth":2,"charIndex":3880},{"text":"Disable Source Map","id":"disable-source-map","depth":3,"charIndex":4005}],"domain":"","frontmatter":{"sidebar_position":12},"version":""},{"id":203,"title":"Code Splitting","content":"#\n\nCode splitting is a common way to optimize frontend resource loading. This\narticle will introduce the three types of code splitting supported by Modern.js:\n\nINFO\n\nWhen using Modern.js Conventional routing. By default, code splitting is done\naccording to the routing component, so you don't need to do it yourself.\n\n * import\n * React.lazy\n * loadable\n\n\nimport#\n\nuse dynamic import(), the JS modules pass to this API will be bundled as a\nseparate JS file, for example:\n\n\n\n\nReact.lazy#\n\nThe officially way provides by React to split component code.\n\nCAUTION\n\nReact.lazy is typically used in together with , hence it is only available in\nCSR or React 18 Streaming SSR.\n\nFor projects that use Traditional SSR（renderToString）, React.lazy is not\nsupported. Please use the Loadable API instead.\n\n\n\nFor details, see React lazy.\n\n\nLoadable#\n\nIn Modern.js, you can use the Loadable API, which is exported from\n@modern-js/runtime/loadable. Here's an example:\n\n\n\nWith the out-of-the-box support of loadable in SSR by Modern.js, you no longer\nneed to add Babel plugins or inject scripts into HTML during SSR.\n\nHowever, it's important to note that any Loadable API in SSR does not support\nthe use of .\n\nINFO\n\nIf you want to use in CSR projects with React 17 and below, you can substitute\nReact.lazy with loadable.lazy.\n\nFor details, see Loadable API.","routePath":"/en/guides/advanced-features/code-split","lang":"en","toc":[{"text":"import","id":"import","depth":2,"charIndex":355},{"text":"React.lazy","id":"reactlazy","depth":2,"charIndex":474},{"text":"Loadable","id":"loadable","depth":2,"charIndex":824}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":204,"title":"Browser Compatibility","content":"#\n\n\nBrowserslist Configuration#\n\nModern.js supports setting the browserslist for your web applications. You can\nset the value of Browserslist in the .browserslistrc file.\n\nWhen you create a new Modern.js project, it will includes a .browserslistrc\nconfiguration by default, which means that the JavaScript code will be compiled\nto ES6.\n\n\n\nTIP\n\nPlease refer to Rsbuild - Browserslist for more information.\n\n\nPolyfill#\n\n\nPolyfill At Compile#\n\nModern.js defaults to importing corresponding polyfill code from [core-js]\n(https://github.com/zloirock/core-js) during compilation.\n\nBy default, the required Polyfill code will be introduced according to the\nsettings of the Browserslist, so there is no need to worry about the Polyfill\nproblem of the project source code and third-party dependencies, but because it\ncontains some Polyfill code that is not used, the final bundle size may be\nincreased.\n\nINFO\n\nFor case where Polyfill is not required for third-party dependencies, you can\nset 'output.polyfill' to usage, so that Babel compiles only Polyfill code based\non the syntax used in the code.\n\n\nPolyfill At Runtime#\n\nModern.js also provides a runtime Polyfill solution based on browser UA\ninformation, which has the following advantages over Babel:\n\n * It will not be inserted into the code, reducing the code .\n * The same browser will share a Polyfill code. Therefore, with more and more\n   projects, the UA-based Polyfill code will be delivered faster and faster.\n\nexec pnpm run new to enable this features:\n\n\n\nAfter executing the command, register the Polyfill plugin in modern.config.ts:\n\n\n\nAfter configuring output.polyfill as ua and executing pnpm run build & & pnpm\nrun serve to start the server, visiting the page can see that the HTML artifacts\ncontains the following script:\n\n\n\nVisit the page http://localhost:8080/__polyfill__ on Chrome 51 to see:\n\n\n\nCAUTION\n\nThis feature only works when using Modern.js built-in Web Server.\n\nIf you need to customize the HTML template, please refer to HTML Template.\nManually modifying the template through html.template / tools.html will cause\nthis feature not work.","routePath":"/en/guides/advanced-features/compatibility","lang":"en","toc":[{"text":"Browserslist Configuration","id":"browserslist-configuration","depth":2,"charIndex":3},{"text":"Polyfill","id":"polyfill","depth":2,"charIndex":406},{"text":"Polyfill At Compile","id":"polyfill-at-compile","depth":3,"charIndex":418},{"text":"Polyfill At Runtime","id":"polyfill-at-runtime","depth":3,"charIndex":1092}],"domain":"","frontmatter":{"sidebar_position":5},"version":""},{"id":205,"title":"ESLint Rules","content":"#\n\nModern.js ESLint Rules is the full set of ESLint rules, includes @modern-js\n(Lint rules for Node.js projects) and @modern-js-app (Lint rules for web\nprojects).\n\nMore ESLint usage is described below with specific questions.\n\n\nQ: How To Deal With Lint#\n\n\nAutomatic Fix#\n\nMost problems will be solved by the automatic fix of ESLint rules or the code\nformatting of Prettier (which has been integrated into ESLint), and the\ndeveloper does not need to care about the details of the problem and how to\nsolve it.\n\nINFO\n\nThis kind of automatic fix is mainly performed when the IDE saves the file, and\na few will be automatically fix on submit.\n\n\nBatch Automatic Fix#\n\nIn rare cases, such as when an old project is migrated, the following commands\ncan be executed to repair and inspect all files in bulk:\n\n\n\n\nManual Fix#\n\nFor problems that cannot be automatically fixed, you can click the rule link in\nthe problem prompt box in the IDE to open the document of this rule to view the\nexplanation and solution of the problem.\n\n\nClaim Exceptions#\n\nAt this stage, some rules are not smart enough, and in most cases there will be\ngreat benefits, and in a few cases it may not apply. But if the entire rule is\nturned off or changed for these few cases, the gain is not worth the loss.\n\nIn this case, you can use the eslint-disable comment to mark the code blocks\nthat meet the rare case, stating that this is an exception and should be\nignored. For example:\n\n\n\nINFO\n\nEnter eslint in the VS Code editor, a prompt box about eslint-disable will\nautomatically appear, select the prompt option to generate the corresponding\ncomment pair.\n\n[Modern.js ESLint Rule Set] requires that eslint-disable must be used in pairs,\nthe scope to be affected must be clearly expressed, and what rules to disable\nwithin this scope must be clearly expressed, the purpose is to make exceptions\nClear, minimized scope to avoid abuse of eslint-disable, resulting in code that\ndoes not belong to the exception being disabled by the rule.\n\n\nQ: How to customize ESLint rules#\n\n\nThe eslintConfig field in package.json in the root directory#\n\nThis place is the default ESLint configuration for the entire repository and is\ndesigned for pure Node.js code (which can only run in Node.js).\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add rule configuration here. This\nconfiguration will take precedence over the default [Modern.js ESLint ruleset],\nsuch as:\n\n\n\n\nsrc/.eslintrc.js#\n\nModern.js Framework or Modern.js Module project will have this configuration\nfile by default in the source code directory, which is designed for Universal JS\ncode.\n\nINFO\n\nUniversal JS code is code that can run on both the browser side and the server\nside.\n\nIf the project does have special requirements or inevitable compatibility issues\nwith some rules (not exceptions), you can add a rule configuration here, which\nwill take precedence over the default [Modern.js ESLint ruleset], such as:\n\n\n\nIf necessary, you can continue to add the .eslintrc.js file in different\nsubdirectories, and make special configuration for the code in this\nsubdirectory:\n\n\n\nTIP\n\nNote: It is not necessary to use the extends field, it will automatically\ninherit the configuration of the parent directory.\n\n\neslintIgnore field in package.json#\n\nAdding directories that contain .js, .jsx, .ts, .tsx files, but do not require\ncode inspection and automatic repair, to eslintIgnore can optimize the speed of\nESLint inspection, such as:\n\n\n\n\nQ: How to upgrade the version of the ESLint plugin#\n\nAs long as it is not a change in the Major version (the \"^\" symbol that does not\ncomply with the Semver rule), you can specify this dependency directly in the\npackage.json of the business project, delete the Lock file (or try to manually\ndelete the Lock file). the contents of this package name in the file), execute\npnpm install to reinstall the dependency and generate a new Lock file.\n\nAfter doing this, the plugin should only exist in the ./node_modules directory\nof the business project and be upgraded to the version you specified.\n\nTIP\n * Major version is the major version number. For more information, please read\n   [Semantic Versioning ].\n * All upstream projects encapsulated by Modern.js (such as ESLint, ESLint\n   plugin, React Router, etc.) can also be upgraded in this way.\n * Modern.js will also try to upgrade these upstream dependencies as timely as\n   possible in each release.\n * Major version upgrades need to be published by Modern.js.\n\n\nQ: WebStorm sometimes reports ESLint errors#\n\nSince WebStorm believes that the ESLint execution directory is determined based\non the .eslintrc' file. Therefore, the placement of the src/.eslintrc file\nlocation will cause the location specified by the tsconfig.json file (in the\nproject root directory) to not be found in the'src/'directory.\n\nyou need to configure it manually:\n\n\n\n","routePath":"/en/guides/advanced-features/eslint","lang":"en","toc":[{"text":"Q: How To Deal With Lint","id":"q-how-to-deal-with-lint","depth":2,"charIndex":227},{"text":"Automatic Fix","id":"automatic-fix","depth":3,"charIndex":255},{"text":"Batch Automatic Fix","id":"batch-automatic-fix","depth":3,"charIndex":639},{"text":"Manual Fix","id":"manual-fix","depth":3,"charIndex":801},{"text":"Claim Exceptions","id":"claim-exceptions","depth":3,"charIndex":1017},{"text":"Q: How to customize ESLint rules","id":"q-how-to-customize-eslint-rules","depth":2,"charIndex":1999},{"text":"The `eslintConfig` field in `package.json` in the root directory","id":"the-eslintconfig-field-in-packagejson-in-the-root-directory","depth":3,"charIndex":-1},{"text":"`src/.eslintrc.js`","id":"srceslintrcjs","depth":3,"charIndex":-1},{"text":"`eslintIgnore` field in `package.json`","id":"eslintignore-field-in-packagejson","depth":3,"charIndex":-1},{"text":"Q: How to upgrade the version of the ESLint plugin","id":"q-how-to-upgrade-the-version-of-the-eslint-plugin","depth":2,"charIndex":3525},{"text":"Q: WebStorm sometimes reports ESLint errors","id":"q-webstorm-sometimes-reports-eslint-errors","depth":2,"charIndex":4539}],"domain":"","frontmatter":{"sidebar_position":8},"version":""},{"id":206,"title":"Inline Static Assets","content":"#\n\nInline static assets refer to the practice of including the content of a static\nasset directly in a HTML or JS file, instead of linking to an external file.\nThis can improve the performance of a website by reducing the number of HTTP\nrequests that the browser has to make to load the page.\n\nHowever, static assets inlining also has some disadvantages, such as increasing\nthe size of a single file, which may lead to slower loading. Therefore, in the\nactual scenario, it is necessary to decide whether to use static assets inlining\naccording to the specific situation.\n\nModern.js will automatically inline static assets that are less than 10KB, but\nsometimes you may need to manually control assets to force them to be inlined or\nnot, and this document explains how to precisely control the inlining behavior\nof static assets.\n\n\nAutomatic Inlining#\n\nBy default, Modern.js will inline assets when the file size of is less than a\nthreshold (the default is 10KB). When inlined, the asset will be converted to a\nBase64 encoded string and will no longer send a separate HTTP request. When the\nfile size is greater than this threshold, it is loaded as a separate file with a\nseparate HTTP request.\n\nThe threshold can be modified with the output.dataUriLimit config. For example,\nset the threshold of images to 5000 Bytes, and set media assets not to be\ninlined:\n\n\n\n\nForce Inlining#\n\nYou can force an asset to be inlined by adding the inline query when importing\nthe asset, regardless of whether the asset's size is smaller than the size\nthreshold.\n\n\n\nIn the above example, the foo.png image will always be inlined, regardless of\nwhether the size of the image is larger than the threshold.\n\nIn addition to the inline query, you can also use the __inline query to force\ninlining of the asset:\n\n\n\n\nReferenced from CSS file#\n\nWhen you reference a static asset in your CSS file, you can also force inline\nthe asset with the inline or __inline queries.\n\n\n\nDo you really need to force inlining?\n\nInline large assets will significantly increase the first paint time or first\ncontentful paint time of a page, which will hurt user experience. And when you\ninline a static asset multiple times into a CSS file, the base64 content will be\nrepeatedly injected, causing the bundle size to grow . Please use forced\ninlining with caution.\n\n\nForce no inlining#\n\nWhen you want to always treat some assets as separate files, no matter how small\nthe asset is, you can add the url query to force the asset not to be inlined.\n\n\n\nIn the above example, the foo.png image will always be loaded as a separate\nfile, even if the size of the image is smaller than the threshold.\n\nIn addition to the url query, you can also use the __inline=false query to force\nthe asset not to be inlined:\n\n\n\n\nReferenced from CSS file#\n\nWhen you reference a static asset in your CSS file, you can also force the asset\nnot to be inlined with url or __inline=false queries.\n\n\n\nDo you really need to exclude assets from inlining?\n\nExcluding assets from inlining will increase the number of assets that the Web\nApp needs to load. This will reduce the efficiency of loading assets in a weak\nnetwork environment or in scenarios where HTTP2 is not enabled. Please use force\nno Inline with caution.\n\n\nInline JS files#\n\nIn addition to inlining static assets into JS files, Modern.js also supports\ninlining JS files into HTML files.\n\nJust enable the output.enableInlineScripts config, and the generated JS files\nwill not be written into the output directory, but will be directly inlined to\nthe corresponding in the HTML file.\n\n\n\n\nInline CSS files#\n\nYou can also inline CSS files into HTML files.\n\nJust enable the output.enableInlineStyles config, the generated CSS file will\nnot be written into the output directory, but will be directly inlined to the\ncorresponding in the HTML file.\n\n\n\n\nAdd Type Declaration#\n\nWhen you use URL queries such as ?inline and ?url in TypeScript code, TypeScript\nmay prompt that the module is missing a type definition:\n\n\n\nTo fix this, you can add type declarations for these URL queries, please create\nsrc/global.d.ts file and add the following type declarations:\n\n","routePath":"/en/guides/advanced-features/inline-assets","lang":"en","toc":[{"text":"Automatic Inlining","id":"automatic-inlining","depth":2,"charIndex":830},{"text":"Force Inlining","id":"force-inlining","depth":2,"charIndex":1361},{"text":"Referenced from CSS file","id":"referenced-from-css-file","depth":3,"charIndex":1790},{"text":"Force no inlining","id":"force-no-inlining","depth":2,"charIndex":2320},{"text":"Referenced from CSS file","id":"referenced-from-css-file-1","depth":3,"charIndex":2760},{"text":"Inline JS files","id":"inline-js-files","depth":2,"charIndex":3243},{"text":"Inline CSS files","id":"inline-css-files","depth":2,"charIndex":3571},{"text":"Add Type Declaration","id":"add-type-declaration","depth":2,"charIndex":3830}],"domain":"","frontmatter":{"sidebar_position":13},"version":""},{"id":207,"title":"Low-Level Tools","content":"#\n\n\nUsage#\n\nModern.js internally integrates tools such as Babel, TypeScript, Webpack,\nPostCSS, Tailwind CSS by default.\n\nUsually, the default configuration can meet most development needs. When there\nare special needs, it can be achieved through the underlying configuration.\n\nTake configuring Webpack as an example, just add tools.webpack to the\nmodern.config.ts:\n\n\n\nConfigurations in the tools can be set to Object or Function.\n\nWhen the value is Object, it will be merged with the default configuration. For\nthe specific merging strategy, refer to the configuration options document (see\ntable below).\n\nWhen the value is Function, the first parameter is the default configuration\nvalue. You can directly modify this object without returning it, or you can\nreturn a new object or a merged object as the final result.\n\n\nLow-level Configuration Details#\n\nCurrently provided is as follows:\n\nTOOLS               CONFIG\nDevServer           tools.devServer\nBabel               tools.babel\nstyled-components   tools.styledComponents\nPostCSS             tools.postcss\nLess                tools.less\nSass                tools.sass\nwebpack             tools.webpack\nMinify CSS          tools.minifyCss\nterser              tools.terser\nTailwind CSS        tools.tailwind\nAutoprefixer        tools.autoprefixer","routePath":"/en/guides/advanced-features/low-level","lang":"en","toc":[{"text":"Usage","id":"usage","depth":2,"charIndex":3},{"text":"Low-level Configuration Details","id":"low-level-configuration-details","depth":2,"charIndex":820}],"domain":"","frontmatter":{"sidebar_position":10},"version":""},{"id":208,"title":"Bundle Size Optimization","content":"#\n\nBundle size optimization is an important part in production environment because\nit directly affects the user experience of online users. In this document, we\nwill introduce some common bundle size optimization methods in Modern.js.\n\n\nReduce duplicate dependencies#\n\nIn real projects, there will be some third-party dependencies installed with\nmultiple versions. Duplicate dependencies can lead to larger bundles and slower\nbuilds.\n\nWe can detect or eliminate duplicate dependencies with some community tools.\n\n * If you are using pnpm >= 7.26.0, you can use the pnpm dedupe command to\n   upgrade and eliminate duplicate dependencies.\n\n\n\n * If you are using pnpm < 7.26.0, you can use pnpm-deduplicate to analyze all\n   duplicate dependencies, then update dependencies or declare pnpm overrides to\n   merge duplicated dependencies.\n\n\n\n * If you are using yarn, you can use yarn-deduplicate to automatically merge\n   duplicated dependencies:\n\n\n\n\nUse lightweight libraries#\n\nIt is recommended to using lightweight libraries in your project, such as\nreplacing moment with day.js.\n\nIf you want to find out the large libraries in the project, you can add the\nBUNDLE_ANALYZE=true environment variable when building:\n\n\n\nSee the performance.bundleAnalyze configuration for details.\n\n\nAdjust Browserslist#\n\nModern.js will compile the code according to the project's Browserslist config,\nand inject some Polyfills. If the project does not need to be compatible with\nlegacy browsers, you can adjust the Browserslist and drop some legacy browsers,\nthereby reducing the compilation overhead on syntax and polyfill.\n\nModern.js's default Browserslist config is:\n\n\n\nFor example, if you only need to be compatible with browsers above Chrome 61,\nyou can change it to:\n\n\n\nTIP\n\nPlease read the Browserslist chapter to know more about the usage of\nBrowserslist.\n\n\nUsage polyfill#\n\nWhen it is clear that third-party dependencies do not require additional\npolyfill, you can set output.polyfill to usage.\n\nIn usage mode, Modern.js analyzes the syntax used in the source code and injects\nthe required polyfill code on demand to reduce the size of polyfill.\n\n\n\nTIP\n\nPlease read the Browser Compatibility chapter to know more about the usage of\nBrowserslist.\n\n\nImage Compression#\n\nIn general front-end projects, the size of image often accounts for a large\nproportion of the total bundle size of the project.So if the image size can be\nreduced as much as possible, it will have a significant optimization effect on\nthe project bundle size. You can enable image compression by registering a\nplugin in Modern.js:\n\n\n\nSee details in plugin-image-compress.\n\n\nSplit Chunk#\n\nA great chunk splitting strategy is very important to improve the loading\nperformance of the application. It can make full use of the browser's caching\nmechanism to reduce the number of requests and improve the loading speed of the\napplication.\n\nA variety of chunk splitting strategies are built into Modern.js, which can meet\nthe needs of most applications. You can also customize the chunk splitting\nconfig according to your own business scenarios.\n\nFor example, split the axios library under node_modules into axios.js:\n\n","routePath":"/en/guides/advanced-features/optimize-bundle","lang":"en","toc":[{"text":"Reduce duplicate dependencies","id":"reduce-duplicate-dependencies","depth":2,"charIndex":236},{"text":"Use lightweight libraries","id":"use-lightweight-libraries","depth":2,"charIndex":946},{"text":"Adjust Browserslist","id":"adjust-browserslist","depth":2,"charIndex":1277},{"text":"Usage polyfill","id":"usage-polyfill","depth":2,"charIndex":1844},{"text":"Image Compression","id":"image-compression","depth":2,"charIndex":2235},{"text":"Split Chunk","id":"split-chunk","depth":2,"charIndex":2628}],"domain":"","frontmatter":{"sidebar_position":13},"version":""},{"id":209,"title":"Using Rsbuild Plugin","content":"#\n\n\nIntroduce Rsbuild Plugin#\n\nRsbuild is the build tool of Modern.js. You can modify the default build\nbehavior and add various additional features by adding the Rsbuild plugin,\nincluding but not limited to:\n\n * Modifying Rspack configurations\n * Processing new file types\n * Modifying or compiling files\n * Deploying artifacts\n\nYou can register the Rsbuild plugin through the builderPlugins option in\nmodern.config.ts, see builderPlugins for details.\n\nTIP\n\nModern.js has upgraded the build tool to Rsbuild starting from 2.46.0.\n\nIf your current version is lower than 2.46.0, you can upgrade by executing npx\nmodern upgrade.\n\n\nOfficial Plugins#\n\n\nBuiltin Plugins#\n\nHere are the official Rsbuild plugins built into Modern.js:\n\nPLUGIN NAME                INTRODUCE                                                      MODERN.JS LINK\nReact Plugin               Provides support for React                                     -\nSVGR Plugin                Support convert SVG to React components                        output.disableSvgroutput.svgDefaultExport\nStyled Components Plugin   Provides compile-time support for styled-components            tools.styledComponents\nAssets Retry Plugin        Used to automatically resend requests when static assets       output.assetsRetry\n                           fail to load\nType Check Plugin          Used to run TypeScript type checker on a separate process      output.disableTsCheckertools.tsChecker\nNode Polyfill Plugin       Used to inject polyfills of Node core modules in the browser   output.disableNodePolyfill\n                           side\nSource Build Plugin        Supports referencing source code from other subdirectories     experiments.sourceBuild\nCheck Syntax Plugin        Used to analyze the syntax compatibility of artifacts          security.checkSyntax\nCSS Minimizer Plugin       Used to customize CSS minimizer, switch to cssnano or other    tools.minifyCss\n                           tools for CSS compression\nPug Plugin                 Provides support for the Pug template engine                   tools.pug\nRem Plugin                 Implements the rem adaptive layout for mobile pages            output.convertToRem\nYAML Plugin                Used to import YAML files and convert them into JavaScript     TOML File\n                           objects\nTOML Plugin                Used to import TOML files and convert them into JavaScript     YAML File\n                           objects\n\n\nUn-builtin Plugins#\n\nHere are the official Rsbuild plugins that are not built into Modern.js:\n\n * Image Compress Plugin: Compress the image resources used in the project.\n * Stylus Plugin: Use Stylus as the CSS preprocessor.\n * UMD Plugin: Used to build outputs in UMD format.","routePath":"/en/guides/advanced-features/rsbuild-plugin","lang":"en","toc":[{"text":"Introduce Rsbuild Plugin","id":"introduce-rsbuild-plugin","depth":2,"charIndex":3},{"text":"Official Plugins","id":"official-plugins","depth":2,"charIndex":627},{"text":"Builtin Plugins","id":"builtin-plugins","depth":3,"charIndex":647},{"text":"Un-builtin Plugins","id":"un-builtin-plugins","depth":3,"charIndex":2461}],"domain":"","frontmatter":{"sidebar_position":21,"title":"Using Rsbuild Plugin"},"version":""},{"id":210,"title":"Using Rspack","content":"#\n\nWhat is Rspack\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\nModern.js provides out-of-the-box Rspack support, so you can switch between the\nstable Webpack and the faster Rspack.\n\nThis document will show you how to enable Rspack build mode in Modern.js.\n\n\nInitializing an Rspack project#\n\nThe Modern.js generator provides an interactive question-and-answer interface to\ninitialize a project. To create an Rspack project, simply select the Rspack\nbuild tool by running:\n\n\n\nAfter the project is created, you can experience the project by running pnpm run\ndev. For more project information, please refer to Quick Start.\n\nTIP\n\nWhen using Rspack as the bundler, the following Features are temporarily\nunavailable as some of the capabilities are still under development and we will\nprovide support in the future.\n\n * The usage of useLoader in Client Side Rendering\n\n\nEnable Rspack build#\n\nSince Modern.js 2.46.0, you can enable Rspack build by add the following\nconfiguration in modern.config.ts:\n\n\n\nTIP\n\nIf your current version is lower than 2.46.0, you can upgrade by executing npx\nmodern upgrade.\n\n\nPrecautions#\n\nBefore using Rspack, please be aware that Rspack is currently in the rapid\niteration phase. Therefore, you need to be aware of the following:\n\n * The API and configuration items of Rspack are not completely stable yet, so\n   non-major versions may introduce some incompatible changes.\n * Rspack currently relies on SWC for code transformation and compression. Due\n   to the lower maturity of SWC compared to Babel and Terser, you may encounter\n   bugs of SWC in edge cases.\n * Rspack is compatible with most plugins and loaders in the webpack ecosystem,\n   but there are still some plugins and loaders that cannot be used temporarily.\n\nRspack is actively working to improve the above issues and plans to address them\nin future releases. We recommend that you evaluate your project requirements and\nrisk tolerance before deciding whether to use Rspack. If your project requires\nhigh stability and performance, you should choose the more mature webpack. If\nyou are willing to try new tools and contribute to their development, we welcome\nyou to use Rspack and provide feedback and bug reports to help improve its\nstability and functionality.\n\n\nMigrating configuration#\n\nIn Modern.js, the tools.webpack and tools.webpackChain configurations only take\neffect in webpack mode, after turning on the Rspack build, you can modify it to\ntools.rspack and tools.bundlerChain.\n\n\n\nTIP\n\nAfter turning on the Rspack build capability, there are currently a small number\nof configurations that are not supported in Rspack, such as source.moduleScopes,\nsecurity.sri etc.\n\nFor unsupported configurations, we have marked Bundler: only support webpack or\nBundler: only support Rspack in the document. Please refer to the specific\nconfiguration introduction.\n\n\nModify transpile configuration#\n\nModern.js uses Rspack builtin:swc-loader for code translation in Rspack mode.\n\nModern.js has provided a more convenient configuration for the common\nconfiguration of builtin:swc-loader, such as: configuring the component library\nto import it on demand through source.transformImport.\n\nIf you have custom configuration requirements for builtin:swc-loader, you can\nset the options of builtin:swc-loader through tools.swc:\n\n\n\nTIP\n\nWhen Rspack build is enabled, babel-loader is not enabled by default. If you\nneed to add some babel plugins, you can configure it through tools.babel. This\nwill generate additional compilation overhead and slow down the Rspack build\nspeed to a certain extent.\n\n\nThe relationship between Rspack and Modern.js versions#\n\nUsually, the latest version of Rspack will be integrated into Modern.js. You can\nupdate the Modern.js-related dependencies and built-in Rspack to the latest\nversion by using npx modern upgrade in your project.\n\nHowever, Modern.js uses a locked version dependency method (non-automatic\nupgrade) for Rspack. Due to differences in release cycles, the version of Rspack\nintegrated into Modern.js may be behind the latest version of Rspack.\n\nWhen Rspack is enabled for building through dev / build, the current version of\nRspack used in the framework will be printed automatically when debugging mode\nis turned on:\n\n\n\n\nOverride the Built-in Rspack Version#\n\nYou can override Rspack to a specific version using the capbilities provided by\npackage managers such as pnpm, yarn, npm.\n\nFor example, if you are using pnpm, you can update the Rspack version with\noverrides as shown below:\n\n\n\nWhat is Rspack Nightly Version\n\nThe Rspack nightly build fully replicates the full release build for catching\nerrors early.\n\nUsually it is available and any errors that arise will fixed promptly.\n\nHowever, if there are any break changes that require modern.js to modify the\ncode, we recommend to wait for the next version of modern.js.\n\nMore examples of using package managers, please refer to: Lock nested\ndependency.","routePath":"/en/guides/advanced-features/rspack-start","lang":"en","toc":[{"text":"Initializing an Rspack project","id":"initializing-an-rspack-project","depth":2,"charIndex":735},{"text":"Enable Rspack build","id":"enable-rspack-build","depth":2,"charIndex":1340},{"text":"Precautions","id":"precautions","depth":2,"charIndex":1575},{"text":"Migrating configuration","id":"migrating-configuration","depth":2,"charIndex":2731},{"text":"Modify transpile configuration","id":"modify-transpile-configuration","depth":2,"charIndex":3328},{"text":"The relationship between Rspack and Modern.js versions","id":"the-relationship-between-rspack-and-modernjs-versions","depth":2,"charIndex":4051},{"text":"Override the Built-in Rspack Version","id":"override-the-built-in-rspack-version","depth":3,"charIndex":4722}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":211,"title":"Source Code Build Mode","content":"#\n\nThe source code build mode is used in the monorepo development scenario,\nallowing developers to directly reference the source code of other sub-projects\nwithin the monorepo for development.\n\n\nUse Cases#\n\nIn a monorepo, there are two main ways for projects to reference each other:\nartifact referencing and source code referencing. Let's use a simple monorepo as\nan example to illustrate the use case of source code referencing.\n\nFor example, the monorepo contains an app application and a lib:\n\n\n\nThe app is built using Modern.js and relies on some methods from the lib:\n\n\n\n\nArtifact Referencing#\n\nWhen using artifact referencing, the current project references the artifacts\nbuilt from other sub-projects.\n\nIn the example above, the lib is written in TypeScript. Typically, we need to\nbuild the lib's code in advance to generate JavaScript artifacts so that the app\ncan reference it correctly. When the lib's code is updated, we need to rebuild\nit (or use tsc --watch) to ensure that the app can use the latest code.\n\nThe advantages of this approach are:\n\n * The build processes of each sub-project are completely independent and can\n   have different build configurations.\n * Build caching can be applied to individual sub-projects.\n\nThe disadvantages are:\n\n * The HMR chain becomes longer during local development.\n * The process becomes cumbersome when a project contains multiple lib packages.\n\n\nSource Code Referencing#\n\nWhen using source code referencing, the current project references the source\ncode of other sub-projects for building.\n\nIn the example mentioned earlier, when you enable the source code build mode and\nadd the relevant configuration in the lib directory, Modern.js will\nautomatically reference the src/index.ts source code of the lib. This means that\nyou don't need to build the lib's code in advance, and when the source code of\nthe lib is updated, it can trigger automatic hot updates for the app.\n\nThe advantages of this approach are:\n\n * The sub-project does not rely on a build tool and does not require build\n   configurations. The code of the sub-project will be compiled by the build\n   tool of the current project.\n * There is no need to execute the build process for the sub-projects in\n   advance.\n * HMR is more efficient during local development.\n\nThe disadvantages are:\n\n * The current project needs to support syntax features used by sub-projects and\n   follow the same syntax specifications, such as using a consistent version of\n   decorator syntax. If the current project and sub-projects require different\n   build configurations, building from source code may not be suitable.\n * The current project requires compiling more code, which may result in longer\n   build times.\n\n\nBuilding from Source Code#\n\n\nEnabling Configuration#\n\nYou can enable source code build mode by setting experiments.sourceBuild to\ntrue.\n\n\n\n\nConfiguring Sub-projects#\n\nWhen the source code build mode is enabled, the Modern.js will prioritize\nreading the file specified in the source field of the sub-project during the\nbuild process. Therefore, you need to configure the source field in the\npackage.json file of the sub-project and point it to the source code file.\n\nFor example, in the following example, when the lib package is referenced, the\n./src/index.ts file will be read for building:\n\n\n\nIf the sub-project uses exports field, you also need to add the source field in\nthe exports field.\n\n\n\n\nConfigure Project Reference#\n\nIn a TypeScript project, you need to use the capability provided by TypeScript\ncalled Project Reference. It helps you develop source code more effectively.\n\n\nIntroduction#\n\nProject reference provides the following capabilities:\n\n * It allows TypeScript to correctly recognize the types of other sub-projects\n   without the need to build them.\n * When you navigate the code in VS Code, it automatically takes you to the\n   corresponding source code file of the module.\n * Modern.js reads the project reference configuration and automatically\n   recognizes the tsconfig.compilerOptions.path configuration of the\n   sub-project, so that the use of aliases in the sub-project works correctly.\n\n\nExample#\n\nIn the example mentioned earlier, since the app project references the lib\nsub-project, we need to configure the composite and references options in the\napp project's tsconfig.json file and point them to the corresponding relative\ndirectory of lib:\n\n\n\nAfter adding these two options, the project reference is already configured. You\ncan restart VS Code to see the effects of the configuration.\n\nNote that the above example is a simplified one. In real monorepo projects,\nthere may be more complex dependency relationships. You need to add a complete\nreferences configuration for the functionality to work correctly.\n\nTIP\n\nIf you want to learn more about project reference, please refer to the official\ndocumentation on TypeScript - Project References.\n\n\nCaveat#\n\nWhen using source code build mode, there are a few things to keep in mind:\n\n 1. Ensure that the current project can compile the syntax or features used in\n    the sub-project. For example, if the sub-project uses Stylus to write CSS,\n    the current app needs to support Stylus compilation.\n 2. Ensure that the current project has the same code syntax and features as the\n    sub-project, such as consistent syntax versions for decorators.\n 3. Source code building may have some limitations. When encountering issues,\n    you can remove the source field from the sub-project's package.json and\n    debug using the built artifacts of the sub-project.\n 4. When composite: true is enabled, TypeScript will generate *.tsbuildinfo\n    temporary files. You need to add these temporary files to the .gitignore\n    file.\n\n","routePath":"/en/guides/advanced-features/source-build","lang":"en","toc":[{"text":"Use Cases","id":"use-cases","depth":2,"charIndex":194},{"text":"Artifact Referencing","id":"artifact-referencing","depth":3,"charIndex":577},{"text":"Source Code Referencing","id":"source-code-referencing","depth":3,"charIndex":1403},{"text":"Building from Source Code","id":"building-from-source-code","depth":2,"charIndex":2723},{"text":"Enabling Configuration","id":"enabling-configuration","depth":3,"charIndex":2752},{"text":"Configuring Sub-projects","id":"configuring-sub-projects","depth":3,"charIndex":2863},{"text":"Configure Project Reference","id":"configure-project-reference","depth":2,"charIndex":3421},{"text":"Introduction","id":"introduction","depth":3,"charIndex":3609},{"text":"Example","id":"example","depth":3,"charIndex":4142},{"text":"Caveat","id":"caveat","depth":2,"charIndex":4906}],"domain":"","frontmatter":{"sidebar_position":11},"version":""},{"id":212,"title":"Static Site Generation","content":"#\n\nSSG (Static Site Generation) is a solution based on data and templates that\nrenders complete static web pages during the build process.\n\nFirst need to execute pnpm run new to enable the SSG feature:\n\n\n\nRegister the SSG plugin in modern.config.ts after executing the command:\n\n\n\nThe usage of SSG differs between the Conventional Routing and Self-controlled\nRouting.\n\n\nUsing with Conventional Routing#\n\nIn the Conventional Routing of Modern.js, the framework generates routes based\non the file structure under the entry point, so it can collect complete routing\ninformation.\n\nFor example, here is a project directory structure that uses conventional\nrouting:\n\n\n\nThe above file directory will generate the following three routes:\n\n * /\n * /user\n * /user/profile\n\nNOTE\n\nIf you are not familiar with the rules of Conventional Routing, you can first\ncheck Routing.\n\nAdd component code in src/routes/page.tsx:\n\n\n\nSSG also renders pages in a Node.js environment, so we can enable SSR during\ndevelopment to expose code issues and validate SSG rendering effects in advance:\n\n\n\nExecute the pnpm run dev command in the project to view the dist/ directory, and\nonly generate an HTML file main/index.html.\n\nExecute the pnpm run build command in the root path of the project. After the\nconstruction is completed, view the dist/ directory, and generate\nmain/index.html, main/user/index.html and main/user/profile/index.html three\nHTML files, the content corresponds to the above three routes.\n\nEach route in the Conventional Routing will generate a separate HTML file. By\nviewing main/index.html, you can find the text content that includes the Index\nPage, which is exactly the effect of SSG.\n\nAfter executing pnpm run serve to start the project, visit the page in the\nNetwork, view the document returned by the request. The document contains the\ncomplete page content rendered by the component.\n\n\nUsing with Self-controlled Routing#\n\nSelf-controlled routing is a routing through component code, which requires the\napplication to run to obtain accurate routing information. Therefore, the SSG\nfunction cannot be used out of the box. At this time, users needs to inform the\nModern.js framework in advance which routes need to enable SSG.\n\nFor example, there is the following code which contains multiple routes. When\nsetting output.ssg to true, only the entry route '/' will be rendered by\ndefault:\n\n\n\nWe can configure output.ssg to inform Modern.js to enable SSG for specific\nroutes, such as /about:\n\n\n\nAfter executing pnpm run build and pnpm run serve, you can access\nhttp://localhost:8080/about to see the rendered page in preview.\n\nYou can check the bundle file that a new main/about/index.html file has been\nadded to the dist/ directory.\n\nINFO\n\nAbove only introduces the case of single entry, for more related content please\nrefer to the SSG API.","routePath":"/en/guides/advanced-features/ssg","lang":"en","toc":[{"text":"Using with Conventional Routing","id":"using-with-conventional-routing","depth":3,"charIndex":369},{"text":"Using with Self-controlled Routing","id":"using-with-self-controlled-routing","depth":3,"charIndex":1884}],"domain":"","frontmatter":{"sidebar_position":5},"version":""},{"id":213,"title":"Server-Side Rendering","content":"#\n\nIn Modern.js, SSR is readily available without the need for developers to write\nintricate server-level logic or worry about the operation and maintenance of SSR\nservices. Additionally, Modern.js includes a comprehensive degradation strategy\nfor SSR to ensure safe page execution.\n\nEnabling SSR is simple. Just set the value of server.ssr to true.\n\n\n\n\nSSR Data Fetch#\n\nModern.js provides a Data Loader that simplifies data fetching for developers\nworking with SSR and CSR. Each routing module, such as layout.tsx and page.tsx,\ncan define its own Data Loader:\n\n\n\nWithin the component, data returned by the loader function can be accessed\nthrough the Hooks API:\n\n\n\nModern.js breaks the traditional model of server-side rendering (SSR)\ndevelopment and offers users a more user-friendly SSR development experience.\n\nThis feature offers elegant degradation processing. If the SSR request fails, it\nwill automatically downgrade and restart the request on the browser side.\n\nDevelopers should still be mindful of data fallback, including null values or\nunexpected data returns. This will help prevent React rendering errors and messy\nresults during SSR.\n\nINFO\n\n 1. When requesting a page through client-side routing, Modern.js sends an HTTP\n    request. The server receives the request and executes the corresponding Data\n    Loader function for the page, then returns the execution result as a\n    response to the browser.\n\n 2. When using Data Loader, data is fetched before rendering. Modern.js also\n    supports obtaining data during component rendering. For more related\n    content, please refer to Data Fetch.\n\n\nKeep Rendering Consistent#\n\nIn some businesses, it is usually necessary to make different UI displays based\non the current operating container environment characteristics, such as UA\ninformation.\n\nIf not handled carefully, unexpected rendering results are likely to occur.\n\nHere is an example to show the problem when SSR and CSR rendering are\ninconsistent, add the following code to the component:\n\n\n\nAfter launching the application and accessing the page, you will find that the\nbrowser console throws a warning message.\n\n\n\nThis is caused by React's hydration logic on the client side detecting\ninconsistencies between the rendered result and the SSR rendering result.\nAlthough the page appears normal, in complex applications, it is likely to cause\nproblems such as DOM hierarchy confusion and style disorder.\n\nINFO\n\nMore information about React hydrate.\n\nThe application needs to maintain consistency between SSR and CSR rendering\nresults. If there is inconsistency, it means that this part of the content does\nnot need to be rendered in SSR.\n\nModern.js provides a component for such content that does not need to be\nrendered in SSR.\n\n\n\nWrap the element that does not require SSR with the NoSSR component:\n\n\n\nAfter modifying the code, refreshing the page shows that the previous warning\nhas disappeared. Opening the Network tab of the browser devtools and checking\nthe returned HTML document does not contain content wrapped by NoSSR components.\n\nINFO\n\n'useRuntimeContext' can get complete request information, which can be used to\nensure consistent rendering results between SSR and CSR.\n\n\nPay Attention to Memory Leaks#\n\nWARNING\n\nDevelopers need to pay special attention to memory leaks in the SSR mode. Even\ntiny memory leaks can have an impact on the service after a large number of\naccesses.\n\nWhen using SSR, each request from the browser will trigger the server to\nre-execute the component rendering logic. Therefore, it is necessary to avoid\ndefining any data structures that may continue to grow globally, subscribing to\nevents globally, or creating streams that will not be destroyed globally.\n\nFor example, when using redux-observable, developers who are used to CSR\ndevelopment usually code in the component like this:\n\n\n\nCreate a Middleware instance epicMiddleware outside the component and call\nepicMiddleware.run inside the component.\n\nWhen running on the client-side, this code will not cause any issues. However,\nduring SSR, the Middleware instance cannot be destroyed.\n\nEvery time a component is rendered and epicMiddleware.run(rootEpic) is called,\nnew event bindings are added internally which causes the entire object to grow\ncontinuously and ultimately affects application performance.\n\nCSR issues are not easy to detect, so when switching from CSR to SSR, if you are\nunsure whether the application has such problems, you can perform stress testing\non applications.\n\n\nConverging Server Data.#\n\nIn order to maintain the data requested during the SSR phase, it can be directly\nused on the browser side. Modern.js will inject the data and state collected\nduring rendering into HTML.\n\nHowever, in CSR applications, there are often situations where interface data is\nlarge and component states are not converged. If SSR is used directly in this\ncase, the rendered HTML may have a problem of being too large.\n\nAt this time, SSR may not only fail to improve user experience for applications\nbut may also have an opposite effect.\n\nTherefore, when using SSR, developers need to properly slim down the\napplication.\n\n 1. Focus on the first screen, SSR can request only the data needed for the\n    first screen and render the remaining parts on the browser side.\n 2. Remove data unrelated to rendering from the returned data of the interface.\n\n\nServerless Pre-render#\n\nModern.js provides the Serverless Pre-rendering (SPR) feature to improve SSR\nperformance.\n\nSPR uses pre-rendering and caching technology to provide responsive performance\nfor SSR pages. It enables SSR applications to have the response speed and\nstability of static web pages while also maintaining dynamic data updates.\n\nUsing SPR in Modern.js is very simple. Just add the PreRender component to your\ncomponent, and the page where it is located will automatically enable SPR.\n\nHere is a simulated component that uses the useLoaderData API. The request in\nthe Data Loader takes 2 seconds to consume.\n\n\n\n\n\nAfter executing the dev command and opening the page, it is obvious that the\npage needs to wait 2s before returning.\n\nUse the component for optimization next, which can be directly exported from\n@modern-js/runtime/ssr.\n\n\n\nUse the component within the routing component and set the parameter interval to\nindicate that the expiration time of this rendering result is 5 seconds:\n\n\n\nAfter modification, execute pnpm run build && pnpm run serve to start the\napplication and open the page.\n\nThe first time it is opened, there is no difference in rendering compared to\nbefore, and there is still a 2-second delay.\n\nClicking refresh opens the page instantly, but at this point, the page data has\nnot changed due to the refresh because the cache has not yet expired.\n\nAfter waiting for 5 seconds and refreshing the page, the data on the page\nremained unchanged. After refreshing again, the data changed, but the response\nwas nearly immediate.\n\nThis is because during the previous request, SPR had already asynchronously\nobtained a new rendering result in the background, and this time's requested\npage is a version that has been cached on the server.\n\nOne can imagine that when the interval is set to 1, users can have a responsive\nexperience of static pages while perceiving real-time data.\n\nINFO\n\nFor more detail, see .\n\n\nTreeshaking#\n\nWhen SSR is enabled, Modern.js uses the same entry point to build both SSR\nBundle and CSR Bundle. Therefore, errors may occur if there are Web APIs in the\nSSR Bundle or Node APIs in the CSR Bundle.\n\nIntroducing Web APIs in components usually do some global listening or obtaining\nbrowser-related data, such as:\n\n\n\nImporting Node API in component files is usually done when using useLoader, for\nexample:\n\n\n\n\nUse Environment Variables#\n\nFor the first case, we can directly use the built-in environment variable\nMODERN_TARGET in Modern.js to determine and remove unused code during build\ntime:\n\n\n\nAfter the development environment is bundled, the SSR and CSR artifacts will be\ncompiled into the following content. Therefore, there will be no more Web API\nerrors in the SSR environment.\n\n\n\nNOTE\n\nFor more information, see environment variables.\n\n\nUse File Suffix#\n\nBut for example, in the second case, fs-extra is imported in the code, which has\nside effects using Node API internally. If it is directly referenced in the\ncomponent, it will cause an error when CSR loading.\n\nEnvironment variables does not work in this case. Modern.js also supports using\nfiles with the .node. suffix to distinguish between the packaging files of SSR\nBundle and CSR Bundle products.\n\nYou can create a proxy layer by creating files with the same name but different\nextensions, such as .ts and .node.ts:\n\n\n\n\n\nImport ./compat directly in the file. In SSR environment, files with .node.ts\nsuffix will be used first, while in CSR environment, files with .ts suffix will\nbe used.\n\n\n\n\nIndependent File#\n\nThe two methods mentioned above will both bring some mental burden to\ndevelopers. In real business scenarios, we found that most of the mixed Node/Web\ncode appears in data requests.\n\nTherefore, Modern.js has designed a Data Fetch to separate CSR and SSR code\nbased on Nested Routing.\n\nWe can separate data requests from component code by using independent files.\nWrite the component logic in routes/page.tsx and write the data request logic in\nroutes/page.data.ts.\n\n\n\n\n\n\nRemote Request#\n\nWhen initiating interface requests in SSR, developers sometimes encapsulate\nisomorphic request tools themselves. For some interfaces that require passing\nuser cookies, developers can use the 'useRuntimeContext' API to get the request\nheader for implementation.\n\nIt should be noted that the obtained request header is for HTML requests, which\nmay not be suitable for API requests. Therefore, ** don't passed through all\nrequest headers **.\n\nIn addition, some backend interfaces or common gateways will verify based on the\ninformation in the request header. Full pass-through can easily lead to various\ndifficult-to-troubleshoot issues, so it is recommended to pass through as\nneeded.\n\nIf it is really necessary to pass through all request headers, please be sure to\nfilter the host field.\n\n\nStreaming SSR#\n\nModern.js supports streaming rendering in React 18 which can be enabled through\nthe following configuration:\n\n\n\nThe streaming SSR of Modern.js is implemented based on React Router, and the\nmain APIs involved are:\n\n * defer: This utility allows you to defer values returned from loaders by\n   passing promises instead of resolved values.\n * Await: Used to render deferred values with automatic error handling.\n * useAsyncValue: Returns the resolved data from the nearest ancestor component.\n\n\nReturn async data#\n\n\n\nuser is a Promise object that represents the data that needs to be obtained\nasynchronously. Use defer to handle the asynchronous retrieval of user. Note\nthat defer must receive an object type parameter, so the parameter passed to\ndefer is: { data: user }.\n\ndefer can receive both asynchronous and synchronous data at the same time. For\nexample:\n\n\n\nThe data obtained from otherData is synchronous because it has an await keyword\nin front of it. It can be passed into defer together with the asynchronous data\nobtained from user.\n\n\nRender asynchronous data.#\n\nWith the component, you can retrieve the data asynchronously returned by the\nData Loader and then render it. For example:\n\n\n\nneeds to be wrapped inside the component. The resolve function passed into is\nused to asynchronously retrieve data from a Data Loader. Once the data has been\nretrieved, it is rendered using Render Props mode. During the data retrieval\nphase, the content specified in the fallback property of will be displayed.\n\nWarning\n\nWhen importing types from a Data Loader file, it is necessary to use the import\ntype syntax to ensure that only type information is imported. This can avoid\npackaging Data Loader code into the bundle file of the front-end product.\n\nTherefore, the `;\n\nYou can also retrieve asynchronous data returned by the Data Loader using\nuseAsyncValue. For example:\n\n\n\n\nError handling#\n\nThe errorElement property of the component can be used to handle errors thrown\nwhen the Data Loader executes or when a child component renders. For example, we\nintentionally throw an error in the Data Loader function:\n\n\n\nThen use useAsyncError to get the error, and assign the component used to render\nthe error to the errorElement property of the component:\n\n\n\nMore\n 1. Deferred Data\n 2. New Suspense SSR Architecture in React 18","routePath":"/en/guides/advanced-features/ssr","lang":"en","toc":[{"text":"SSR Data Fetch","id":"ssr-data-fetch","depth":2,"charIndex":353},{"text":"Keep Rendering Consistent","id":"keep-rendering-consistent","depth":2,"charIndex":1612},{"text":"Pay Attention to Memory Leaks","id":"pay-attention-to-memory-leaks","depth":2,"charIndex":3207},{"text":"Converging Server Data.","id":"converging-server-data","depth":2,"charIndex":4504},{"text":"Serverless Pre-render","id":"serverless-pre-render","depth":2,"charIndex":5369},{"text":"Treeshaking","id":"treeshaking","depth":2,"charIndex":7312},{"text":"Use Environment Variables","id":"use-environment-variables","depth":3,"charIndex":7733},{"text":"Use File Suffix","id":"use-file-suffix","depth":3,"charIndex":8169},{"text":"Independent File","id":"independent-file","depth":3,"charIndex":8883},{"text":"Remote Request","id":"remote-request","depth":2,"charIndex":9373},{"text":"Streaming SSR","id":"streaming-ssr","depth":2,"charIndex":10180},{"text":"Return async data","id":"return-async-data","depth":3,"charIndex":10688},{"text":"Render asynchronous data.","id":"render-asynchronous-data","depth":3,"charIndex":11240},{"text":"Error handling","id":"error-handling","depth":3,"charIndex":12071}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":214,"title":"Cache","content":"#\n\nSometimes we cache computation results, such as with the React useMemo,\nuseCallback Hook. By caching, we can reduce the number of computations, thus\nreducing CPU resource usage and enhancing the user experience.\n\nCaching the results of server-side rendering (SSR) can reduce the computation\nand rendering time for each server request, enabling faster page load speeds and\nimproving the user experience. It also lowers the server load, saves\ncomputational resources, and speeds up user access.\n\nINFO\n\nNeed x.43.0+\n\n\nConfiguration#\n\nYou can enable caching by configuring it in server/cache.[t|j]s:\n\n\n\n\nConfiguration Explanation#\n\n\nCache Configuration#\n\nThe caching policy is implemented based on stale-while-revalidate.\n\nDuring the maxAge period, cache content will be returned directly. After maxAge\nbut within staleWhileRevalidate, the cache content will also be returned\ndirectly, but at the same time, re-rendering will be executed asynchronously.\n\nObject type\n\n\n\nIn this, customKey is used for custom cache key. By default, Modern.js will use\nthe request pathname as key for caching, but in some cases, this may not meet\nyour needs, so developers can customise it.\n\nFunction type\n\n\n\nSometimes developers need to customise the cache key through req, which can be\nhandled using the function form, as shown in the following code:\n\n\n\nMapping type\n\n\n\nSometimes, developers need to apply different caching policies for different\nroutes. We also provide a mapping way for configuration, as shown in example\nbelow:\n\n\n\n * The route http://xxx/home will apply the first rule.\n * The route http://xxx/about will apply the second rule.\n * The route http://xxx/abc will apply the last rule.\n\nThe above-mentioned /home and /about will be used as patterns for matching,\nwhich means that /home/abc will also comply with this rule. Simultaneously, you\ncan also include regular expression syntax in it, such as /home/.+.\n\n\nCache Container#\n\nBy default, Server will use memory for caching. But typically, services will be\ndeployed on serverless. Each service access may be a new process, so caching\ncannot be applied every time.\n\nTherefore, developers can also customise the cache container, which needs to\nimplement the Container interface.\n\n\n\nAs an example in the following code, a developer can implement a Redis\ncontainer.\n\n\n\n\nCache Identification#\n\nWhen the rendering cache is activated, Modern.js will identify the cache status\nof the current request through the response header x-render-cache.\n\nThe following is an example of a response.\n\n\n\nThe x-render-cache may have the following values.\n\nNAME      DESCRIPTION\nhit       Cache hit, returns cached content\nstale     Cache hit, but data is stale, returns cached content while\n          rendering again\nexpired   Cache hit, returns rendering result after re-rendering\nmiss      Cache miss","routePath":"/en/guides/advanced-features/ssr/cache","lang":"en","toc":[{"text":"Configuration","id":"configuration","depth":2,"charIndex":517},{"text":"Configuration Explanation","id":"configuration-explanation","depth":2,"charIndex":602},{"text":"Cache Configuration","id":"cache-configuration","depth":3,"charIndex":631},{"text":"Cache Container","id":"cache-container","depth":3,"charIndex":1910},{"text":"Cache Identification","id":"cache-identification","depth":2,"charIndex":2317}],"domain":"","frontmatter":{"sidebar_position":3,"title":"Cache"},"version":""},{"id":215,"title":"SSR","content":"#\n\nBy rendering the HTML content of web pages into complete web pages on the server\nside, and then sending the generated web pages to the client, the client only\nneeds to display the web pages without further rendering.\n\nIts main advantages are:\n\n * Improve first screen load speed: SSR can generate complete websites on the\n   server side, the client only needs to download the content of the website, no\n   additional renderings are required, thus improving the first screen load\n   speed.\n * Improve user experience: SSR can improve the responsiveness of web pages,\n   thereby enhancing the user experience.\n * Good for SEO: SSR can generate complete HTML content. Search engines can\n   directly index HTML content to improve website ranking.\n\nIf you have the following scenarios, developers can consider using SSR to render\nyour pages:\n\n 1. Websites with higher first-screen loading speed requirements, such as\n    e-commerce websites, news websites, etc.\n 2. Websites with higher user experience requirements, such as social networking\n    sites, gaming sites, etc.\n 3. Websites with higher SEO requirements, such as corporate websites, blogs,\n    etc.\n\nIn Modern.js, SSR is also out-of-the-box. Developers do not need to write\ncomplex server-side logic for SSR, nor do they need to worry about the operation\nand maintenance of SSR, or create separate services. In addition to the\nout-of-the-box SSR service, to ensure the developer's development experience, we\nalso have:\n\n * A complete SSR downgrade strategy to ensure that the page can run safely.\n * Automatically split sub-routes to load on demand, reducing the size of the\n   first screen resources.\n * Built-in caching system to solve the problem of high server-side load.","routePath":"/en/guides/advanced-features/ssr/","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":216,"title":"Streaming SSR","content":"#\n\n\nOverview#\n\nStream rendering is a new way of rendering, which can update the page content in\nreal time when the user interacts with the page, thereby improving the user\nexperience.\n\nIn traditional rendering, the rendering of the page is completed at once, while\nin stream rendering, the rendering of the page is gradually completed. When the\nuser interacts with the page, data is loaded gradually instead of loading all at\nonce.\n\nCompared to traditional rendering:\n\n * Faster perceived speed: Stream rendering can gradually display content during\n   the rendering process to display the business home page at the fastest speed.\n * Better user experience: Through stream rendering, users can see the content\n   on the page faster, instead of waiting for the entire page to be rendered\n   before they can interact.\n * Better performance control: Stream rendering allows developers to better\n   control the loading priority and order of pages, thereby optimizing\n   performance and user experience.\n * Better adaptability: Stream rendering can better adapt to different network\n   speeds and device performances, allowing the page to perform better in\n   various environments.\n\n\nUsage#\n\nModern.js supports streaming rendering in React 18 which can be enabled through\nthe following configuration:\n\n\n\nThe streaming SSR of Modern.js is implemented based on React Router, and the\nmain APIs involved are:\n\n * defer: This utility allows you to defer values returned from loaders by\n   passing promises instead of resolved values.\n * Await: Used to render deferred values with automatic error handling.\n * useAsyncValue: Returns the resolved data from the nearest ancestor component.\n\n\nReturn async data#\n\n\n\nuser is a Promise object that represents the data that needs to be obtained\nasynchronously. Use defer to handle the asynchronous retrieval of user. Note\nthat defer must receive an object type parameter, so the parameter passed to\ndefer is: { data: user }.\n\ndefer can receive both asynchronous and synchronous data at the same time. For\nexample:\n\n\n\nThe data obtained from otherData is synchronous because it has an await keyword\nin front of it. It can be passed into defer together with the asynchronous data\nobtained from user.\n\n\nRender asynchronous data.#\n\nWith the component, you can retrieve the data asynchronously returned by the\nData Loader and then render it. For example:\n\n\n\nneeds to be wrapped inside the component. The resolve function passed into is\nused to asynchronously retrieve data from a Data Loader. Once the data has been\nretrieved, it is rendered using Render Props mode. During the data retrieval\nphase, the content specified in the fallback property of will be displayed.\n\nWarning\n\nWhen importing types from a Data Loader file, it is necessary to use the import\ntype syntax to ensure that only type information is imported. This can avoid\npackaging Data Loader code into the bundle file of the front-end product.\n\nTherefore, the `;\n\nYou can also retrieve asynchronous data returned by the Data Loader using\nuseAsyncValue. For example:\n\n\n\n\nError handling#\n\nThe errorElement property of the component can be used to handle errors thrown\nwhen the Data Loader executes or when a child component renders. For example, we\nintentionally throw an error in the Data Loader function:\n\n\n\nThen use useAsyncError to get the error, and assign the component used to render\nthe error to the errorElement property of the component:\n\n\n\n\nWaiting for all content to load for spiders#\n\nStreaming offers a better user experience because the user can see the content\nas it becomes available.\n\nHowever, when a spider visits your page, you might want to let all of the\ncontent load first and then produce the final HTML output instead of revealing\nit progressively.\n\nModern.js uses isbot to examine the user-agent of requests, determining whether\nthey come from a crawler.\n\nMore\n 1. Deferred Data\n 2. New Suspense SSR Architecture in React 18","routePath":"/en/guides/advanced-features/ssr/stream","lang":"en","toc":[{"text":"Overview","id":"overview","depth":2,"charIndex":3},{"text":"Usage","id":"usage","depth":2,"charIndex":1178},{"text":"Return async data","id":"return-async-data","depth":3,"charIndex":1678},{"text":"Render asynchronous data.","id":"render-asynchronous-data","depth":3,"charIndex":2230},{"text":"Error handling","id":"error-handling","depth":3,"charIndex":3061},{"text":"Waiting for all content to load for spiders","id":"waiting-for-all-content-to-load-for-spiders","depth":2,"charIndex":3441}],"domain":"","frontmatter":{"sidebar_position":2,"title":"Streaming SSR"},"version":""},{"id":217,"title":"Usage","content":"#\n\nEnabling SSR is simple. Just set the value of server.ssr to true.\n\n\n\n\nSSR Data Fetch#\n\nModern.js provides a Data Loader that simplifies data fetching for developers\nworking with SSR and CSR. Each routing module, such as layout.tsx and page.tsx,\ncan define its own Data Loader:\n\n\n\nWithin the component, data returned by the loader function can be accessed\nthrough the Hooks API:\n\n\n\nModern.js breaks the traditional model of server-side rendering (SSR)\ndevelopment and offers users a more user-friendly SSR development experience.\n\nThis feature offers elegant degradation processing. If the SSR request fails, it\nwill automatically downgrade and restart the request on the browser side.\n\nDevelopers should still be mindful of data fallback, including null values or\nunexpected data returns. This will help prevent React rendering errors and messy\nresults during SSR.\n\nINFO\n\n 1. When requesting a page through client-side routing, Modern.js sends an HTTP\n    request. The server receives the request and executes the corresponding Data\n    Loader function for the page, then returns the execution result as a\n    response to the browser.\n\n 2. When using Data Loader, data is fetched before rendering. Modern.js also\n    supports obtaining data during component rendering. For more related\n    content, please refer to Data Fetch.\n\n\nKeep Rendering Consistent#\n\nIn some businesses, it is usually necessary to make different UI displays based\non the current operating container environment characteristics, such as UA\ninformation.\n\nIf not handled carefully, unexpected rendering results are likely to occur.\n\nHere is an example to show the problem when SSR and CSR rendering are\ninconsistent, add the following code to the component:\n\n\n\nAfter launching the application and accessing the page, you will find that the\nbrowser console throws a warning message.\n\n\n\nThis is caused by React's hydration logic on the client side detecting\ninconsistencies between the rendered result and the SSR rendering result.\nAlthough the page appears normal, in complex applications, it is likely to cause\nproblems such as DOM hierarchy confusion and style disorder.\n\nINFO\n\nMore information about React hydrate.\n\nThe application needs to maintain consistency between SSR and CSR rendering\nresults. If there is inconsistency, it means that this part of the content does\nnot need to be rendered in SSR.\n\nModern.js provides a component for such content that does not need to be\nrendered in SSR.\n\n\n\nWrap the element that does not require SSR with the NoSSR component:\n\n\n\nAfter modifying the code, refreshing the page shows that the previous warning\nhas disappeared. Opening the Network tab of the browser devtools and checking\nthe returned HTML document does not contain content wrapped by NoSSR components.\n\nINFO\n\n'useRuntimeContext' can get complete request information, which can be used to\nensure consistent rendering results between SSR and CSR.\n\n\nPay Attention to Memory Leaks#\n\nWARNING\n\nDevelopers need to pay special attention to memory leaks in the SSR mode. Even\ntiny memory leaks can have an impact on the service after a large number of\naccesses.\n\nWhen using SSR, each request from the browser will trigger the server to\nre-execute the component rendering logic. Therefore, it is necessary to avoid\ndefining any data structures that may continue to grow globally, subscribing to\nevents globally, or creating streams that will not be destroyed globally.\n\nFor example, when using redux-observable, developers who are used to CSR\ndevelopment usually code in the component like this:\n\n\n\nCreate a Middleware instance epicMiddleware outside the component and call\nepicMiddleware.run inside the component.\n\nWhen running on the client-side, this code will not cause any issues. However,\nduring SSR, the Middleware instance cannot be destroyed.\n\nEvery time a component is rendered and epicMiddleware.run(rootEpic) is called,\nnew event bindings are added internally which causes the entire object to grow\ncontinuously and ultimately affects application performance.\n\nCSR issues are not easy to detect, so when switching from CSR to SSR, if you are\nunsure whether the application has such problems, you can perform stress testing\non applications.\n\n\nConverging Server Data.#\n\nIn order to maintain the data requested during the SSR phase, it can be directly\nused on the browser side. Modern.js will inject the data and state collected\nduring rendering into HTML.\n\nHowever, in CSR applications, there are often situations where interface data is\nlarge and component states are not converged. If SSR is used directly in this\ncase, the rendered HTML may have a problem of being too large.\n\nAt this time, SSR may not only fail to improve user experience for applications\nbut may also have an opposite effect.\n\nTherefore, when using SSR, developers need to properly slim down the\napplication.\n\n 1. Focus on the first screen, SSR can request only the data needed for the\n    first screen and render the remaining parts on the browser side.\n 2. Remove data unrelated to rendering from the returned data of the interface.\n\n\nServerless Pre-render#\n\nWARNING\n\nx.43.0+ has been deprecated, Please instance of SSR Cache.\n\nModern.js provides the Serverless Pre-rendering (SPR) feature to improve SSR\nperformance.\n\nSPR uses pre-rendering and caching technology to provide responsive performance\nfor SSR pages. It enables SSR applications to have the response speed and\nstability of static web pages while also maintaining dynamic data updates.\n\nUsing SPR in Modern.js is very simple. Just add the PreRender component to your\ncomponent, and the page where it is located will automatically enable SPR.\n\nHere is a simulated component that uses the useLoaderData API. The request in\nthe Data Loader takes 2 seconds to consume.\n\n\n\n\n\nAfter executing the dev command and opening the page, it is obvious that the\npage needs to wait 2s before returning.\n\nUse the component for optimization next, which can be directly exported from\n@modern-js/runtime/ssr.\n\n\n\nUse the component within the routing component and set the parameter interval to\nindicate that the expiration time of this rendering result is 5 seconds:\n\n\n\nAfter modification, execute pnpm run build && pnpm run serve to start the\napplication and open the page.\n\nThe first time it is opened, there is no difference in rendering compared to\nbefore, and there is still a 2-second delay.\n\nClicking refresh opens the page instantly, but at this point, the page data has\nnot changed due to the refresh because the cache has not yet expired.\n\nAfter waiting for 5 seconds and refreshing the page, the data on the page\nremained unchanged. After refreshing again, the data changed, but the response\nwas nearly immediate.\n\nThis is because during the previous request, SPR had already asynchronously\nobtained a new rendering result in the background, and this time's requested\npage is a version that has been cached on the server.\n\nOne can imagine that when the interval is set to 1, users can have a responsive\nexperience of static pages while perceiving real-time data.\n\nINFO\n\nFor more detail, see .\n\n\nTreeshaking#\n\nWhen SSR is enabled, Modern.js uses the same entry point to build both SSR\nBundle and CSR Bundle. Therefore, errors may occur if there are Web APIs in the\nSSR Bundle or Node APIs in the CSR Bundle.\n\nIntroducing Web APIs in components usually do some global listening or obtaining\nbrowser-related data, such as:\n\n\n\nImporting Node API in component files is usually done when using useLoader, for\nexample:\n\n\n\n\nUse Environment Variables#\n\nFor the first case, we can directly use the built-in environment variable\nMODERN_TARGET in Modern.js to determine and remove unused code during build\ntime:\n\n\n\nAfter the development environment is bundled, the SSR and CSR artifacts will be\ncompiled into the following content. Therefore, there will be no more Web API\nerrors in the SSR environment.\n\n\n\nNOTE\n\nFor more information, see environment variables.\n\n\nUse File Suffix#\n\nBut for example, in the second case, fs-extra is imported in the code, which has\nside effects using Node API internally. If it is directly referenced in the\ncomponent, it will cause an error when CSR loading.\n\nEnvironment variables does not work in this case. Modern.js also supports using\nfiles with the .node. suffix to distinguish between the packaging files of SSR\nBundle and CSR Bundle products.\n\nYou can create a proxy layer by creating files with the same name but different\nextensions, such as .ts and .node.ts:\n\n\n\n\n\nImport ./compat directly in the file. In SSR environment, files with .node.ts\nsuffix will be used first, while in CSR environment, files with .ts suffix will\nbe used.\n\n\n\n\nIndependent File#\n\nThe two methods mentioned above will both bring some mental burden to\ndevelopers. In real business scenarios, we found that most of the mixed Node/Web\ncode appears in data requests.\n\nTherefore, Modern.js has designed a Data Fetch to separate CSR and SSR code\nbased on Nested Routing.\n\nWe can separate data requests from component code by using independent files.\nWrite the component logic in routes/page.tsx and write the data request logic in\nroutes/page.data.ts.\n\n\n\n\n\n\nRemote Request#\n\nWhen initiating interface requests in SSR, developers sometimes encapsulate\nisomorphic request tools themselves. For some interfaces that require passing\nuser cookies, developers can use the 'useRuntimeContext' API to get the request\nheader for implementation.\n\nIt should be noted that the obtained request header is for HTML requests, which\nmay not be suitable for API requests. Therefore, ** don't passed through all\nrequest headers **.\n\nIn addition, some backend interfaces or common gateways will verify based on the\ninformation in the request header. Full pass-through can easily lead to various\ndifficult-to-troubleshoot issues, so it is recommended to pass through as\nneeded.\n\nIf it is really necessary to pass through all request headers, please be sure to\nfilter the host field.","routePath":"/en/guides/advanced-features/ssr/usage","lang":"en","toc":[{"text":"SSR Data Fetch","id":"ssr-data-fetch","depth":2,"charIndex":72},{"text":"Keep Rendering Consistent","id":"keep-rendering-consistent","depth":2,"charIndex":1331},{"text":"Pay Attention to Memory Leaks","id":"pay-attention-to-memory-leaks","depth":2,"charIndex":2926},{"text":"Converging Server Data.","id":"converging-server-data","depth":2,"charIndex":4223},{"text":"Serverless Pre-render","id":"serverless-pre-render","depth":2,"charIndex":5088},{"text":"Treeshaking","id":"treeshaking","depth":2,"charIndex":7100},{"text":"Use Environment Variables","id":"use-environment-variables","depth":3,"charIndex":7521},{"text":"Use File Suffix","id":"use-file-suffix","depth":3,"charIndex":7957},{"text":"Independent File","id":"independent-file","depth":3,"charIndex":8671},{"text":"Remote Request","id":"remote-request","depth":2,"charIndex":9161}],"domain":"","frontmatter":{"sidebar_position":1,"title":"Usage"},"version":""},{"id":218,"title":"Using Storybook","content":"#\n\nStorybook is a tool dedicated to component debugging, providing around component\ndevelopment.\n\n * Develop UIs that are more durable\n * Test UIs with less effort and no flakes\n * Document UI for your team to reuse\n * Share how the UI actually works\n * Automate UI workflows\n\nTIP\n\nThis tutorial is suitable for Storybook V7 users. If you are using an old\nversion of Storybook V6 (using the @modern-js/plugin-storybook plugin), you can\nrefer to the Migration Guide to upgrade.\n\n\nQuick Start#\n\nModern.js integrates Storybook debugging capabilities by default. You can\ndirectly enable the Storybook feature by using the following command:\n\n\n\nThis command will create a template for Storybook, including:\n\n * Creating a configuration folder .storybook and a default configuration file\n   .storybook/main.ts.\n * Creating example story components.\n * Updating package.json to add dependencies @storybook/addon-essentials and\n   @modern-js/storybook, as well as creating Storybook-related scripts.\n\nTo start, run npm run storybook.\n\n\nEnable Rspack build#\n\nRspack is known for its fast build speed. To use Rspack as a build tool in\nModern.js, you only need to configure it as follows:\n\n\n\nNote that in the above configuration, the reactDocgen configuration has been\nchanged because Rspack currently does not support\n@storybook/react-docgen-typescript-plugin.\n\n\nConfigurations#\n\nThere are some configurations in .storybook/main.js.\n\n\nconfigPath#\n\n * Type: string\n * Default: modern.config.(j|t)s\n\nSpecify the path of Modern.js configuration.\n\nExample:\n\n\n\n\nbundler#\n\n * Type: 'webpack' | 'rspack'\n * Default: webpack\n\nSpecify the underlying build tool to use either Webpack or Rspack.\n\nExample:\n\n\n\n\nbuilderConfig#\n\n * Type: BuilderConfig\n * Default: undefined\n\nTo modify the configuration of build, which has a higher priority than the\nconfiguration file, you can specify the build configuration directly here if you\ndo not want to use the configuration file.\n\nExample:\n\n\n\n\nCommand Line Interface#\n\n@modern-js/storybook proxies some of the storybook cli commands.\n\n\nstorybook dev#\n\nStart Storybook, more details at storybook#dev.\n\n\nstorybook build#\n\nBuild Storybook for production, more details at storybook#build.\n\n\nStorybook addon compatibility#\n\nDue to the current version of Storybook in the document being version 7, please\nselect the addon for Storybook V7.\n\nWhen an addon does not require additional Babel or Webpack configurations, it\ncan be used directly, such as @storybook/addon-essentials.\n\nFor some addons that require dependencies on Babel plugins and Webpack\nconfigurations, such as @storybook/addon-coverage, only\n@modern-js/builder-webpack-provider supports them.\n\n\nBenefits#\n\nUsing @modern-js/storybook can bring you lightning-fast builds with Rspack,\nwithout the need for tedious configuration. It comes with many best practices\nfor web development out-of-the-box, such as code splitting strategies, built-in\nsupport for CSS modules and postcss, TypeScript support, and commonly used Babel\nplugins.\n\nThe powerful build capabilities of Modern.js can be directly used in Storybook\nprojects.\n\n\nTrouble Shooting#\n\n 1. Modern.js won't load your other configurations like babel.config.json, babel\n    config needs to be set in Modern.js config, tools.babel. Webpack\n    configuration can be written in either tools.webpack or tools.webpackChain.\n\n 2. If you find that the build performance is not good, please check if the\n    Storybook automatic documentation generation feature is enabled. For optimal\n    performance, configure it to use react-docgen. The difference between\n    react-docgen and react-docgen-typescript is that the former is implemented\n    based on Babel, while the latter is implemented based on TypeScript. The\n    former has better performance but weaker type inference capabilities. If you\n    are using Rspack for the build, only react-docgen is supported.\n\n\n\n\nMigration Guide#\n\n\nMigrate from @modern-js/plugin-storybook#\n\nIf you are a user migrating from V6 to V7, you can use V7 through the above\nmethod and make the following adjustments:\n\nModify configuration file#\n\nIf you have made some custom configurations to Storybook in the older version,\nyou need to move the configuration file root/config/storybook/main.(j|t)s to\nroot/.storybook/main.(j|t)s.\n\nAnd then add the following lines in root/.storybook/main.(j|t)s, specify\nframework as @modern-js/storybook.\n\n\n\nUpdate Dependencies#\n\nUpdate dependencies like @storybook/addon-* to major version 7.\n\nRemove @modern-js/plugin-storybook#\n\n在 modern.config.(j|t)s 中删除 @modern-js/plugin-storybook 插件的注册。\n\nModify Storybook Syntax#\n\nFollow the official Storybook documentation to make the necessary updates for\nsome breaking changes, such as changes in story writing and MDX syntax. You can\nrefer to the migration guide at storybook migrate doc.\n\n\nNative Storybook users#\n\nModern.js only support Storybook 7, so you need to upgrade from Storybook\nversion 6 to version 7, please follow the steps outlined in the official\nStorybook documentation at storybook migrate doc.\n\n\n\nThe default config file path is modern.config.(j|t)s, for the detail config, see\nmodern.js config.\n\nIf the original project includes configurations for Babel, they need to be\nwritten in the modern configuration. Most Babel configurations have already been\nincluded in Modern.js.","routePath":"/en/guides/advanced-features/using-storybook","lang":"en","toc":[{"text":"Quick Start","id":"quick-start","depth":2,"charIndex":478},{"text":"Enable Rspack build","id":"enable-rspack-build","depth":2,"charIndex":1027},{"text":"Configurations","id":"configurations","depth":2,"charIndex":1352},{"text":"configPath","id":"configpath","depth":3,"charIndex":1424},{"text":"bundler","id":"bundler","depth":3,"charIndex":1546},{"text":"builderConfig","id":"builderconfig","depth":3,"charIndex":1688},{"text":"Command Line Interface","id":"command-line-interface","depth":2,"charIndex":1963},{"text":"storybook dev","id":"storybook-dev","depth":3,"charIndex":2055},{"text":"storybook build","id":"storybook-build","depth":3,"charIndex":2121},{"text":"Storybook addon compatibility","id":"storybook-addon-compatibility","depth":2,"charIndex":2206},{"text":"Benefits","id":"benefits","depth":2,"charIndex":2672},{"text":"Trouble Shooting","id":"trouble-shooting","depth":2,"charIndex":3099},{"text":"Migration Guide","id":"migration-guide","depth":2,"charIndex":3889},{"text":"Migrate from @modern-js/plugin-storybook","id":"migrate-from-modern-jsplugin-storybook","depth":3,"charIndex":3908},{"text":"Native Storybook users","id":"native-storybook-users","depth":3,"charIndex":4824}],"domain":"","frontmatter":{"sidebar_position":15},"version":""},{"id":219,"title":"Custom Web Server","content":"#\n\nAs a client-centric development framework, Modern.js has limited customization\ncapabilities on the server side. However, in some development scenarios, special\nserver-level logic needs to be customized, such as user authentication, request\npreprocessing, and adding page rendering skeletons.\n\nSome developers may be wondering, Modern.js already provides BFF, why you need\nCustom Web Server.\n\nThe reason is that by default, page routing does not go through BFF, it has no\nway to provide server-side custom logic for page access. The reason for this\ndesign is that we do not want the service that controls the page to be bound to\nthe BFF service, this is to avoid the BFF framework restricting how the page is\ndeployed.\n\nFor example, hosting pages separately from BFF, deploying page services to\nnon-Node environments, customizing for deployment platforms, etc.\n\nFor the above reasons, Modern.js provides three ways that projects can customize\nserver-level capabilities progressively according to their needs.\n\nWARNING\n\nThe three extension methods cannot work at the same time, and developers need to\nchoose the appropriate method according to the scenario.\n\n\nExtending Web Server with API#\n\nThe first way is to customize the server-side at a specific lifecycle through\nthe server-side runtime API provided by Modern.js. The purpose of providing this\nway is that in some cases, developers do not need to control the full Web\nServer, but only need to add server-level logic.\n\nBecause the full web server cannot be controlled this way, and the extension\nlogic only takes effect when the page is requested. Therefore, it is relatively\nsimple to apply server-level logic, and you do not want to create additional\nBFFs or BFFs and pages without common server-level logic scenarios.\n\nYou can run the'pnpm run new 'command in the project root directory to enable\nthe \"Custom Web Serve\" function:\n\n\n\nAfter executing the command, register the @modern-js/plugin-server plugin in\nmodern.config.ts:\n\n\n\nAfter the function is turned on, the server/index.ts file will be automatically\ncreated in the project directory, and custom logic can be written in this file.\nModern.js provides two types of APIs, Hook and Middleware, to extend Web Server.\n\n\nHook#\n\nThe Hook provided by Modern.js is used to control the built-in logic in the Web\nServer, and all page requests go through the Hook.\n\nCurrently, two Hooks are provided: AfterMatch and AfterRender, which can be used\nto modify the rendering results. It can be written in server/index.ts as\nfollows:\n\n\n\nProjects should follow these best practices when using Hook:\n\n 1. Authentication in afterMatch.\n 2. Do Rewrite and Redirect in afterMatch.\n 3. Inject HTML content in afterRender.\n\nNOTE\n\nFor more detail, see Hook.\n\n\nMiddleware#\n\nFor some projects, there may be more requirements at the server level, Modern.js\nprovides Middleware to add pre-middleware for Web Server. It can only run in a\nNode environment, so if the project is deployed to another environment, such as\na Worker environment, Middleware cannot be used.\n\nNOTE\n\nIn the next major release, Modern.js will use new middleware to replace this\napproach.\n\nIt is recommended to use UnstableMiddleware to handle page requests.\n\nModern.js provides a set of APIs by default for projects to use:\n\n\n\nNOTE\n\nFor more detail, see [Middleware] (/apis/app/runtime/web-server/middleware).\n\nProjects should follow these best practices when using Middleware:\n\n 1. In Middleware, you can directly operate origin request and response objects,\n    do event tracking, and inject Node services (databases, Redis, etc.) that\n    may be used for SSR rendering.\n 2. Operations such as marking and crawler optimization can be done in\n    Middleware.\n 3. In Middleware, you can ignore the default rendering and customize the\n    rendering process.\n\nIn general, in CSR projects, using Hook can basically meet all the needs of\nsimple scenarios. In SSR projects, Middleware can be used for more complex Node\nextensions.\n\n\nUnstable Middleware#\n\nModern.js will provide new Middleware to add pre-processing middleware to the\nWeb Server, supporting the execution of custom logic before and after handling\nthe page.\n\n\n\nNOTE\n\nFor detailed API and more usage, please refer to UnstableMiddleware\n\n\nManaged Page Requests with BFF#\n\nThe second way is to use BFF to Managed page rendering. In this way, all\nrequests will first hit the BFF service.\n\nThis method can uniformly control the server-level logic of all requests through\nBFF. Therefore, it is suitable for scenarios where the server-level logic is\ncomplex, and BFF and pages need common server-level logic. But it still relies\non the Web Server of Modern.js as a whole, and cannot run the logic on existing\nservices.\n\nTo use this method, we first need to enable the \"BFF\" function through pnpm new.\nThen add bff.enableHandleWeb configuration in the configuration file:\n\n\n\nWhen this value is set to true, page request traffic also goes through the BFF,\nand the logic built into Modern.js for page rendering defaults to running as the\nlast middleware for the BFF service.\n\n\nFully Customized Web Server#\n\nNOTE\n\nComming soon..","routePath":"/en/guides/advanced-features/web-server","lang":"en","toc":[{"text":"Extending Web Server with API","id":"extending-web-server-with-api","depth":2,"charIndex":1160},{"text":"Hook","id":"hook","depth":3,"charIndex":2233},{"text":"Middleware","id":"middleware","depth":3,"charIndex":2753},{"text":"Unstable Middleware","id":"unstable-middleware","depth":3,"charIndex":3989},{"text":"Managed Page Requests with BFF","id":"managed-page-requests-with-bff","depth":2,"charIndex":4257},{"text":"Fully Customized Web Server","id":"fully-customized-web-server","depth":2,"charIndex":5087}],"domain":"","frontmatter":{"sidebar_position":16},"version":""},{"id":220,"title":"Path Alias","content":"#\n\nPath aliases allow developers to define aliases for modules, making it easier to\nreference them in code. This can be useful when you want to use a short,\neasy-to-remember name for a module instead of a long, complex path.\n\nFor example, if you frequently reference the src/common/request.ts module in\nyour project, you can define an alias for it as @request and then use `` in your\ncode instead of writing the full relative path every time. This also allows you\nto move the module to a different location without needing to update all the\nimport statements in your code.\n\nIn Modern.js, there are two ways to set up path aliases:\n\n * Through the paths configuration in tsconfig.json.\n * Through the source.alias configuration.\n\n\nUsing tsconfig.json's paths Configuration#\n\nYou can configure aliases through the paths configuration in tsconfig.json,\nwhich is the recommended approach in TypeScript projects as it also resolves the\nTS type issues related to path aliases.\n\nFor example:\n\n\n\nAfter configuring, if you reference @common/Foo.tsx in your code, it will be\nmapped to the /src/common/Foo.tsx path.\n\nTIP\n\nYou can refer to the TypeScript - paths documentation for more details.\n\n\nUse source.alias Configuration#\n\nModern.js provides the source.alias configuration option, which corresponds to\nthe webpack/Rspack native resolve.alias configuration. You can configure this\noption using an object or a function.\n\n\nUse Cases#\n\nSince the paths configuration in tsconfig.json is written in a static JSON file,\nit lacks dynamism.\n\nThe source.alias configuration can address this limitation by allowing you to\ndynamically set the source.alias using JavaScript code, such as based on\nenvironment variables.\n\n\nObject Usage#\n\nYou can configure source.alias using an object, where the relative paths will be\nautomatically resolved to absolute paths.\n\nFor example:\n\n\n\nAfter configuring, if you reference @common/Foo.tsx in your code, it will be\nmapped to the /src/common/Foo.tsx path.\n\n\nFunction Usage#\n\nYou can also configure source.alias as a function, which receives the built-in\nalias object and allows you to modify it.\n\nFor example:\n\n\n\n\nPriority#\n\nThe paths configuration in tsconfig.json takes precedence over the source.alias\nconfiguration. When a path matches the rules defined in both paths and\nsource.alias, the value defined in paths will be used.\n\nYou can adjust the priority of these two options using source.aliasStrategy.\n\n\nDefault Aliases#\n\nThe Modern.js framework comes with the following aliases built-in:\n\n\n\nAdditionally, when the BFF plugin of the framework is enabled, the @api alias is\nautomatically added.\n\n","routePath":"/en/guides/basic-features/alias","lang":"en","toc":[{"text":"Using `tsconfig.json`'s `paths` Configuration","id":"using-tsconfigjsons-paths-configuration","depth":2,"charIndex":-1},{"text":"Use `source.alias` Configuration","id":"use-sourcealias-configuration","depth":2,"charIndex":-1},{"text":"Use Cases","id":"use-cases","depth":3,"charIndex":1414},{"text":"Object Usage","id":"object-usage","depth":3,"charIndex":1703},{"text":"Function Usage","id":"function-usage","depth":3,"charIndex":1977},{"text":"Priority","id":"priority","depth":3,"charIndex":2133},{"text":"Default Aliases","id":"default-aliases","depth":2,"charIndex":2430}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":221,"title":"Use CSS Modules","content":"#\n\nCSS Modules allows us to write CSS code in a modular way, and these styles can\nbe imported and used in JavaScript files. Using CSS Modules can automatically\ngenerate unique class names, isolate styles between different modules, and avoid\nclass name conflicts.\n\nBuilder supports CSS Modules by default, you don't need to add additional\nconfiguration. Our convention is to use the [name].module.css filename to enable\nCSS Modules.\n\nThe following style files are considered CSS Modules:\n\n * *.module.scss\n * *.module.less\n * *.module.css\n\n\nExample#\n\n * Write style:\n\n\n\n * Using styles:\n\n\n\n\nEnable CSS Modules for all CSS files#\n\nBy default, only files ending in *.module.css are treated CSS Modules.\n\nIf you want to treat all CSS files in the source directory as CSS Modules, you\ncan enable the output.disableCssModuleExtension config, for example:\n\n\n\nWhen set, the following two files are treated as CSS Modules:\n\n\n\nTIP\n\nWe do not recommend enabling this config, because after enabling\ndisableCssModuleExtension, CSS Modules files and ordinary CSS files cannot be\nclearly distinguished, which is not conducive to long-term maintenance.\n\n\nEnable CSS Modules for the specified style file#\n\nBy default, only files ending in *.module.css are treated CSS Modules.\n\nIf you want to enable CSS Modules only for specified style files, you can\nconfigure output.cssModules, for example:\n\n\n\n\nCustom Class Names#\n\nCustomizing the class names generated by CSS Modules is also a commonly used\nfunction, you can use output.cssModuleLocalIdentName to configure it.\n\n\n\nIf you need to customize other configs of CSS Modules, you can set them via\ntools.cssLoader.\n\n\nAdd Type Declaration#\n\nWhen you import CSS Modules in TypeScript code, TypeScript may prompt that the\nmodule is missing a type definition:\n\n\n\nTo fix this, you need to add a type declaration file for the CSS Modules, please\ncreate a src/global.d.ts file, and add the corresponding type declaration:\n\n\n\nIf you enabled the disableCssModuleExtension config, you also need to add the\nfollowing types:\n\n\n\nAfter adding the type declaration, if the type error still exists, you can try\nto restart the current IDE, or adjust the directory where global.d.ts is\nlocated, making sure the TypeScript can correctly identify the type definition.\n\n\nGenerate exact type definitions#\n\nAlthough the above method can provide the type of CSS Modules, it cannot\naccurately prompt which classNames are exported by a certain CSS file.\n\nBuilder supports generating accurate type declarations for CSS Modules, you only\nneed to enable the output.enableCssModuleTSDeclaration config, and then execute\nthe build, Modern.js will generate type declaration files for all CSS Modules.\n\n\n\n\nExample#\n\nFor example, there are two files src/index.ts and src/index.module.scss under a\ncertain folder:\n\n\n\n\n\nAfter executing the build, the src/index.module.scss.d.ts type declaration file\nwill be automatically generated:\n\n\n\nThen open the src/index.ts file again, you will see that the styles object\nalready has a exact type.\n\n\nRelated configuration#\n\nIn the above example, src/index.module.scss.d.ts is generated by compilation,\nyou can choose to commit them to the Git repository, or you can choose to ignore\nthem in the .gitignore file:\n\n\n\nIn addition, if the generated code causes ESLint to report errors, you can also\nadd the above configuration to the .eslintignore file.","routePath":"/en/guides/basic-features/css-modules","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":539},{"text":"Enable CSS Modules for all CSS files","id":"enable-css-modules-for-all-css-files","depth":2,"charIndex":589},{"text":"Enable CSS Modules for the specified style file","id":"enable-css-modules-for-the-specified-style-file","depth":2,"charIndex":1138},{"text":"Custom Class Names","id":"custom-class-names","depth":2,"charIndex":1380},{"text":"Add Type Declaration","id":"add-type-declaration","depth":2,"charIndex":1646},{"text":"Generate exact type definitions","id":"generate-exact-type-definitions","depth":2,"charIndex":2279},{"text":"Example","id":"example-1","depth":3,"charIndex":2702},{"text":"Related configuration","id":"related-configuration","depth":3,"charIndex":3032}],"domain":"","frontmatter":{"sidebar_position":14},"version":""},{"id":222,"title":"Styling","content":"#\n\nModern.js has built-in a variety of commonly used CSS solutions, including Less\n/ Sass / Stylus preprocessors, PostCSS, CSS Modules, CSS-in-JS, and Tailwind\nCSS.\n\n\nUsing Less, Sass and Stylus#\n\nModern.js has built-in popular community CSS preprocessors, including Less and\nSass.\n\nBy default, you don't need to configure Less and Sass. If you have custom loader\nconfiguration requirements, you can set them up by configuring tools.less and\ntools.sass.\n\nYou can also use Stylus in Modern.js by installing the Stylus plugin provided by\nRsbuild. For usage, please refer to Stylus Plugin.\n\n\nUsing PostCSS#\n\nModern.js has built-in PostCSS to transform CSS code.\n\nPlease refer to Rsbuild - Using PostCSS for detailed usage.\n\n\nUsing CSS Modules#\n\nPlease read the Using CSS Modules section to learn about the complete usage of\nCSS Modules.\n\n\nUsing CSS-in-JS#\n\nCSS-in-JS is a technique that allows you to write CSS styles in JS files.\n\nModern.js integrates the popular CSS-in-JS implementation library\nstyled-components, which uses the new JavaScript feature Tagged template to\nwrite component CSS styles. You can directly import the API of styled-components\nfrom @modern-js/runtime/styled for use.\n\nWhen you need to write a div component with an internal font color of red, you\ncan implement it as follows:\n\n\n\nIf you need to dynamically set component styles based on the component's props,\nfor example, the primary property of props is true, the button color is white,\notherwise it is red, you can implement the code as follows:\n\n\n\nFor more usage of styled-components, please refer to styled-components official\nwebsite.\n\nModern.js integrates Babel's babel-plugin-styled-components plugin internally,\nand you can configure the plugin through tools.styledComponents.\n\nTIP\n\nIf you need to use other CSS-in-JS libraries such as styled-jsx and Emotion, you\nneed to install the corresponding dependencies first. For specific usage, please\nrefer to the library's official website.\n\n\nUsing Tailwind CSS#\n\nTailwind CSS is a CSS framework and design system based on Utility Class, which\ncan quickly add common styles to components, and support flexible extension of\ntheme styles.\n\nTo use Tailwind CSS in Modern.js, you can follow the steps below:\n\n 1. Run pnpm run new in the root directory of your project and make the\n    following selections:\n\n\n\nAfter successful initialization, you will see that the package.json has added\ndependencies for tailwindcss and @modern-js/plugin-tailwindcss.\n\n 2. Register the Tailwind plugin in modern.config.ts:\n\n\n\n 3. Create a index.css file and add the following code:\n\n\n\nINFO\n\nDepending on your needs, you can selectively import the CSS styles provided by\nTailwind CSS. Please refer to the @tailwind documentation for detailed usage of\nthe @tailwind directive.\n\n 4. Import the index.css file, for example, add the following code in the root\n    component src/App.jsx:\n\n\n\n 5. Now you can use the Utility Classes provided by Tailwind CSS in your\n    components:\n\n\n\n\nConfiguring Tailwind CSS#\n\nIn Modern.js, you have two ways to configure Tailwind CSS:\n\n 1. Using the tailwind.config.{ts,js} file, which follows the official usage of\n    Tailwind CSS. Please refer to \"Tailwind CSS - Configuration\" for more\n    details.\n\n\n\nTIP\n\nPlease upgrade Modern.js to version >= 2.33.0 to support automatic reading of\ntailwind.config.{ts,js} files.\n\n 2. Using the tools.tailwindcss configuration option. This is the old way of\n    configuring Tailwind CSS, and we recommend using the tailwind.config.{ts,js}\n    file for configuration.\n\n\n\nIf you are using both the tailwind.config.{ts,js} file and tools.tailwindcss\noption, the configuration defined in tools.tailwindcss will take precedence and\noverride the content defined in tailwind.config.{ts,js}.\n\n\nTailwind CSS Autocomplete#\n\nTailwind CSS provides an official extension called Tailwind CSS IntelliSense for\nautocompletion of Tailwind CSS class names, CSS functions, and directives in VS\nCode.\n\nYou can follow the steps below to enable the autocomplete feature:\n\n 1. Install the Tailwind CSS IntelliSense extension in VS Code.\n 2. If the root directory of your project does not have a\n    tailwind.config.{ts,js} file, you need to create one and write the Tailwind\n    CSS configuration for your current project. Otherwise, the IDE plugin will\n    not work correctly.\n\n\nTailwind CSS Version#\n\nModern.js supports both Tailwind CSS v2 and v3 versions, and the framework will\nrecognize the version of the tailwindcss dependency in the project package.json\nfile and enable the corresponding configuration. By default, we will install\nTailwind CSS v3 version for you.\n\nIf your project is still using Tailwind CSS v2, we recommend that you upgrade to\nv3 to support JIT and other capabilities. For the differences between Tailwind\nCSS v2 and v3 versions, please refer to the following articles:\n\n * Tailwind CSS v3.0\n * Upgrade Guide\n\n\nBrowser Compatibility#\n\nTailwind CSS v2 and v3 do not support the IE 11 browser, please refer to:\n\n * Tailwind CSS v3 - Browser Support.\n * Tailwind CSS v2 - Browser Support\n\nIf you use Tailwind CSS on IE 11 browser, some styles may not be available,\nplease use it with caution.","routePath":"/en/guides/basic-features/css","lang":"en","toc":[{"text":"Using Less, Sass and Stylus","id":"using-less-sass-and-stylus","depth":2,"charIndex":166},{"text":"Using PostCSS","id":"using-postcss","depth":2,"charIndex":588},{"text":"Using CSS Modules","id":"using-css-modules","depth":2,"charIndex":721},{"text":"Using CSS-in-JS","id":"using-css-in-js","depth":2,"charIndex":835},{"text":"Using Tailwind CSS","id":"using-tailwind-css","depth":2,"charIndex":1970},{"text":"Configuring Tailwind CSS","id":"configuring-tailwind-css","depth":3,"charIndex":2985},{"text":"Tailwind CSS Autocomplete","id":"tailwind-css-autocomplete","depth":3,"charIndex":3762},{"text":"Tailwind CSS Version","id":"tailwind-css-version","depth":3,"charIndex":4333},{"text":"Browser Compatibility","id":"browser-compatibility","depth":3,"charIndex":4892}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":223,"title":"Data Fetching","content":"#\n\nModern.js provides out-of-the-box data fetching capabilities,developers can\nfetch data in the project through these APIs.\n\nIt should be noted that these APIs do not help applications initiate requests,\nbut rather help developers better manage data and improve project performance.\n\n\nData Loader (Recommended)#\n\nModern.js recommends using conventional routing for routing management. Through\nModern.js's conventional (nested) routing, each routing component (layout.ts or\npage.ts) can have a same-named loader file. The loader file needs to export a\nfunction that will be executed before the component is rendered to provide data\nfor the routing component.\n\nINFO\n\nModern.js v1 supports fetching data via useLoader, which is no longer the\nrecommended usage. We do not recommend mixing the two except during the\nmigration process.\n\nWARNING\n * In the previous version, Modern.js Data Loader was defined in the loader\n   file. In later versions, we recommend defining it in the data file, while we\n   will maintain compatibility with the loader file.\n * In the data file, the corresponding loader needs to be exported with a name。\n\n\nBasic Example#\n\nRouting components such as layout.ts or page.ts can define a same-named loader\nfile. The function exported by the data file provides the data required by the\ncomponent, and then the data is obtained in the routing component through the\nuseLoaderData function, as shown in the following example:\n\n\n\nDefine the following code in the file:\n\n\n\n\n\nCAUTION\n\nHere, routing components and data files share a type, so the import type syntax\nshould be used.\n\nIn the CSR environment, the loader function is executed on the client and can\nuse browser APIs (although it is not necessary and not recommended).\n\nIn the SSR environment, whether it is the first screen or client navigation, the\nloader function will only be executed on the server, and any Node.js API can be\ncalled here. Also, any dependencies and code used here will not be included in\nthe client's bundle.\n\nINFO\n\nIn future versions, Modern.js may support running the loader function on the\nserver in the CSR environment to improve performance and security. Therefore, it\nis recommended to ensure that the loader function is as pure as possible and\nonly used for data fetching scenarios.\n\nWhen navigating on the client based on Modern.js's conventional routing, all\nloader functions will be executed in parallel (requested). That is, when\naccessing /user/profile, the loader functions under /user and /user/profile will\nbe executed in parallel (requested) to improve the performance of the client.\n\n\nThe loader Function#\n\nThe loader function has two input parameters:\n\nparams#\n\nWhen the route file is accessed through [], it is used as dynamic routing, and\nthe dynamic routing fragment is passed as a parameter to the loader function:\n\n\n\nWhen accessing /user/123, the parameter of the loader function is { params: {\nid: '123' } }.\n\nrequest#\n\nrequest is a Fetch Request instance.\n\nA common usage scenario is to get query parameters through request:\n\n\n\nReturn Value#\n\nThe return value of the loader function can be any serializable content or a\nFetch Response instance:\n\n\n\nBy default, the Content-type of the response returned by the loader is\napplication/json, and the status is 200. You can customize the Response to set\nit:\n\n\n\n\nRequest API#\n\nModern.js provides a polyfill for the fetch API to make requests. This API is\nconsistent with the browser's fetch API, but can also be used to make requests\non the server. This means that whether it is CSR or SSR, a unified fetch API can\nbe used to get data:\n\n\n\n\nError Handling#\n\nBasic Usage#\n\nIn the loader function, errors can be handled by throwing an error or a\nresponse. When an error is thrown in the loader function, Modern.js will stop\nexecuting the code in the current loader and switch the front-end UI to the\ndefined ErrorBoundary component:\n\n\n\nPractice#\n\nIn an SSR project you can control the status code of a page and display the\ncorresponding UI by throw response in the data loader, as in the following\nexample, where there is one loader for the entire routing route\n\nFor example, if there is a loader in the entire routing route that throws a\nresponse, the status code of the page will be consistent with this response and\nthe UI of the page will switch to ErrorBoundary.\n\n\n\n\nGet data from parent component#\n\nIn many cases, child components need to access data in the parent component\nloader. You can easily get the data from the parent component using\nuseRouteLoaderData:\n\n\n\nThe useRouteLoaderData function accepts a parameter routeId. When using\nconventional routing, Modern.js will automatically generate the routeId for you.\nThe value of routeId is the path of the corresponding component relative to\nsrc/routes. For example, in the above example, if the child component wants to\nget the data returned by the loader in routes/user/layout.tsx, the value of\nrouteId is user/layout.\n\nIn a multi-entry (MPA) scenario, the value of routeId needs to include the name\nof the corresponding entry. Unless specified, the entry name is generally the\nname of the entry directory. For example, in the following directory structure:\n\n\n\nIf you want to get the data returned by the loader in entry1/routes/layout.tsx,\nthe value of routeId is entry1_layout.\n\n\n(WIP)Loading UI#\n\nINFO\n\nThis feature is currently experimental and the API may change in the future.\n\nCreate user/layout.data.ts and add the following code:\n\n\n\nAdd the following code in user/layout.tsx:\n\n\n\nINFO\n\nFor details on how to use the Await component, please refer to Await.\n\nFor details on how to use defer, please refer to defer.\n\n\nData Cache#\n\nIn routing navigation, Modern.js will only load the data of the changed part of\nthe route. For example, the current route is a/b, and the Data Loader\ncorresponding to the a path has been executed. When jumping from /a/b to /a/c,\nthe Data Loader corresponding to a path will not be re-executed, and the Data\nLoader corresponding to c path will execute and fetch the data.\n\nIt is mean that Modern.js will only load the data for the routing change portion\nof the data load, and this default optimization strategy avoids invalid\nduplicate data requests.\n\nYou may ask, how to update the data of the a path corresponding to the Data\nLoader?\n\nIn Modern.js, Modern.js will reload the data of the corresponding routing path\nin the following cases:\n\n 1. After Data Action is triggered\n 2. The search params on the url have changed.\n 3. The link clicked by the user is the same as the URL of the current page.\n 4. The shouldRevalidate function is defined in the routing component, which\n    returns true\n\nINFO\n\nIf you define the shouldRevalidate function on the route, the function will be\nchecked first to determine whether the data needs to be reloaded.\n\n\nshouldRevalidate#\n\nWARNING\n\nCurrently shouldRevalidate works under csr and streaming ssr.\n\nIn each routing component (layout.tsx, page.tsx, $.tsx), we can export a\nshouldRevalidate function, which is triggered each time a route changes in the\nproject. This function controls which routes' data are reloaded, and when it\nreturns true, the data for the corresponding route is reloaded. data of the\ncorresponding route will be reloaded.\n\n\n\nINFO\n\nFor more details about the shouldRevalidate function, please refer to\nreact-router\n\n\nClient Loader#\n\nINFO\n 1. This feature requires version x.36.0 or above, and it‘s recommended to use\n    the latest version of the framework.\n 2. Only SSR projects have Client Loaders, while in CSR projects, it can be\n    considered as the default Client Loader.\n 3. This feature can be used progressively and not every project needs it. For\n    specific information, please refer to the explanation of applicable\n    scenarios in the document below.\n\nApplicable scenarios#\n\nIn the SSR project, the code in Data Loader will only be executed on the server\nside when the client performs SPA navigation. The framework will send an HTTP\nrequest to the SSR service to trigger the execution of Data Loader. However, in\nsome scenarios, we may expect that requests sent by clients do not go through\nthe SSR service and directly request data sources.\n\nINFO\n\nWhy the Data Loader is only executed server-side in SSR projects can be found in\nFAQ\n\nFor example, the following scenarios:\n\n 1. During SSR degradation, it is not desired for the framework to send requests\n    to the SSR service to obtain data. Instead, direct requests to the data\n    source are preferred.\n 2. There is some cache on the client side, and we don't want to request SSR\n    service to fetch data.\n\nIn these scenarios, we can use Client Loader. After adding the Client Loader, in\nthe following scenarios, the code in the Client Loader will be called instead of\nsending requests to SSR services:\n\n 1. After SSR is downgraded to CSR, when fetch data on the client side, Client\n    Loader will be executed instead of the framework sending requests to Data\n    Loader (Server) to fetch data.\n\n 2. When performing SPA navigation in SSR projects and fetch data, Client Loader\n    will be executed.\n\n\nIncorrect usage#\n\n 1. The loader can only return serializable data. In the SSR environment, the\n    return value of the loader function will be serialized as a JSON string and\n    then deserialized into an object on the client side. Therefore, the loader\n    function cannot return non-serializable data (such as functions).\n\nWARNING\n\nCurrently, there is no such restriction under CSR, but we strongly recommend\nthat you follow this restriction, and we may also add this restriction under CSR\nin the future.\n\n\n\n 2. Modern.js will call the loader function for you, so you should not call the\n    loader function yourself:\n\n\n\n 3. You should not import the loader file from the route component, and you\n    should also avoid importing variables from the route component into the\n    loader file. If you need to share types, you should use import type.\n\n\n\n 4. When running on the server, the loader function will be bundled into a\n    unified bundle, so we do not recommend using __filename and __dirname in\n    server-side code.\n\n\nFAQ#\n\n 1. Relationship between loader and BFF functions\n\nIn CSR projects, loader is executed on the client side, and the BFF function can\nbe called directly in the loader to make interface requests.\n\nIn SSR projects, each loader is also a server-side interface. We recommend using\nthe loader instead of the BFF function with an http method of get as the\ninterface layer to avoid an extra layer of forwarding and execution.\n\n 2. Why is the Data Loader only executed on the server-side in SSR projects?\n\nThe Data Loader in our SSR project is designed to only run on the server side.\nThe main reasons for sending requests from the client to the server during\nclient-side rendering are as follows:\n\n * Simplified usage, when using a server loader, the data fetching code for both\n   the SSR and CSR phases is in the server loader (the real calls are made by\n   the framework layer), and the code in the server loader doesn't need to care\n   whether it's in a browser environment or a server-side environment.\n\n * Reducing data for network requests, The server loader can be used as a BFF\n   layer, which reduces the amount of data that needs to be fetched by the\n   front-end at runtime.\n\n * Reduce client-side bundle size, moving the logic code and its dependencies\n   from the client to the server.\n\n * Improve maintainability, moving the logic code to the server side reduces the\n   direct impact of data logic on the front-end UI. In addition, the problem of\n   mistakenly introducing server-side dependencies in the client-side bundle or\n   client-side dependencies in the server-side bundle is also avoided.\n\n\nuseLoader (old version)#\n\nuseLoader is a legacy API in Modern.js v1. This API is a React Hook designed\nspecifically for SSR applications, allowing developers to fetch data in\ncomponents in isomorphic development.\n\nTIP\n\nIt is not necessary to use useLoader to fetch data in CSR projects.\n\nHere is the simplest example:\n\n\n\nAfter running the above code, when you access the page, you can see that logs\nare output to the terminal, but not printed in the browser console.\n\nThis is because Modern.js collects the data returned by useLoader during\nserver-side rendering and injects it into the corresponding HTML. If the SSR\nrendering is successful, you can see the following code snippet in the HTML:\n\n\n\nThis global variable is used to record data, and during the browser-side\nrendering process, this data is used first. If the data does not exist, the\nuseLoader function will be executed again.\n\nNOTE\n\nDuring the build phase, Modern.js will automatically generate a Loader ID for\neach useLoader and inject it into the SSR and CSR JS Bundles to associate the\nLoader with the data.\n\nCompared to getServerSideProps in Next.js, which fetches data before rendering,\nusing useLoader allows you to get data required for local UI in the component\nwithout passing data through multiple layers. Similarly, you don't have to add\nredundant logic to the outermost data acquisition function because different\nroutes require different data requests. Of course, useLoader also has some\nissues, such as difficulties in server-side code tree shaking and the need for\nan additional pre-rendering step on the server.\n\nIn the new version of Modern.js, a new Loader solution has been designed. The\nnew solution solves these problems and can be optimized for page performance in\nconjunction with conventional routing.\n\nNOTE\n\nFor detailed API information, see useLoader.","routePath":"/en/guides/basic-features/data/data-fetch","lang":"en","toc":[{"text":"Data Loader (Recommended)","id":"data-loader-recommended","depth":2,"charIndex":285},{"text":"Basic Example","id":"basic-example","depth":3,"charIndex":1130},{"text":"The `loader` Function","id":"the-loader-function","depth":3,"charIndex":-1},{"text":"`params`","id":"params","depth":4,"charIndex":-1},{"text":"`request`","id":"request","depth":4,"charIndex":-1},{"text":"Return Value","id":"return-value","depth":4,"charIndex":3047},{"text":"Request API","id":"request-api","depth":3,"charIndex":3325},{"text":"Error Handling","id":"error-handling","depth":3,"charIndex":3602},{"text":"Basic Usage","id":"basic-usage","depth":4,"charIndex":3619},{"text":"Practice","id":"practice","depth":4,"charIndex":3895},{"text":"Get data from parent component","id":"get-data-from-parent-component","depth":3,"charIndex":4331},{"text":"(WIP)Loading UI","id":"wiploading-ui","depth":3,"charIndex":5302},{"text":"Data Cache","id":"data-cache","depth":3,"charIndex":5643},{"text":"`shouldRevalidate`","id":"shouldrevalidate","depth":3,"charIndex":-1},{"text":"Client Loader","id":"client-loader","depth":3,"charIndex":7331},{"text":"Applicable scenarios","id":"applicable-scenarios","depth":4,"charIndex":7782},{"text":"Incorrect usage","id":"incorrect-usage","depth":3,"charIndex":9087},{"text":"FAQ","id":"faq","depth":3,"charIndex":10115},{"text":"useLoader (old version)","id":"useloader-old-version","depth":2,"charIndex":11727}],"domain":"","frontmatter":{"title":"Data Fetching","sidebar_position":3},"version":""},{"id":224,"title":"Data writing","content":"#\n\nIn the Data Loader chapter, the way Modern.js fetch data is introduced. You may\nencounter two problems.：\n\n 1. How to update the data in Data Loader？\n 2. How to write new data to the server?\n\nEdenX's solution for this is DataAction.\n\n\nBasic Example#\n\nData Action, like Data Loader, is also based on convention routing. Through\nModern.js's nested routing, each routing component (layout.ts, page.ts or $.tsx)\ncan have a data file with the same name, and a function named action can be\nexported in the data file.\n\n\n\nDefine the following code in the file:\n\n\n\n\n\nHere, when the submit is executed, the defined action function will be\ntriggered; in the action function, the submitted data can be obtained through\nrequest (request.json, request.formData, etc.), and the data can be obtained,\nand then the data can be sent to the server.\n\nAfter the action function is executed, the loader function code will be executed\nand the corresponding data and views will be updated.\n\n\n\n\nWhy provide Data Action?#\n\nData Action is mainly provided in Modern.js to keep the state of the UI and the\nserver in sync, which can reduce the burden of state management.\n\nThe traditional state management method will hold the state on the client side\nand remotely respectively:：\n\n\n\nIn Modern.js, we hope to help developers automatically synchronize the state of\nthe client and server through Loader and Action:：\n\n\n\nIf the data shared by the components in the project are the state of the main\nserver, there is no need to introduce a client state management library in the\nproject, request data through Data Loader, through\n[useRouteLoaderData](/guides/basic-fe Atures/data/data-fetch.md) shares data in\nsubcomponents,\n\nModify and synchronize the state of the server through Data Action.\n\n\naction function#\n\nLike the loader function, the action function has two parameters, params and\nrequest:\n\n\nparams#\n\nWhen the routing file passes through [], it will be used as [dynamic\nrouting](/guides/basic-features/routes#dynamic routing), and the dynamic routing\nfragment will be passed into the action function as a parameter:：\n\n\n\nWhen accessing /user/123, the parameter of the action function is { params: {\nid: '123' } }.\n\n\nrequest#\n\nThrough request, you can fetch data submitted by the client in the action\nfunction, such as request.json(), request.formData(), request.json(), etc.\n\nFor the specific API, please refer to [data type] (#data-type).\n\n\n\n\nReturn Value#\n\nThe return value of the action function can be any serializable value or a Fetch\nResponse instance,\n\nThe data in the response can be accessed through useActionData.\n\n\nuseSubmit 和 useFetcher#\n\n\nDifferences#\n\nYou can use useSubmit or useFetcher calls action, and the difference between\nthem is through\n\nuseSubmit calls action, which will trigger the browser's navigation, and\nuseFetcher will not trigger the browser's navigation.\n\nuseSubmit:\n\n\n\nuseFetcher:\n\n\n\nThe submit function has two input parameters, method and action. method is\nequivalent to method at the time of form submission. In most scenarios where\ndata is written,the method can be passed into post.\n\naction is used to specify which routing component action is triggered. If the\naction parameter is not passed in, the action of the current routing component\nwill be triggered by default, that is, the execution of submit in the\nuser/page.tsx component or subcomponent will trigger the action defined in\nuser/page.data.ts.\n\nINFO\n\nFor more information about these two APIs, please refer to the relevant\ndocuments：\n\n * useSubmit\n * useFetcher\n\n\nType of data#\n\nThe first parameter of the submit function can accept different types of values.\nSuch as FormData：\n\n\n\nOr the value of type URLSearchParams：\n\n\n\nOr any acceptable value of the URLSearchParams constructor：\n\n\n\nBy default, if the first parameter in the submit function is an object, the\ncorresponding data will be encoded as formData：\n\n\n\nit can also be specified as json encoding：\n\n\n\nor submit plain text：\n\n\n\n\nCSR 和 SSR#\n\nLike Data Loader, in the SSR project, Data Action is executed on the server (the\nframework will automatically send a request to trigger Data Action), while in\nthe CSR project, Data Action is executed on the client.","routePath":"/en/guides/basic-features/data/data-write","lang":"en","toc":[{"text":"Basic Example","id":"basic-example","depth":2,"charIndex":236},{"text":"Why provide Data Action?","id":"why-provide-data-action","depth":2,"charIndex":971},{"text":"`action` function","id":"action-function","depth":2,"charIndex":-1},{"text":"`params`","id":"params","depth":3,"charIndex":-1},{"text":"`request`","id":"request","depth":3,"charIndex":-1},{"text":"Return Value","id":"return-value","depth":3,"charIndex":2418},{"text":"useSubmit 和 useFetcher","id":"usesubmit-和-usefetcher","depth":2,"charIndex":2600},{"text":"Differences","id":"differences","depth":3,"charIndex":2626},{"text":"Type of data","id":"type-of-data","depth":3,"charIndex":3537},{"text":"CSR 和 SSR","id":"csr-和-ssr","depth":2,"charIndex":3957}],"domain":"","frontmatter":{"title":"Data writing","sidebar_position":4},"version":""},{"id":225,"title":"Deploy Application","content":"#\n\nCurrently, Modern.js offers two deployment way:\n\n * You can host your application in a container that includes a Node.js\n   environment on your own, which provides flexibility for the deployment of the\n   application.\n * You can also deploy your application through a platform. Currently, Modern.js\n   supports the Netlify and Vercel.\n\nINFO\n\nCurrently, Modern.js only supports running in a Node.js environment. Support for\nmore runtime environments will be provided in the future.\n\n\nBuild Deployment Products#\n\nRunning the modern deploy command will automatically produce deployment\nproducts. This process includes optimizing Bundler build products and their\ndependencies, detecting the current deployment platform, and automatically\ngenerating deployment products that can run on that platform.\n\nIf you want to generate and test the output locally for a specific deployment\nplatform, you can specify the platform by setting the environment variable:\nmodern deploy:\n\n\n\nINFO\n\nWhen deploying on the deployment platforms officially supported by Modern.js,\nthere is no need to specify environment variables.\n\n\nNode.js#\n\n\nSingle Repo#\n\nBy default, Modern.js outputs builds that can be run in a Node.js environment\nwhen no Modern.js-supported deployment platform is detected.\n\nUse the following command to build the project:\n\n\n\nWhen running the modern deploy command, Modern.js will generate runnable\nproducts and output the following content in terminal:\n\n\n\nAt this point, you can run the entire server by node .output/index, and the\nstatic resources required for the page are in the .output/static directory. You\ncan upload these static resources to a CDN yourself:\n\nINFO\n\nBy default, when running Modern.js Server, it listens on port 8080. If you want\nto change the listening port, you can specify the PORT environment variable:\n\n\n\n\nMonorepo#\n\nFor Monorepo projects, in addition to building the current project, it is also\nnecessary to build other sub-projects in the repository that the current project\ndepends on.\n\nAssume that the name in the package.json of the current project is app. Taking\npnpm as an example of a monorepo management tool, you can add the following\ncommand to the package.json of the current project to build products for the\ncurrent project:\n\n\n\nIf you use Rush as your Monorepo management tool, you can add the following\ncommands to your package.json:\n\n\n\nAfter the build is completed, Modern.js will generate all dependencies in the\n.output/node_modules directory of the project. Similarly, you can run the\nModern.js server using node .output/index.\n\n\nNetlify#\n\nNetlify is a popular Web development platform designed for building, deploying,\nand maintaining modern web projects. Deploying on Netlify mainly requires\nconfiguring the netlify.toml file.\n\nDepending on the complexity of your project, you can configure it incrementally\nby this doc.\n\n\nPure Front-end Project#\n\nAdd the netlify.toml file to the root directory of the current project:\n\n\n\nAdd the following content to netlify.toml:\n\n\n\nNow, add a project to the Netlify platform and deploy it!\n\n\nFull Stack Project#\n\nFull-stack projects refer to projects that use Custom Web Server, SSR or BFF.\nThese projects need to be deployed on Netlify Functions. Based on the\nnetlify.toml file mentioned above, add the following configuration:\n\n\n\nINFO\n\nCurrently, Modern.js does not support deployment on Netlify Edge Functions. We\nwill support it in future versions.\n\n\nMonorepo#\n\nINFO\n\nThe following guide is mainly for full-stack projects, for pure CSR projects,\njust follow [Pure Frontend Project](#Pure Frontend Project) to deploy.\n\nFor Monorepo projects, in addition to building our current project, you also\nneed to build other sub-projects in the repository that the current project\ndepends on.\n\nWe take a pnpm Monorepo repository as an example and deploy the Monorepo project\non Netlify.\n\nAssuming the directory structure of the Monorepo repository is as follows:\n\n\n\nYou need to configure Base directory on the netlify platform as packages/app:\n\nAdd the following script in packages/app/package.json, before executing the\ndeployment command of the app repository, first execute the build of other\nrepositories in the workspace:\n\n\n\nConfigure the build command in netlify.toml:\n\n\n\nJust submit your code and deploy it using the Netlify platform.\n\n\nVercel#\n\nVercel is a deployment platform for modern web applications that provides a rich\nset of features to support deploying static websites, server-side rendered\napplications, and more. To deploy on Vercel, you usually need to configure the\nvercel.json file, which you can configure incrementally depending on the\ncomplexity of your project.\n\n\nPure Front-end Project#\n\nAdd the vercel.json file to the root directory of the current project:\n\n\n\nAdd the following content to vercel.json:\n\n\n\nCommit your project to git, select Framework Preset as Other on the Vercel\nplatform and deploy.\n\n\nFull Stack Project#\n\nFull-stack projects refer to projects that use Custom Web Server, SSR or BFF.\nThese projects need to be deployed on Vercel Functions.\n\nIn addition to configuring vercel.json in the same way as a pure front-end\nproject, there are two points to note for full-stack projects:\n\n 1. Currently, Modern.js does not support deploying BFF projects on the Vercel\n    platform. We will support it in future versions.\n 2. When deploying on Vercel platform, the default node runtime is 20.x, it is\n    recommended to choose 18.x when deploying full-stack projects, see\n    Serverless Function contains invalid runtime error, you can modify\n    package.json to specify the version:\n\n\n\n\nMonorepo#\n\nINFO\n\nThe following guide is mainly for full-stack projects, for pure CSR projects,\njust follow Pure Frontend Project to deploy.\n\nFor Monorepo projects, in addition to building our current project, you also\nneed to build other sub-projects in the repository that the current project\ndepends on.\n\nWe take a pnpm Monorepo repository as an example and deploy the Monorepo project\non Vercel.\n\nAssuming the directory structure of the Monorepo repository is as follows:\n\n\n\nFirst, you need to configure the Root Directory as packages/app on the Vercel\nplatform:\n\nSpecify Node.js runtime as 18.x:\n\n\n\nAdd the following script to packages/app/package.json to run build command of\nthe other repositories in the workspace before run the deploy command for the\napp repository:\n\n\n\nAdd the following content to the packages/app/vercel.json file:\n\n\n\nJust submit your code and deploy it using the Vercel platform.","routePath":"/en/guides/basic-features/deploy","lang":"en","toc":[{"text":"Build Deployment Products","id":"build-deployment-products","depth":2,"charIndex":485},{"text":"Node.js","id":"nodejs","depth":2,"charIndex":1108},{"text":"Single Repo","id":"single-repo","depth":3,"charIndex":1119},{"text":"Monorepo","id":"monorepo","depth":3,"charIndex":1832},{"text":"Netlify","id":"netlify","depth":2,"charIndex":2575},{"text":"Pure Front-end Project","id":"pure-front-end-project","depth":3,"charIndex":2870},{"text":"Full Stack Project","id":"full-stack-project","depth":3,"charIndex":3076},{"text":"Monorepo","id":"monorepo-1","depth":3,"charIndex":3439},{"text":"Vercel","id":"vercel","depth":2,"charIndex":4322},{"text":"Pure Front-end Project","id":"pure-front-end-project-1","depth":3,"charIndex":4669},{"text":"Full Stack Project","id":"full-stack-project-1","depth":3,"charIndex":4911},{"text":"Monorepo","id":"monorepo-2","depth":3,"charIndex":5604}],"domain":"","frontmatter":{"sidebar_position":15},"version":""},{"id":226,"title":"Environment Variables","content":"#\n\nModern.js provides support for environment variables, including built-in\nenvironment variables and custom environment variables.\n\n\nBuilt-in Environment Variables#\n\n\nASSET_PREFIX#\n\nThe current path prefix of the asset, which is a read-only environment variable.\n\n\nNODE_ENV#\n\nThe current execution environment and is a read-only environment variable whose\nhave different values under different execution commands:\n\n * production: Default value when running modern build or modern serve.\n * test: Default value when running modern test.\n * development: Default value when running modern dev, also the default value in\n   other cases.\n\n\nMODERN_ENV#\n\nSet the current execution environment manually. In addition to the values in the\nNODE_ENV, custom environment names are supported here, such as staging, boe,\netc.\n\nTIP\n\nMODERN_ENV priority is higher than NODE_ENV.\n\n\nMODERN_TARGET#\n\nWhen using @modern-js/runtime, Modern.js will automatically inject MODERN_TARGET\nto distinguish between SSR and CSR environments.\n\nYou can use process.env.MODERN_TARGET to determine the environment and execute\nappropriate code.\n\n\n\nAfter the development build, you can see that the SSR and CSR bundles as\nfollows:\n\n\n\n\n\nThis can provide different outputs for different environments to ensure that the\nbundle size is minimized. It can also be convenient to deal with some side\neffects for different environments.\n\nDead Code Elimination\n\nIn production environment, minimizers such as Terser and SWC will analyze the\ncode and remove dead code to reduce the bundle size. This process is called\n\"Dead Code Elimination\" (DCE).\n\nFor example, the code inside the if (false) statement will be removed, while the\ncode inside the if (true) will be preserved.\n\nIf you do not use process.env.MODERN_TARGET as described above, the code\nminimizer may not be able to analyze the dead code, resulting in an increased\nbundle size.\n\n\nCustom Environment Variables#\n\nYou can specify custom environment variables in both shell and .env files.\n\n\nVia shell#\n\nAdd custom environment variables before the command:\n\n\n\n\nVia .env file#\n\nCreate a .env file in the project root and add custom environment variables,\nwhich are added to the Node.js process by default, for example:\n\n\n\nThe .env file follows the following loading rules:\n\n * .env: default.\n * .env.{ MODERN_ENV | NODE_ENV }: Overrides .env for a specific environment.\n\nWhen you need to use different config according to the environment, you can\ndefine environment variables in the .env file corresponding to the environment\nname, and manually set the execution environment when starting the project.\n\nFor example, when starting a project with the following command, the .env and\n.env.staging will load:\n\n\n\n\nUsing Environment Variables#\n\n\nConvention Names#\n\nNODE_ENV can be used directly in front-end code. In addition, custom environment\nvariables starting with MODERN_ can also be used directly in code.\n\nFor Example:\n\n\n\nAfter executing the pnpm run dev, you can see the following bundle:\n\n\n\nIn custom HTML templates, you can also use such environment variables directly.\nFor example, in config/html/head.html:\n\n\n\n\nAny Other Names#\n\nIf you need to use environment variables with any other names in your code, you\ncan configure them in source.globalVars. For example:\n\n\n\nAt this point, the process.env.VERSION in the code will be replaced by the value\nof VERSION in the environment variables.\n\nNOTE\n\nsource.globalVars also supports replacing other expressions or strings with\nspecified values, not limited to environment variables.\n\n\nUse Global Replacement#\n\nIn addition to environment variables, Modern.js also supports replacing\nvariables in code with other values or expressions, which can be used to\ndistinguish between development environment and production environment in code.\n\nFor example, converts the expression TWO to 1 + 1:\n\n\n\n\n\nIn most cases, source.globalVars is already sufficient to replace variables. But\nthe values passed in by source.globalVars will be serialized by JSON by default.\nSo it cannot be replaced like 1 + 1 in the example above, at this time, we need\nto use source.define.","routePath":"/en/guides/basic-features/env-vars","lang":"en","toc":[{"text":"Built-in Environment Variables","id":"built-in-environment-variables","depth":2,"charIndex":133},{"text":"ASSET_PREFIX","id":"asset_prefix","depth":3,"charIndex":167},{"text":"NODE_ENV","id":"node_env","depth":3,"charIndex":265},{"text":"MODERN_ENV","id":"modern_env","depth":3,"charIndex":635},{"text":"MODERN_TARGET","id":"modern_target","depth":3,"charIndex":864},{"text":"Custom Environment Variables","id":"custom-environment-variables","depth":2,"charIndex":1893},{"text":"Via `shell`","id":"via-shell","depth":3,"charIndex":-1},{"text":"Via `.env` file","id":"via-env-file","depth":3,"charIndex":-1},{"text":"Using Environment Variables","id":"using-environment-variables","depth":2,"charIndex":2717},{"text":"Convention Names","id":"convention-names","depth":3,"charIndex":2748},{"text":"Any Other Names","id":"any-other-names","depth":3,"charIndex":3126},{"text":"Use Global Replacement","id":"use-global-replacement","depth":2,"charIndex":3544}],"domain":"","frontmatter":{"sidebar_position":7},"version":""},{"id":227,"title":"HTML Template","content":"Some Params:\n\n\nentryName: main\n\n\ntitle：\n\n\nrootId: root\n\n\nbottom","routePath":"/en/guides/basic-features/html","lang":"en","toc":[{"text":"JSX Syntax","id":"jsx-syntax","depth":2,"charIndex":-1},{"text":"HTML Components","id":"html-components","depth":3,"charIndex":-1},{"text":"Template Parameters","id":"template-parameters","depth":3,"charIndex":-1},{"text":"Basic Example","id":"basic-example","depth":3,"charIndex":-1},{"text":"Scripts Component Example","id":"scripts-component-example","depth":3,"charIndex":-1},{"text":"HTML Syntax","id":"html-syntax","depth":2,"charIndex":-1},{"text":"Custom HTML Fragments","id":"custom-html-fragments","depth":3,"charIndex":-1},{"text":"Custom the entire HTML Template","id":"custom-the-entire-html-template","depth":3,"charIndex":-1},{"text":"Template Parameters","id":"template-parameters-1","depth":3,"charIndex":-1},{"text":"Config By Entry","id":"config-by-entry","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_position":9},"version":""},{"id":228,"title":"Import JSON Files","content":"#\n\nModern.js supports import JSON files in code, and also supports import YAML and\nToml files and converting them to JSON format.\n\n\nJSON file#\n\nYou can import JSON files directly in JavaScript files.\n\n\nExample#\n\n\n\n\n\n\nNamed Import#\n\nModern.js does not support importing JSON files via named import yet:\n\n\n\n\nYAML file#\n\nYAML is a data serialization language commonly used for writing configuration\nfiles.\n\nYou can directly import .yaml or .yml files in JavaScript and they will be\nautomatically converted to JSON format.\n\n\nExample#\n\n\n\n\n\n\nAdd type declaration#\n\nWhen you import a YAML file in your TypeScript code, please create a\nsrc/global.d.ts file in your project and add the corresponding type declaration:\n\n\n\n\nToml file#\n\nToml is a semantically explicit, easy-to-read configuration file format.\n\nYou can directly import .toml files in JavaScript and it will be automatically\nconverted to JSON format.\n\n\nExample#\n\n\n\n\n\n\nAdd type declaration#\n\nWhen you import Toml files in TypeScript code, please create a src/global.d.ts\nfile in your project and add the corresponding type declarations:\n\n","routePath":"/en/guides/basic-features/json-files","lang":"en","toc":[{"text":"JSON file","id":"json-file","depth":2,"charIndex":131},{"text":"Example","id":"example","depth":3,"charIndex":201},{"text":"Named Import","id":"named-import","depth":3,"charIndex":216},{"text":"YAML file","id":"yaml-file","depth":2,"charIndex":305},{"text":"Example","id":"example-1","depth":3,"charIndex":520},{"text":"Add type declaration","id":"add-type-declaration","depth":3,"charIndex":535},{"text":"Toml file","id":"toml-file","depth":2,"charIndex":712},{"text":"Example","id":"example-2","depth":3,"charIndex":905},{"text":"Add type declaration","id":"add-type-declaration-1","depth":3,"charIndex":920}],"domain":"","frontmatter":{"sidebar_position":12},"version":""},{"id":229,"title":"Data Mocking","content":"#\n\nModern.js allows you to easily generate mock data so that the front-end can\ndevelop independently without depending on the back-end API.\n\n\nEnabling Mock#\n\nBy convention, when there is an index.[jt]s in the config/mock/ directory, mock\ndata will be automatically enabled:\n\n\n\n\nWriting Mock Files#\n\nThe config/mock/index.ts file only needs to export an object containing all Mock\nAPIs. The properties of the object are composed of the request configuration\nmethod and url, and the corresponding property values can be Object, Array, or\nFunction:\n\n\n\nWhen you access http://localhost:8080/api/getInfo, the API will return JSON {\n\"data\": [1, 2, 3, 4] }.\n\n\nReturn Random Data#\n\nLibraries such as Mock.js can be used in config/mock/index.js to generate random\ndata. For example:\n\n\n\nOther Mock Libraries\n * Chancejs\n * Mock\n\n\nDelayed Response#\n\n * You can do this by using the browser's \"weak connection simulation\" feature.\n * Delays can be set via setTimeout, for example:\n\n\n\n\nUse Mock On Demand#\n\nUnder the config/mock/index.ts, you can also export the config to control the\nMock service.\n\n\n\nCurrently only the enable configuration is supported, which allows developers to\ncontrol whether to execute mock.\n\nNOTE\n\nAfter modifying config, there is no need to restart the service, which will take\neffect immediately.","routePath":"/en/guides/basic-features/mock","lang":"en","toc":[{"text":"Enabling Mock","id":"enabling-mock","depth":2,"charIndex":141},{"text":"Writing Mock Files","id":"writing-mock-files","depth":2,"charIndex":277},{"text":"Return Random Data","id":"return-random-data","depth":2,"charIndex":652},{"text":"Delayed Response","id":"delayed-response","depth":2,"charIndex":819},{"text":"Use Mock On Demand","id":"use-mock-on-demand","depth":2,"charIndex":972}],"domain":"","frontmatter":{"sidebar_position":5},"version":""},{"id":230,"title":"Output Files","content":"#\n\nThis chapter will introduces the directory structure of output files and how to\ncontrol the output directory of different types of files.\n\n\nDefault Directory Structure#\n\nThe following is a basic directory for output files. By default, the compiled\nfiles will be output in the dist directory of current project.\n\n\n\nThe most common output files are HTML files, JS files, and CSS files:\n\n * HTML files: default output to the html directory.\n * JS files: default output to static/js directory,\n * CSS files: default output to the static/css directory.\n\nIn addition, JS files and CSS files sometimes generate some related files:\n\n * License files: contains open source license, which is output to the same\n   level directory of the JS file, and adds .LICENSE.txt suffix.\n * Source Map files: contains the source code mappings, which is output to the\n   same level directory of JS files and CSS files, and adds a .map suffix.\n\nIn the filename, [name] represents the entry name corresponding to this file,\nsuch as index, main. [hash] is the hash value generated based on the content of\nthe file.\n\n\nModify the Directory#\n\nBuilder provides some configs to modify the directory or filename, you can:\n\n * Modify the filename through output.filename.\n * Modify the output path of through output.distPath.\n * Modify the license file through output.legalComments.\n * Remove Source Map file through output.disableSourceMap.\n * Remove the folder corresponding to the HTML files through\n   html.disableHtmlFolder.\n\n\nStatic Assets#\n\nWhen you import static assets such as images, SVG, fonts, media, etc. in the\ncode, they will also be output to the dist/static directory, and automatically\nassigned to the corresponding subdirectories according to the file type:\n\n\n\nYou can use the output.distPath config to uniformly input these static assets\ninto a directory, for example, output to the assets directory:\n\n\n\nThe above config produces the following directory structure:\n\n\n\n\nNode.js Output Directory#\n\nWhen you enable SSR or SSG features in Modern.js, Modern.js will generate a\nNode.js bundle after the build and output it to the bundles directory.\n\n\n\nNode.js files usually only contain JS files, no HTML or CSS. Also, JS file names\nwill not contain hash.\n\nYou can modify the output path of Node.js files through the\noutput.distPath.server config.\n\nFor example, output Node.js files to the server directory:\n\n\n\n\nFlatten the Directory#\n\nSometimes you don't want the dist directory to have too many levels, you can set\nthe directory to an empty string to flatten the generated directory.\n\nSee the example below:\n\n\n\nThe above config produces the following directory structure:\n\n\n\n\nNot Written to Disk#\n\nBy default, Modern.js will write the generated files to disk, so developers can\nview the file content or configure proxy rules for static assets.\n\nIn development, you can choose to keep the generated files in the Dev Server's\nmemory to reduce the overhead of file operations.\n\nJust set the dev.writeToDisk config to false:\n\n","routePath":"/en/guides/basic-features/output-files","lang":"en","toc":[{"text":"Default Directory Structure","id":"default-directory-structure","depth":2,"charIndex":142},{"text":"Modify the Directory","id":"modify-the-directory","depth":2,"charIndex":1093},{"text":"Static Assets","id":"static-assets","depth":2,"charIndex":1501},{"text":"Node.js Output Directory","id":"nodejs-output-directory","depth":2,"charIndex":1958},{"text":"Flatten the Directory","id":"flatten-the-directory","depth":2,"charIndex":2395},{"text":"Not Written to Disk","id":"not-written-to-disk","depth":2,"charIndex":2661}],"domain":"","frontmatter":{"sidebar_position":10},"version":""},{"id":231,"title":"Network Proxy","content":"#\n\n\nLocal Proxy#\n\nModern.js provides a way to configure the development proxy in tools.devServer.\nFor example, to proxy the local interface to an online address:\n\n\n\nWhen access http://localhost:8080/go/api, the response content will be returned\nfrom http://www.example.com/.\n\nINFO\n\nFor more detail, see http-proxy-middleware.\n\n\nGlobal Proxy#\n\nWARNING\n\n@modern-js/plugin-proxy is no longer maintained and new versions will no longer\nbe released. Please consider migrating to other proxy tools, such as whistle.\n\nModern.js provides an out-of-the-box global proxy plugin\n@modern-js/plugin-proxy, which is based on whistle and can be used to view and\nmodify the requests and responses of HTTP/HTTPS, as well as be used as an HTTP\nproxy server.\n\n\nSetting Proxy Rules#\n\nAfter installing the proxy plugin and configuring the rules, run pnpm run dev.\nModern.js will automatically enable the proxy server when the development server\nis started.\n\nSpecific proxy rules can be set via the dev.proxy or the config/proxy.js file.\n\n\nProxy Dashboard#\n\nAfter installing the proxy plugin and configuring the proxy rules, run the pnpm\nrun dev command:\n\n\n\nYou can see that the proxy server has started successfully in the console.\n\nAccess http://localhost:8899, and you can set the rules through the dashboard.\n\n","routePath":"/en/guides/basic-features/proxy","lang":"en","toc":[{"text":"Local Proxy","id":"local-proxy","depth":2,"charIndex":3},{"text":"Global Proxy","id":"global-proxy","depth":2,"charIndex":327},{"text":"Setting Proxy Rules","id":"setting-proxy-rules","depth":3,"charIndex":741},{"text":"Proxy Dashboard","id":"proxy-dashboard","depth":3,"charIndex":1017}],"domain":"","frontmatter":{"sidebar_position":6},"version":""},{"id":232,"title":"Routing","content":"#\n\nModern.js's routing is based on React Router 6 and provides multiple types of\nrouting modes. According to different entry types, routing is divided into three\nmodes: Conventional Routing, Self-controlled Routing, and Other.\n\nNOTE\n\nThe routing mentioned in this section refers to client-side routing, i.e., SPA\nrouting.\n\n\nConventional Routing#\n\nWith routes/ as the convention for entry points, Modern.js automatically\ngenerates the corresponding routing structure based on the file system.\n\nModern.js supports the popular conventional routing mode in the industry: Nested\nRouting. When using nested routing, the page's routing corresponds to the UI\nstructure, and we will introduce this routing mode in detail.\n\n\n\n\nRouting File Convention#\n\nUnder the routes/ directory, the directory name is mapped to the route URL.\nModern.js has two file conventions, layout.[jt]sx and page.[jt]sx (abbreviated\nas.tsx). These two files determine the layout structure of the application.\nlayout.tsx is used as the layout component, and page.tsx acts as the content\ncomponent, which is the leaf node of the entire route (a route has only one leaf\nnode and must end with a leaf node).\n\nFor example, the following directory structure:\n\n\n\nThis will generate the following two routes:\n\n * /\n * /user\n\nWhen layout.tsx is added, assuming the following directory:\n\nINFO\n\nHere, routes/layout.tsx will be used as the layout component for all components\nunder the / route, and routes/user/layout.tsx will be used as the layout\ncomponent for all route components under the /user route.\n\n\n\nWhen the route is /, the following UI layout will be displayed:\n\n\n\nSimilarly, routes/user/layout.tsx will be used as the layout component for all\ncomponents under the /user route. When the route is /user, the following UI\nlayout will be displayed:\n\n\n\nLayout#\n\nThe component refers to all layout.tsx files under the routes/ directory. They\nrepresent the layout of the corresponding route segment and use to represent\nchild components.\n\n\n\nNOTE\n\nis a new API in React Router 6. For more details, please refer to Outlet.\n\nTo simplify the introduction of the relationship between and , the following\nfile directory is used as an example:\n\n\n\n 1. When the route is /, the in routes/layout.tsx represents the component\n    exported in routes/page.tsx, generating the following UI structure:\n\n\n\n 2. When the route is /blog, the in routes/layout.tsx represents the component\n    exported in routes/blog/page.tsx, generating the following UI structure:\n\n\n\n 3. When the route is /user, the in routes/layout.tsx represents the component\n    exported in routes/user/layout.tsx. The in routes/user/layout.tsx represents\n    the component exported in routes/user/page.tsx, generating the following UI\n    structure:\n\n\n\nIn summary, if there is a layout.tsx file under the sub-route's file directory,\nthe in the parent layout.tsx will represent the layout.tsx in the sub-route file\ndirectory. Otherwise, it will represent the page.tsx in the sub-route file\ndirectory.\n\nPage#\n\nAll routes should end with the component. If the developer introduces the\ncomponent in the page.tsx file, there will be no effect.\n\nConfig#\n\nEach Layout,$ or Page file can define its own config file, such as\npage.config.ts. In this file, we have an conventinal on a named export called\nhandle, which you can define any properties:\n\n\n\nThese properties as defined are available via the useMatches hook:\n\n\n\n\nDynamic Routing#\n\nRoutes generated from file directories named with [] will be handled as dynamic\nroutes. For example, the following file directory:\n\n\n\nThe routes/[id]/page.tsx file will be converted to the /:id route. Except for\nthe exact matching /blog route, all other /xxx routes will match this route.\n\nIn the component, you can use useParams to get the corresponding named\nparameter.\n\nIn the loader, params will be passed as the input parameter of the loader\nfunction, and you can get the parameter value through params.xxx.\n\n\nDynamic Optional Routing#\n\nRoutes generated from file directories named with [$] will be treated as dynamic\noptional routes. For example, the following file directory:\n\n\n\nThe routes/user/[id$]/page.tsx file will be converted to the /user/:id? route.\nAll routes under /user will match this route, and the id parameter is optional.\nThis route is usually used to distinguish between creation and editing.\n\nIn the component, you can use useParams to get the corresponding named\nparameter.\n\nIn the loader, params will be passed as the input parameter of the loader\nfunction, and you can get the parameter value through params.xxx.\n\n\nCatch-all Routing#\n\nIf you create a $.tsx file under the routes directory, it will be treated as the\ncatch-all routing component. When there is no matching route, this component\nwill be rendered.\n\nNOTE\n\n$.tsx can be considered as a special page route component. When there is a\nlayout.tsx file in the current directory, $.tsx will be rendered as a child\ncomponent of layout.\n\nFor example, the following directory structure:\n\n\n\nWhen accessing any path that does not match(For example /blog/a), the\nroutes/$.tsx component will be rendered, because there is layout.tsx here, the\nrendered UI is as follows.\n\n\n\nIf you want access to /blog to also match the blog/$.tsx file, you need to\ndelete the blog/layout.tsx file in the same directory and make sure that there\nare no other subroutes under blog.\n\nAs same, you can use useParams in $.tsx to capture the remaining parts of the\nURL.\n\n\n\n\nNo-path Layout#\n\nWhen the directory name starts with __, the directory name will not be converted\nto an actual route path. For example, the following file directory:\n\n\n\nModern.js will generate two routes, /login and /signup. The __auth/layout.tsx\ncomponent will serve as the layout component for login/page.tsx and\nsignup/page.tsx, but __auth will not be a route path segment.\n\nThis feature is very useful when you need to create independent layouts for\ncertain types of routes or want to classify routes.\n\n\nNo Layout#\n\nIn some cases, the project requires complex routing, but these routes do not\nhave independent UI layouts. If you create routes like ordinary file\ndirectories, it will result in deep directory levels.\n\nTherefore, Modern.js supports using . to separate route segments instead of file\ndirectories. For example, when you need /user/profile/2022/edit, you can\ndirectly create the following files:\n\n\n\nWhen accessing the route, you will get the following UI layout:\n\n\n\n\n(WIP)Loading#\n\nIn each directory under routes/, developers can create a loading.tsx file that\nexports a component by default.\n\nWhen this component and the layout component exist in the route directory, the\ncomponent will be used as the fallback UI when switching routes in this\nsub-route. For example, the following file directory:\n\n\n\nWhen defining loading.tsx, it is equivalent to the following layout:\n\nWhen the route is /:\n\n\n\nWhen the route is /blog:\n\n\n\nWhen the route is /blog/123:\n\n\n\nINFO\n\nWhen the Layout component does not exist in the directory, the Loading component\nin that directory will not take effect. Modern.js recommends having a root\nLayout and root Loading.\n\nWhen the route jumps from / to /blog, if the JS Chunk of the blog/page component\nhas not been loaded yet, the UI of the component exported in loading.tsx will be\ndisplayed first.\n\nSimilarly, when the route jumps from / or /blog to /blog/123, if the JS Chunk of\nthe blog/[id]/page component has not been loaded yet, the UI of the component\nexported in loading.tsx will be displayed first.\n\n\nRedirect#\n\nYou can use a Data Loader file to redirect a route. For example, if you have a\nroutes/user/page.tsx file and want to redirect the corresponding route, you can\ncreate a routes/user/page.data.ts file:\n\n\n\nIf you want to redirect in a component,you can navigate by useNavigate hook, for\nexample:\n\n\n\n\nErrorBoundary#\n\nIn each directory under routes/, developers can also define an error.tsx file\nthat exports an component by default.\n\nWhen this component exists in the routes directory, any rendering errors will be\ncaught by the ErrorBoundary component. When the layout.tsx file is not defined\nin the directory, the component will not take effect.\n\ncan return the UI view when an error occurs. When the component is not declared\nin the current level, the error will bubble up to a higher-level component until\nit is caught or thrown. At the same time, when a component has an error, it will\nonly affect the route component and its child components that catch the error.\nThe status and view of other components are not affected and can continue to\ninteract.\n\nIn the component, you can use useRouteError to get specific information about\nthe error:\n\n\n\n\nRuntime Configuration#\n\nIn each root Layout component (routes/layout.ts), you can dynamically define\nruntime configuration:\n\n\n\n\nHooks Before Rendering#\n\nIn some scenarios, you may need to perform some operations before rendering the\napplication. You can define an init hook in routes/layout.tsx. The init hook\nwill be executed on both the client and server side. A basic example of usage is\nas follows:\n\n\n\nBy using the init hook, you can mount some global data, and the runtimeContext\nvariable can be accessed in other parts of the application:\n\nNOTE\n\nThis feature is very useful when the application needs pre-rendered data, custom\ndata injection, or framework migration (such as Next.js).\n\n\n\n\n\nWhen used with the SSR feature, the data returned by the init hook during SSR\ncan be obtained on the client side. Developers can decide whether to re-fetch\ndata on the client side to overwrite the SSR data. For example:\n\n\n\n\nPreloading#\n\nIn conventional routing, Modern.js automatically splits routes into chunks based\non the route. When a user visits a specific route, the corresponding chunk will\nbe loaded automatically, effectively reducing the loading time of the initial\nscreen.\n\nHowever, this also brings a problem: if the chunk corresponding to the route has\nnot finished loading when the user visits the route, a white screen will appear.\n\nIn this case, you can define a Loading component to display a custom Loading\ncomponent before the static assets are loaded.\n\nTo further improve the user experience and reduce loading time, Modern.js\nsupports defining the prefetch attribute on the Link component to preload static\nassets and data.\n\n\n\nINFO\n * This feature is currently only supported in Webpack projects and not yet\n   supported in Rspack projects.\n * Preloading data currently only preloads the data returned by the Data Loader\n   in SSR projects.\n\nThe prefetch attribute has three optional values:\n\n * none: default value, no prefetching, no additional behavior.\n * intent: This is the value we recommend for most scenarios. When you hover\n   over the Link, the corresponding chunk and data defined in the data loader\n   will be loaded automatically. When you move the mouse away, the loading will\n   be cancelled automatically. In our tests, even fast clicks can reduce loading\n   time by about 200ms.\n * render: The corresponding chunk and data defined in the Data Loader will be\n   loaded when the Link component is rendered.\n\nFAQ#\n\n 1. What is the difference between using render and not splitting static assets\n    based on the route?\n\n * By using render, you can specify which routes to load during the initial\n   screen, and you can control the rendering so that only when the Link\n   component enters the visible area, the Link component will be rendered.\n\n * By using render, static assets will only be loaded when the system is idle,\n   and will not compete with the static assets of the initial screen for network\n   assets.\n\n * In the SSR scenario, data will also be pre-fetched.\n\n\nSelf-controlled Routing#\n\nWith src/App.tsx as the convention for entry points, Modern.js will not perform\nany additional routing operations. Developers can use the API of React Router 6\nfor development, for example:\n\n\n\nNOTE\n\nModern.js provides a series of optimizations for resource loading and rendering\nfor conventional routing by default, and provides out-of-the-box SSR\ncapabilities. When using self-controlled routing, developers need to encapsulate\nthese capabilities themselves. It is recommended to use conventional routing.\n\n\nOther#\n\nBy default, Modern.js will enable the built-in routing scheme, which is React\nRouter.\n\n\n\nAs mentioned above, when the runtime.router configuration is enabled, Modern.js\nwill export the API of React Router from the @modern-js/runtime/router namespace\nfor developers to use, ensuring that developers and Modern.js are using the same\ncode, and automatically wrapping the Provider component according to the router\nconfiguration. In addition, in this case, the code of React Router will be\npacked into the JS output.\n\nIf the project already has its own routing plan or does not need to use\nclient-side routing, this feature can be disabled.\n\n\n\nAs mentioned above, if the runtime.router configuration is disabled and\nreact-router-dom is used directly for project routing management, the Provider\nneeds to be wrapped according to the React Router documentation.","routePath":"/en/guides/basic-features/routes","lang":"en","toc":[{"text":"Conventional Routing","id":"conventional-routing","depth":2,"charIndex":323},{"text":"Routing File Convention","id":"routing-file-convention","depth":3,"charIndex":716},{"text":"Layout","id":"layout","depth":4,"charIndex":1813},{"text":"Page","id":"page","depth":4,"charIndex":3013},{"text":"Config","id":"config","depth":4,"charIndex":3152},{"text":"Dynamic Routing","id":"dynamic-routing","depth":3,"charIndex":3425},{"text":"Dynamic Optional Routing","id":"dynamic-optional-routing","depth":3,"charIndex":3958},{"text":"Catch-all Routing","id":"catch-all-routing","depth":3,"charIndex":4586},{"text":"No-path Layout","id":"no-path-layout","depth":3,"charIndex":5469},{"text":"No Layout","id":"no-layout","depth":3,"charIndex":5977},{"text":"(WIP)Loading","id":"wiploading","depth":3,"charIndex":6452},{"text":"Redirect","id":"redirect","depth":3,"charIndex":7519},{"text":"ErrorBoundary","id":"errorboundary","depth":3,"charIndex":7826},{"text":"Runtime Configuration","id":"runtime-configuration","depth":3,"charIndex":8676},{"text":"Hooks Before Rendering","id":"hooks-before-rendering","depth":3,"charIndex":8804},{"text":"Preloading","id":"preloading","depth":3,"charIndex":9596},{"text":"FAQ","id":"faq","depth":4,"charIndex":11117},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":2,"charIndex":11681},{"text":"Other","id":"other","depth":2,"charIndex":12216}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":233,"title":"Import Static Assets","content":"#\n\nModern.js supports import static assets, including images, fonts, and medias.\n\nWhat is Static Assets\n\nStatic assets are files that are part of a web application and do not change,\neven when the application is being used. Examples of static assets include\nimages, fonts, medias, stylesheets, and JavaScript files. These assets are\ntypically stored on a web server or CDN, and delivered to the user's web browser\nwhen the Web application is accessed. Because they do not change, static assets\ncan be cached by the browser, which helps to improve the performance of the Web\napplication.\n\n\nAssets Format#\n\nThe following are the formats supported by Modern.js by default:\n\n * Image: png, jpg, jpeg, gif, svg, bmp, webp, ico, apng, avif, tiff.\n * Fonts: woff, woff2, eot, ttf, otf, ttc.\n * Media: mp4, webm, ogg, mp3, wav, flac, aac, mov.\n\nIf you need to import assets in other formats, please refer to Extend Asset\nTypes.\n\nSVG images\n\nSVG image is a special case. Modern.js support convert SVG to React components,\nso SVG is processed separately. For details, see Import SVG Assets.\n\n\nImport Assets in JS file#\n\nIn JS files, you can directly import static assets in relative paths:\n\n\n\nImport with alias are also supported:\n\n\n\n\nImport Assets in CSS file#\n\nIn CSS files, you can reference static assets in relative paths:\n\n\n\nImport with alias are also supported:\n\n\n\n\nImport Results#\n\nThe result of importing static assets depends on the file size:\n\n * When the file size is greater than 10KB, a URL will be returned, and the file\n   will be output to the dist directory.\n * When the file size is less than 10KB, it will be automatically inlined to\n   Base64 format.\n\n\n\nFor a more detailed introduction to asset inlining, please refer to the Static\nAsset Inlining chapter.\n\n\nOutput Files#\n\nWhen static assets are imported, they will be output to the dist directory. You\ncan:\n\n * Modify the output filename through output.filename.\n * Modify the output path through output.distPath.\n\nPlease read Output Files for details.\n\n\nURL Prefix#\n\nThe URL returned after importing a asset will automatically include the path\nprefix:\n\n * In development, using dev.assetPrefix to set the path prefix.\n * In production, using output.assetPrefix to set the path prefix.\n\nFor example, you can set output.assetPrefix to https://modern.com:\n\n\n\n\nAdd Type Declaration#\n\nWhen you import static assets in TypeScript code, TypeScript may prompt that the\nmodule is missing a type definition:\n\n\n\nTo fix this, you need to add a type declaration file for the static assets,\nplease create a src/global.d.ts file, and add the corresponding type\ndeclaration. Taking png images as an example, you need to add the following\ndeclarations:\n\n\n\nAfter adding the type declaration, if the type error still exists, you can try\nto restart the current IDE, or adjust the directory where global.d.ts is\nlocated, making sure the TypeScript can correctly identify the type definition.\n\n\nExtend Asset Types#\n\nIf the built-in asset types in Modern.js cannot meet your requirements, you can\nmodify the built-in webpack/Rspack configuration and extend the asset types you\nneed using tools.bundlerChain.\n\nFor example, if you want to treat *.pdf files as assets and directly output them\nto the dist directory, you can add the following configuration:\n\n\n\nAfter adding the above configuration, you can import *.pdf files in your code,\nfor example:\n\n\n\nFor more information about asset modules, please refer to:\n\n * Rspack Documentation - Asset modules\n * webpack Documentation - Asset modules\n\n\nImage Format#\n\nWhen using image assets, you can choose a appropriate image format according to\nthe pros and cons in the table below.\n\nFORMAT   PROS                                                     CONS                                                         SCENARIOS\nPNG      Lossless compression, no loss of picture details, no     Not suitable for pictures with complex color tables          Suitable for pictures with few colors and well-defined\n         distortion, support for translucency                                                                                  borders, suitable for logos, icons, transparent images and\n                                                                                                                               other scenes\nJPG      Rich colors                                              Lossy compression, which will cause image distortion, does   Suitable for pictures with a large number of colors,\n                                                                  not support transparency                                     gradients, and overly complex pictures, suitable for\n                                                                                                                               portrait photos, landscapes and other scenes\nWebP     Supports both lossy and lossless compression, supports   iOS compatibility is not good                                Pixel images of almost any scene, and the hosting\n         transparency, and is much smaller than PNG and JPG                                                                    environment that supports WebP, should prefer WebP image\n                                                                                                                               format\nSVG      Lossless format, no distortion, supports transparency    Not suitable for complex graphics                            Suitable for vector graphics, suitable for icons","routePath":"/en/guides/basic-features/static-assets","lang":"en","toc":[{"text":"Assets Format","id":"assets-format","depth":2,"charIndex":588},{"text":"Import Assets in JS file","id":"import-assets-in-js-file","depth":2,"charIndex":1082},{"text":"Import Assets in CSS file","id":"import-assets-in-css-file","depth":2,"charIndex":1224},{"text":"Import Results","id":"import-results","depth":2,"charIndex":1362},{"text":"Output Files","id":"output-files","depth":2,"charIndex":1769},{"text":"URL Prefix","id":"url-prefix","depth":2,"charIndex":2017},{"text":"Add Type Declaration","id":"add-type-declaration","depth":2,"charIndex":2320},{"text":"Extend Asset Types","id":"extend-asset-types","depth":2,"charIndex":2936},{"text":"Image Format","id":"image-format","depth":2,"charIndex":3535}],"domain":"","frontmatter":{"sidebar_position":10},"version":""},{"id":234,"title":"Import SVG Assets","content":"#\n\nModern.js supports import SVG assets and transform SVG into React components or\nURLs.\n\nWhat is SVG\n\nSVG stands for Scalable Vector Graphics. It is a type of image format that uses\nvector graphics to represent images. Vector graphics are different from raster\ngraphics, which are made up of pixels. Instead, vector graphics use geometric\nshapes, lines, and curves to represent images. Because vector graphics are not\nmade up of pixels, they can be scaled to any size without losing resolution or\nquality.\n\n\nImport SVG in JS file#\n\n\nDefault Import#\n\nIf you use the default import to reference SVG, it will be treated as a static\nasset and you will get a URL string:\n\n\n\n\nTransform to React Component#\n\nWhen referencing SVG assets in JS files, if the import path includes the ?react\nsuffix, Modern.js will call SVGR to transform the SVG image into a React\ncomponent:\n\n\n\nTIP\n\nModern.js >= 2.48.3 version supports the above usage.\n\nModern.js also supports the following usage, transforming SVG into a React\ncomponent by named import ReactComponent:\n\n\n\n\nModify the Default Export#\n\nYou can modify the default export of SVG files through the\noutput.svgDefaultExport config. For example, set the default export as a React\ncomponent:\n\n\n\nThen import the SVG, you'll get a React component instead of a URL:\n\n\n\n\nImport SVG in CSS file#\n\nWhen import an SVG in a CSS file, the SVG is treated as a normal static asset\nand you will get a URL:\n\n\n\n\nAssets Processing#\n\nWhen SVG is imported not as a React component but as a normal static asset, it\nis processed exactly the same as other static assets, and it is also affected by\nrules such as assets inlining and URL prefixing.\n\nPlease read the Import Static Assets section to understand the processing rules\nfor static assets.\n\n\nDisable SVGR Processing#\n\nBy default, when an SVG resource is referenced in a JS file, Modern.js will call\nSVGR to convert the SVG into a React component. If you are sure that all SVG\nresources in your project are not being used as React components, you can turn\noff this conversion by setting disableSvgr to true to improve build performance.\n\n\n\n\nAdd type declaration#\n\nWhen you reference an SVG asset in TypeScript code, TypeScript may prompt that\nthe module is missing a type definition:\n\n\n\nTo fix this, you need to add a type declaration file for the SVG asset, please\ncreate a src/global.d.ts file, and add the following type declaration:\n\n\n\nIf you set svgDefaultExport to 'component', then change the type declaration to:\n\n\n\nAfter adding the type declaration, if the type error still exists, you can try\nto restart the current IDE, or adjust the directory where global.d.ts is\nlocated, making sure the TypeScript can correctly identify the type definition.\n\n\nModify the SVGR configuration#\n\nWhen SVGR is enabled, its default configuration is as follows:\n\n\n\nIf you need to modify the SVGR configuration, you can do the following:\n\n","routePath":"/en/guides/basic-features/svg-assets","lang":"en","toc":[{"text":"Import SVG in JS file","id":"import-svg-in-js-file","depth":2,"charIndex":508},{"text":"Default Import","id":"default-import","depth":3,"charIndex":533},{"text":"Transform to React Component","id":"transform-to-react-component","depth":3,"charIndex":670},{"text":"Modify the Default Export","id":"modify-the-default-export","depth":2,"charIndex":1049},{"text":"Import SVG in CSS file","id":"import-svg-in-css-file","depth":2,"charIndex":1301},{"text":"Assets Processing","id":"assets-processing","depth":2,"charIndex":1432},{"text":"Disable SVGR Processing","id":"disable-svgr-processing","depth":2,"charIndex":1763},{"text":"Add type declaration","id":"add-type-declaration","depth":2,"charIndex":2111},{"text":"Modify the SVGR configuration","id":"modify-the-svgr-configuration","depth":2,"charIndex":2728}],"domain":"","frontmatter":{"sidebar_position":11},"version":""},{"id":235,"title":"Import Wasm Assets","content":"#\n\nModern.js supports import WebAssembly assets in code.\n\nWhat is WebAssembly\n\nWebAssembly (Wasm) is a portable, high-performance binary format designed to\nexecute CPU-intensive computing tasks in modern web browsers, bringing\nperformance and reliability similar to native compiled code to the web platform.\n\n\nImport#\n\nYou can import a WebAssembly module directly in a JavaScript file:\n\n\n\nWebAssembly modules can also be imported via dynamic import:\n\n\n\nYou can also get the path of a WebAssembly module using the new URL syntax:\n\n\n\n\nOutput Directory#\n\nWhen a .wasm asset is imported, it will be output by Modern.js to the\ndist/static/wasm directory by default.\n\nYou can change the output directory of .wasm files via output.distPath config.\n\n\n\n\nAdd Type Declaration#\n\nWhen you import a Wasm file in TypeScript code, you usually need to add the\ncorresponding type declaration.\n\nFor example, the add.wasm file exports an add() method, then you can create an\nadd.wasm.d.ts file in the same directory and add the corresponding type\ndeclaration:\n\n","routePath":"/en/guides/basic-features/wasm-assets","lang":"en","toc":[{"text":"Import","id":"import","depth":2,"charIndex":309},{"text":"Output Directory","id":"output-directory","depth":2,"charIndex":532},{"text":"Add Type Declaration","id":"add-type-declaration","depth":2,"charIndex":744}],"domain":"","frontmatter":{"sidebar_position":13},"version":""},{"id":236,"title":"Build Engine","content":"#\n\nModern.js internally encapsulates its own build tool (Modern.js Builder) based\non Rsbuild, and supports seamless switching between Webpack and Rspack bundlers.\n\nWhat is Rsbuild?\n\nRsbuild is a build tool based on Rspack. It is an enhanced Rspack CLI,\neasy-to-use, and ready-to-use out of the box.\n\n\nBuild Architecture#\n\nFrom the building perspective, Modern.js can be divided into three-layers, from\ntop to bottom:\n\n * Upper-level framework: Modern.js (open source) and EdenX (internal).\n * Build tool: Rsbuild.\n * Bundler: Webpack and Rspack.\n\n\nBuild Documentation#\n\nThe documentation address of Rsbuild is: https://rsbuild.dev/\n\nIn this documentation, you can learn about the detailed introduction of Rsbuild,\nand you can also find complete usage guides for various building capabilities.\n\nIf you want to understand the use of build configurations, it is recommended\nthat you read the Modern.js documentation first, because the build\nconfigurations and defaults in Modern.js are not exactly the same as Rsbuild.\n\n\nBuild Plugins#\n\nIn Modern.js, you can register Webpack plugins, Rspack plugins, or Rsbuild\nplugins:\n\n * Webpack / Rspack plugins: Configured through tools.bundlerChain.\n * Rsbuild plugins: Configured through builderPlugins.\n\n\nBuild Capabilities#\n\nRsbuild provides rich build capabilities, including JavaScript compilation, CSS\ncompilation, static assets processing, code hot update, code compression, TS\ntype checking, and dozens of other capabilities.\n\nWe recommend that you read 「Rsbuild - All Features」 to learn about all the\nfeatures provided by Rsbuild.","routePath":"/en/guides/concept/builder","lang":"en","toc":[{"text":"Build Architecture","id":"build-architecture","depth":2,"charIndex":300},{"text":"Build Documentation","id":"build-documentation","depth":2,"charIndex":547},{"text":"Build Plugins","id":"build-plugins","depth":2,"charIndex":1017},{"text":"Build Capabilities","id":"build-capabilities","depth":2,"charIndex":1243}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":237,"title":"Page Entry","content":"#\n\nIn this chapter, you will learn about the entry convention in Modern.js and how\nto customize it.\n\n\nWhat is Entry?#\n\nEntry refers to the starting module of a page.\n\nIn a Modern.js project, each entry corresponds to an independent page and a\nserver-side route. By default, Modern.js automatically determines the entry of a\npage based on directory conventions, but also supports customizing the entry\nthrough configuration options.\n\nMany configuration options provided by Modern.js are divided by entry, such as\npage title, HTML template, page meta information, whether to enable SSR/SSG,\nserver-side routing rules, etc.\n\n\nSingle Entry and Multiple Entries#\n\nThe project initialized by Modern.js is a single entry (SPA) project, with the\nfollowing structure:\n\n\n\nIn a Modern.js project, you can easily switch from single entry to multiple\nentries by running pnpm run new in the project directory and creating an entry:\n\n\n\nAfter running the command, Modern.js will automatically generate a new entry\ndirectory. At this point, you can see that the src/ directory has the following\nstructure:\n\n\n\nThe original entry code has been moved to a directory with the same name as the\nname field in package.json, and a new-entry entry directory has been created.\n\nYou can run pnpm run dev to start the development server. At this point, you\nwill see a new route named /new-entry added, and the existing page routes remain\nunchanged.\n\nTIP\n\nModern.js will use the entry with the same name as the name field in\npackage.json as the main entry. The route of the main entry is /, and the route\nof other entries is /{entryName}.\n\nFor example, when the name field in package.json is myapp, src/myapp will be the\nmain entry of the project.\n\n\nEntry Types#\n\nDifferent entry types have different compilation and runtime behaviors.\n\nBy default, Modern.js scans the files under src/ before starting the project,\nidentifies the entry, and generates the corresponding server-side route.\n\nTIP\n * You can custom the recognition directory for page entries by using\n   source.entriesDir.\n * If you need to customize the entry points, please refer to Custom Entries.\n\nNot all top-level directories under src/ become project entries. The directory\nwhere the entry is located must meet one of the following four conditions:\n\n 1. Has a routes/ directory.\n 2. Has an App.[jt]sx? file.\n 3. Has an index.[jt]sx? file.\n 4. Has a pages/ directory (compatible with Modern.js 1.0).\n\nWhen the src/ directory meets the entry requirements, Modern.js considers the\ncurrent project as a single entry application.\n\nTIP\n\nIn a single entry application, the default entry name is main.\n\nWhen the project is not a single entry application, Modern.js will further look\nat the top-level directories under src/.\n\n\nFramework Mode Entry#\n\nThe framework mode refers to the need to use the framework capabilities of\nModern.js, such as nested routing, SSR, and integrated BFF, etc. Under this kind\nof entry convention, the entry defined by the developer is not the actual\ncompilation entry. When Modern.js is launched, it generates a wrapped entry, and\nthe real entry can be found at node_modules/.modern/[entryName]/index.js.\n\nConventional Routing#\n\nIf there is a routes/ directory in the entry, Modern.js will scan the files\nunder routes/ during startup, and automatically generate client-side routes\n(react-router) based on file conventions. For example:\n\n\n\nIn the above directory, the component exported in layout.tsx will be the\noutermost component, and the component exported in page.tsx will be the\ncomponent of the / route.\n\nFor more information, please refer to Conventional Routing.\n\nSelf-controlled Routing#\n\nIf there is an App.[jt]sx? file in the entry, developers can set the client-side\nroute in this file through code, or not set the client-side route.\n\n\n\nFor more information, please refer to Self-controlled Routing.\n\nCustom Bootstrap#\n\nIf there is an index.[jt]sx file in the entry, and the file exports a function\nby default, Modern.js will pass the default bootstrap function as a parameter\nand use the exported function to replace the default bootstrap. This way,\ndevelopers can customize how components are mounted to DOM nodes or add custom\nbehavior before mounting. For example:\n\n\n\nAt this point, the generated file content of Modern.js is as follows:\n\n\n\n\nBuild Mode Entry#\n\nBuild mode refers to the mode where the entry point of the page is not\nautomatically generated by Modern.js, but is fully defined by the developers\nthemselves.\n\nWhen there is an index.[jt]sx file in the entry directory and it is not exported\nas a function using export default, this type of file will be recognized as the\nentry module for webpack or Rspack.\n\nIn this case, Modern.js will not generate the entry code automatically.\nTherefore, you need to manually mount the component to the DOM node, for\nexample:\n\n\n\nThis approach is equivalent to enabling the source.entries.disableMount option\nin Modern.js. When you use this approach, you will not be able to use the\nruntime capabilities of the Modern.js framework, such as the runtime\nconfiguration in the modern.config.js file will no longer take effect.\n\n\nCustom Entries#\n\nIn some cases, you may need to customize the entry configuration instead of\nusing the entry conventions provided by Modern.js.\n\nFor example, if you want to migrate a non-Modern.js project to Modern.js and it\nis not structured according to Modern.js directory structure, there might be\nsome migration costs involved in changing it to the conventional structure. In\nsuch cases, you can custom the entries.\n\nModern.js provides the following configuration options that you can set in\nmodern.config.ts:\n\n * source.entries: Used to set custom entry objects.\n * source.disableDefaultEntries: Used to disable Modern.js's default entry\n   scanning behavior. When you use custom entries, parts of your project\n   structure might coincidentally match the Modern.js conventional directory\n   structure, but you may not want Modern.js to generate entry configurations\n   for them. Enabling this option can help avoid this issue.\n\n\nExample#\n\nHere is an example of a custom entry point. You can also refer to the\ndocumentation of the corresponding configuration options for more usage.\n\n\n\nNote that when you enable disableMount, you won't be able to use the runtime\ncapabilities of the Modern.js framework, such as the runtime configuration in\nthe modern.config.ts file.","routePath":"/en/guides/concept/entries","lang":"en","toc":[{"text":"What is Entry?","id":"what-is-entry","depth":2,"charIndex":101},{"text":"Single Entry and Multiple Entries","id":"single-entry-and-multiple-entries","depth":2,"charIndex":622},{"text":"Entry Types","id":"entry-types","depth":2,"charIndex":1719},{"text":"Framework Mode Entry","id":"framework-mode-entry","depth":3,"charIndex":2756},{"text":"Conventional Routing","id":"conventional-routing","depth":4,"charIndex":3165},{"text":"Self-controlled Routing","id":"self-controlled-routing","depth":4,"charIndex":3631},{"text":"Custom Bootstrap","id":"custom-bootstrap","depth":4,"charIndex":3872},{"text":"Build Mode Entry","id":"build-mode-entry","depth":3,"charIndex":4317},{"text":"Custom Entries","id":"custom-entries","depth":2,"charIndex":5147},{"text":"Example","id":"example","depth":3,"charIndex":6082}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":238,"title":"Glossary","content":"#\n\n\nBFF#\n\nBFF is short for \"Backend For Frontend\". It is an architecture pattern that\ninvolves creating a backend service for frontend applications.\n\nThe BFF service acts as an intermediary between the frontend application and the\nserver API, and can provide customized APIs for the frontend to use. This allows\nfrontend developers to have more control over the data and functionality they\nneed, without relying on the backend service to provide the corresponding\ncapabilities.\n\n\nBundler#\n\nRefers to module bundlers such as webpack, Rspack.\n\nThe main goal of bundlers is to bundle JavaScript, CSS and other files together,\nand the bundled files can be used in the browser, Node.js or other environments.\nWhen bundler processes the Web application, it builds a dependency graph and\nthen combines every module into one or more bundles.\n\n\nBuilder#\n\nRefers to the build layer of Modern.js. The goal of Builder is to provide\nModern.js users with out-of-the-box build capabilities and support seamless\nswitching between webpack and Rspack.\n\nThe previous version of Modern.js MAJOR_VERSION.46.0 used @modern-js/builder,\nwhich was upgraded to Rsbuild starting from MAJOR_VERSION.46.0.\n\n\nCSR#\n\nCSR stands for \"Client-Side Rendering\". It means that the page is rendered in\nthe browser using JavaScript, and logic such as data fetching, templates, and\nrouting is completed on the client side rather than the server.\n\nIn CSR, the server sends an empty HTML shell and some JavaScript scripts to the\nbrowser, and the browser fetching data from the server's API and renders dynamic\ncontent to the page.\n\n\nGarfish#\n\nGarfish is a micro-frontend solution mainly used to solve problems such as\ncross-team collaboration and diversified technology systems in web applications.\n\nStarting from the architecture level, it combines multiple independently\ndelivered frontend applications into a whole. These frontend applications can be\ndeveloped, tested, and deployed independently, but in the user's perspective,\nthey are still cohesive single products.\n\n\nMicro-frontend#\n\nMicro-frontend (MFE) is an architecture style similar to microservices. It is a\ncomposition of multiple independently delivered frontend applications, forming a\ncohesive whole. MFE decomposes frontend applications into smaller, simpler\napplications that can be developed, tested, and deployed independently while\nstill appearing as a cohesive single product to users.\n\nIt primarily addresses two problems:\n\n * Difficulty in maintaining large and complex applications as they evolve over\n   time.\n\n * Inefficiency caused by cross-team or cross-department collaboration in\n   project development.\n\n\nModule Federation#\n\nModule Federation (MF) is a feature of Webpack. It allows a JavaScript\napplication to dynamically load code from another application, and in the\nprocess, share dependencies. If an application consuming a federated module does\nnot have a dependency needed by the federated code, Webpack will download the\nmissing dependency from that federated build origin.\n\nThis allows for the creation of micro-frontend-style applications, where\nmultiple systems can share code and be dynamically updated without having to\nrebuild the entire application.\n\nModern.js provides an example project for Module Federation. Please refer to\nmodule-federation-examples - modernjs.\n\nYou can also read the webpack Module Federation documentation to learn more\nconcepts.\n\n\nRsbuild#\n\nRsbuild is an Rspack-based build tool for the web. The main goal of Rsbuild is\nto provide out-of-the-box build capabilities for Rspack users, allowing\ndevelopers to start a web project with zero configuration.\n\nRsbuild integrates high-performance Rust-based tools from the community,\nincluding Rspack and SWC, to provide first-class build speed and development\nexperience.\n\n\nRspack#\n\nRspack is a high performance JavaScript bundler based on Rust, with\ninteroperability with the webpack ecosystem, allowing it to be integrated into\nwebpack projects at a low cost while providing better build performance.\n\nCompared to webpack, Rspack has significantly improved build performance, thanks\nnot only to the language advantages brought by Rust, but also to its parallel\narchitecture and incremental compilation features. Benchmarking has shown that\nRspack can provide 5-10 times better compilation performance.\n\n\nSSR#\n\nSSR stands for \"Server-Side Rendering\". It means that the HTML of the web page\nis generated by the server and sent to the client, rather than sending only an\nempty HTML shell and relying on JavaScript to generate the page content.\n\nIn traditional client-side rendering, the server sends an empty HTML shell and\nsome JavaScript scripts to the client, and then fetching data from the server's\nAPI and fills the page with dynamic content. This leads to slow initial page\nloading times and is not conducive to user experience and SEO.\n\nWith SSR, the server generates HTML that already contains dynamic content and\nsends it to the client. This makes the initial page loading faster and more\nSEO-friendly, as search engines can crawl the rendered page.\n\n\nSSG#\n\nSSG stands for \"Static Site Generation\". It means that web pages are\npre-rendered as static HTML and served directly to the client, without the need\nfor the server to generate HTML in real-time.\n\nIn traditional SSR, the server generates HTML in real-time every time a user\nrequests a page. With SSG, HTML can be generated in advance during the build\nprocess and hosted on a CDN or other static assets service.\n\nCompared to traditional SSR, SSG can provide faster loading speeds and less\nserver-side overhead, as there is no need to maintain a server to generate HTML\nin real-time. However, SSG is not suitable for websites that require dynamic\ncontent, as the HTML is generated during the build process and does not support\nreal-time updates.\n\n\nSWC#\n\nSWC (Speedy Web Compiler) is a transformer and minimizer for JavaScript and\nTypeScript based on Rust. SWC can provide the same abilities with Babel, and\nit's more than 10x faster than Babel.\n\nModern.js has a out-of-box plugin for SWC, power your Web application with\nPolyfill and minification, we also port some common used Babel plugins to SWC.","routePath":"/en/guides/get-started/glossary","lang":"en","toc":[{"text":"BFF","id":"bff","depth":2,"charIndex":3},{"text":"Bundler","id":"bundler","depth":2,"charIndex":479},{"text":"Builder","id":"builder","depth":2,"charIndex":835},{"text":"CSR","id":"csr","depth":2,"charIndex":1178},{"text":"Garfish","id":"garfish","depth":2,"charIndex":1589},{"text":"Micro-frontend","id":"micro-frontend","depth":2,"charIndex":2031},{"text":"Module Federation","id":"module-federation","depth":2,"charIndex":2645},{"text":"Rsbuild","id":"rsbuild","depth":2,"charIndex":3411},{"text":"Rspack","id":"rspack","depth":2,"charIndex":3796},{"text":"SSR","id":"ssr","depth":2,"charIndex":4328},{"text":"SSG","id":"ssg","depth":2,"charIndex":5083},{"text":"SWC","id":"swc","depth":2,"charIndex":5834}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":239,"title":"Introduction","content":"#\n\nModern.js is an open source web engineering system from ByteDance, which\nprovides multiple solutions to help developers solve problems in different\ndevelopment scenarios.\n\nCurrently, Modern.js includes two solutions, targeting web application\ndevelopment and npm package development:\n\nAs part of the Modern.js engineering system, each of the above solutions can be\nused separately and has its own independent documentation site. Developers can\nchoose one or more solutions as needed.\n\n\nAbout Documentation#\n\nThe current documentation site corresponds to the Modern.js framework, which is\nused to developing web applications.\n\n * If you need to develop an npm package, please refer to the Modern.js Module\n   documentation.\n * If you need a build tool to bundle web applications, Rsbuild is recommended.\n * If you need to develop a documentation site, Rspress is recommended.\n\nTIP\n\nSince the Modern.js framework is the most widely used, in this documentation\nsite, we will omit \"framework\" and directly refer to it as Modern.js.\n\n\nModern.js Framework#\n\nThe Modern.js framework is a progressive web framework based on React. At\nByteDance, we use Modern.js to build upper-level frameworks that have supported\nthe development of thousands of web applications.\n\nModern.js can provide developers with an ultimate Development Experience and\nenable applications to have better User Experience.\n\nIn the process of developing React applications, developers usually need to\ndesign implementation plans for certain features or use other libraries and\nframeworks to solve these problems. Modern.js supports all configurations and\ntools needed by React applications, and has built-in additional features and\noptimizations. Developers can use React to build the UI of the application, and\nthen gradually adopt the features of Modern.js to solve common application\nrequirements, such as routing, data acquisition, and state management.\n\nIt mainly includes the following features:\n\n * 🚀 Rust Bundler: Provides support for dual bundlers, easily switch to the\n   Rspack for faster build speed.\n * 🪜 Progressive: Create projects with the most streamlined templates,\n   gradually enable plugin features through the generator, and customize\n   solutions.\n * 🏠 Integration: Development and production environment web server are unique,\n   CSR and SSR are isomorphic development, and API service calls are functions\n   as interfaces.\n * 📦 Out Of The Box: Default TS support, built-in build, ESLint, debugging\n   tools, fully functional and testable.\n * 🌏 Ecology: Self-developed state management, micro-frontend, module\n   packaging, Monorepo solutions, and other peripheral needs.\n * 🕸 Routing Modes: Includes self-controlled routing, file-convention-based\n   routing (nested routing), etc.\n\n\nComparison with Others#\n\n\nNext.js#\n\nNext.js is one of the most popular React frameworks in the community. It is\ndeveloped by Vercel.\n\nNext.js defaults to using React Server Components, which means you will need to\nrender your web application on the server and pay for the server-side rendering\ncosts. In addition, Server Components is not yet a stable technology, and many\npopular React libraries in the community have not yet finished adapting to RSC.\nAt this stage, you may need to use the Next.js's Pages Router to avoid issues\ncaused by Server Components.\n\nIf you want to build a single-page application (SPA) and render it on the client\nside, Next.js may not be the best choice because many of its features are\ndesigned around server-first principles. If you need to use client-side\nrendering, you can only use limited functionality through Next.js's \"static\nexports\" feature.\n\nOn the other hand, Modern.js considers both client-side rendering (CSR) and\nserver-side rendering (SSR) to be equally important. When you build a Modern.js\napplication, it defaults to client-side rendering, and you don't need to\nunderstand the uses and limitations of Server Components. You can also enable\nSSR whenever you need it, and even enable SSR for specific pages. The whole\nprocess is fully progressive. Please note that Modern.js does not currently\nsupport Server Components. We will continue to monitor its potential and provide\nsupport when appropriate.\n\n\nUmi#\n\nUmi is a popular React framework in the Chinese community and serves as the\nunderlying frontend framework for the Ant Group. Modern.js and Umi share many\nsimilarities, such as support for plugin system, convention-based routing, and\nmicro-generators.\n\nThe main difference between Modern.js and Umi is their approach to optimizing\nbuild speed. Umi uses MFSU technology to improve build speed, while Modern.js\nuses Rspack to achieve 5 to 10 times faster build speed. From our perspective,\nRust tools like Rspack are more in line with the long-term evolution of the\nfront-end toolchain, as they can strike a good balance between performance,\nstability, and ecosystem compatibility.\n\nIn addition, Modern.js provides richer server-side features, including\ncomprehensive SSR capabilities, integrated BFF development capabilities, and\nsupport for custom web servers. These capabilities have been extensively\nvalidated by ByteDance in numerous online applications and can be directly used\nin production environments.\n\n\nRemix#\n\nPelease refer to Modern.js vs Remix.\n\n\nNext Step#\n\nIf you want to learn how to use the Modern.js framework, you can try to create\nyour first application, or read the Quick Start guide.","routePath":"/en/guides/get-started/introduction","lang":"en","toc":[{"text":"About Documentation","id":"about-documentation","depth":2,"charIndex":488},{"text":"Modern.js Framework","id":"modernjs-framework","depth":2,"charIndex":1032},{"text":"Comparison with Others","id":"comparison-with-others","depth":2,"charIndex":2778},{"text":"Next.js","id":"nextjs","depth":3,"charIndex":2804},{"text":"Umi","id":"umi","depth":3,"charIndex":4229},{"text":"Remix","id":"remix","depth":3,"charIndex":5246},{"text":"Next Step","id":"next-step","depth":2,"charIndex":5293}],"domain":"","frontmatter":{"title":"Introduction","sidebar_position":1},"version":""},{"id":240,"title":"Quick Start","content":"#\n\n\nEnvironment#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 16.2.0. We recommend using the LTS version of\nNode.js 18.\n\nYou can check the currently used Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 16.2.0, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 18 LTS version via nvm:\n\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nInstallation#\n\nModern.js provides the @modern-js/create tool to create projects. It does not\nrequire global installation and can be run on-demand using npx.\n\nYou can create a project in an existing empty directory:\n\n\n\nYou can also create a project directly in a new directory:\n\n\n\n\nInitialize#\n\n@modern-js/create provides an interactive Q & A interface to initialize the\nproject based on the results, with initialization performed according to the\ndefault settings:\n\n\n\nAfter create the project, Modern.js will automatically install dependencies and\ncreate a git repository.\n\n\n\nNow, the project structure is as follows:\n\n\n\n\nDevelopment#\n\nRun pnpm run dev in the project to start the project:\n\n\n\nOpen http://localhost:8000/ in your browser to see the page content.\n\n\nConfiguration#\n\nIn a Modern.js project created using @modern-js/create, a modern.config.ts file\nis generated by default.\n\nYou can modify the configuration through this file to override the default\nbehavior of Modern.js. For example, to enable SSR, add the following\nconfiguration:\n\n\n\nAfter running pnpm run dev again, you can find that the project has completed\npage rendering on the server in the browser's Network menu.\n\n\nCore npm Package#\n\nIn a newly created project, the @modern-js/app-tools npm package is installed by\ndefault. It is the core package of the Modern.js framework and provides the\nfollowing capabilities:\n\n * It offers commonly used CLI commands such as modern dev, modern build, and\n   more.\n * It integrates Modern.js Core, providing capabilities for configuration\n   parsing, plugin loading, and more.\n * It integrates Modern.js Builder, providing build capabilities.\n * It integrates Modern.js Server, providing capabilities for development and\n   production servers.\n * It integrates some commonly used plugins, such as plugin-lint,\n   plugin-data-loader, and more.\n\n@modern-js/app-tools is implemented based on the plugin system of Modern.js.\nEssentially, it is a plugin. Therefore, you need to register appTools in the\nplugins field of the configuration file:\n\n\n\n\nBuild the project#\n\nTo build the production artifacts of the project, run pnpm run build in the\nproject:\n\n\n\nBy default, the build artifacts are generated in dist/, with the following\ndirectory structure:\n\n\n\n> If you need to customize the directory of the build artifacts, please refer to\n> Output files.\n\n\nVerify#\n\nRun pnpm run serve in the project to verify whether the build artifacts run\nnormally locally:\n\n\n\nOpen http://localhost:8000/ in the browser, and the content should be consistent\nwith that of pnpm run dev.\n\n\nDeployment#\n\nAfter local verification, you can organize the artifacts in dist/ into the\nstructure required by the server for deployment.","routePath":"/en/guides/get-started/quick-start","lang":"en","toc":[{"text":"Environment","id":"environment","depth":2,"charIndex":3},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":18},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":726},{"text":"Installation","id":"installation","depth":2,"charIndex":863},{"text":"Initialize","id":"initialize","depth":2,"charIndex":1144},{"text":"Development","id":"development","depth":2,"charIndex":1485},{"text":"Configuration","id":"configuration","depth":2,"charIndex":1627},{"text":"Core npm Package","id":"core-npm-package","depth":2,"charIndex":2051},{"text":"Build the project","id":"build-the-project","depth":2,"charIndex":2917},{"text":"Verify","id":"verify","depth":2,"charIndex":3223},{"text":"Deployment","id":"deployment","depth":2,"charIndex":3439}],"domain":"","frontmatter":{"title":"Quick Start","sidebar_position":2},"version":""},{"id":241,"title":"Tech Stack","content":"#\n\nThe Modern.js framework comes with built-in popular libraries and development\ntools from the community.\n\nIn this document, you can learn about the main technology stack involved in the\nModern.js framework, as well as some optional libraries and tools.\n\n\nUI Library#\n\nModern.js uses React 18 to build user interfaces and is also compatible with\nReact 17.\n\nRsbuild supports building Vue applications. If you need to use Vue, you can\nrefer to \"Rsbuild - Vue\".\n\n\nRouting#\n\nModern.js uses React Router 6 for routing and is also compatible with React\nRouter 5.\n\nModern.js supports conventional routing, self-controlled routing, or other\nrouting schemes. Please refer to \"Routing\" to make your choice.\n\n\nMicro Frontends#\n\nModern.js provides out-of-the-box support for the Garfish micro frontend\nframework.\n\nWe are also working with Zack Jackson, the author of Module Federation, to\nprovide a more comprehensive solution.\n\n\nState Management#\n\nModern.js can be used with any community state management library, such as\nRedux, Jotai, Zustand, Valtio, and more.\n\nModern.js also provides a wrapper around Redux called Reduck for state\nmanagement. You can refer to \"Reduck State Management\" for usage.\n\n\nPackage Manager#\n\nModern.js can be used with any community package manager, such as npm, yarn,\npnpm, or Bun.\n\nWe recommend using pnpm for faster installation speed.\n\n\nBundler#\n\nModern.js uses Webpack 5 or Rspack to bundle your web applications.\n\nThe default bundler used is Webpack 5. You can refer to \"Using Rspack\" to switch\nto the faster Rspack.\n\n\nTranspiler#\n\nModern.js uses Babel, SWC, or esbuild as JavaScript transpiler to transform\nTypeScript or JSX into JavaScript code that can run in browsers and perform\nsyntax downgrades.\n\n * When using Webpack for bundling, the default tool is Babel, which can be\n   switched to SWC or esbuild.\n * When using Rspack for bundling, the default tool is SWC, which can be\n   switched to Babel.\n\n\nMinimizer#\n\nDuring production builds, Modern.js uses Terser, SWC, or esbuild to minify\nJavaScript code, and cssnano to minify CSS code.\n\n * When using Webpack for bundling, the default tool for minifying JS code is\n   Terser, which can be switched to SWC or esbuild.\n * When using Rspack for bundling, the default tool for minifying JS code is\n   SWC, and switching to other tools is not currently supported.\n\n\nCSS Transformer#\n\nModern.js uses PostCSS to transform CSS code and enables autoprefixer by default\nto add CSS prefixes.\n\nModern.js supports enabling \"Tailwind CSS\" and is compatible with both Tailwind\nCSS v2 and v3.\n\n\nCSS Preprocessors#\n\nModern.js supports three CSS preprocessors: Sass, Less, and Stylus:\n\n * Sass and Less are supported by default and ready to use.\n * Stylus is optional and can be used by referring to the \"Stylus Plugin\".\n\n\nCSS Modules#\n\nModern.js provides out-of-the-box support for CSS Modules, which is implemented\ninternally based on css-loader.\n\nPlease refer to \"Use CSS Modules\" for usage instructions.\n\n\nCSS-in-JS#\n\nModern.js supports the use of styled-components. Please refer to \"Using\nCSS-in-JS\" for usage instructions.\n\nIf you need to use other CSS-in-JS solutions, you can integrate them into your\nproject on your own.\n\n\nUI Components#\n\nModern.js can be used with any React UI component library from the community,\nsuch as MUI, Ant Design, Arco Design, Semi Design, Radix UI, and more.\n\nAdditionally, Modern.js provides built-in support for on-demand import of Ant\nDesign and Arco Design.\n\n\nComponent Development#\n\nModern.js supports the use of Storybook for developing UI components. This\nfeature is optional. Please refer to \"Using Storybook\" to enable it.\n\n\nNode.js Framework#\n\nModern.js supports Express.js and Koa.js as optional BFF runtime frameworks.\nPlease refer to the BFF - Frameworks for more information.","routePath":"/en/guides/get-started/tech-stack","lang":"en","toc":[{"text":"UI Library","id":"ui-library","depth":2,"charIndex":256},{"text":"Routing","id":"routing","depth":2,"charIndex":461},{"text":"Micro Frontends","id":"micro-frontends","depth":2,"charIndex":699},{"text":"State Management","id":"state-management","depth":2,"charIndex":918},{"text":"Package Manager","id":"package-manager","depth":2,"charIndex":1193},{"text":"Bundler","id":"bundler","depth":2,"charIndex":1360},{"text":"Transpiler","id":"transpiler","depth":2,"charIndex":1544},{"text":"Minimizer","id":"minimizer","depth":2,"charIndex":1933},{"text":"CSS Transformer","id":"css-transformer","depth":2,"charIndex":2344},{"text":"CSS Preprocessors","id":"css-preprocessors","depth":2,"charIndex":2562},{"text":"CSS Modules","id":"css-modules","depth":2,"charIndex":2788},{"text":"CSS-in-JS","id":"css-in-js","depth":2,"charIndex":2975},{"text":"UI Components","id":"ui-components","depth":2,"charIndex":3197},{"text":"Component Development","id":"component-development","depth":2,"charIndex":3467},{"text":"Node.js Framework","id":"nodejs-framework","depth":2,"charIndex":3637}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":242,"title":"Upgrading","content":"#\n\n\nUpgrade with command#\n\nModern.js provides the upgrade command to support upgrading the project to the\nlatest version of Modern.js.\n\nRun the upgrade script in the project:\n\n\n\nYou can see that the dependencies in the project's package.json have been\nupdated to the latest version.\n\nTIP\n\nIf the upgrade command is not declared in the project's package.json, you can\nexecute npx modern upgrade as an equivalent alternative.\n\n\nUpgrade to a specified version#\n\nAll packages of Modern.js are currently released with a uniform version number.\n\nAccording to the Release Note on the official website, developers can also\nmanually upgrade the project to the desired version.\n\nTIP\n\nWhen upgrading, you need to upgrade all packages provided by Modern.js, instead\nof upgrading a single dependency.\n\n\nLock nested dependency#\n\nWhen a nested dependency of the project has a problem and Modern.js cannot be\nupdated immediately, you can use the package manager to lock the version of the\nnested dependency.\n\n\npnpm#\n\nFor projects using pnpm, add the following configuration to the package.json in\nthe root directory of the project, and then run pnpm install again:\n\n\n\n\nYarn#\n\nFor projects using Yarn, add the following configuration to the package.json in\nthe root directory of the project, and then run yarn install again:\n\n\n\n\nNpm#\n\nFor projects using Npm, add the following configuration to the package.json in\nthe root directory of the project, and then run npm install again:\n\n\n\nINFO\n\nFor Monorepo repositories, you can only lock dependency versions in the\npackage.json in the root directory of the project, and it will affect all\npackages in the Monorepo.","routePath":"/en/guides/get-started/upgrade","lang":"en","toc":[{"text":"Upgrade with command","id":"upgrade-with-command","depth":2,"charIndex":3},{"text":"Upgrade to a specified version","id":"upgrade-to-a-specified-version","depth":2,"charIndex":425},{"text":"Lock nested dependency","id":"lock-nested-dependency","depth":2,"charIndex":789},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":993},{"text":"Yarn","id":"yarn","depth":3,"charIndex":1152},{"text":"Npm","id":"npm","depth":3,"charIndex":1311}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":243,"title":"Extending Plugin Hooks","content":"#\n\nThis section describes how to extend plugin Hooks by dynamically registering\nHook models.\n\n\nExample#\n\nHere is a simple example to demonstrate how to extend plugin Hooks by adding\nHooks that manage console output.\n\nFirst, we initialize an empty project file and add basic dependencies:\n\n\n\n\nCreating Hooks#\n\nFirst, let's create a Hook model:\n\n\n\nthen register:\n\n\n\nadd Hook types:\n\n\n\n\nUsing Hooks#\n\nCreate a plugin and add command handling logic through the commands Hook\nfunction:\n\n\n\nnow config/plugin/myPlugin.ts is:\n\n\n\nThen add this plugin in modern.config.ts:\n\n\n\nNow, run npx modern message, and the related logic will be executed, but no\ninformation is collected, so the console output is empty.\n\nadd:\n\n\n\nadd to config:\n\n\n\nrun npx modern message, then we can get follow in console:\n\n\n\nBy using the above approach, you can extend plugin Hooks with various\ncapabilities.","routePath":"/en/guides/topic-detail/framework-plugin/extend","lang":"en","toc":[{"text":"Example","id":"example","depth":2,"charIndex":94},{"text":"Creating Hooks","id":"creating-hooks","depth":3,"charIndex":291},{"text":"Using Hooks","id":"using-hooks","depth":3,"charIndex":383}],"domain":"","frontmatter":{"sidebar_position":5},"version":""},{"id":244,"title":"Hook List","content":"#\n\nIn the Modern.js engineering system, there are three types of plugins: CLI,\nRuntime, and Server. Each type of plugin can utilize different Hooks.\n\nIn this chapter, all available Hooks are listed, and you can use the\ncorresponding Hook based on your needs.\n\n\nCLI Common Hooks#\n\nThe following are the common CLI Hooks that can be used in both Modern.js\nFramework and Modern.js Module.\n\n\nbeforeConfig#\n\n * Functionality: Running tasks before the config process\n * Execution phase: Before the config process\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example:\n\n\n\n\nconfig#\n\n * Functionality: Collect configuration\n * Execution phase: After parsing the configuration in modern.config.ts\n * Hook model: ParallelWorkflow\n * Type: ParallelWorkflow\n * Example:\n\n\n\nIf you need to set the configuration of the Modern.js Framework, please use the\nCliPlugin type exported by @modern-js/app-tools:\n\n\n\nThe configuration returned by the config hook will be collected and merged by\nModern.js, resulting in a NormalizedConfig. When merging configurations, the\npriority is as follows, from high to low:\n\n 1. Configuration defined by the user in the modern.config.* file.\n 2. Configuration defined by the plugin through the config hook.\n 3. Default configuration of Modern.js.\n\n\nprepare#\n\n * Functionality: Preparatory process for running the main process.\n * Execution phase: After configuration validation.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example:\n\n\n\n\nafterPrepare#\n\n * function: Running tasks after the prepare process\n * Execution Phase: After the prepare process\n * Hook model: AsyncWorkflow\n * type: AsyncWorkflow\n * Usage:\n\n\n\n\ncommands#\n\n * Functionality: Add new CLI commands for the commander.\n * Execution phase: After the prepare Hook has run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow<{ program: Command; }, void>\n * Example:\n\n\n\nMove the plugin to modern.config.ts:\n\n\n\nrun modern foo:\n\n\n\n\nbeforeExit#\n\n * Functionality: Reset some file states before exiting the process.\n * Execution phase: Before the process exits.\n * Hook model: Workflow\n * Type: Workflow\n * Example:\n\n\n\nTIP\n\nSince the callback function when exiting the process in Node.js is synchronous,\nthe type of beforeExit Hook is Workflow and cannot perform asynchronous\noperations.\n\n\nCLI Framework Hooks#\n\nThe following are the CLI Hooks of the framework, which can only be used in\nModern.js Framework and cannot be used in Modern.js Module.\n\nYou need to import the CliPlugin and AppTools types from @modern-js/app-tools to\nget accurate type hints for Hooks.\n\n\nbeforeDev#\n\n * Functionality: Tasks before running the main dev process.\n * Execution phase: Before the project starts when the dev command is run.\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow\n * Example:\n\n\n\n\nafterDev#\n\n * Function: Tasks to be executed after the main process of dev command\n * Execution stage: It is executed after each compilation is completed when\n   running the dev command\n * Hook model: AsyncWorkflow\n * Type: AsyncWorkflow<{ isFirstCompile: boolean }, unknown>\n * Example:\n\n\n\nafterDev will be executed after each compilation is completed, you can use the\nisFirstCompile param to determine whether it is the first compilation:\n\n\n\n\nbeforeBuild#\n\n * Function: A callback function triggered before executing production\n   environment builds. You can access the final configuration array of the\n   underlying bundler through the bundlerConfigs parameter.\n   * If the current bundler is webpack, you will get the webpack Compiler\n     object.\n   * If the current bundler is Rspack, you will get the Rspack Compiler object.\n   * The configuration array may contain one or multiple configurations,\n     depending on whether you have enabled features such as SSR.\n * Execution stage: Executed after running the build command and before the\n   actual build process begins.\n * Hook model: AsyncWorkflow.\n * Type:\n\n\n\n * Example:\n\n\n\n\nafterBuild#\n\n * Function: A callback function triggered after running the production build.\n   You can access the build result information through the stats parameter.\n   * If the current bundler is webpack, you will get webpack Stats.\n   * If the current bundler is Rspack, you will get Rspack Stats.\n * Execution stage: It is executed after running the build command and\n   completing the build.\n * Hook model: AsyncWorkflow.\n * Type:\n\n\n\n * Example:\n\n\n\n\nbeforeCreateCompiler#\n\n * Function: A callback function triggered before creating the underlying\n   Compiler instance, and you can get the final configuration array of the\n   underlying bundler through the bundlerConfigs parameter:\n   * If the current bundler is webpack, you will get the webpack Compiler\n     object.\n   * If the current bundler is Rspack, you will get the Rspack Compiler object.\n   * The configuration array may contain one or multiple configurations,\n     depending on whether you have enabled features such as SSR.\n * Execution stage: Executed before creating the Compiler instance when running\n   the dev or build command.\n * Hook model: AsyncWorkflow.\n * Type:\n\n\n\n * Example:\n\n\n\n\nafterCreateCompiler#\n\n * Function: A callback function triggered after creating a Compiler instance\n   and before executing the build. You can access the Compiler instance object\n   through the compiler parameter:\n   * If the current bundler is webpack, you will get the webpack Compiler\n     object.\n   * If the current bundler is Rspack, you will get the Rspack Compiler object.\n * Execution stage: Executed after creating the Compiler object.\n * Hook model: AsyncWorkflow.\n * Type:\n\n\n\n * Example:\n\n\n\n\nbeforePrintInstructions#\n\n * Function: Provides access to the log information that will be printed within\n   middleware functions and allows modification of the log information.\n * Execution stage: Executed before printing the log information.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ instructions: string }>\n * Example:\n\n\n\n\nmodifyEntryImports#\n\n * Function: Used for modifying or adding import statements in the generated\n   entry files.\n * Execution stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ imports: ImportStatement[]; entrypoint: Entrypoint; }>\n * Example:\n\n\n\n\nmodifyEntryExport#\n\n * Function: used to modify the export statement in the generated entry file\n * Execution stage: Before the entry file is generated, the prepare phase\n   triggers\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; exportStatement: string; }>\n * Example:\n\n\n\n\nmodifyEntryRuntimePlugins#\n\n * Function: Used for adding or modifying Runtime plugins in the generated entry\n   files.\n * Execution stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; plugins: RuntimePlugin[]; }>\n * Example:\n\n\n\n\nmodifyEntryRenderFunction#\n\n * Function: Used for modifying the render function in the generated entry\n   files.\n * Execution stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Example:\n\n\n\n\nmodifyFileSystemRoutes#\n\n * Function: Used for modifying the content of the generated front-end page\n   routing files, which must be serializable.\n * Execution stage: Executed before generating the front-end routing files,\n   triggered during the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; routes: Route[]; }>\n * Example:\n\n\n\nThis adds a new page route for the front-end.\n\n\nmodifyServerRoutes#\n\n * Function: Used for modifying the content of the generated server routes.\n * Execution stage: Executed before generating the server routing files,\n   triggered during the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ routes: ServerRoute[]; }>\n * Example:\n\n\n\n\nmodifyAsyncEntry#\n\n * Function: Used for modifying the asynchronous module that wraps the entry\n   file, see source.enableAsyncEntry.\n * Execution stage: Executed before generating the entry files, triggered during\n   the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; code: string; }>\n * Example:\n\n\n\n\nhtmlPartials#\n\n * Function: Used for customizing the generated HTML page template.\n * Execution stage: Triggered during the prepare stage.\n * Hook model: AsyncWaterfall\n * Type: AsyncWaterfall<{ entrypoint: Entrypoint; partials: HtmlPartials; }>\n * Example:\n\n\n\nThis adds a new Script tag to the HTML template.\n\n\nRuntime#\n\nNOTE\n\nThe Runtime plugin is currently not fully opened, and the API is not guaranteed\nto be stable. Use with caution.\n\nThe Runtime plugin is mainly used for developers to modify the component that\nneed to be rendered.\n\n\ninit#\n\n * Function: Executes App.init.\n * Execution stage: Rendering (SSR/CSR).\n * Hook model: AsyncPipeline\n * Type: AsyncPipeline<{ context: RuntimeContext; }, unknown>\n * Example:\n\n\n\n\nhoc#\n\n * Function: Modifies the components that need to be rendered.\n * Execution stage: Rendering (SSR/CSR).\n * Hook model: Pipeline\n * Type: Pipeline<{ App: React.ComponentType; }, React.ComponentType>\n * Example:\n\nNOTE\n\nWhen using the hoc hook, you need to copy the static properties of the original\nApp component to the new component and pass through the props.\n\n","routePath":"/en/guides/topic-detail/framework-plugin/hook-list","lang":"en","toc":[{"text":"CLI Common Hooks","id":"cli-common-hooks","depth":2,"charIndex":260},{"text":"`beforeConfig`","id":"beforeconfig","depth":3,"charIndex":-1},{"text":"`config`","id":"config","depth":3,"charIndex":-1},{"text":"`prepare`","id":"prepare","depth":3,"charIndex":-1},{"text":"`afterPrepare`","id":"afterprepare","depth":3,"charIndex":-1},{"text":"`commands`","id":"commands","depth":3,"charIndex":-1},{"text":"`beforeExit`","id":"beforeexit","depth":3,"charIndex":-1},{"text":"CLI Framework Hooks","id":"cli-framework-hooks","depth":2,"charIndex":2283},{"text":"`beforeDev`","id":"beforedev","depth":3,"charIndex":-1},{"text":"`afterDev`","id":"afterdev","depth":3,"charIndex":-1},{"text":"`beforeBuild`","id":"beforebuild","depth":3,"charIndex":-1},{"text":"`afterBuild`","id":"afterbuild","depth":3,"charIndex":-1},{"text":"`beforeCreateCompiler`","id":"beforecreatecompiler","depth":3,"charIndex":-1},{"text":"`afterCreateCompiler`","id":"aftercreatecompiler","depth":3,"charIndex":-1},{"text":"`beforePrintInstructions`","id":"beforeprintinstructions","depth":3,"charIndex":-1},{"text":"`modifyEntryImports`","id":"modifyentryimports","depth":3,"charIndex":-1},{"text":"`modifyEntryExport`","id":"modifyentryexport","depth":3,"charIndex":-1},{"text":"`modifyEntryRuntimePlugins`","id":"modifyentryruntimeplugins","depth":3,"charIndex":-1},{"text":"`modifyEntryRenderFunction`","id":"modifyentryrenderfunction","depth":3,"charIndex":-1},{"text":"`modifyFileSystemRoutes`","id":"modifyfilesystemroutes","depth":3,"charIndex":-1},{"text":"`modifyServerRoutes`","id":"modifyserverroutes","depth":3,"charIndex":-1},{"text":"`modifyAsyncEntry`","id":"modifyasyncentry","depth":3,"charIndex":-1},{"text":"`htmlPartials`","id":"htmlpartials","depth":3,"charIndex":-1},{"text":"Runtime","id":"runtime","depth":2,"charIndex":8637},{"text":"`init`","id":"init","depth":3,"charIndex":-1},{"text":"`hoc`","id":"hoc","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_position":8},"version":""},{"id":245,"title":"Hook Model","content":"#\n\nFirst, let's introduce some content about the basic plugin system in Modern.js,\nincluding the working mode of the Hook model, the operating mode of each Hook\nmodel, and the working mode of the Manager.\n\nEach Hook model is independent and can manage running functions independently.\n\n\nBasic Working Mode#\n\nTaking the Pipeline as an example, let's briefly introduce the working mode of\nthe Hook model. Let's take a look at a simple example:\n\n\n\nIn this example, a Pipeline is created on line 3. This means that when you run\nit, you need to pass in a number, and you will get a number as a result, the\ntype is:\n\n\n\nThe reason why there are only numbers here is because we created a Pipeline. If\nwe had created a Pipeline, then when we run it, we would pass in a number and\nget back a string. the type is:\n\n\n\nAfter creating a Pipeline, you can add functions using the use method (lines 5\nand 8). It is important to note that the order in which you add the functions is\nthe order in which they will run by default.\n\nWithin these functions, you can manipulate the count value and return a value.\nIf you call the next function, the next function in the pipeline will run. For\nexample, if you add three functions: A, B, and C, and you call next in function\nA, then function B will run. Similarly, if you call next in function B, then\nfunction C will run.\n\nIn the example above, the first function added on line 5 calls next, which\ncauses the second function added on line 8 to run. The return value of this\nfunction is the return value of the entire pipeline. If the first function does\nnot call next and simply returns a value, then the pipeline will return that\nvalue without running any other functions.\n\nFor example:\n\n\n\nIf the first function does not call next, the second function will not run and\nthe return value of the pipeline will be the return value of the first function.\n\nFinally, the way to run the Pipeline is simply to call pipeline.run().\n\n\nDifferences between different Hook models#\n\nThe above section describes the general working mode of the Pipeline, and the\nworking modes of other Hook models are similar. The main differences lie in the\nfunction type, execution order, and parameters.\n\n\nPipeline#\n\nThe example above describes the Pipeline, so we won't go into details here. In\nthe Pipeline category, there are two subcategories: Sync and Async, which manage\nfunctions of either Sync or Async type, respectively.\n\nINFO\n\nIf there are no functions in the Pipeline or all functions have called the next\nfunction, then you need to provide a value when running the Pipeline.\n\n\n\n:::\n\n\nWaterfall#\n\nThis model, as the name suggests, is characterized by the sequential passing of\nparameters, where the return value of the previous function becomes the input\nparameter of the next function. Let's look at an example::\n\n\n\nIn this example, a Waterfall type is created, which means that the input and\noutput types of this model are the same. In this case, both the input and output\ntypes are number, the type is:\n\n\n\nAt first glance, this example may seem to have the same functionality as the\nPipeline above, but there are some important differences to note. Firstly, the\nfunctions managed by Waterfall do not have a next function as the second\nargument, so they cannot modify the execution order by calling next within the\nfunction. Secondly, the input and output types of the functions must be the same\n(unlike in the Pipeline where they can be different).\n\nSimilarly to Pipeline, Waterfall has Sync and Async subcategories that\nrespectively manage Sync and Async functions.\n\n\nWorkflow#\n\nThis Hook model is different from the two Hook models above in that there is no\nstrong concept of passing parameters and return values in a sequential order. In\nthis model, each function runs independently based on the same input parameter.\n\nfor example:\n\n\n\nIn this example, two functions are added to the Workflow, so the result of\nrunning the Workflow is an array of the results of these two functions.\n\nAlthough there is no strong concept of passing parameters and return values in a\nsequential order in this model, there are still differences in the execution\norder. In the Workflow category, there are three subcategories: Sync, Async, and\nParallel.\n\nThe difference between them lies in the execution order of the functions. By\ndefault, they are all executed in the order they are added, but in Sync and\nAsync mode, the execution order is strictly based on the order in which they are\nadded, while in Parallel mode, a variant of Async mode, Promise.all is used to\nexecute all the functions, while in Async mode, await is used to wait for the\nprevious function to finish running.\n\n\nComparison of Hook models#\n\n\"Workflow\" and \"Waterfall\" are actually variants of the \"Pipeline\" model. While\nit's possible to implement \"Workflow\" and \"Waterfall\" using a specific writing\nstyle with \"Pipeline\", it can be more complicated with many implicit\nconventions. To make it easier to use, these two variants are provided to\nsatisfy specific use cases.","routePath":"/en/guides/topic-detail/framework-plugin/hook","lang":"en","toc":[{"text":"Basic Working Mode","id":"basic-working-mode","depth":2,"charIndex":286},{"text":"Differences between different Hook models","id":"differences-between-different-hook-models","depth":2,"charIndex":1950},{"text":"Pipeline","id":"pipeline","depth":3,"charIndex":2202},{"text":"Waterfall","id":"waterfall","depth":3,"charIndex":2593},{"text":"Workflow","id":"workflow","depth":3,"charIndex":3580},{"text":"Comparison of Hook models","id":"comparison-of-hook-models","depth":2,"charIndex":4677}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":246,"title":"Develop Plugins","content":"#\n\nThe previous section introduced the Hook models used by Modern.js plugins, while\nthis section describes how to develop plugins.\n\n\nImplementing a Plugin#\n\nA Modern.js plugin is an object that includes the following properties:\n\n * name: The name of the plugin, a unique identifier.\n * setup: The initialization function for the plugin, which only runs once. The\n   setup function can return a Hooks object, which Modern.js executes at\n   specific times.\n\n\n\nIn addition, plugins allow configuration of the execution order with other\nplugins. For more information, please refer to Plugin Relationship.\n\n\nPlugin Types#\n\nModern.js supports various types of project development, such as application\ndevelopment (Modern.js Framework), module development (Modern.js Module), etc.\n\nTo balance the differences and commonalities between various types of project\ndevelopment, Modern.js organizes plugins as shown in the following figure:\n\n\n\nAs shown in the figure, Modern.js roughly divides plugins into two categories:\n\n 1. Common plugins: Plugins that only include some basic Hooks.\n\n 2. Project plugins: Different project developments will extend their own Hooks,\n    Config, etc. on the basis of common plugins.\n\nWhen using TypeScript, you can import built-in types such as CliPlugin to\nprovide correct type inference for plugins.\n\n\n\nThe above code is a general-purpose plugin, containing only some basic Hooks.\nModern.js supports extending the definition of plugins through generics:\n\n\n\nIf you look closely at the type AppTools, you can see that AppTools consists of\n3 types.\n\n\n\nWhen writing plugins, plugins extend their own types like Hooks on different\nbases through generic extensions:\n\n\n\n\n\nPlease refer to Extending Hooks for detailed explanations.\n\n\nPlugin Configuration#\n\nIt is recommended to develop plugins in the form of functions, so that plugins\ncan receive configuration options through function parameters:\n\n\n\n\nPlugin API#\n\nThe setup function of a plugin receives an api parameter, and you can call some\nmethods provided on the api to get configuration, application context, and other\ninformation.\n\n\n\nFor more detail Plugin API.\n\n\nAsync setup#\n\nThe setup function of a CLI plugin can be an asynchronous function, which can\nexecute asynchronous logic during the initialization process.\n\n\n\nNote that the setup function of the next plugin is not executed until the async\nsetup function of the current plugin has finished. Therefore, you should avoid\nperforming time-consuming asynchronous operations in the setup function to avoid\nslowing down the startup performance of the CLI.\n\n\nAdding Plugins#\n\nCustom plugins can be used by following the instructions in the plugins section\nof the documentation. Below is the recommended way to implement plugins in\nModern.js.\n\n\nDeveloping Local Plugins#\n\nIt is recommended to write local plugins in the config/plugin directory and\nexport them using export default:\n\n\n\nregister plugin in modern.config.ts:\n\n\n\n\nPublishing a Plugin on npm#\n\nIf you want to publish your Modern.js plugin on npm, it's recommended to use the\nModern.js Module to manage and build the plugin.\n\nFirst, create an empty Modern.js Module project and adjust the package name:\n\n\n\nCreate plugin main file:\n\n\n\nAfter publishing, install it to the project you need to use pnpm add my-plugin,\ntake an application project as an example, and then add it in modern.config.ts:\n\n\n\nIf you find that there are currently unsatisfactory scenarios in Modern.js,\nwelcome to build the Modern.js ecosystem together by writing custom plugins.","routePath":"/en/guides/topic-detail/framework-plugin/implement","lang":"en","toc":[{"text":"Implementing a Plugin","id":"implementing-a-plugin","depth":2,"charIndex":132},{"text":"Plugin Types","id":"plugin-types","depth":3,"charIndex":603},{"text":"Plugin Configuration","id":"plugin-configuration","depth":3,"charIndex":1751},{"text":"Plugin API","id":"plugin-api","depth":3,"charIndex":1920},{"text":"Async setup","id":"async-setup","depth":3,"charIndex":2140},{"text":"Adding Plugins","id":"adding-plugins","depth":2,"charIndex":2588},{"text":"Developing Local Plugins","id":"developing-local-plugins","depth":3,"charIndex":2773},{"text":"Publishing a Plugin on npm","id":"publishing-a-plugin-on-npm","depth":3,"charIndex":2954}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":247,"title":"Introduction","content":"#\n\n\nModern.js Plugin System#\n\nModern.js offers a comprehensive plugin system with a complete lifecycle.\nPlugins can be used to extend different stages of project operation, request\nhandling, rendering, and more.\n\n\nUsage#\n\nPlugins must be explicitly registered in the configuration file to be effective.\nWhen you need to add plugins to Modern.js, you can configure them in the\n[plugins](/configure/app/plugins.html) field:\n\n\n\nNOTE\n\nNote that this configuration only supports adding Modern.js plugins and does not\nsupport adding Webpack plugins.\n\n\nOfficial Plugins#\n\nModern.js offers a range of official plugins, which are integrated with the\nModern.js generator. All the functionalities of the official plugins can be\nenabled by executing the new command. For instance, to enable the BFF (Backend\nFor Frontend) feature:\n\n\n\nAfter the selection is completed, the Modern.js generator will automatically\ninstall the corresponding plugins and third-party dependencies. Upon completion\nof the installation, you will see:\n\n\n\nAt this point, you can add the plugin to the configuration file according to the\noutput in the console.\n\n\nComposition#\n\nThe Modern.js plugin system is mainly divided into three parts: Hook model,\nManager, and Context Sharing Mechanism.\n\n * The Hook model is used to determine the execution logic of the current Hook.\n * The Manager controls the execution and scheduling of Hooks.\n * The Context Sharing Mechanism is used to pass information between different\n   Hooks.\n\nCurrently, Modern.js offers several different Hook models: Pipeline, Waterfall,\nWorkflow.\n\nNOTE\n\nSubsequent chapters will introduce the execution methods of each model in\ndetail.\n\nBased on the Hook model and Manager, Modern.js exposes three sets of plugins:\nCLI, Runtime, and Server.\n\nAmong them, the CLI plugin is the main running flow control model in Modern.js,\nand most of the features in Modern.js are mainly run through this set of models.\nThe Runtime plugin is mainly responsible for processing the rendering logic of\nReact components. The Server plugin is mainly used for controlling the server\nlifecycle and user requests.\n\n\nWhat Plugins Can Do#\n\nAll of Modern.js's features are implemented through this set of plugins, which\nmeans that all of Modern.js's capabilities are open to developers. Developers\ncan develop plugins to extend more functionality and adapt to complex scenarios,\nincluding but not limited to:\n\n * Registering commands\n * Modifying Modern.js configuration and validation schema\n * Modifying compilation configurations for Webpack/Babel/Less/Sass/Tailwind\n   CSS/...\n * Modifying the React components/elements to be rendered at runtime\n * Modifying page routing\n * Modifying server routing\n * Customizing console output\n * Customizing dynamic HTML templates\n * Customizing Node.js server frameworks\n * Customizing React component client/server rendering\n * ...\n\nWhen Modern.js does not currently cover the functionality or scenario that you\nneed, you can develop a custom plugin to implement the related functionality for\nadapting to special scenarios.","routePath":"/en/guides/topic-detail/framework-plugin/introduction","lang":"en","toc":[{"text":"Modern.js Plugin System","id":"modernjs-plugin-system","depth":2,"charIndex":3},{"text":"Usage","id":"usage","depth":2,"charIndex":213},{"text":"Official Plugins","id":"official-plugins","depth":2,"charIndex":545},{"text":"Composition","id":"composition","depth":2,"charIndex":1122},{"text":"What Plugins Can Do","id":"what-plugins-can-do","depth":2,"charIndex":2120}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":248,"title":"Lifecycle","content":"#\n\nModern.js application has a complete lifecycle, including CLI, Server Side and\nRuntime three stages.\n\nModern.js lifecycle is as follows:\n\nNOTE\n\nThe rectangle of the pink box represents the plugin hook provided by the\nModern.js, and the light yellow base color ellipse represents the linkage point\nwith the next stage.\n\n","routePath":"/en/guides/topic-detail/framework-plugin/lifecycle","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":249,"title":"Plugin API","content":"#\n\nThe setup function of the plugin will receive an api imported parameter, and you\ncan call some methods provided on the api to obtain information such as\nconfiguration and application context.\n\n\n\n\nAPI#\n\n\nuseConfigContext#\n\nUsed to retrieve the original configuration of the application.\n\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseResolvedConfigContext#\n\nUsed to retrieve the final configuration after parsing.\n\n\n\nPlease refer to Configuration for the specific meanings of configuration fields.\n\nTIP\n\nThis method returns a read-only configuration and cannot be modified. If you\nneed to modify the configuration, please use config hook.\n\n\nuseAppContext#\n\nUsed to retrieve the runtime context of the application.\n\n\n\nTIP\n\nSome fields in the AppContext are dynamically set and will change as the program\nruns. Therefore, when plugins read these fields at different times, they may get\ndifferent values.\n\n\nuseHookRunners#\n\nUsed to retrieve the executor of Hooks and trigger the execution of specific\nHooks.\n\n\n\nTIP\n\nPlease avoid executing the built-in hooks, as it may break the internal\nexecution logic of the framework.","routePath":"/en/guides/topic-detail/framework-plugin/plugin-api","lang":"en","toc":[{"text":"API","id":"api","depth":2,"charIndex":198},{"text":"useConfigContext","id":"useconfigcontext","depth":3,"charIndex":205},{"text":"useResolvedConfigContext","id":"useresolvedconfigcontext","depth":3,"charIndex":515},{"text":"useAppContext","id":"useappcontext","depth":3,"charIndex":825},{"text":"useHookRunners","id":"usehookrunners","depth":3,"charIndex":1088}],"domain":"","frontmatter":{"sidebar_position":6},"version":""},{"id":250,"title":"Relationship","content":"#\n\nThe plugin configuration object in Modern.js provides a series of fields to\ncontrol plugin order, mutual exclusion, and other capabilities. The available\nfields are as follows:\n\n * name: string, sets the name of the current plugin.\n * pre: string[], these plugins will be adjusted to be executed before the\n   current plugin.\n * post: string[], these plugins will be adjusted to be executed after the\n   current plugin.\n * rivals: string[], mutually exclusive plugins, an error will be thrown when\n   encountering these plugins.\n * required: string[], required plugins, an error will be thrown when the\n   corresponding plugin is not found in the plugin list.\n * usePlugin: CliPlugin[], registers other plugins.\n\nThe above parameters can be used to achieve plugin front, back, mutual\nexclusion, and mandatory logic.\n\n\nPlugin Sorting#\n\nModern.js plugins achieve plugin sorting functionality through the pre and post\nparameters.\n\n\nPre#\n\nBy default, plugins are executed in the order they are added. You can declare\npreceding plugins to be executed by using the pre field.\n\nFor example, there are the following two plugins:\n\n\n\n\n\nThe bar plugin configures the foo plugin in the pre field, so the'foo' plugin\nmust be executed before the bar plugin.\n\n\nPost#\n\nDeclare succeeding plugins to be executed by using the post field.\n\n\n\n\n\nIf you use the post parameter in the bar plugin's configuration and set it to\n['foo'], then the foo plugin will be executed after the bar plugin.\n\n\nrivals#\n\nThe rivals field can be used to declare a mutual exclusion relationship between\nplugins.\n\nthere are two plugin:\n\n\n\n\n\nThe bar plugin has been configured with the foo plugin in the rivals field,\ntherefore an error will be thrown if both the foo and bar plugins are added\nsimultaneously.\n\n\nrequired#\n\nThe required field can be used to declare a dependency relationship between\nplugins.\n\nthere are two plugin:\n\n\n\n\n\nThe bar plugin has been configured with the foo plugin in the required field.\nTherefore, an error will be thrown when using the bar plugin if the foo plugin\nis not configured.\n\n\nRegister Plugin#\n\nWhen there is a dependency relationship between plugins, we can also actively\nregister another plugin in a plugin by using usePlugin.\n\n\n\nWhen the user configures the bar plugin, the foo plugin will also be\nautomatically registered and activated. The user does not need to register the\nfoo plugin separately.","routePath":"/en/guides/topic-detail/framework-plugin/relationship","lang":"en","toc":[{"text":"Plugin Sorting","id":"plugin-sorting","depth":2,"charIndex":820},{"text":"Pre","id":"pre","depth":3,"charIndex":931},{"text":"Post","id":"post","depth":3,"charIndex":1248},{"text":"rivals","id":"rivals","depth":2,"charIndex":1475},{"text":"required","id":"required","depth":2,"charIndex":1771},{"text":"Register Plugin","id":"register-plugin","depth":2,"charIndex":2073}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":251,"title":"Configuration Parameters","content":"#\n\n@modern-js/create provides the --config parameter, which is used to specify the\nanswers to interactive questions in advance during the execution process.\n\nHere, we will introduce the fields and field values that can be configured in\nthe config under different scenario.\n\n\nGeneral Configuration#\n\n\nsolution#\n\nQuestion: Please select the type of project you want to create.\n\nOptions:\n\n * Web App -- mwa\n\n * Npm Module -- module\n\n * Doc Site -- doc\n\n * Monorepo -- monorepo\n\n\nscenes#\n\nQuestion: Please select the project scenario.\n\nOptions:\n\nList of plugin keywords when using custom generator plugins.\n\n\nWeb App#\n\n\nlanguage#\n\nQuestion: Please select the programming language.\n\nOptions:\n\n * TS -- ts\n\n * ES6+ -- js\n\n\npackageManager#\n\nQuestion: Please select the package manager.\n\nOptions:\n\n * pnpm -- pnpm\n\n * Yarn -- yarn\n\n * npm -- npm\n\n\nbuildTools#\n\nQuestion: Please select the bundler.\n\nOptions:\n\n * webpack -- webpack\n\n * Rspack -- rspack\n\n\nNpm Module#\n\n\npackageName#\n\nQuestion: Please fill in the project name.\n\nINFO\n\nThe value of the name field in the package.json file of the Npm module, which is\na string type.\n\n\nlanguage#\n\nQuestion: Please select the programming language.\n\nOptions:\n\n * TS -- ts\n\n * ES6+ -- js\n\n\npackageManager#\n\nQuestion: Please select the package manager.\n\nOptions:\n\n * pnpm -- pnpm\n\n * Yarn -- yarn\n\n * npm -- npm\n\n\nModern Doc#\n\n\npackageManager#\n\nQuestion: Please select the package manager.\n\nOptions:\n\n * pnpm -- pnpm\n\n * Yarn -- yarn\n\n * npm -- npm\n\n\nMonorepo#\n\n\npackageManager#\n\nQuestion: Please select the package manager.\n\nOptions:\n\n * pnpm -- pnpm\n\n * Yarn -- yarn\n\n * npm -- npm","routePath":"/en/guides/topic-detail/generator/create/config","lang":"en","toc":[{"text":"General Configuration","id":"general-configuration","depth":2,"charIndex":274},{"text":"solution","id":"solution","depth":3,"charIndex":299},{"text":"scenes","id":"scenes","depth":3,"charIndex":475},{"text":"Web App","id":"web-app","depth":2,"charIndex":604},{"text":"language","id":"language","depth":3,"charIndex":615},{"text":"packageManager","id":"packagemanager","depth":3,"charIndex":716},{"text":"buildTools","id":"buildtools","depth":3,"charIndex":839},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":945},{"text":"packageName","id":"packagename","depth":3,"charIndex":959},{"text":"language","id":"language-1","depth":3,"charIndex":1121},{"text":"packageManager","id":"packagemanager-1","depth":3,"charIndex":1222},{"text":"Modern Doc","id":"modern-doc","depth":2,"charIndex":1345},{"text":"packageManager","id":"packagemanager-2","depth":3,"charIndex":1359},{"text":"Monorepo","id":"monorepo","depth":2,"charIndex":1482},{"text":"packageManager","id":"packagemanager-3","depth":3,"charIndex":1494}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":252,"title":"CLI Options","content":"#\n\n@modern-js/create provides many configuration parameters to configure its\nbehavior during execution, which can be viewed using the --help parameter:\n\n\n\nThe following will provide a detailed introduction to these parameters:\n\n\n[projectDir]#\n\nThe project directory name.\n\nWhen executing @modern-js/create, a projectDir folder will be created in the\ncurrent directory by default, and the project will be initialized in this\nfolder. If this parameter is empty, the initialization project will be directly\ngenerated in the current directory.\n\nINFO\n\nIf the contents of the directory where projectDir is located are not empty, a\nprompt will be given whether to continue creating. It is recommended to perform\nproject initialization operations in an empty directory.\n\n\n--version#\n\nGet the version of the @modern-js/create tool.\n\n\n\n\n--lang #\n\nThe execution language, supports zh and en.\n\nBy default, @modern-js/create will automatically identify the user's system\nlanguage and choose to use Chinese or English. If the identification fails or\ndoes not meet usage habits, you can manually specify it using this parameter.\n\n\n-c, --config #\n\nSpecify the default project configuration.\n\nBy default, @modern-js/create will prompt for interactive questions such as\nlanguage selection and package managers during the execution process. When it is\nnecessary to specify these configuration contents in advance, they can be passed\nin through this field.\n\nThis field is a JSON string. For example, when specifying a package manager:\n\n\n\nSupported parameters for config can be found at Configuration Parameters。\n\n\n-d,--debug#\n\nDisplay debug logs.\n\nWhen encountering problems during use, you can use this parameter to display\ndebug logs, which is convenient for quickly locating the problem position and\ntroubleshooting.\n\n\n--mwa#\n\nQuickly create a Web App project.\n\n\n--module#\n\nQuickly create a Npm Module project.\n\n\n-p, --plugin #\n\nSpecify a generator plugin.\n\n@modern-js/create supports customizing the default project solution type of\nModern.js or adding project solution type scenarios using generator plugin. For\ndetails, please refer to Developing Generator Plugin.\n\n\n--generator #\n\nSpecify a micro-generator.\n\n@modern-js/create supports completely customizing the project generation process\nusing micro-generator.\n\n\n--dist-tag #\n\nSpecify the version of the generator and Modern.js-related dependencies.\n\nDuring the execution of @modern-js/create, a smaller micro-generator will be\nexecuted by default, and the latest version of the micro-generator will be used\nby default. This parameter can be used to specify the version number of the\nmicro-generator to be executed and the version of the installed\nModern.js-related dependencies.\n\nFor example, use the next version:\n\n\n\n\n--packages #\n\nSpecify specific package version dependencies when creating a project.\n\nIf you need to specify a specific package version when creating a project, you\ncan use this parameter. This parameter will configure pnpm.overrides (if the\npackage manager is pnpm) or resolutions to lock the package version number in\nthe package.json file in the project root directory.\n\nThe parameter value is a JSON string.\n\nFor example, specify the react version:\n\n\n\n\n--registry #\n\nSpecify the sub-generator to execute and the npm registry to fetch project\ndependencies version.\n\n\n--no-need-install#\n\nIgnore automatic installation of dependencies.\n\nBy default, @modern-js/create will automatically install dependencies after\ncreating a project. Using this parameter can ignore the installation of\ndependencies.\n\n\nclean-cache#\n\nThe @modern-js/create command generates sub-generators cache in the tmp\ndirectory of the execution machine by default to speed up the generator\nexecution. This command can be used to delete the cache when it needs to be\nrefreshed or when there are problems with the cache.\n\n","routePath":"/en/guides/topic-detail/generator/create/option","lang":"en","toc":[{"text":"[projectDir]","id":"projectdir","depth":2,"charIndex":228},{"text":"--version","id":"--version","depth":2,"charIndex":763},{"text":"--lang <lang>","id":"--lang-lang","depth":2,"charIndex":-1},{"text":"-c, --config <config>","id":"-c---config-config","depth":2,"charIndex":-1},{"text":"-d,--debug","id":"-d--debug","depth":2,"charIndex":1593},{"text":"--mwa","id":"--mwa","depth":2,"charIndex":1801},{"text":"--module","id":"--module","depth":2,"charIndex":1845},{"text":"-p, --plugin <plugin>","id":"-p---plugin-plugin","depth":2,"charIndex":-1},{"text":"--generator <generator>","id":"--generator-generator","depth":2,"charIndex":-1},{"text":"--dist-tag <distTag>","id":"--dist-tag-disttag","depth":2,"charIndex":-1},{"text":"--packages <packages>","id":"--packages-packages","depth":2,"charIndex":-1},{"text":"--registry <registry>","id":"--registry-registry","depth":2,"charIndex":-1},{"text":"--no-need-install","id":"--no-need-install","depth":2,"charIndex":3328},{"text":"clean-cache","id":"clean-cache","depth":2,"charIndex":3560}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":253,"title":"Usage","content":"#\n\nModern.js provides @modern-js/create tool for creating project templates\nprovided by Modern.js, including Web App, Npm Module.\n\nThe following will introduce how to use @modern-js/create.\n\n\nEnvironment Preparation#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 16.2.0. We recommend using the LTS version of\nNode.js 18.\n\nYou can check the currently used Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 16.2.0, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 18 LTS version via nvm:\n\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nCreate a Project with @modern-js/create#\n\nYou do not need to install @modern-js/create globally, just use npx to run it:\n\n\n\nINFO\n\n[projectDir] is the project directory name. If it is not filled in, the project\nwill be created in the current directory.\n\nDuring the execution, complete the interaction according to the prompt to create\na project that meets your requirements.\n\n\nCreate an Web APP Project#\n\n\n\n\nCreate an Npm Module Project#\n\n","routePath":"/en/guides/topic-detail/generator/create/use","lang":"en","toc":[{"text":"Environment Preparation","id":"environment-preparation","depth":2,"charIndex":191},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":218},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":926},{"text":"Create a Project with `@modern-js/create`","id":"create-a-project-with-modern-jscreate","depth":2,"charIndex":-1},{"text":"Create an Web APP Project","id":"create-an-web-app-project","depth":3,"charIndex":1439},{"text":"Create an Npm Module Project","id":"create-an-npm-module-project","depth":3,"charIndex":1470}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":254,"title":"Configuration Parameters","content":"#\n\nThe new command provides the --config parameter, which is used to specify the\nanswers to interactive questions in advance during the execution process.\n\nHere, we will introduce the fields and field values that can be configured in\nthe config under different scenario.\n\n\nGeneral Configuration#\n\n\nactionType#\n\nQuestion: Please select the operation you wants.\n\nOptions:\n\n * Create project element -- element\n\n * Enable features -- function\n\n * Automatic refactors -- refactor\n\n\nWeb App#\n\n\nelement#\n\nQuestion: Please select the type of element to create.\n\nOptions:\n\n * New \"entry\" -- entry\n\n * New \"Custom Web Server\" source code directory -- server\n\n\nname#\n\nQuestion: Please fill in the entry name.\n\nINFO\n\nThis configuration is required when creating a new application entry, and the\nconfiguration value is a string.\n\n\nfunction#\n\nQuestion: Please select the feature name.\n\nOptions:\n\n * Enable Rspack Build -- rspack\n\n * Enable Tailwind CSS -- tailwindcss\n\n * Enable BFF -- bff\n\n * Enable SSG -- ssg\n\n * Enable SWC Compile -- swc\n\n * Enable Micro Frontend -- micro_frontend\n\n * Enable Unit Test / Integration Test -- test\n\n * Enable UA-based Polyfill Feature -- polyfill\n\n * Enable Global Proxy -- proxy\n\n\nbffType#\n\nQuestion: Please select the BFF type\n\nOptions:\n\n * Function -- func\n\n * Framework -- framework\n\nINFO\n\nThis configuration is required when enabling the BFF function.\n\n\nframework#\n\nQuestion: Please select the framework.\n\nOptions:\n\n * Express -- express\n\n * Koa -- koa\n\nINFO\n\nThis configuration is required when enabling the BFF function.\n\n\nrefactor#\n\nQuestion: Please select the type of refactoring.\n\nOptions:\n\n * Use React Router v5 -- react_router_5\n\n\nNpm Module#\n\n\nfunction#\n\nQuestion: Please select the feature name.\n\nOptions:\n\n * Enable Unit Test / Integration Test -- test\n\n * Enable Tailwind CSS -- tailwindcss\n\n * Enable Storybook -- storybook\n\n * Enable Runtime API -- runtime_api","routePath":"/en/guides/topic-detail/generator/new/config","lang":"en","toc":[{"text":"General Configuration","id":"general-configuration","depth":2,"charIndex":272},{"text":"actionType","id":"actiontype","depth":3,"charIndex":297},{"text":"Web App","id":"web-app","depth":2,"charIndex":477},{"text":"element","id":"element","depth":3,"charIndex":488},{"text":"name","id":"name","depth":3,"charIndex":650},{"text":"function","id":"function","depth":3,"charIndex":818},{"text":"bffType","id":"bfftype","depth":3,"charIndex":1204},{"text":"framework","id":"framework","depth":3,"charIndex":1381},{"text":"refactor","id":"refactor","depth":3,"charIndex":1552},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":1666},{"text":"function","id":"function-1","depth":3,"charIndex":1680}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":255,"title":"CLI Parameters","content":"#\n\nThe new command provides many configuration parameters to configure its behavior\nduring execution, which can be viewed using the --help parameter:\n\n\n\nThe following will provide a detailed introduction to these parameters:\n\n\n--lang #\n\nThe language used for execution, supports zh and en.\n\nBy default, the new command will automatically recognize the user's system\nlanguage and choose to use Chinese or English. If recognition fails or does not\nmeet usage habits, this parameter can be used to manually specify it.\n\n\n-c, --config #\n\nSpecify the default configuration for the project.\n\nBy default, the new command will prompt interactive questions during the\nexecution process for selecting operation types, enabling features, etc. When it\nis necessary to specify these configuration contents in advance, they can be\npassed in through this field.\n\nThis field is a JSON string. For example, to specify the BFF framework:\n\n\n\nThe parameters supported by config can be viewed in Configuration Parameters。\n\n\n-d,--debug#\n\nDisplays debug logs.\n\nWhen encountering problems during use, this parameter can be used to display\ndebug logs, which is convenient for quickly locating the problem location and\ntroubleshooting the problem.\n\n\n--registry #\n\nSpecify the sub-generator to execute and the npm registry to fetch project\ndependencies version.\n\n\n--dist-tag #\n\nSpecify the generator version.\n\nDuring the execution process of the new command, smaller micro-generator will be\nexecuted by default, and the latest micro-generator version will be used by\ndefault. This parameter can be used to specify the version number of the\nmicro-generator to be executed.\n\nFor example, using the next version:\n\n","routePath":"/en/guides/topic-detail/generator/new/option","lang":"en","toc":[{"text":"--lang <lang>","id":"--lang-lang","depth":2,"charIndex":-1},{"text":"-c, --config <config>","id":"-c---config-config","depth":2,"charIndex":-1},{"text":"-d,--debug","id":"-d--debug","depth":2,"charIndex":1002},{"text":"--registry <registry>","id":"--registry-registry","depth":2,"charIndex":-1},{"text":"--dist-tag <distTag>","id":"--dist-tag-disttag","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":256,"title":"Usage","content":"#\n\nIn Web App, Npm Module and Monorepo projects, we provide the new command to\ncreate project elements, enable features and create sub-project.\n\n\nWeb App#\n\nWeb App projects use the new command provided by @modern-js/app-tools.\n\nThe new command provides three types of operations:\n\n * Create project elements\n\n * Enable optional features\n\n * Automatic refactoring\n\nEach type of operation provides a corresponding list of supported options, which\ncan be selected based on the project situation.\n\nFor example:\n\nCreate a new application entry:\n\n\n\nAfter running, a new folder with the corresponding name of the entry will be\ncreated in the src directory of the project, along with the default entry file.\nThe previous entry files under the src directory will be sorted into the folder\ncorresponding to the name field in package.json.\n\nEnable BFF function:\n\n\n\nAfter running, BFF-related dependencies will be installed in the project, and an\napi directory will be created for BFF module development, along with prompt\ninformation for registering BFF plugins.\n\nINFO\n\nWe did not automatically register the plugin for the user here because the\nmodern.config.[tj]s may change during the project lifecycle, and there may be\nproblems with mutual references between modules, so allowing the user to\nmanually register can ensure the correctness of modifying the configuration.\n\nIn subsequent customized development, if there are similar needs, you can also\nprovide users with operational guidance through prompts, allowing users to\nmanually operate on files.\n\nWARNING\n\nWhen running the new command, it may be necessary to enable a feature that is\nnot in the list. Check whether the corresponding plugin for the feature has been\ninstalled in the package.json file of the project. If you still need to use the\nnew command to enable it, you need to manually remove the plugin dependency\nfirst.\n\n\nNpm Module#\n\nNpm Module projects use the new command provided by @modern-js/module-tools.\n\nThe new command provides the ability to enable optional features.\n\nFor example:\n\nEnable Storybook capability:\n\n\n\nAfter running, Storybook plugin dependencies will be installed in the project,\nand the storybook command will be added. A stories directory will be created for\nStorybook module development, along with prompt information for registering\nStorybook plugins.","routePath":"/en/guides/topic-detail/generator/new/use","lang":"en","toc":[{"text":"Web App","id":"web-app","depth":2,"charIndex":145},{"text":"Npm Module","id":"npm-module","depth":2,"charIndex":1877}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":257,"title":"afterForged","content":"#\n\nafterForged is a lifecycle function used for other step operations after file\noperations in generator plugin.\n\n\nTypes#\n\n\n\n\nAPI#\n\nThe APIs provided by the api parameter will be introduced below.\n\n\nisInGitRepo#\n\nChecks whether the current project is a git repository.\n\n\ninitGitRepo#\n\nInitializes the current project as a git repository.\n\n\ngitAddAndCommit#\n\nCommits changes to the current repository.\n\nParameters:\n\n * commitMessage: commit message.\n\n\ninstall#\n\nInstalls dependencies in the root directory of the project. The install function\nwill use the corresponding package manager according to the value of\npackageManager to install dependencies.","routePath":"/en/guides/topic-detail/generator/plugin/api/afterForged","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":114},{"text":"API","id":"api","depth":2,"charIndex":125},{"text":"isInGitRepo","id":"isingitrepo","depth":3,"charIndex":198},{"text":"initGitRepo","id":"initgitrepo","depth":3,"charIndex":270},{"text":"gitAddAndCommit","id":"gitaddandcommit","depth":3,"charIndex":339},{"text":"install","id":"install","depth":3,"charIndex":450}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":258,"title":"context","content":"#\n\nThe generator plugin exports a function by default in the main file, and the\nfunction parameter is context. All APIs provided by the generator plugin are\nprovided by this context.\n\n\nTypes#\n\nLet's first understand the type definition of context:\n\n\n\nThe contents provided by context can be mainly divided into three categories:\n\n * Get the information of the current generator execution environment.\n\n * Operate input.\n\n * Generator plugin lifecycle function.\n\nThe generator plugin APIs will be introduced from these three categories below.\n\n\nGet Information#\n\nlocale#\n\nGets the language of the generator plugin execution environment.\n@modern-js/create provides two languages, zh and en, which correspond to these\ntwo values.\n\nisFileExist#\n\nChecks whether a file exists. We often need to confirm whether the target\nproject file exists before defining the operation. This API can be used directly\nfor this purpose.\n\nFor example, we need to find out if the package.json file exists and then do\nsomeing:\n\n\n\nreadDir#\n\nGets the file list in a folder. We often need to get the file list under the\ntarget project folder before defining the operation. This API can be used\ndirectly for this purpose.\n\nFor example, we need to get all files under the src folder and then do someing:\n\n\n\n\nInput Operations#\n\nThe key parameter used in input operations can refer to Configuration Parameters\nand use the key under the solution’s scheme, that is, it does not support\nsolution and scenes.\n\nThe input parameter in input operations corresponds to the schema type described\nin Input.\n\naddInputBefore#\n\nAdds a question before the specified input key.\n\nFor example:\n\n\n\naddInputAfter#\n\nAdds a question after the specified input key.\n\nFor example:\n\n\n\nINFO\n 1. The key for adding a question cannot be the same as the key of the question\n    provided by Modern.js solution scheme itself.\n 2. The priority of adding a question with addInputAfter is higher than that of\n    addInputBefore. When adding an After question to a key and adding a Before\n    question to the next key, the After question will be before the Before\n    question.\n 3. When adding multiple questions before or after the same key, this method can\n    be called multiple times, and the order of the questions will be arranged\n    according to the calling sequence.\n\nsetInput#\n\nSets the attributes of the specified input key.\n\nFor example, set the title attribute of packageName:\n\n\n\nINFO\n\nFor input options provided by Modern.js solution schemes, only deletion is\nsupported, and adding will cause logical judgment problems in the code.\n\nsetInputValue#\n\nSets the default value of the specified input key.\n\nFor example, set the default value of packageManager:\n\n\n\nINFO\n\nAfter setting, the question still needs to be interactive, but the default value\nconfigured by the generator plugin will be used.\n\nsetDefaultConfig#\n\nSets the default value of the specified input key.\n\nFor example, set the default value of packageManager:\n\n\n\nINFO\n\nAfter setting, the corresponding question will no longer be displayed, which is\nconsistent with the --config behavior specified by @modern-js/create. Does not\nsupport setting vertical and projectOrg.\n\nsetGitMessage#\n\nSets the initial git commit message. Modern.js defaults to the git\ninitialization commit message as feat: init, which can be modified by this\nfunction.\n\n\nLifecycle Functions#\n\nThe lifecycle functions are relatively complex and will be introduced separately\nin the following two sections, onForged and afterForged.","routePath":"/en/guides/topic-detail/generator/plugin/api/context","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":184},{"text":"Get Information","id":"get-information","depth":3,"charIndex":543},{"text":"locale","id":"locale","depth":4,"charIndex":561},{"text":"isFileExist","id":"isfileexist","depth":4,"charIndex":727},{"text":"readDir","id":"readdir","depth":4,"charIndex":1004},{"text":"Input Operations","id":"input-operations","depth":3,"charIndex":1277},{"text":"addInputBefore","id":"addinputbefore","depth":4,"charIndex":1565},{"text":"addInputAfter","id":"addinputafter","depth":4,"charIndex":1647},{"text":"setInput","id":"setinput","depth":4,"charIndex":2309},{"text":"setInputValue","id":"setinputvalue","depth":4,"charIndex":2579},{"text":"setDefaultConfig","id":"setdefaultconfig","depth":4,"charIndex":2841},{"text":"setGitMessage","id":"setgitmessage","depth":4,"charIndex":3176},{"text":"Lifecycle Functions","id":"lifecycle-functions","depth":3,"charIndex":3346}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":259,"title":"Input","content":"#\n\nGenerator plugin provides a way to interact with users through Input, which is\ndefined using JSON Schema:\n\nFor example:\n\n\n\nJSON Schema format is based on the open source Formily Schema format. The\nfollowing are the supported fields:\n\n\ntype#\n\nDefines the type of the current schema. Currently supported types are string,\nnumber, and object. string type is used for string inputs and dropdown options.\nobject type is used for nesting schemas and needs to be used with the properties\nattribute.\n\n\ntitle#\n\nDefines the display name of the current schema.\n\n\ndefault#\n\nDefines the default value of the current schema.\n\n\nenum#\n\nDefines the options when the current schema is a dropdown selection.\n\nThe sub-items support string or { label: string; value: string} types. When the\nvalue and display value are the same in the dropdown options, string can be used\ndirectly to define the options.\n\nWhen representing multiple selection options, set the default field to [].\n\n\nx-validator#\n\nDefines the validation rules for the current schema. When the schema is an input\ntype, validation will be automatically performed after input completion.\n\nThe validation rules supported here are provided by Formily, for example, the\nmaximum value is 5:\n\n\n\nIt also supports using validation functions directly:\n\n\n\n\nx-reactions#\n\nUse linkage between schemas. This is exactly the same as Formily linkage rules.\n\nFor example:\n\n\n\n\nproperties#\n\nOrganize the structure of the current schema and define sub-forms. properties is\nan object, where the key is the schema keyword and the value is a schema object\nas described above.","routePath":"/en/guides/topic-detail/generator/plugin/api/input","lang":"en","toc":[{"text":"type","id":"type","depth":2,"charIndex":237},{"text":"title","id":"title","depth":2,"charIndex":496},{"text":"default","id":"default","depth":2,"charIndex":554},{"text":"enum","id":"enum","depth":2,"charIndex":615},{"text":"x-validator","id":"x-validator","depth":2,"charIndex":963},{"text":"x-reactions","id":"x-reactions","depth":2,"charIndex":1291},{"text":"properties","id":"properties","depth":2,"charIndex":1403}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":260,"title":"onForged","content":"#\n\nonForged is a lifecycle function used for file operations in generator plugin.\n\n\nTypes#\n\n\n\nThe onForged parameter is a callback function with api and input as parameters,\nwhich are used to provide the APIs and current input information provided by the\nlifecycle function.\n\n\nConcepts#\n\n\nFile Types#\n\nThe generator plugin classifies files into four categories:\n\n * Text files\n\nFiles with pure text content that can be processed using Handlebars or EJS\ntemplates.\n\n * Binary files\n\nFiles such as images, audio, and video.\n\n * JSON files\n\nFiles in JSON format.\n\n * Text list files\n\nFiles composed of lines of text, such as .gitignore, .editorconfig, and .npmrc.\n\nThe type definitions for the four types of files are:\n\n\n\n\nAPI#\n\nThe APIs provided by the api parameter will be introduced below.\n\n\naddFile#\n\nAdds a single file.\n\nParameter types:\n\n\n\n * type: File type.\n * file: Target file path, relative to the target project directory.\n * template: Template content, the value of this field can be directly used to\n   render the file. Lower priority than templateFile.\n * templateFile: Template file path, relative to the templates directory.\n * force: Whether to force overwrite when the target file exists, default is\n   false.\n * data: Template rendering data.\n\nINFO\n\nText files are processed using Handlebars by default. If the template file ends\nwith .ejs, EJS will be used for template rendering.\n\nFor example, add the template file App.tsx.hanlebars to src/App.tsx:\n\n\n\n\naddManyFiles#\n\nAdds multiple files, usually used to add multiple files to the same target\ndirectory.\n\nParameter types:\n\n\n\n * type: File type.\n * destination: Target folder, relative path to the target project directory.\n * templateFiles: Template file list, supporting regular expressions from\n   globby.\n * templateBase: Common path of template files. When using this parameter, the\n   target file will automatically delete this path.\n * fileNameFunc: Function to rename files. During the file addition process, the\n   file name will be passed to this function in turn, and the renaming can be\n   performed as needed.\n * data: Template rendering data.\n\nFor example, render all files in the src-ts directory of the template file to\nthe src directory:\n\n\n\n\nupdateJSONFile#\n\nUpdate fields in a JSON file.\n\nParameter types:\n\n\n\n * fileName: JSON file path, relative to the target project path.\n * updateInfo: Update information. Nested field updates need to be flattened,\n   otherwise the entire update will cause content loss.\n\nFor example, update the name field of package.json:\n\n\n\nFor example, update the version of react-dom in dependencies:\n\n\n\n\nupdateTextRawFile#\n\nUpdate the contents of a text list file.\n\nParameter types:\n\n\n\n * fileName: Text list file path, relative to the target project path.\n * update: Update function. The parameter is an array divided by \\n of the\n   current file content, and the return value is also the modified array after\n   modification. @modern-js/create will automatically merge it with \\n and write\n   it to the source file.\n\nFor example, add the dist directory to the .gitinore file:\n\n\n\n\nupdateModernConfig (not recommended)#\n\nIn addition to configuring in modern.config.[tj]s, Modern.js configuration also\nsupports configuring modernConfig in package.json. This function is used to\nupdate this field.\n\nParameter types:\n\n\n\n * updateInfo: Update content information. updateModernConfig is a package based\n   on updateJSONFile, which will automatically update under the modernConfig\n   field. Only the configuration fields under modernConfig need to be filled in\n   updateInfo.\n\nFor example, enable SSR:\n\n\n\n\nrmFile#\n\nDelete files.\n\nParameter types:\n\n\n\n * fileName: The path of the file to be deleted, relative to the target project\n   path.\n\n\nrmDir#\n\nDelete a folder.\n\nParameter types:\n\n\n\n * dirName: The path of the folder to be deleted, relative to the target project\n   path.\n\n\naddHelper#\n\nAdd a custom helper rendered by handlebrs.\n\nParameter types:\n\n\n\n * name: Helper function name.\n * fn: Helper function implementation.\n\n\naddPartial#\n\nAdd a Partial rendered by Handlebars.\n\nParameter types:\n\n\n\n * name: Partial name.\n * str: Template string of the Partial.\n\n\ncreateElement#\n\nAutomatically run the new command to create project elements.\n\nParameter types:\n\n\n\n * element: Type of project element, new entry or new custom Web Server source\n   directory.\n * params: Other parameters corresponding to creating project elements.\n\n\nenableFunc#\n\nAutomatically run the new command to enable optional features.\n\nParameter types:\n\n\n\n * func: Name of the feature to enable.\n * params: Other parameters corresponding to enabling the feature.\n\nINFO\n\nRefer to Configuration Parameters for creating project elements and enabling\nfeature configurations.","routePath":"/en/guides/topic-detail/generator/plugin/api/onForged","lang":"en","toc":[{"text":"Types","id":"types","depth":2,"charIndex":83},{"text":"Concepts","id":"concepts","depth":2,"charIndex":276},{"text":"File Types","id":"file-types","depth":3,"charIndex":288},{"text":"API","id":"api","depth":2,"charIndex":719},{"text":"addFile","id":"addfile","depth":3,"charIndex":792},{"text":"addManyFiles","id":"addmanyfiles","depth":3,"charIndex":1473},{"text":"updateJSONFile","id":"updatejsonfile","depth":3,"charIndex":2228},{"text":"updateTextRawFile","id":"updatetextrawfile","depth":3,"charIndex":2618},{"text":"updateModernConfig (not recommended)","id":"updatemodernconfig-not-recommended","depth":3,"charIndex":3096},{"text":"rmFile","id":"rmfile","depth":3,"charIndex":3614},{"text":"rmDir","id":"rmdir","depth":3,"charIndex":3749},{"text":"addHelper","id":"addhelper","depth":3,"charIndex":3887},{"text":"addPartial","id":"addpartial","depth":3,"charIndex":4035},{"text":"createElement","id":"createelement","depth":3,"charIndex":4172},{"text":"enableFunc","id":"enablefunc","depth":3,"charIndex":4438}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":261,"title":"Creating Initial Project","content":"Introduction#\n\nThere are two types of generator plugin:\n\n * Extension: Web App(Npm Module) = Web App(Npm Module) + Generator Plugin\n\n * Custom: New Application(Npm Module) = Web App(Npm Module) + Generator Plugin\n\nIn simpler terms, extension means using the original project name of Modern.js,\nwhile custom means creating a new name.\n\n\nIdentifier#\n\nThe type of generator plugin is provided through the meta field in package.json:\n\n\nExtension#\n\n\n\n\nCustom#\n\n\n\nINFO\n\nFor custom type, the type field supports the custom value, which utilizes some\nbest practice templates for project development provided by Modern.js, such as\n.gitignore, .editorConfig, etc. Other business-related code templates need to be\nmanually provided through generator plugin.\n\n\nCreating Initial Project#\n\n\nExtension#\n\n\n\n\nCustom#\n\n\n\n\nExecution Order#\n\nGenerator plugins support using multiple plugins at the same time, which means\nthat multiple --plugin parameters are supported when executing\n@modern-js/create.\n\n\nExtension#\n\nFor extension generator plugins, when executing with the declared generator\nplugin parameters, the corresponding lifecycle functions of the project scheme\nthat is extended will be executed in order.\n\nFor example, if there are two generator plugins A and B, both of which extend\nthe Modern.js application scheme. A plugin declares to add the a.ts file, and B\nplugin declares to add the b.ts file. When executing npx\n@modern-js/create@latest --plugin A --plugin B, and selecting the Web APP\nscheme, the default project files of the Web APP will be generated first. Then,\nthe A plugin will create the a.ts file, and then the B plugin will generate the\nb.ts file.\n\n\nCustom#\n\nFor custom generator plugins, only one plugin can be executed at a time. When\ndeclaring the --plugin parameter for @modern-js/create, a selection option for\nthe scenario of choosing the project scheme will be added after selecting the\nproject scheme, which is the new name defined in the package.json. Choosing the\ncorresponding generator plugin for the name will execute the corresponding\ngenerator plugin logic after the default project scheme is completed. When\ndeclaring the --plugin parameter, the corresponding generator plugin names will\nbe listed one by one for selection in the project scheme scenario.","routePath":"/en/guides/topic-detail/generator/plugin/category","lang":"en","toc":[{"text":"Identifier","id":"identifier","depth":2,"charIndex":335},{"text":"Extension","id":"extension","depth":3,"charIndex":431},{"text":"Custom","id":"custom","depth":3,"charIndex":446},{"text":"Extension","id":"extension-1","depth":3,"charIndex":776},{"text":"Custom","id":"custom-1","depth":3,"charIndex":791},{"text":"Execution Order","id":"execution-order","depth":2,"charIndex":803},{"text":"Extension","id":"extension-2","depth":3,"charIndex":984},{"text":"Custom","id":"custom-2","depth":3,"charIndex":1658}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":262,"title":"Context","content":"#\n\nBy default, generator plugins will export a function that takes context as a\nparameter. During execution, context will be automatically injected into the\ngenerator plugin.\n\n\n\ncontext provides two types of APIs, which are used to customize input and define\ngenerator plugin lifecycle logic.\n\nINFO\n\nOnly some APIs are briefly explained below. For the complete API, please refer\nto Generator Plugin API.\n\n\nCustomize Input#\n\nBoth Modern.js Framework and Modern.js Module have default input interactions.\nThese APIs can be used to add, modify, hide, and provide default values for\nthese inputs.\n\nFor example:\n\n * Add question\n\n\n\n * Hide question by setting config\n\n\n\n\nLifecycle#\n\nGenerator plugin provide two lifecycle hooks to define generator plugin\nbehavior:\n\n * onForged: Lifecycle after file operations are completed.\n\n * afterForged: Lifecycle after the onForged hook function is executed.\n\n\nonForged#\n\nHook function after the Modern.js project scheme generator has completed file\noperations. It is used to complete file operations in the generator plugin, such\nas adding template files, overwriting existing files, deleting existing files,\netc.\n\nWhen multiple generator plugins are executed simultaneously for extension type,\nthe onForged operations of the corresponding generator plugins will be executed\nin order according to the declared order.\n\nThe onForged function takes a callback function as a parameter, with api and\ninput as arguments.\n\n\n\nThe api object provides file operation-related methods supported by generator\nplugin.\n\ninput is the current user input, which includes the --config parameter\ndefinition, the default scheme interaction, and the user input defined by the\ngenerator plugin.\n\nWhen adding a new file template, define the template file in the templates\ndirectory, and then operate on it through the api method above. The generator\nplugin defaults to operating on files in the templates directory, so there is no\nneed to declare the templates path.\n\n\nafterForged#\n\nExecuted after the onForged hook function is completed. It is mainly used to\ninstall dependencies, perform git operations, etc.\n\nBy default, Modern.js project scheme will install dependencies and initialize\nGit after completing file operations, and perform git initial submissions, etc.\nThis hook function can be omitted.\n\nFor custom generator plugins that also support the custom type, which only\nprovides a small number of best practice project configurations, installation of\ndependencies and Git initialization operations need to be completed in this hook\nfunction.\n\nThe afterForged function also takes a callback function as a parameter, with api\nand input as arguments.\n\n","routePath":"/en/guides/topic-detail/generator/plugin/context","lang":"en","toc":[{"text":"Customize Input","id":"customize-input","depth":2,"charIndex":405},{"text":"Lifecycle","id":"lifecycle","depth":2,"charIndex":665},{"text":"`onForged`","id":"onforged","depth":2,"charIndex":-1},{"text":"`afterForged`","id":"afterforged","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":263,"title":"Introduction and Project Creation","content":"#\n\n\nIntroduction#\n\nModern.js provides engineering solutions such as Web App and Npm Module. By\nusing the @modern-js/create tool, you can create initial project templates for\nengineering solutions. The initial project template provides a basic code\ndevelopment environment, simple example code, and configuration, etc.\n\nThe initial templates provided by Modern.js are generic and can meet some common\nproject development needs.\n\nWhen you use Modern.js deeply, you will inevitably find that each created\nproject will make some specific similar changes for its own project, such as\nmodifying example code, adding some configurations, enabling certain features,\netc.\n\nGenerator plugin can help you to deposit these specific changes for individuals\nor teams. When running npx @modern-js/create@latest, you only need to simply add\nthe --plugin parameter to avoid repetitive modification of the project after\neach project creation.\n\nGenerator plugin is based on the initial template projects provided by\nModern.js, providing methods to add, delete, and modify templates, and modifying\npackage.json, modernConfig configurations, and enabling features through a\nconvenient way.\n\n\nCreate Project#\n\nUse @modern-js/create to create a generator plugin project directly:\n\n\n\nAfter creating, we can take a look at the directory structure of this project:\n\n\n\nThe project is based on the Npm module project, and the core files are as\nfollows:\n\n\n\n\npackage.json#\n\nIn addition to the normal fields of a module project, package.json provides a\nmeta field to describe information about the generator plugin.\n\nGenerator plugin is divided into two categories: extension and custom. For\nspecific classification definitions, please refer to Type.\n\n\n\n\nsrc/index.ts#\n\nThis file is used to complete the content development of the generator plugin.\n\n\n\nThis file exports a function by default, and the function takes context as a\nparameter. The context object provides API methods supported by the generator\nplugin, which can be used to implement the logic of the generator plugin. The\ncapabilities provided by context can be found in context.\n\n\ntemplates#\n\nThe templates directory contains template files for the current customization\nmethod, supporting Handlebars and EJS formats. Different rendering engines will\nbe used for rendering according to the template file suffix. If there is no\nsuffix, the template file will be copied directly to the target directory.\n\nIf the template file is a js, ts, or json file, it is recommended to use the\n.handlebars or .ejs suffix directly to avoid project eslint errors and\nrecognition issues in Monorepo projects.\n\nThe .gitignore and .npmrc files in the template will be automatically deleted\nwhen publishing the npm package, so it is necessary to use the .handlebars or\n.ejs suffix to keep them.","routePath":"/en/guides/topic-detail/generator/plugin/structure","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Create Project","id":"create-project","depth":2,"charIndex":1170},{"text":"package.json","id":"packagejson","depth":2,"charIndex":1428},{"text":"src/index.ts","id":"srcindexts","depth":2,"charIndex":1723},{"text":"templates","id":"templates","depth":2,"charIndex":2113}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":264,"title":"Usage","content":"#\n\n@modern-js/create provides the --plugin parameter to run the generator plugin\nproject.\n\n--plugin supports three formats:\n\n\nAbsolute path#\n\nSuitable for local development and debugging. After development is completed,\nbuild the project by running npm run build in the generator plugin project, and\nthen use the following command for testing:\n\n\n\n\nRelative path#\n\nSuitable for local development and debugging or when the generator plugin\nproject and the target project to be created are in the same Monorepo and there\nis no need to publish an NPM package. After building the generator plugin\nproject, use the following command:\n\n\n\n\nNPM package#\n\nSuitable for scenarios where the generator project is published on npm for\nsharing.\n\n","routePath":"/en/guides/topic-detail/generator/plugin/use","lang":"en","toc":[{"text":"Absolute path","id":"absolute-path","depth":2,"charIndex":125},{"text":"Relative path","id":"relative-path","depth":2,"charIndex":347},{"text":"NPM package","id":"npm-package","depth":2,"charIndex":631}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":265,"title":"Introduction","content":"#\n\nMicro-frontend (MFE) is an architecture style similar to microservices. It is a\ncomposition of multiple independently delivered frontend applications, forming a\ncohesive whole. MFE decomposes frontend applications into smaller, simpler\napplications that can be developed, tested, and deployed independently while\nstill appearing as a cohesive single product to users.\n\nIt primarily addresses two problems:\n\n * Difficulty in maintaining large and complex applications as they evolve over\n   time.\n\n * Inefficiency caused by cross-team or cross-department collaboration in\n   project development.\n\n\nKeyword#\n\nIn the micro frontend, applications are divided into main application, and\nsub-applications.\n\n * Main application: The base project of the micro frontend project, all\n   sub-applications will be loaded by it.\n * Sub-application: An application developed and deployed independently will\n   eventually be loaded by the main application.\n\n\nFeatures#\n\n * Base on Garfish\n * Generator supports\n * Support React component-based reference micro-front-end sub-application\n * Support loading\n * Support main application online and sub-application offline debugging mode\n\nYou can learn how to develop a micro frontend master app in the section\nExperience micro frontend.","routePath":"/en/guides/topic-detail/micro-frontend/c01-introduction","lang":"en","toc":[{"text":"Keyword","id":"keyword","depth":2,"charIndex":599},{"text":"Features","id":"features","depth":2,"charIndex":946}],"domain":"","frontmatter":{"sidebar_position":1,"title":"Introduction"},"version":""},{"id":266,"title":"Development","content":"#\n\nThrough this chapter you can learn:\n\n * How to create the main application and sub-application of the micro frontend\n   project.\n * Basic process of micro frontend project development.\n\n\nCreate an app#\n\nThe routing modes of the current project are divided into the following three\ntypes:\n\n * File-based routing (router: true and file-based)\n * Self-Controlled routing (router: true and create BrowserRouter)\n * Other (router: false and independent installation of react-router-dom in the\n   project)\n\nFirst, clarify the routing mode of the main application create a file-based\nrouting main App or create a self-controlled main App\n\nIn this tutorial we will create two sub-applications Table and Dashboard for the\nmain application (Table is reduced routing, Dashboard is self-controlled\nrouting)\n\n\nFile-based Routing Main App#\n\nInitialize the project with a command line:\n\n\n\nAfter the project is created, we can enable the micro frontend through pnpm run\nnew:\n\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\n\n\nThen we create two new directories in the routes folder\n\n * table (for loading conventional routing sub-applications)\n * dashboard (for loading self-controlled routing sub-applications)\n\nIn these two directories, we need to create a $.tsx file as the entry of the\nmain application convention route ($represents fuzzy match, that is, /table and\n/table/test will match this $.tsx as the entry file of the route, which will\nensure that the sub-application route is loaded correctly in the micro frontend\nscenario)\n\nLoad file-base routing sub-app#\n\n\n\nLoad self-controlled routing sub-app#\n\n\n\nroute link#\n\nAt this time, the main application configuration has been completed, and the\nsub-application can be loaded through the route, and the layout.tsx of the main\napplication can be modified to jump to the route:\n\n\n\n\nSelf-Controlled Main App#\n\nInitialize the project with a command line:\n\n\n\nAfter the project is created, we can enable the micro frontend function through\npnpm run new:\n\n\n\nNext, let's register the micro frontend plugin and add the main micro frontend\napp and add the list of sub-apps:\n\n\n\nSince it is a self-controlled route, we delete the routes/ folder and add the\nApp.tsx file in the src/ directory. If you use a non-MApp component here, you\nneed to use the createBrowserRouter API of '=React Router v6 to create routes.\n\nLoad sub-app#\n\n\n\n\nOther Main App#\n\nInstall and use react-router-dom independently in the project. The only\ndifference from self-controlled routing is that after setting router: false,\nplugin-garfish cannot obtain useLocation, useHref and other hooks to assist in\ncalculating basename and main and child applications. Route synchronization\n\n\nFile-based sub-app#\n\nInitialize the project with a command line:\n\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\n\n\nadd src/routes/page.tsx:\n\n\n\n\nSelf-controlled sub-app#\n\nInitialize the project with a command line:\n\n\n\nAfter create sub-app. We execute pnpm run new to enable the micro frontend\nfunction:\n\n\n\nNext, let's register the micro frontend plugin and modify modern.config.ts to\nadd the configuration of the micro frontend sub-app deploy.microFrontend:\n\n\n\nSelf-controlled routing needs to delete the routes/ folder and create a new\nApp.tsx in the src/ directory.\n\nAnd add code in src/App.tsx, note that you need to parse from props and pass\nbasename to BrowserRouter.\n\n\n\n\nDebug#\n\nStart the application by executing the pnpm run dev command in the directory in\nsequence:\n\n * masterApp http://localhost:8080\n * table subapplication (conventional routing) http://localhost:8081\n * dashboard subapplication (self-controlled routing) http://localhost:8082\n\nAccess the main application address http://localhost:8080\n\nAfter completing the experience of the overall development process of micro\nfrontend, you can learn more about how to develop the main application.\n\n\nFAQ#\n\nGarfish issue: https://www.garfishjs.org/issues/","routePath":"/en/guides/topic-detail/micro-frontend/c02-development","lang":"en","toc":[{"text":"Create an app","id":"create-an-app","depth":2,"charIndex":189},{"text":"File-based Routing Main App","id":"file-based-routing-main-app","depth":3,"charIndex":799},{"text":"Load file-base routing sub-app","id":"load-file-base-routing-sub-app","depth":4,"charIndex":1592},{"text":"Load self-controlled routing sub-app","id":"load-self-controlled-routing-sub-app","depth":4,"charIndex":1627},{"text":"route link","id":"route-link","depth":4,"charIndex":1668},{"text":"Self-Controlled Main App","id":"self-controlled-main-app","depth":3,"charIndex":1892},{"text":"Load sub-app","id":"load-sub-app","depth":4,"charIndex":2415},{"text":"Other Main App","id":"other-main-app","depth":3,"charIndex":2433},{"text":"File-based sub-app","id":"file-based-sub-app","depth":3,"charIndex":2756},{"text":"Self-controlled sub-app","id":"self-controlled-sub-app","depth":3,"charIndex":3096},{"text":"Debug","id":"debug","depth":2,"charIndex":3628},{"text":"FAQ","id":"faq","depth":2,"charIndex":4117}],"domain":"","frontmatter":{"sidebar_position":2,"title":"Development"},"version":""},{"id":267,"title":"Develop Main App","content":"#\n\nIn the previous Experience micro frontend, an example was used to demonstrate\nhow to create and configure micro frontend sub-applications. Through this\nchapter, you can further understand how to develop the main application, and its\ncommon configuration.\n\nAfter creating an Modern.js project through the @modern-js/create command, you\ncan execute pnpm run new in the project (the modern new command is actually\nexecuted). After selecting the 「micro frontend」 mode, the micro frontend will be\ninstalled. Dependencies, just register the plugin manually.\n\n\n\n\nRegister Sub-app#\n\nWhen the information is provided on the masterApp configuration, the application\nwill be considered the main application. At present, there are two configuration\nmethods for sub-app information, and these two methods are applied to different\nscenarios.\n\n\nRegister sub-app info directly#\n\nYou can register the sub-application information directly through the\nconfiguration:\n\nTIP\n\nIt can be configured at runtime via the API defineConfig.\n\nWhen the parameter is a function, it cannot be serialized to the output code, so\nplease configure it through defineConfig when it comes to configuration such as\nfunctions\n\n\n\n\nCustom remote app list#\n\nThis function allows you to pull a list of remote child applications and\nregister them with the runtime framework:\n\n\n\n\nRenderer sub-app#\n\nThere are two ways to load sub-app in micro frontend:\n\n 1. **Sub-app component ** Get the components of each sub-app, and then you can\n    render the sub-app of micro frontend just like using ordinary'React\n    'components.\n 2. Centralized routing Through centralized routing configuration, the\n    corresponding sub-app of rendering is automatically activated according to\n    the current page pathname.\n\n\nSub-app component#\n\nDevelopers can use the useModuleApps method to obtain the components of each\nchild application.\n\nThrough the combined use of the router component, developers can autonomously\nrender different sub-applications according to different routes.\n\nSuppose our subapp list is configured as follows:\n\n\n\nApp.tsx as follow:\n\n\n\nHere, the activation route of Table is customized as /table through the Route\ncomponent, and the activation route of Dashboard is /dashboard.\n\n\nCentralized routing#\n\nCentralized Routing is a way to centrally configure active routes for subapps.\nWe enable Centralized Routing by adding an activeWhen field to the subapp list\ninformation.\n\n\n\nUse useModuleApp api in Main App, get MApp component and then render it\n\n\n\nAfter starting the application in this way, accessing the '/table' route will\nrender the'Table 'sub-application, and accessing the'/dashboard 'route will\nrender the'Dashboard' sub-application.\n\n\nMix Mode#\n\nOf course, sub-application components and centralized routing can be mixed.\n\n * One molecular application is activated as a sub-application component, and\n   the other part is activated as a centralized routing.\n * A molecular application can be activated either as a centralized routing or\n   as a sub-application component.\n\n\nLoading#\n\nBy configuring the loadable configuration, loading components can be added for\n「centralized routing」 and 「sub-applicati」, and errors, timeouts, flashes, etc.\ncan be considered, so as to provide users with a better user experience. The\ndesign and implementation of this function refer to react-loadable, and the\nbasic functions are similar.\n\n\n\nAdd Error Status#\n\nWhen the micro-frontend sub-application fails to load or render, the loading\ncomponent will receive the error parameter (if there is no error, the error is\nnull).\n\n\n\nAvoid Loading Flash Back#\n\nSometimes the display time of the loading component may be less than 200ms, and\nthe loading component will flash back at this time. Many user studies have\nproved that the loading flash back situation will cause the user to perceive\nthat the loading content takes longer than the actual time.\n\nWhen loading is less than 200ms, if the content is not displayed, the user will\nthink it is faster.\n\nTherefore, the loading component also provides the pastDelay parameter, which\nwill only be true when it exceeds the set delay display. You can set the delay\nduration through the delay parameter.\n\n\n\nThe default value of delay is 200ms, you can set the delay display time through\ndelay in loadable.\n\n\n\nAdd Timeout State#\n\nSometimes because of the network, the micro-front-end sub-application fails to\nload, resulting in the loading state being displayed all the time, which is very\nbad for users, because they don't know the right response to get a specific\nresponse, whether they need to refresh the page, by Increasing the timeout state\ncan solve this problem well.\n\nThe loading component will get the timeOut parameter when timeout, when the\nmicro frontend application loads timeout, it will get the timeOut property value\nof true.\n\n\n\nThe timeout state is off and can be enabled by setting the timeout parameter in\nloadable:\n\n","routePath":"/en/guides/topic-detail/micro-frontend/c03-main-app","lang":"en","toc":[{"text":"Register Sub-app","id":"register-sub-app","depth":2,"charIndex":558},{"text":"Register sub-app info directly","id":"register-sub-app-info-directly","depth":3,"charIndex":832},{"text":"Custom remote app list","id":"custom-remote-app-list","depth":3,"charIndex":1190},{"text":"Renderer sub-app","id":"renderer-sub-app","depth":2,"charIndex":1334},{"text":"Sub-app component","id":"sub-app-component","depth":3,"charIndex":1760},{"text":"Centralized routing","id":"centralized-routing","depth":3,"charIndex":2240},{"text":"Mix Mode","id":"mix-mode","depth":3,"charIndex":2706},{"text":"Loading","id":"loading","depth":3,"charIndex":3045},{"text":"Add Error Status","id":"add-error-status","depth":4,"charIndex":3398},{"text":"Avoid Loading Flash Back","id":"avoid-loading-flash-back","depth":4,"charIndex":3583},{"text":"Add Timeout State","id":"add-timeout-state","depth":4,"charIndex":4304}],"domain":"","frontmatter":{"sidebar_position":3,"title":"Develop Main App"},"version":""},{"id":268,"title":"Communicate","content":"#\n\n\nProps#\n\nIn Modern.js, the sub-application will be wrapped into a React component, and\nthe purpose of communicating between the main application and the\nsub-application can be achieved directly by passing'props' to the React\ncomponent.\n\n\n\n\n\nThe child application will print {count: 0}. Currently, child application\nrendering responsiveness is not supported. Changing the data of'count 'on the\nmain application in time will not trigger a view update\n\n\nchannel#\n\n[Garfish.channel] (https://www.garfishjs.org/api/channel) Used for communication\nbetween applications. It is an instance of EventEmitter2.\n\n","routePath":"/en/guides/topic-detail/micro-frontend/c04-communicate","lang":"en","toc":[{"text":"Props","id":"props","depth":2,"charIndex":3},{"text":"channel","id":"channel","depth":2,"charIndex":453}],"domain":"","frontmatter":{"sidebar_position":4,"title":"Communicate"},"version":""},{"id":269,"title":"Mixed Stack","content":"#\n\nThe Modern.js micro frontend scheme is based on the Garfish package and provides\nsome more out-of-the-box usage.\n\nWhen your main application and sub-application are not all Modern.js\napplications, you can refer to this document.\n\n 1. The sub-app is Modern.js, the native Garfish micro frontend used by the main\n    app.\n 2. The main application is Modern.js, and some sub-applications have other\n    technology stacks.\n\n\nModern.js Sub App#\n\nModern.js subapps compile to generate a standard Garfish subapp export. So you\ncan directly access the standard micro frontend main application.\n\nINFO\n\nThe child application is Modern.js, when the main application uses the native\nGarfish micro frontend, the child application debugging mode is not available.\n\n\nModern.js Main App#\n\nThe Main App is Modern.js, and other technology stacks used by sub-applications.\nSub-App can be developed according to Garfish Sub-Application Standard.","routePath":"/en/guides/topic-detail/micro-frontend/c05-mixed-stack","lang":"en","toc":[{"text":"Modern.js Sub App","id":"modernjs-sub-app","depth":2,"charIndex":423},{"text":"Modern.js Main App","id":"modernjs-main-app","depth":2,"charIndex":754}],"domain":"","frontmatter":{"sidebar_position":5,"title":"Mixed Stack"},"version":""},{"id":270,"title":"Automatically Actions","content":"#\n\nIn the Quick Start, we implemented the simplest counter model, which still\nrequired 10 lines of code. In fact, Modern.js supports automatically generating\ncommonly used actions based on the declared state type, which reduces the amount\nof boilerplate code. The currently supported types are:\n\n * Primitive data types\n * Array types\n * Simple object types (Plain Object)\n\n\nPrimitive data types#\n\n\n\nAs shown above, we only need one line to create a simple countModel. Here's an\nexample code that uses the model:\n\n\n\n\nArray Types#\n\nWhen the state is an array type, an example code for automatically generating\nactions is shown below:\n\n\n\nWe can use the methods of the JavaScript Array object to modify the state.\n\n\nSimple Object Types#\n\nWhen the state is a simple object type, an example code for automatically\ngenerating actions is shown below:\n\n\n\nThree different fields a, b, and c each generate setA, setB, and setC actions,\nrespectively.\n\nINFO\n\nWhen the user-defined action and the action automatically generated by Modern.js\nhave the same name, the user-defined action takes precedence. For example, if\nsetA action is already defined in countModel, calling actions.setA() executes\nthe user-defined setA.\n\nAdditional Information\n\nFor more information on related APIs, please refer to here.","routePath":"/en/guides/topic-detail/model/auto-actions","lang":"en","toc":[{"text":"Primitive data types","id":"primitive-data-types","depth":2,"charIndex":374},{"text":"Array Types","id":"array-types","depth":2,"charIndex":516},{"text":"Simple Object Types","id":"simple-object-types","depth":2,"charIndex":712}],"domain":"","frontmatter":{"sidebar_position":6,"title":"Automatically Actions"},"version":""},{"id":271,"title":"Derived State","content":"#\n\nIn some scenarios, components need to perform further calculations on the State\nin Model before they can be used in the components. This logic can be directly\nwritten in the component or implemented through derived states in Model. Derived\nstates are defined under the computed field in the Model. Depending on the\ndependencies of the Model and the return type, there are three ways to define\nderived states.\n\n\nOnly Depend on the Model's Own State#\n\nThe derived state only depends on the current Model's State, which is passed as\nthe first parameter to the derived state's definition function.\n\nFor example, the todo application has items and filter in its State, and filter\nis used to filter the todo items displayed on the current page. Therefore, we\ndefine a visibleTodos derived state that can be directly used in the component.\nThe sample code is as follows:\n\n\n\nDerived state will eventually be merged with the Model's State, so the derived\nstate can be accessed through the Model's State object. For example, the\nvisibleTodos can be used in the component as follows:\n\n\n\n\nDependent State from Other Models#\n\nIn addition to depending on the current model's state, derived states may also\ndepend on the state of other models. In this case, the definition format for the\nderived state is:\n\n\n\nThe following example demonstrates how the derived state combinedValue of\nbarModel depends on the state of fooModel.\n\n\n\n\nDerived State with Function Type#\n\nDerived states can also return a function. In this case, the definition format\nfor the derived state is:\n\n\n\nAssuming the filter state is not stored in the state of the todo app, but is\ninstead used directly in the component, visibleTodos can be a function type\nvalue. This function receives the filter parameter when used in the component,\nas shown below:\n\n\n\nAdditional Reference\n\nUsing Models","routePath":"/en/guides/topic-detail/model/computed-state","lang":"en","toc":[{"text":"Only Depend on the Model's Own State","id":"only-depend-on-the-models-own-state","depth":2,"charIndex":413},{"text":"Dependent State from Other Models","id":"dependent-state-from-other-models","depth":2,"charIndex":1079},{"text":"Derived State with Function Type","id":"derived-state-with-function-type","depth":2,"charIndex":1417}],"domain":"","frontmatter":{"sidebar_position":4,"title":"Derived State"},"version":""},{"id":272,"title":"Define Model","content":"#\n\nIn the previous section, we demonstrated how to create a Model for a simple\ncounter application. In this section, we will provide a detailed introduction on\nhow to create a Model.\n\nWe can create a Model using the model API. For example, model('foo') creates a\nModel named foo. We can define the State and Actions included in the Model by\ncalling the define function returned by model('foo'):\n\n\n\nINFO\n * Actions in the Model cannot contain side-effect logic, such as requesting\n   HTTP interfaces, accessing localStorage, etc.\n * setValue directly modifies the input State, which seems to violate the\n   definition of a pure function. However, Reduck uses immer internally to\n   modify immutable objects, ensuring that this approach does not affect the\n   immutability of the object, so setValue is still a pure function. Of course,\n   you can also return a new object directly in the Action, but this approach\n   will be more complex.\n\nThe define function only describes the original structure of the Model,\nincluding the internally defined State, Actions, and so on. The fooModel\nreturned by define is the actual Model object that is created. For example,\nalthough setValue has two parameters, when we call the setValue Action, we only\nneed to pass in the payload parameter, because we are calling the Action method\non fooModel, not the one described in the original structure of the Model. For\nmore information, please refer to Using Models.\n\nIn addition to object-type parameters, define can also receive function-type\nparameters. For example:\n\n\n\nWhen defining a Model using a function, the function automatically receives two\nparameters: context and utils. context is the context object of Reduck, which\ncan obtain the store object, and utils provides a set of utility functions to\nfacilitate the implementation of complex features such as Model communication.\n\nModels support duplication. For example:\n\n\n\nbarModel is a new Model object created based on fooModel. Analogous to the\nconcepts in object-oriented programming languages, barModel and fooModel are two\ninstance objects created based on the same class. When the state management\nlogic of two modules is the same, for example, two tab modules in the same page\nuse the same data structure and logic, but the difference is that they obtain\ndata from different interfaces, then you can create two different Model objects\nby duplicating the Model.\n\nAdditional Information\n\nFor detailed definitions of the APIs mentioned in this section, please refer to\nhere.","routePath":"/en/guides/topic-detail/model/define-model","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_position":2,"title":"Define Model"},"version":""},{"id":273,"title":"FAQ","content":"#\n\n\nBrowser Compatibility#\n\nThe compiled build artifacts of Reduck use ES6 syntax by default. If you need to\nsupport older versions of browsers, please include all packages under the\n@modern-js-reduck namespace in your application's build process.\n\nAdditional Information\n\nReduck uses @babel/preset-env with specific configurations.\n\n\nAccessing the Main Application Model from a Microfrontend Sub-Application Model#\n\nWhen a microfrontend sub-application model accesses the main application model\nand the model has not yet been mounted on the main application, it will be\nautomatically mounted on the sub-application.\n\nExample:\n\n\n\n\n\nTo avoid accidental downgrades, it is recommended to pre-mount the model that\nthe main application needs to share:\n\n","routePath":"/en/guides/topic-detail/model/faq","lang":"en","toc":[{"text":"Browser Compatibility","id":"browser-compatibility","depth":2,"charIndex":3},{"text":"Accessing the Main Application Model from a Microfrontend Sub-Application Model","id":"accessing-the-main-application-model-from-a-microfrontend-sub-application-model","depth":2,"charIndex":334}],"domain":"","frontmatter":{"sidebar_position":13,"title":"FAQ"},"version":""},{"id":274,"title":"Management Effect","content":"#\n\nThe actions in the model must be pure functions and cannot have any side effects\nduring execution. However, in real-world scenarios, we often encounter many side\neffects, such as: requesting data from an HTTP API to obtain state data, or\nmodifying localStorage or sending events while updating the state. In Reduck,\nside effects are managed through the model's effects function.\n\n\nModifying State via Side Effects#\n\nThe most common scenario in which side effects modify the state is requesting\ndata from an HTTP API to update state data.\n\nLet's take a simple todoModel as an example. It has a side effect function load\nthat requests the TODO list from a remote server. After the request succeeds, it\nupdates the state.items field.\n\n\n\nThe side effect function is uniformly defined under the effects field. Here we\nhave written a load function that returns a Promise. After the Promise is\nsuccessfully executed, it returns the TODO list [\"Lerna Modern.js\"].\n\nSide effect functions need to work with actions to modify state. Therefore, we\ndefine a load object in actions (the name needs to be consistent with the name\nof the side effect function under effects), which includes three actions\n(pending, fulfilled, rejected) that handle the three states (pending, fulfilled,\nrejected) of the Promise returned by the side effect function load:\n\n * pending: Receives the current state state as a parameter and sets the loading\n   flag to true in the new state.\n * fulfilled: Receives the current state state and the Promise fulfilled value\n   items as parameters, and sets items to the parameter items and loading to\n   false in the new state.\n * rejected: Receives the current state state and the Promise rejected error\n   error as parameters, and sets error to the parameter error and loading to\n   false in the new state.\n\nHow do we call the effects function in the component? The effects function will\nbe merged into the actions object, so you can call the effects function through\nthe actions object, as shown below:\n\n\n\nIn the example above, the three actions pending, fulfilled, and rejected are\ngenerally required for HTTP requests used to obtain data. Reduck provides a\nutility function handleEffect to simplify the creation of actions in this\nscenario.\n\nFor this type of side effect scenario, handleEffect stipulates that the state\nstructure of the model contains three fields: result, error, and pending, with\ninitial values of:\n\n\n\nCalling handleEffect will return the following data structure:\n\n\n\nThis data structure is the same as the data structure of the load object under\nactions. The object returned by handleEffect actually corresponds to the three\nactions required by the Effects function.\n\nWe can use handleEffect to rewrite todoModel:\n\n\n\nThe handleEffect function sets result to items in the received parameter object.\nBecause todoModel uses items as the key to save the TODO list data instead of\nusing the default result as the key of handleEffect, configuration is required\nhere.\n\nIt is obvious that the todoModel implemented through handleEffect is much more\nconcise than the previous implementation.\n\nIf you do not want all three states (pending, fulfilled, rejected) to be\nautomatically handled by handleEffect, for example, if the fulfilled state\nrequires more complex data processing and needs to be manually handled, but you\nstill want to automate the handling of the pending and rejected states, you can\nuse the following method:\n\n\n\nhandleEffect API.\n\nIn the Effects function, you can also manually call Actions. For example:\n\n\n\nYou can use the use function to load other Models (including the Model itself)\nto achieve Model communication.\n\n\nSide effects do not affect state#\n\nIn some cases, we only need to read State and execute relevant side effect\nlogic, and the side effect will not modify State.\n\nFor example, store some State in localStorage:\n\n\n\nor send message to server:\n\n\n\nSometimes, we want to execute subsequent logic directly based on the execution\nresult of the side effect function. In this case, we need to use the return\nvalue of the Effects function.\n\nFor example, when the send button is clicked and the data is successfully sent,\nclose the current popup immediately; if it fails, display an error message. We\ncan achieve this through the following code:\n\n\n\nINFO\n\nExample","routePath":"/en/guides/topic-detail/model/manage-effects","lang":"en","toc":[{"text":"Modifying State via Side Effects","id":"modifying-state-via-side-effects","depth":2,"charIndex":383},{"text":"Side effects do not affect state","id":"side-effects-do-not-affect-state","depth":2,"charIndex":3665}],"domain":"","frontmatter":{"sidebar_position":5,"title":"Management Effect"},"version":""},{"id":275,"title":"Model Communication","content":"#\n\nModel communication refers to communication between different Models, as well as\ncommunication between Effects and Actions within the same Model.\n\n\nCommunication between Models#\n\nModels are not isolated from each other and can communicate with each other.\nThere are mainly two scenarios:\n\n 1. Accessing the State and Actions of other Models in the Model.\n 2. Listening to changes in other Models in the Model.\n\nHere, we will transform the simple counter application in the Quick Start\nsection into a counter application that allows you to set the step frequency. By\nsetting the step frequency, you can affect the magnitude of each counter\nincrease.\n\nWe abstract two Models, stepModel (step frequency) and counterModel (counter):\n\n\n\nstepModel declares only one state, with an initial value of 1.\n\ncounterModel loads stepModel with the use function, and retrieves the returned\nsubscribeStep function to listen for changes to the stepModel state. onMount is\na hook function that is executed after the Model is mounted. counterModel begins\nto subscribe to the state changes of stepModel after it has been mounted, and\nprints out the latest value of stepModel.\n\ncounterModel accesses stepModel using the use function, and in the add function,\nthe current value of stepModel (step frequency) can be obtained to perform\nincrements using this value.\n\nNote\n\nWhen you need to access the state of another Model, you must call use during the\nactual execution phase of the current Actions or Effects function (in this\nexample, the add function) to ensure that the obtained State is the latest\nvalue. Therefore, although we also call use(stepModel) in the callback function\nof define, we do not destructure the state value of stepModel because the\ncallback function of define is executed during the mounting phase of the Model,\nand at this time, the state of stepModel obtained may be different from the\nvalue obtained when add is executed.\n\nModify App.tsx:\n\n\n\nAdditional Information\n\nModern.js has enabled auto-generate actions by default, so even though there are\nno Actions defined manually in the stepModel, the auto-generated setState can\nstill be used.\n\n * Click add step to add steps.\n * Click add counter to trigger the counter to increase.\n\nThe final effect is as follows:\n\n\n\nAdditional Information\n * Full example code for this section can be found here.\n * For more information about the relevant API, please refer to: model.\n\nIn the previous example of counterModel, we called use within the Actions\nfunction to get other Model objects. If we only need to call Actions of other\nModels, we can also use use to get the Actions of Models in the define callback\nfunction because Actions are functions and there is no issue of value\nexpiration. For example:\n\n\n\nHere, we no longer need to repeatedly get the barModel object in loadA and\nloadB, which simplifies the code logic.\n\n\nCommunication within a Model#\n\nCommunication within a Model can also be divided into two main scenarios:\n\n 1. Effects functions call the Actions functions of the same Model or other\n    Effects functions.\n 2. Actions functions call other Actions functions of the same Model.\n\nIn the Managing Side Effects section, we demonstrated how Effects functions call\nActions functions.\n\nHere we provide another example:\n\n\n\nIn this example, the two Effects functions of fooModel need to call their own\nActions functions. Here, we have called use once in each Effects function. Why\ncan't we use use to get the Actions of the Model itself in the define callback\nfunction, as in the example of Model communication? This is because when calling\nuse to get a Model, it first checks whether the Model has been mounted. If it\nhas not been mounted, the mounting logic will be executed first.\n\nThe define callback function is executed during the mounting phase, so calling\nuse to get the Model itself during the mounting phase will result in an infinite\nloop (which will throw an error in the actual execution process). Therefore, you\nmust not call use in the define callback function to get the Model itself.\n\nHowever, we can use the onMount hook function to get the Model itself through\nuse after the Model has been mounted:\n\n\n\nIn this way, we can also simplify the code.","routePath":"/en/guides/topic-detail/model/model-communicate","lang":"en","toc":[{"text":"Communication between Models","id":"communication-between-models","depth":2,"charIndex":150},{"text":"Communication within a Model","id":"communication-within-a-model","depth":2,"charIndex":2873}],"domain":"","frontmatter":{"sidebar_position":7,"title":"Model Communication"},"version":""},{"id":276,"title":"Performance Optimization","content":"#\n\nReduck has already done a lot of performance optimization work internally, so\nperformance issues generally do not need to be considered. However, when\nperformance is more sensitive, or when encountering performance issues, you can\nconsider more targeted performance optimization from the following three\naspects.\n\n\nSplitting Models#\n\nWhen useModel returns the complete State object of the Model, any change in any\npart of the State will cause the component that calls useModel to be\nre-rendered.\n\nFor example:\n\n\n\nAlthough ComponentA only needs to use the a state, it will still be re-rendered\nwhen the b state changes. In this case, we can consider splitting fooModel into\nseparate Models responsible for managing a and b respectively:\n\n\n\n\nState Selection#\n\nuseModel supports passing in a selector function to filter the returned State\nand Actions for the component. We can use a selector function to ensure that the\nState returned to the component is what the component needs directly, thus\nensuring that the component is not re-rendered due to changes in other unrelated\nstates.\n\nFor the same example above, we can use a selector function for performance\noptimization, the code is as follows:\n\n\n\n\nDerivative State Caching#\n\nWhen a Model has computed property, the computed function will be executed every\ntime useModel is called.\n\nConsider the following code:\n\n\n\nEven if the b state of fooModel changes, the combineA function (more precisely,\nthe last function type element of combineA) will still be called and executed\nwhen the component is re-rendered, although the derivative state combineA of\nbarModel depends on barModel itself and the state a of fooModel.\n\nIn general, the logic in the computed function is usually very lightweight, but\nwhen the logic in the computed function is relatively complex, we can consider\ncaching the calculation logic. For example, we can use reselect to cache\ncombineA of barModel:\n\n\n\nWe created a caching function createSelector, which only recalculates the value\nof combineA when the state of barModel changes or the state a of fooModel\nchanges.\n\nAdditional Information\n\nYou can find the complete example code of this section here.","routePath":"/en/guides/topic-detail/model/performance","lang":"en","toc":[{"text":"Splitting Models","id":"splitting-models","depth":2,"charIndex":317},{"text":"State Selection","id":"state-selection","depth":2,"charIndex":742},{"text":"Derivative State Caching","id":"derivative-state-caching","depth":2,"charIndex":1201}],"domain":"","frontmatter":{"sidebar_position":8,"title":"Performance Optimization"},"version":""},{"id":277,"title":"Quick Start","content":"#\n\nReduck is a state management library developed by the Modern.js team that\nfollows the MVC pattern. Its underlying state storage is based on Redux\nimplementation, while providing a higher level of abstraction and full\ncompatibility with the Redux ecosystem.\n\nThe goal of Reduck is to organize the development structure of React\napplications in the MVC pattern, maintain business logic in the Model layer,\ndecoupling business logic from UI, making it easier for developers to focus on\nbusiness logic, and reducing duplicated work (boilerplate code) through higher\nlevel of abstraction.\n\nIn the MVC pattern, Reduck plays the role of M(Model), React UI Component\ncorresponds to V(View), and gets the Model from Reduck and modifies the Model's\nReact Container Component, which corresponds to C(View Controller/Container).\n\nThe state management solution of Modern.js is implemented through built-in\nReduck. Using Reduck in Modern.js not only eliminates the manual integration\nprocess, but also allows all Reduck APIs to be imported and used directly from\nthe Modern.js Runtime package, providing a better consistency experience.\n\nINFO\n 1. To use Reduck APIs in Modern.js, you need to set runtime.state to enable the\n    state management plugin.\n 2. Reduck can also be used separately as a state management library outside of\n    Modern.js.\n\n\nCore Concepts#\n\nThere are only four core concepts in Reduck: Model, State, Actions, and Effects.\n\nModel: Encapsulates the logic and required state of an independent module,\nconsisting of State, Actions, and Effects.\n\nState: The state stored in the Model.\n\nActions: Pure functions used to modify State, functions must be Synchronous.\n\nEffects: Functions with side effects used to modify State, functions can be\nAsynchronous. Effects can call their own Actions and Effects or those of other\nModels.\n\nThe Reduck data flow is shown in the following figure:\n\n\n\n\nBasic Usage#\n\nNext, let's take a simple Counter application as an example to demonstrate the\nbasic usage of Reduck.\n\nFirst, we define a Model named count:\n\n\n\nWe use the API model to create countModel, which currently only contains the\nstate that stores the counter value, that is, value in the code.\n\nWe define an action to increase the counter by 1:\n\n\n\nIn the add action, we can directly modify the value of the state and perform the\nincrement operation without treating the state as an immutable object. This is\nbecause Reduck integrates immer, which can directly modify the original state\nobject.\n\nNext, we will demonstrate how to use the Model in a component.\n\nCreate a new component called Counter, and use the countModel via the useModel\nAPI inside the component:\n\n\n\nuseModel gets the state and actions of countModel. The component displays the\ncurrent value of the counter, and clicking the add button increments the counter\nby 1.\n\nINFO\n\nDue to the simplicity of the example used here, the layering of the MVC pattern\nis not strictly followed. The Counter component acts as both the V and C layers.\n\nThe final demonstration effect is as follows:\n\n\n\nThat completes a simple counter application. You can view the complete example\ncode for this section here.","routePath":"/en/guides/topic-detail/model/quick-start","lang":"en","toc":[{"text":"Core Concepts","id":"core-concepts","depth":2,"charIndex":1338},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":1895}],"domain":"","frontmatter":{"sidebar_position":1,"title":"Quick Start"},"version":""},{"id":278,"title":"Ecosystem Integration","content":"#\n\nReduck is based on Redux, so you can use libraries from the Redux ecosystem to\nenhance its functionality. APIs like Provider, createApp, and createStore allow\nyou to configure the use of middlewares and store enhancers; and using\ncreateStore, you can take complete control over the process of creating the\nstore.\n\nFor example, if we want to use the middleware redux-logger, the example code is\nas follows:\n\n\n\nCAUTION\n\nReduck is built on top of the lower-level Redux API, and abstracts away some of\nthe underlying concepts of Redux, such as Reducers. Reduck allows models to be\ndynamically mounted, whereas Redux mounts all the necessary state at Store\ncreation time. Due to these implementation differences, some libraries from the\nRedux ecosystem cannot be used directly in Reduck.","routePath":"/en/guides/topic-detail/model/redux-integration","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_position":11,"title":"Ecosystem Integration"},"version":""},{"id":279,"title":"TS Best Practices","content":"#\n\nReduck provides excellent support for TypeScript, and in most cases, you can get\nAPI type prompts directly without any extra work. In this section, we will\nprovide additional information on other usage scenarios.\n\n\nDefining the State Type of the Model#\n\nDeclaring type information for the State of a Model is a best practice when\nusing Reduck in TypeScript.\n\n\n\nWhen you declare type information for the State of a Model, the computed and\nactions of the Model can get the correct type information. In fact, even if we\ndon't define State type information in the example code above, the type\ninformation of State can be automatically inferred based on the initial value\ninformation of state. However, we still recommend that you declare the type\ninformation of State when defining a Model because the type information of State\ninferred based on the initial value information of state may be incomplete\n(missing fields or field type information), and the type information of State\ncannot be automatically inferred based on the initial value information of state\nwhen using Function Type to define the Model.\n\n\nDependent types of Derived State#\n\nWhen the derived state of a Model depends on other Models, you need to manually\nspecify the State of the other Models.\n\n\n\n\nHooks for Getting Model Type Information#\n\nReduck provides a set of utility types for getting Model type information:\n\n * GetModelState: Get the type information of the State (including derived\n   state) of the Model.\n * GetModelActions: Get the type information of the Actions (including Effects\n   functions) of the Model.\n\n","routePath":"/en/guides/topic-detail/model/typescript-best-practice","lang":"en","toc":[{"text":"Defining the State Type of the Model","id":"defining-the-state-type-of-the-model","depth":2,"charIndex":217},{"text":"Dependent types of Derived State","id":"dependent-types-of-derived-state","depth":2,"charIndex":1108},{"text":"Hooks for Getting Model Type Information","id":"hooks-for-getting-model-type-information","depth":2,"charIndex":1266}],"domain":"","frontmatter":{"sidebar_position":10,"title":"TS Best Practices"},"version":""},{"id":280,"title":"Use Models","content":"#\n\n\nUsing Models in Components#\n\n\nUsing as Global State#\n\nuseModel can be used to obtain the State, Actions, and other information of the\nModel. When the State of the Model is modified by Actions, any other components\nthat use the Model will automatically re-render.\n\nIn the counter example in Quick Start, we have demonstrated the use of useModel\nand will not repeat it here.\n\nuseModel supports passing multiple Models, and the State and Actions of multiple\nModels will be merged and returned as the result. For example:\n\n\n\nstate and actions value are:\n\n\n\nuseModel also supports selector operations on State and Actions to filter or\nrename State and Actions. For example:\n\n\n\nWe use stateSelector to rename the states with the same name in fooModel and\nbarModel. We use actionsSelector to filter out the Actions of barModel.\n\nIf only actionsSelector needs to be set, you can set stateSelector to undefined\nas a placeholder. For example:\n\n\n\n\nUsing as Static State#\n\nuseStaticModel can be used to obtain the Model and use the state of the Model as\na static state. This ensures that the State accessed by the component is always\nthe latest value, but the change of the Model's State does not cause the current\ncomponent to re-render.\n\nINFO\n\nThe usage of useStaticModel is exactly the same as useModel.\n\nConsider the following scenario: there is an Input component responsible for\nuser input, and another Search component responsible for executing a search\noperation after the user input information is entered and the search button is\nclicked. We do not want the state changes during the user input process to cause\nSearch to re-render. In this case, useStaticModel can be used:\n\n\n\nCaution\n\nDo not destructure the state returned by useStaticModel. For example, changing\nit to the following code: const [{input}] = useStaticModel(searchModel); will\nalways get the initial value of Input.\n\nuseStaticModel is also suitable for use with animation libraries such as\nreact-three-fiber, because binding fast-changing states in animation component\nUI can easily cause performance issues. In this case, you can choose to use\nuseStaticModel, which only subscribes to the State but does not cause the view\ncomponent to re-render. Here is a simplified example:\n\n\n\nUsing React's refs can also achieve similar effects. In fact, useStaticModel\nalso uses refs internally. However, using useStaticModel directly helps decouple\nthe state management logic from the component and converge it into the Model\nlayer.\n\nThe complete sample code can be found here.\n\n\nUsing as Local State#\n\nuseLocalModel can be used to obtain the Model and use the state of the Model as\nlocal state. At this time, the change of the Model State only causes the current\ncomponent to re-render, but does not cause other components that use the Model\nto re-render. The effect is similar to managing state through useState in React,\nbut it can decouple the state management logic from the component and converge\nit into the Model layer.\n\nINFO\n\nThe usage of useLocalModel is exactly the same as useModel.\n\nFor example, we modify the code of the counter application and add a counter\ncomponent LocalCounter with local state:\n\n\n\nClick the add button of Counter and LocalCounter respectively, and the states of\nthe two do not affect each other:\n\n\n\nThe complete sample code can be found here.\n\n\nUsing outside of components#\n\nIn actual business scenarios, sometimes we need to use Model outside of React\ncomponents, such as accessing State and executing Actions in utility functions.\nAt this time, we need to use the Store. The Store is a low-level concept that\nusers generally cannot touch. It is responsible for storing and managing the\nentire application's state. Reduck's Store is based on Redux's Store\nimplementation and adds Reduck-specific APIs, such as use.\n\nFirst, call useStore in the component to obtain the store object used by the\ncurrent application and mount it to a variable outside the component:\n\n\n\nYou can obtain the Model object through store.use, and the usage of store.use is\nthe same as useModel. Taking the counter application as an example, we perform\nan increment operation on the counter value every 1 second outside the component\ntree:\n\n\n\nThe complete sample code can be found here.\n\nINFO\n\nIf the Store object is manually created through createStore, there is no need to\nobtain it through useStore in the component, and it can be used directly.\n\nAdditional Information\n\nFor detailed API definitions related to this section, please refer to here.","routePath":"/en/guides/topic-detail/model/use-model","lang":"en","toc":[{"text":"Using Models in Components","id":"using-models-in-components","depth":2,"charIndex":3},{"text":"Using as Global State","id":"using-as-global-state","depth":3,"charIndex":33},{"text":"Using as Static State","id":"using-as-static-state","depth":3,"charIndex":940},{"text":"Using as Local State","id":"using-as-local-state","depth":3,"charIndex":2537},{"text":"Using outside of components","id":"using-outside-of-components","depth":2,"charIndex":3338}],"domain":"","frontmatter":{"sidebar_position":3,"title":"Use Models"},"version":""},{"id":281,"title":"Using Reduck Separately","content":"#\n\nWhen integrating Reduck separately from Modern.js, the following modifications\nneed to be made:\n\n 1. Install the Reduck related packages\n\nInstall the Reduck package in the project: @modern-js-reduck/react.\n\n 2. Import package names for API\n\nWhen used in Modern.js, the package name for exporting Reduck API is:\n@modern-js/runtime/model. When using Reduck separately, the package name for\nexporting is: @modern-js-reduck/react.\n\n 3. Wrap the Provider component\n\nModern.js automatically wraps the Provider component used to inject the Reduck\nglobal Store on the entry component of the application. When using Reduck\nseparately, this needs to be done manually.\n\nExample:\n\n\n\n 4. Feature configuration\n\nWhen used in Modern.js, Reduck features can be configured through runtime.state.\nWhen used separately, configuration needs to be done through the config or store\nparameter of Provider.\n\nExample:\n\n","routePath":"/en/guides/topic-detail/model/use-out-of-modernjs","lang":"en","toc":[],"domain":"","frontmatter":{"sidebar_position":12,"title":"Using Reduck Separately"},"version":""},{"id":282,"title":"Build FAQ","content":"#\n\nIf you encounter any build-related issues, you can refer to the current document\nfor troubleshooting.\n\n--------------------------------------------------------------------------------\n\n\nRsbuild FAQ#\n\nModern.js is internally based on Rsbuild and encapsulates its own build tool, so\nyou can directly refer to the FAQ document of Rsbuild:\n\n * Rsbuild - Features FAQ\n\n * Rsbuild - Exceptions FAQ\n\n * Rsbuild - HMR FAQ\n\n--------------------------------------------------------------------------------\n\n\nHow to clear the webpack cache?#\n\nBy default, Modern.js's webpack cache is generated in the\n./node_modules/.cache/webpack directory.\n\nIf you need to clear the local webpack cache, you can execute the following\ncommand:\n\n\n\n--------------------------------------------------------------------------------\n\n\nHow to view the final generated webpack / Rspack configuration?#\n\nModern.js provides inspect command to view the final Modern.js configuration and\nwebpack / Rspack configuration generated by the project.\n\n\n\n--------------------------------------------------------------------------------\n\n\n'compilation' argument error when webpack compiling?#\n\nIf the following error occurs when compiling, it is usually caused by installing\nthe wrong version of webpack in the project, or installing multiple versions of\nwebpack:\n\n\n\nThe webpack version problem has the following situations:\n\n 1. The webpack dependency is directly declared in the project's package.json,\n    and the version range of the webpack that the Modern.js depends on is\n    different and cannot match the same version.\n 2. Multiple npm packages installed in the project all depend on webpack, and\n    the webpack version ranges they depend on are different and cannot match the\n    same version.\n 3. Due to the lock mechanism of the package manager, multiple webpack versions\n    are generated in the lock file.\n\nIn the first case, it is recommended to remove the webpack dependency from the\nproject's package.json. Because Modern.js encapsulates webpack-related\ncapabilities by default, and will pass in the webpack object in the\ntools.webpack configuration option. Therefore, in most cases, it is not\nrecommended to install additional webpack dependencies in the project.\n\nIn the second case, it is recommended to see if you can upgrade an npm package\nso that its dependent webpack version range is consistent with the Modern.js. It\nis also possible to manually unify versions through the ability of the package\nmanager, e.g. using yarn resolutions or [pnpm overrides](https\n://pnpm.io/package_json#pnpmoverrides).\n\nIf it is the third case, you can use the two methods mentioned in the second\ncase, or you can try to delete the lock file and reinstall it to solve it.\n\nTIP\n\nDeleting the lock file will automatically upgrade the dependency version in the\nproject to the latest version under the specified scope, please test it\nthoroughly.\n\n--------------------------------------------------------------------------------\n\n\nFailed import other modules in Monorepo?#\n\nDue to considerations of compilation performance, by default, the Modern.js does\nnot compile files under node_modules or files outside the current project\ndirectory.\n\nTherefore, when you reference the source code of other sub-projects, you may\nencounter an error similar to You may need an additional loader to handle the\nresult of these loaders.\n\nThere are several solutions to this problem:\n\n 1. You can enable the source code build mode to compile other sub-projects\n    within the monorepo. Please refer to Source Code Build Mode for more\n    information.\n 2. You can add the source.include configuration option to specify the\n    directories or modules that need to be additionally compiled. Please refer\n    to Usage of source.include for more information.\n 3. You can pre-build the sub-projects that need to be referenced, generate the\n    corresponding build artifacts, and then reference the build artifacts in the\n    current project instead of referencing the source code.\n\n--------------------------------------------------------------------------------\n\n\nFind exports is not defined runtime error?#\n\nIf the compilation is succeed, but the exports is not defined error appears\nafter opening the page, it is usually because a CommonJS module is compiled by\nBabel.\n\nUnder normal circumstances, Modern.js will not use Babel to compile CommonJS\nmodules. If the source.include configuration option is used in the project, some\nCommonJS modules may be added to the Babel compilation.\n\nThere are two workarounds for this problem:\n\n 1. Avoid adding CommonJS modules to Babel compilation.\n 2. Set Babel's sourceType configuration option to unambiguous, for example:\n\n\n\nSetting sourceType to unambiguous may have some other effects, please refer to\nBabel official documentation.\n\n--------------------------------------------------------------------------------\n\n\nCompile error \"Error: ES Modules may not assign module.exports or exports.*, Use\nESM export syntax\"?#\n\nIf the following error occurs during compilation, it is usually because a\nCommonJS module is compiled with Babel in the project, and the solution is same\nas the above exports is not defined problem.\n\n\n\nFor more information, please refer to issue: babel#12731.\n\n--------------------------------------------------------------------------------\n\n\nThe compilation progress bar is stuck, but there is no Error log in the\nterminal?#\n\nWhen the compilation progress bar is stuck, but there is no Error log on the\nterminal, it is usually because an exception occurred during the compilation. In\nsome cases, when Error is caught by webpack or other modules, the error log can\nnot be output correctly. The most common scenario is that there is an exception\nin the Babel config, which is caught by webpack, and webpack swallows the Error\nin some cases.\n\nSolution:\n\nIf this problem occurs after you modify the Babel config, it is recommended to\ncheck for the following incorrect usages:\n\n 1. You have configured a plugin or preset that does not exist, maybe the name\n    is misspelled, or it is not installed correctly.\n\n\n\n 2. Whether multiple babel-plugin-imports are configured, but the name of each\n    babel-plugin-import is not declared in the third item of the array.\n\n\n\n\n\nIn addition to the reasons mentioned above, there is another possibility that\ncan cause Babel compilation to hang, which is when Babel compiles a large JS\nfile exceeding 10,000 lines (usually a large file in the node_modules directory\nthat is compiled using source.include).\n\nWhen Babel compiles large files, the built-in babel-plugin-styled-components in\nModern.js can cause the compilation to hang. There is already a relevant issue\nin the community .\n\nIn the future, Modern.js will consider removing the built-in\nbabel-plugin-styled-components. In the current version, you can set\ntools.styledComponents to false to remove this plugin.\n\n\n\n--------------------------------------------------------------------------------\n\n\nThe webpack cache does not work?#\n\nModern.js enables webpack's persistent cache by default.\n\nAfter the first compilation is completed, the cache file will be automatically\ngenerated and output to the ./node_modules/.cache/webpack directory. When the\nsecond compilation is performed, the cache is hit and the compilation speed is\ngreatly improved.\n\nWhen configuration files such as package.json are modified, the cache is\nautomatically invalidated.\n\nIf the webpack compilation cache in the project has not taken effect, you can\nadd the following configuration for troubleshooting:\n\n\n\nAfter adding the above configuration, webpack will output logs for debugging.\nPlease refer to the logs related to PackFileCacheStrategy to understand the\ncause of cache invalidation.\n\n--------------------------------------------------------------------------------\n\n\nCompilation error after referencing a type from lodash#\n\nIf the @types/lodash package is installed in your project, you may import some\ntypes from lodash, such as the DebouncedFunc type:\n\n\n\nModern.js will throw an error after compiling the above code:\n\n\n\nThe reason is that Modern.js has enabled the babel-plugin-lodash plugin by\ndefault to optimize the bundle size of lodash, but Babel cannot distinguish\nbetween \"value\" and \"type\", which resulting in an exception in the compiled\ncode.\n\nThe solution is to use TypeScript's import type syntax to explicitly declare the\nDebouncedFunc type:\n\n\n\nTIP\n\nIn any case, it is recommended to use import type to import types, this will\nhelp the compiler to identify the type.","routePath":"/en/guides/troubleshooting/builder","lang":"en","toc":[{"text":"Rsbuild FAQ","id":"rsbuild-faq","depth":3,"charIndex":188},{"text":"How to clear the webpack cache?","id":"how-to-clear-the-webpack-cache","depth":3,"charIndex":500},{"text":"How to view the final generated webpack / Rspack configuration?","id":"how-to-view-the-final-generated-webpack--rspack-configuration","depth":3,"charIndex":805},{"text":"'compilation' argument error when webpack compiling?","id":"compilation-argument-error-when-webpack-compiling","depth":3,"charIndex":1095},{"text":"Failed import other modules in Monorepo?","id":"failed-import-other-modules-in-monorepo","depth":3,"charIndex":2989},{"text":"Find `exports is not defined` runtime error?","id":"find-exports-is-not-defined-runtime-error","depth":3,"charIndex":-1},{"text":"Compile error \"Error: ES Modules may not assign module.exports or exports.*, Use ESM export syntax\"?","id":"compile-error-error-es-modules-may-not-assign-moduleexports-or-exports-use-esm-export-syntax","depth":3,"charIndex":-1},{"text":"The compilation progress bar is stuck, but there is no Error log in the terminal?","id":"the-compilation-progress-bar-is-stuck-but-there-is-no-error-log-in-the-terminal","depth":3,"charIndex":-1},{"text":"The webpack cache does not work?","id":"the-webpack-cache-does-not-work","depth":3,"charIndex":6991},{"text":"Compilation error after referencing a type from lodash","id":"compilation-error-after-referencing-a-type-from-lodash","depth":3,"charIndex":7841}],"domain":"","frontmatter":{"sidebar_position":3},"version":""},{"id":283,"title":"CLI FAQ","content":"#\n\n\nUnable to pass command line arguments correctly when using pnpm?#\n\nThere are some differences between pnpm v6 and pnpm v7 in how they execute\ncommands, and the following should be noted:\n\npnpm v7:\n\nWhen using pnpm to call the commands in package.json, if you need to pass\nparameters to pnpm, you need to put the parameters before the command.\n\nFor example, using the pnpm --filter parameter to run the prepare command:\n\n\n\nIf you need to pass parameters to the command, you need to put the parameters\nafter the command.\n\nFor example, in the following package.json configuration:\n\n\n\nThe way to pass parameters when running the command is:\n\n\n\npnpm v6:\n\nIn the following package.json configuration:\n\n\n\nIf you need to run modern command --option:\n\nWhen using pnpm, you need to run pnpm run command -- --option.\n\nThis is because pnpm's handling of command parameters is different from that of\nYarn, but similar to that of npm: when the -- string is not added, the\nparameters passed are for pnpm; when the -- string is used, the parameters\npassed are for running the script.\n\nIn the above example, the --option parameter is passed to modern command. If you\nrun pnpm run command --option, the --option parameter will be passed to pnpm.\n\nIn summary:\n\nWhen using pnpm v7, if passing parameters to pnpm, the parameters need to be\nplaced before the command.\n\nWhen using pnpm v6, if the parameters are passed to pnpm, -- is not required; if\nthe parameters are passed to the script, the -- string needs to be added.","routePath":"/en/guides/troubleshooting/cli","lang":"en","toc":[{"text":"Unable to pass command line arguments correctly when using pnpm?","id":"unable-to-pass-command-line-arguments-correctly-when-using-pnpm","depth":3,"charIndex":3}],"domain":"","frontmatter":{"sidebar_position":2},"version":""},{"id":284,"title":"Dependencies FAQ","content":"#\n\n\nHow to check the actual installed version of a dependency in the project?#\n\nYou can use the ls command provided by the package manager to view the version\nof the dependency in the project.\n\nHere are some basic examples. For detailed usage, please refer to the\ndocumentation of each package manager.\n\nnpm / yarn\n\nFor projects using npm or yarn, you can use the npm ls command.\n\nFor example, running npm ls @modern-js/core will show the following result:\n\n\n\npnpm\n\nFor projects using pnpm, you can use the pnpm ls command.\n\nFor example, running pnpm ls @modern-js/core --depth Infinity will show the\nfollowing result:\n\n\n\n--------------------------------------------------------------------------------\n\n\nGetting \"The engine \"node\" is incompatible\" error during dependency\ninstallation?#\n\nIf you encounter the following error message during dependency installation, it\nmeans that the current environment is using a Node.js version that is too low,\nand you need to upgrade Node.js to a higher version.\n\n\n\nWhen using Modern.js, it is recommended to use the latest version of Node.js\n18.x.\n\nIf the Node.js version of the current environment is lower than the above\nrequirement, you can use tools such as nvm or fnm to switch versions.\n\nHere is an example of using nvm:\n\n\n\nFor local development environments, it is recommended to use fnm, which has\nbetter performance than nvm and has similar usage.\n\n--------------------------------------------------------------------------------\n\n\nGetting a ReactNode type error after upgrading dependencies?#\n\nAfter upgrading the dependencies of the project, if the following type error\noccurs, it means that the wrong version of @types/react is installed in the\nproject.\n\n\n\nThe reason for this problem is that the ReactNode type definition in React 18 is\ndifferent from that in React 16/17. If there are multiple different versions of\n@types/react in the project, a ReactNode type conflict will occur, resulting in\nthe above error.\n\nThe solution is to lock the @types/react and @types/react-dom in the project to\na unified version, such as v17.\n\n\n\nFor methods of locking dependency versions, please refer to Lock nested\ndependency.\n\n--------------------------------------------------------------------------------\n\n\nGetting peer dependencies warnings in the console after running pnpm install?#\n\nThe reason for this warning is that the version range of peer dependencies\ndeclared by some third-party npm packages is inconsistent with the version range\ninstalled in Modern.js.\n\nIn most cases, peer dependencies warnings will not affect the project operation\nand do not need to be processed separately. Please ignore the relevant warnings.\n\n--------------------------------------------------------------------------------\n\n\nWhat is the minimum supported version of React for the Modern.js framework?#\n\nThe recommended React version for the Modern.js framework is >= 18.0.0, and\ndifferent functions have different requirements for the React version.\n\n * If you are using React 17, some framework functions will not be available,\n   such as Streaming SSR, because it relies on new features provided by React\n   18.\n * If you are still using React 16, you will not be able to use Modern.js's\n   runtime or server-side capabilities. You can consider using the build mode of\n   Modern.js, that is, only using Modern.js's build capabilities. In this case,\n   React 16 can still be used.\n\nIn future major versions of Modern.js, we will gradually remove support for\nReact 16 and React 17. Therefore, please upgrade to React 18 or higher as soon\nas possible.\n\n--------------------------------------------------------------------------------\n\n\nType error in Modern.js configuration file?#\n\n\n\nWhen you use the Modern.js framework, the above error occurs in the\nconfiguration file, it may be due to the inconsistent versions of Modern.js\nrelated packages。You can upgrade and unify the version of modern.js related\npackages through npx modern upgrade command.\n\nIn the monorepo, the above error may also occur due to inconsistent versions of\nthe Modern.js framework used by different sub-projects.","routePath":"/en/guides/troubleshooting/dependencies","lang":"en","toc":[{"text":"How to check the actual installed version of a dependency in the project?","id":"how-to-check-the-actual-installed-version-of-a-dependency-in-the-project","depth":3,"charIndex":3},{"text":"Getting \"The engine \"node\" is incompatible\" error during dependency installation?","id":"getting-the-engine-node-is-incompatible-error-during-dependency-installation","depth":3,"charIndex":-1},{"text":"Getting a ReactNode type error after upgrading dependencies?","id":"getting-a-reactnode-type-error-after-upgrading-dependencies","depth":3,"charIndex":1479},{"text":"Getting peer dependencies warnings in the console after running `pnpm install`?","id":"getting-peer-dependencies-warnings-in-the-console-after-running-pnpm-install","depth":3,"charIndex":-1},{"text":"What is the minimum supported version of React for the Modern.js framework?","id":"what-is-the-minimum-supported-version-of-react-for-the-modernjs-framework","depth":3,"charIndex":2755},{"text":"Type error in Modern.js configuration file?","id":"type-error-in-modernjs-configuration-file","depth":3,"charIndex":3665}],"domain":"","frontmatter":{"sidebar_position":1},"version":""},{"id":285,"title":"HMR FAQ","content":"#\n\n\nHow to troubleshooting HMR ineffective issues?#\n\nThere are several possible reasons why HMR may not be work. This document will\ncover most common causes and provide guidance for troubleshooting. Please refer\nto the following content for troubleshooting.\n\nBefore starting the troubleshooting process, it is helpful to have a basic\nunderstanding of how HMR works:\n\nHMR Principle\n 1. The browser establishes a WebSocket connection with the development server\n    for real-time communication.\n 2. Whenever the development server finishes recompiling, it sends a\n    notification to the browser via the WebSocket. The browser then sends a\n    hot-update.xxx request to the development server to load the newly compiled\n    module.\n 3. After receiving the new module, if it is a React project, React Refresh, an\n    official React tool, is used to update React components. Other frameworks\n    have similar tools.\n\nAfter understanding the principle of HMR, you can follow these steps for basic\ntroubleshooting:\n\n1. Check the WebSocket Connection#\n\nOpen the browser console and check for the presence of the [HMR] connected. log.\n\n * If it is present, the WebSocket connection is working correctly. You can\n   continue with the following steps.\n * If it is not present, open the Network panel in Chrome and check the status\n   of the ws://[host]:[port]/webpack-hmr request. If the request is failed, this\n   indicates that the HMR failed because the WebSocket connection was not\n   successfully established.\n\nThere can be various reasons why the WebSocket connection fails to establish,\nsuch as using a network proxy that prevents the WebSocket request from reaching\nthe development server. You can check whether the WebSocket request address\nmatches your development server address. If it does not match, you can configure\nthe WebSocket request address using tools.devServer.client.\n\n2. Check the hot-update Requests#\n\nWhen you modify the code of a module and trigger a recompilation, the browser\nsends several hot-update.json and hot-update.js requests to the development\nserver to fetch the updated code.\n\nYou can try modifying a module and inspect the content of the hot-update.xxx\nrequests. If the content of the request is the latest code, it indicates that\nthe hot update request is working correctly.\n\nIf the content of the request is incorrect, it is likely due to a network proxy.\nCheck whether the address of the hot-update.xxx request matches your development\nserver address. If it does not match, you need to adjust the proxy rules to\nroute the hot-update.xxx request to the development server address.\n\n3. Check for Other Causes#\n\nIf the above two steps do not reveal any issues, it is possible that other\nfactors are causing the HMR to fail. For example, it could be that the code does\nnot meet React's requirements for HMR. You can refer to the following questions\nfor further troubleshooting.\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when external React?#\n\nTo ensure that HMR works properly, we need to use the development builds of\nReact and ReactDOM.\n\nIf you exclude React via externals when bundling, the production build of React\nis usually injected through CDN, and this can cause HMR to fail.\n\n\n\nTo solve this problem, you need to reference the development builds of React or\nnot configure externals in the development environment.\n\nIf you are unsure about the type of React build you are using, you can refer to\nthe React documentation - Use the Production Build.\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when setting filename hash in development mode?#\n\nUsually, we only set the filename hash in the production mode (i.e., when\nprocess.env.NODE_ENV === 'production').\n\nIf you set the filename hash in the development mode, it may cause HMR to fail\n(especially for CSS files). This is because every time the file content changes,\nthe hash value changes, preventing tools like mini-css-extract-plugin from\nreading the latest file content.\n\n * Correct usage:\n\n\n\n * Incorrect usage:\n\n\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when updating React components?#\n\nModern.js uses React's official Fast Refresh capability to perform component hot\nupdates.\n\nIf there is a problem that the hot update of the React component cannot take\neffect, or the state of the React component is lost after the hot update, it is\nusually because your React component uses an anonymous function. In the official\npractice of React Fast Refresh, it is required that the component cannot be an\nanonymous function, otherwise the state of the React component cannot be\npreserved after hot update.\n\nHere are some examples of wrong usage:\n\n\n\nThe correct usage is to declare a name for each component function:\n\n\n\n--------------------------------------------------------------------------------\n\n\nHMR not working when use https?#\n\nIf https is enabled, the HMR connection may fail due to a certificate issue, and\nif you open the console, you will get an HMR connect failed error.\n\n\n\nThe solution to this problem is to click on \"Advanced\" -> \"Proceed to xxx\n(unsafe)\" on the Chrome problem page.\n\n\n\n> Tips: When accessing the page through Localhost, the words \"Your connection is\n> not private\" may not appear and can be handled by visiting the Network domain.","routePath":"/en/guides/troubleshooting/hmr","lang":"en","toc":[{"text":"How to troubleshooting HMR ineffective issues?","id":"how-to-troubleshooting-hmr-ineffective-issues","depth":3,"charIndex":3},{"text":"1. Check the WebSocket Connection","id":"1-check-the-websocket-connection","depth":4,"charIndex":1009},{"text":"2. Check the hot-update Requests","id":"2-check-the-hot-update-requests","depth":4,"charIndex":1881},{"text":"3. Check for Other Causes","id":"3-check-for-other-causes","depth":4,"charIndex":2613},{"text":"HMR not working when external React?","id":"hmr-not-working-when-external-react","depth":3,"charIndex":2990},{"text":"HMR not working when setting filename hash in development mode?","id":"hmr-not-working-when-setting-filename-hash-in-development-mode","depth":3,"charIndex":3627},{"text":"HMR not working when updating React components?","id":"hmr-not-working-when-updating-react-components","depth":3,"charIndex":4204},{"text":"HMR not working when use https?","id":"hmr-not-working-when-use-https","depth":3,"charIndex":4960}],"domain":"","frontmatter":{"sidebar_position":4},"version":""},{"id":287,"title":"Route Authorization","content":"#\n\nModern.js defaults to the convention-based routing based on React Router 6. For\nmore details, please refer to Routing.\n\nIn a web application, if there are multiple routes, we may need to authorize\naccess to some of them before accessing them. For example, in the following\nscenario:\n\n * Access to the / route does not require authorization and can be accessed\n   directly.\n\n * Access to the /protected route requires authorization. If there is no\n   authorization, it will automatically redirect to the /login route. After\n   successful login, it returns to /protected.","routePath":"/en/tutorials/examples/csr-auth","lang":"en","toc":[],"domain":"","frontmatter":{"title":"Route Authorization"},"version":""},{"id":288,"title":"Create Project","content":"#\n\nStarting from this chapter, we will enter the practical tutorial section. In the\npractical tutorial, we will start with environment preparation, starting from\nsimple to complex, building a real project step by step.\n\n\nEnvironment preparation#\n\n\nNode.js#\n\nBefore getting started, you will need to install Node.js, and ensure that your\nNode.js version is higher than 16.2.0. We recommend using the LTS version of\nNode.js 18.\n\nYou can check the currently used Node.js version with the following command:\n\n\n\nIf you do not have Node.js installed in your current environment, or the\ninstalled version is lower than 16.2.0, you can use nvm or fnm to install the\nrequired version.\n\nHere is an example of how to install the Node.js 18 LTS version via nvm:\n\n\n\nnvm and fnm\n\nBoth nvm and fnm are Node.js version management tools. Relatively speaking, nvm\nis more mature and stable, while fnm is implemented using Rust, which provides\nbetter performance than nvm.\n\n\npnpm#\n\nIt is recommended to use pnpm to manage dependencies:\n\n\n\nNOTE\n\nModern.js also supports dependency management with yarn and npm.\n\n\nInitialization project#\n\nWe create a new directory and initialize the project via the command line tool:\n\n\n\n@modern-js/create provides an interactive Q & A interface to initialize the\nproject based on the results, with initialization performed according to the\ndefault settings:\n\n\n\nAfter create the project, Modern.js will automatically install dependencies and\ncreate a git repository.\n\n\n\nNow, the project structure is as follows:\n\n\n\n\nDebug Project#\n\nRun pnpm run dev in the project to start the project:\n\n\n\nOpen http://localhost:8000/ in your browser to see the page content.\n\n\nModify the code#\n\nWe delete the original sample code and replace it with a simple point of contact\nlist:\n\n\n\nRemove redundant css files and keep the directory free of redundant files:\n\n\n\nSince the framework supports HMR by default, you can see that the content in\nhttp://localhost:8080/ is automatically updated to:\n\n\n\nThe page has no styles at the moment. The next chapter will expand on this\nsection.\n\n\nEnable SSR#\n\nNext, we modify the modern.config.ts in the project to enable the SSR\ncapability:\n\n\n\nRe-execute pnpm run dev to find that the project has completed page rendering at\nthe server level.","routePath":"/en/tutorials/first-app/c01-start","lang":"en","toc":[{"text":"Environment preparation","id":"environment-preparation","depth":2,"charIndex":220},{"text":"Node.js","id":"nodejs","depth":3,"charIndex":247},{"text":"pnpm","id":"pnpm","depth":3,"charIndex":955},{"text":"Initialization project","id":"initialization-project","depth":2,"charIndex":1092},{"text":"Debug Project","id":"debug-project","depth":2,"charIndex":1528},{"text":"Modify the code","id":"modify-the-code","depth":2,"charIndex":1672},{"text":"Enable SSR","id":"enable-ssr","depth":2,"charIndex":2076}],"domain":"","frontmatter":{"title":"Create Project"},"version":""},{"id":289,"title":"Add UI Components","content":"#\n\nIn the previous chapter, we learned how to initialize a project and use\nconfiguration to modify the default behavior of Modern.js.\n\nIn this chapter, we continue to use the project code of the previous chapter and\ncontinue to improve the point of contact list.\n\nIn order to do better UI display and interaction, we introduce the component\nlibrary Antd to develop, and use the component instead of the primitive list.\nAdd dependency first:\n\nModify src/routes/page.tsx to import components at the top:\n\n\n\nModify the implementation of the component:\n\n\n\nExecute pnpm run dev to see the running results:\n\n\n\nYou can see that the components exported by Ant Design already have complete\nstyles.\n\nnote\n\nModern.js Automatically import CSS required by Ant Design component on demand.\n\nNOTE\n\nWe can also use other component libraries to implement the same functionality,\nsuch as Arco Design.","routePath":"/en/tutorials/first-app/c02-component","lang":"en","toc":[],"domain":"","frontmatter":{"title":"Add UI Components"},"version":""},{"id":290,"title":"Add Style","content":"#\n\nIn the previous chapter, we learned how to use components from the third-party\nlibrary.\n\nIn this chapter, we will learn how to implement UI components.\n\n\nJS components using CSS#\n\nFirst of all, we want to control the display of contact avatars by ourselves,\nand implement this design draft:\n\n\n\nHypothesis has no ready-made components to implement, so you need to write some\nCSS yourself. Here we use styled-components to implement similar requirements.\nModern.js out of the box supports styled-components, which requires neither\ndependency nor configuration.\n\nStyle-components avoids many problems of traditional CSS writing through\nmodularization. For example, writing styles directly on the style attribute of\nelements, the visual details of UI will also be mixed with the details of UI\nstructure and business logic. Or classname needs to avoid global space renaming,\nwhich requires the use of naming conventions.\n\nModify the code at the top in src/routes/page.tsx:\n\n\n\nAdd the following code:\n\n\n\nModify the code of List.Item.Meta:\n\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nNext we do a little refactoring. To enhance legibility and make the code easier\nto maintain, we can split the Avatar component. We execute the following command\nat the end point to create a new file:\n\nDelete the implementation in src/routes/page.tsx and change it to:\n\n\n\nThe content of src/components/Avatar/index.tsx is modified to:\n\n\n\nExecute pnpm run dev, the result should be the same.\n\nnote\n\nThe reason for using the directory form Avatar/index.tsx instead of the\nsingle-file form Avatar.tsx is that you can easily add sub-files inside the\ndirectory later, including dedicated resources (pictures, etc.), dedicated\nsub-components, CSS files, etc.\n\n\nUtility#\n\nWe have used the style-components implementation component, but the current UI\nis still unsatisfactory and lacks professionalism, such as the list item inhouse\nlayout is a bit rough and misaligned in many places.\n\nNow, let's implement a better Item component ourselves, implementing a design\ndraft like this:\n\n\n\nThe UI to be implemented this time is more complex and has an internal\nstructure, but on the other hand, there is no very thick bright blue border of\nthe component such a very special UI, which is a very conventional horizontal\nand vertical layout, centering, font style, etc. In this case, there is actually\nno need to write CSS at all. There is a more efficient implementation method\nthat complements styled-components: Utility Class.\n\nModern.js integrates the mainstream, light, general-purpose Utility Class\nlibrary Tailwind CSS.\n\nExecute pnpm run new and select the following to start Tailwind CSS:\n\n\n\nRegister the Tailwind plugin in modern.config.ts:\n\n\n\nImport the Tailwind CSS css file at the top of src/routes/page.tsx to start a\nquick implementation of the professional UI:\n\n\n\nCreate the Item component first:\n\nModify src/routes/page.tsx to pass the render implementation of List to Item\ncomponent:\n\n\n\nUtility Class(https://tailwindcss.com/docs/container) is used on the parent\ncontainer for a quick implementation of the most basic maximum width, center,\nand other styles.\n\nNext implementation src/components/Item/index.tsx:\n\n\n\nExecute pnpm run dev to see the expected running result:\n\n\n\nWe only use a few Utility Classes, such as Flex, Padding, Margin, Text, Font,\nBorder, without writing a single CSS implementation Professional UI that\nconforms to the design draft.\n\n\nCustomized Utility Class#\n\nWe can also implement the new Utility Class ourselves to facilitate reuse\nbetween codes.\n\nUtility Class itself is also a component-oriented technology (using different\nclasses on a component is equivalent to setting some attributes from the base\nclass for this component), but the classname of Utility Class is global (because\nit is used on arbitrary components/elements), it is very suitable for\nimplementation with separate CSS files.\n\nCreate a new CSS file:\n\nImport utils.css in src/routes/page.tsx:\n\n\n\nA Utility Class named custom-text-gray is implemented in\nsrc/routes/styles/utils.css.\n\n\n\nnote\n\nModern.js integrates with PostCSS and supports modern CSS syntax features such\nas custom properties.\n\nUse in src/components/Item/index.tsx:\n\n\n\nChange to:\n\n\n\nExecute pnpm run dev, you can see that the font color has changed:\n\n\n\nnote\n\nThis is just to demonstrate Utility Class usage. In a real project, with\nTailwind CSS, this Utility Class is of little value and should be added to the\nfont color through the theme of the configuration Design System.\n\nutils.css can also be written as utils.scss or utils.less, Modern.js out of the\nbox support for SCSS and Less.\n\nHowever, with the support of PostCSS, modern CSS should be sufficient to meet\nthese development needs, and the performance is also better than that of the\npreprocessor. It is recommended to use .css files first.","routePath":"/en/tutorials/first-app/c03-css","lang":"en","toc":[{"text":"JS components using CSS","id":"js-components-using-css","depth":2,"charIndex":156},{"text":"Utility","id":"utility","depth":2,"charIndex":1752},{"text":"Customized Utility Class","id":"customized-utility-class","depth":2,"charIndex":3455}],"domain":"","frontmatter":{"title":"Add Style"},"version":""},{"id":291,"title":"Add Client Route","content":"#\n\nIn the previous chapter, we learned how to create UI components and add styles.\n\nIn this chapter, we will learn how to add Client Route.\n\nPreviously we have added the Archive button to the point of contact list, next\nwe add a route /archives, when accessing this route, only the point of contact\nof the saved file is displayed, while the original / continues to display all\npoints of contact.\n\nCreate a new src/routes/archives/page.tsx file:\n\nAdd the following code:\n\n\n\nThe Helmet component of React Helmet is used here, and the Helmet component is\nalso added in src/routes/page.tsx:\n\n\n\nnote\n\nModern.js integrates react-helmet by default, and can also be used in\nconjunction with SSR to meet SEO needs.\n\nSince there are multiple pages now, all of which need to use the previous\nUtility Class, we need to move the style file to src/routes/layout.tsx:\n\n\n\nExecute pnpm run dev, visit http://localhost:8080, you can see the full point of\ncontact, the title of the page is All:\n\n\n\nVisit http://localhost:8080/archives and you will only see the point of contact\nof the saved file with the title Archives:\n\n\n\nLooking at the HTML source code of the page, you can see that the content of the\ntwo pages is the same, and different content is rendered for different URLs.\n\nNext we add a simple navigation bar that allows the user to toggle between the\ntwo lists.\n\nOpen src/routes/layout.tsx and import the Radio component at the top:\n\n\n\nThen modify the top of the UI to add a set of radio group:\n\n\n\nThen we come to the implementation of currentList and handleSetList.\n\nIntroducing three React Hooks: useState and useNavigate and useParams, as well\nas Ant Design's event type definition:\n\n\n\nFinally, add local state and related logic to the Layout component:\n\n\n\nAt this point, the page navigation bar implementation has been completed, and\nexecute pnpm run dev to see the effect:\n\n\n\nClick Archives in the navigation bar, you can see that the selected state and\nURL of the radio box will change, the page is not refreshed, only CSR occurs.\n\nAccessing the two pages through the URL, you can see that the HTML content is\ndifferent, because the page executes the logic of client routing in the SSR\nstage, and the HTML already contains the final render result.","routePath":"/en/tutorials/first-app/c04-routes","lang":"en","toc":[],"domain":"","frontmatter":{"title":"Add Client Route"},"version":""},{"id":292,"title":"Add Loader","content":"#\n\nIn the previous chapter, we learned how to add client route.\n\nIn this chapter, we will learn how to add Loader to the routing component.\n\nBy far, we have provided data to components through hardcoding. If you want to\nget data from the remote, you usually use useEffect to do it. But when SSR is\nenabled, useEffect will not be executed at the server level, so this SSR can\nonly render a very limited UI.\n\nModern.js provides the ability of Data Loader to support homogeneous data\nacquisition in components to maximize the value of SSR.\n\nBelow we demonstrate how to add Data Loader to the routing component and\nsimulate remote data acquisition. We use faker to mock the required data, first\ninstall dependency:\n\n\n\nCreate src/routes/page.data.ts:\n\n\n\nNOTE\n\nData Loader doesn't just work for SSR. In CSR projects, Data Loader can also\navoid data acquisition dependency UI rendering, which solves the problem of\nrequesting dynamic grid layout. In the future, Modern.js will also add more\ncapabilities to this feature, such as pre-fetching, data caching, etc.\n\nModern.js also provides a hooks API called useLoaderData, we modify the exported\ncomponent of src/routes/page.tsx:\n\n\n\nRe-execute pnpm run dev, view view-source: http://localhost:8080/, or view the\n\"Preview\" of the HTML request in the Network panel of devtools, you can see that\nthe HTML rendered by SSR already contains the complete UI:\n\n","routePath":"/en/tutorials/first-app/c05-loader","lang":"en","toc":[],"domain":"","frontmatter":{"title":"Add Loader"},"version":""},{"id":293,"title":"Add Model","content":"#\n\nIn the previous chapter, we changed the hardcoding mockData to load from Data\nLoader.\n\nIn this chapter, we will further implement the functions of the project, such as\nthe implementation of the function of the Archive button to put the point of\ncontact archive.\n\nTherefore, we will start to write some business logic that has nothing to do\nwith the UI at all. If we continue to write in the component code, more and more\nnoodle code will be generated. To this end, we introduced a code module called\nModel to decoupling these business logic and UI.\n\nnote\n\nTo use the Model API, you need to opt in runtime.state:\n\n\n\n\nModel implementation#\n\nTo create a complete Model, you first need to define state, including the name\nand initial value of data in the state.\n\nWe use Model to manage the data of the point of contact list, so define the\nfollowing data state:\n\n\n\nUsing TS syntax, you can define more complete type information, such as items in\neach object should have a name, email field. In order to implement archive\nfunction, also need to create the archived field to hold the point of contact\nhas been archived state.\n\nWe also need a field to access all archived points of contact. We can define a\nfield of type computed to convert the existing data:\n\n\n\nFields of type computed are defined as function, but can be accessed through\nstate just like normal fields.\n\nINFO\n\nModern.js integrates Immer and can write such state transfer logic just like\nnormal mutable data in JS.\n\nWhen implementing the Archive button, we need an archive function, which is\nresponsible for modifying the archived field of the specified contact. We call\nthis function action:\n\n\n\nAn action function is a pure function, where a defined input gets a defined\noutput (a shifted state) and should not have any side effects.\n\nThe first parameter of the function is the Draft State provided by Immer, and\nthe second parameter is the parameter passed in when the action is called (more\non how to call it later).\n\nWe try to implement them completely:\n\n\n\nNext we connect the above code and put it in the same Model file. First execute\nthe following command to create a new file directory:\n\n\n\nAdd src/models/contacts.ts:\n\n\n\nWe call a plain object containing elements such as state, action, etc. as Model\nSpec, Modern.js provides Model API, which can generate Model from Model Spec.\n\n\nUse Model#\n\nNow let's use this Model directly to complement the logic of the project.\n\nFirst modify src/components/Item/index.tsx and add the UI and interaction of the\nArchive button, the content is as follows:\n\n\n\nNext, we add src/routes.page.data and modify src/routes/page.tsx to pass more\nparameters to the component:\n\n\n\n\n\nuseModel is the hooks API provided by the Modern.js. You can provide the state\ndefined in the Model in the component, or call the side effects and actions\ndefined in the Model through actions to change the state of the Model.\n\nModel is business logic, a computational process that does not create or hold\nstate itself. Only after being used by the component with the hooks API, the\nstate is created in the specified place.\n\nExecute pnpm run dev and click the Archive button to see that the page UI has\nchanged.\n\nNOTE\n\nIn the above example, useLoaderData is actually executed every time the route is\nswitched. Because we used fake data in the Data Loader, the data returned each\ntime is different. But we use the data in the Model first, so the data does not\nchange when switching routes.","routePath":"/en/tutorials/first-app/c06-model","lang":"en","toc":[{"text":"Model implementation","id":"model-implementation","depth":2,"charIndex":618},{"text":"Use Model","id":"use-model","depth":2,"charIndex":2350}],"domain":"","frontmatter":{"title":"Add Model"},"version":""},{"id":294,"title":"Add Container","content":"#\n\nIn the previous chapter, we initially introduced the model to split this part of\nthe logic from the UI component. The page.tsx no longer contains UI-independent\nbusiness logic implementation details, and only needs to use the Model to\nimplement the same function.\n\nIn this chapter, we will further use the business logic of implementation in\nModel to let page.tsx and archived/page.tsx get the same data. And\nimplementation Archive button, click the button to display the point of contact\narchive only in the Archives list, not in the All list.\n\n\nUse the full Model#\n\nBecause the two pages need to share the same set of state (point of contact\ntabular data, point of contact is archived or not), both need to contain the\nlogic to load the initial data, so we need to complete the data acquisition at a\nhigher level.\n\nModern.js support obtaining data through Data Loader in layout.tsx, we first\nmove the data acquisition part of the code to src/routes/layout.tsx:\n\n\n\n\n\nIn src/routes/page.tsx, use Model directly to get data:\n\n\n\nAlso in archived/page.tsx, delete the original mockData logic and use the\narchived value computed in Model as the data source:\n\n\n\nExecute pnpm run dev, visit http://localhost:8080/, click the Archive button,\nyou can see the button grey out:\n\n\n\nNext, click the top navigation and switch to the Archives list. You can find\nthat the point of contact of Archive just now has appeared in the list:\n\n\n\n\nWithdraw container components#\n\nIn the previous chapters, we split the business logic in the project into two\nlayers, one is the view component, and the other is the module. The former is\nresponsible for UI display, interaction, etc., and the latter is responsible for\nthe implementation of UI-independent business logic, which specializes in\nmanaging state.\n\nLike src/routes/page.tsx and src/routes/archives/page.tsx use the component of\nthe useModel API, which is responsible for linking the two layers of View and\nModel, similar to the role of the Controller in the traditional MVC\narchitecture. In the Modern.js, we follow the habit and call them Container.\n\nThe container component is recommended to be placed in a special containers/\ndirectory. We execute the following command to create a new file:\n\nWe extracted the common part of the original two page.tsx, and the code of\nsrc/containers/Contacts.tsx is as follows:\n\n\n\nModify the code for src/routes/page.tsx and src/routes/archives/page.tsx:\n\n\n\n\n\nThe refactoring is complete, and the current project structure is:\n\n\n\nThe view components in components/ dir are in the form of directories, such as\nAvatar/index.tsx. And the container components in containers/ dir are in the\nform of single files, such as contacts.tsx. This is a best practice we\nrecommend.\n\nAs mentioned in the chapter Add UI component, the view component is in the form\nof a directory, because the view component is responsible for the implementation\nof UI display and interaction details, and can evolve in complexity. In the form\nof a directory, it is convenient to add sub-files, including dedicated resources\n(pictures, etc.), dedicated sub-components, CSS files, etc. You can reconstruct\nat will within this directory, considering only the smallest parts.\n\nThe container component is only responsible for linkage and is a glue layer. The\nsophisticated business logic and implementation details are handed over to the\nView layer and the Model layer for implementation. The container component\nitself should be kept simple and clear, and should not contain complex\nimplementation details, so there should be no internal structure. The\nsingle-file form is not only more concise, but also acts as a constraint,\nreminding developers not to write complicated container components.","routePath":"/en/tutorials/first-app/c07-container","lang":"en","toc":[{"text":"Use the full Model","id":"use-the-full-model","depth":2,"charIndex":549},{"text":"Withdraw container components","id":"withdraw-container-components","depth":2,"charIndex":1426}],"domain":"","frontmatter":{"title":"Add Container"},"version":""},{"id":295,"title":"Add Application Entry","content":"#\n\nIn the last chapter, we basically completed the development of the point of\ncontact list application, introduced the usage of some functions in the\nModern.js, and recommended best practices.\n\nIn this chapter, we will describe how to add a new entry to the application.\n\n\nNew entry#\n\nA complete project may require multiple entries, Modern.js supports the\nautomatic creation of new entries, as mentioned in the previous section, pnpm\nrun new can enable optional features.\n\nWe can also use it to create new project elements and execute pnpm run new in\nthe project root directory:\n\n\n\nWhen created, the project will look like this:\n\n\n\nYou can see that the files of the contact list application are automatically\nrefactored into src/myapp/.\n\nAt the same time, a new src/landing-page/ is created, which also has routes/*\n(the pnpm run new command only does these things, so you can also easily create\nnew entries or modify entries manually).\n\nExecute pnpm run dev to display:\n\n\n\nAccess http://localhost:8080/ to see the application as before.\n\nVisit http://localhost:8080/landing-page to see the landing-page for the new\nentry you just created (Modern.js automatically generated default page).\n\nOne of the design principles of the Modern.js framework is [Convention over\nConfiguration ]. In most cases, you can write code directly by convention\nwithout any configuration. The directory structure in src/ is a convention:\n\nsrc/myapp/ and src/landing-page/ are automatically identified as two application\nportals: myapp and landing-page.\n\nThe directory name of src/myapp/ is the same as the project name (name in\npackage.json), which will be considered as the main entry of the project, and\nthe root path of the project URL (the default in the development environment is\nhttp://localhost:8080/) will automatically point to the main entry.\n\nThe URL of other entries is to append the entry name after the root path, such\nas http://localhost:8080/landing-page.\n\nNext, we rename src/myapp/ to src/contacts/:\n\n\n\nExecute pnpm run dev again, the result becomes:\n\n\n\nThere is no longer a main entry, the point of contact list is now a normal entry\nthat needs to be accessed with http://localhost:8080/contacts.\n\n\nModify the configuration by entry#\n\nIn the Modern.js configuration file, we can write our own code to control the\nconfiguration of the project.\n\nNow, modify the modern.config.ts to add something:\n\n\n\nExecute pnpm run dev, and then open view-source:\nhttp://localhost:8080/landing-page with the browser, you can see that the\ncontent of the landing-page web page is dynamically loaded through js, and the\nSSR function of this page is turned off.\n\nIf ssrByEntries and its value are annotated, the SSR function of landing-page is\nrestored.\n\nOther times, you need some more sophisticated logic to do the setup, such as JS\nvariables, expressions, import modules, etc., for example, only in the\ndevelopment environment to enable SSR:\n\n\n\nSo far, the prototype of our point of contact list application is almost\ncomplete 👏👏👏.\n\n\nNext step#\n\nThen you can further refine your application by following more tutorials like\nGuides, configuration, and more.","routePath":"/en/tutorials/first-app/c08-entries","lang":"en","toc":[{"text":"New entry","id":"new-entry","depth":2,"charIndex":273},{"text":"Modify the configuration by entry","id":"modify-the-configuration-by-entry","depth":2,"charIndex":2198},{"text":"Next step","id":"next-step","depth":2,"charIndex":3018}],"domain":"","frontmatter":{"title":"Add Application Entry"},"version":""},{"id":296,"title":"Introduction","content":"#\n\nWelcome to Modern.js tutorials!\n\nAfter reading this section, you will have an initial understanding of Modern.js\nand use Modern.js to create your first application.\n\n\nWhat is Modern.js?#\n\nIf you don't know Modern.js yet, please can read Modern.js Introduction first.\n\n\nTutorial#\n\nWe have prepared a tutorial on creating a \"contact list app\" that you can follow\nstep by step to create an app and learn about the following practices in\nModern.js:\n\n * Creating a project\n * Using the antd component library\n * Integrating Tailwind CSS\n * Client-side routing\n * Data fetching\n * State Management\n * Container components\n * New entry\n * ...\n\n\nCase Studies#\n\nWe offer some commonly used case studies for your reference during the\ndevelopment process. Here you can find some usage patterns of the feature\ncombinations provided by Modern.js. We will continue to improve the case studies\nhere.\n\n * Route Authorization\n\n * ...\n\nLet's start from creating a project now!","routePath":"/en/tutorials/foundations/introduction","lang":"en","toc":[{"text":"What is Modern.js?","id":"what-is-modernjs","depth":2,"charIndex":169},{"text":"Tutorial","id":"tutorial","depth":2,"charIndex":271},{"text":"Case Studies","id":"case-studies","depth":2,"charIndex":640}],"domain":"","frontmatter":{"title":"Introduction","sidebar_position":1},"version":""}]