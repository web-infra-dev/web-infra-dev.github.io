<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Modern.js - 现代 Web 工程体系 Blog</title>
        <link>https://modernjs.dev/v1/blog</link>
        <description>Modern.js - 现代 Web 工程体系 Blog</description>
        <lastBuildDate>Tue, 01 Nov 2022 10:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[2022-09 ~ 2022-10 主要更新]]></title>
            <link>https://modernjs.dev/v1/blog/2022-09~2022-10</link>
            <guid>2022-09~2022-10</guid>
            <pubDate>Tue, 01 Nov 2022 10:00:00 GMT</pubDate>
            <description><![CDATA[Modern.js 9-10 月最新版本为 v1.21.0，本双月的主要更新有：]]></description>
            <content:encoded><![CDATA[<p>Modern.js 9-10 月最新版本为 v1.21.0，本双月的主要更新有：</p><ul><li><strong>支持 pnpm v7</strong>：完成框架对 pnpm v7 的支持。</li><li><strong>服务端增加 Typescript 作为 ts 文件编译器</strong>。</li></ul><h2 class="anchor anchorWithStickyNavbar_pWUz" id="支持-pnpm-v7">支持 pnpm v7<a class="hash-link" href="#支持-pnpm-v7" title="Direct link to heading">​</a></h2><p>Modern.js 框架完成了对 pnpm v7 的变更适配。</p><p>使用 <code>npx @modern-js/create@modern-1</code> 创建项目时会根据用户当前环境的 pnpm 版本进行安装依赖操作，并且在初始化项目中会在 <code>.npmrc</code> 中添加
<code>strict-peer-dependencies=false</code> 配置，避免安装时由于 <code>peerDependencies</code> 缺失导致安装依赖失败问题。
同时适配 <code>release</code>、<code>deploy</code> 命令对 pnpm v7 的支持。</p><p>pnpm v7 在命令传参方面姿势发生了变化，需注意：</p><p>在使用 pnpm 调用 <code>package.json</code> 中的命令时，如果需要传递参数至 pnpm，需要将参数放到命令前。</p><p>例如使用  pnpm <code>--filter</code> 参数执行 prepare 命令：</p><div class="codeBlockContainer_g4Ai language-bash theme-code-block"><div class="codeBlockContent_Wf5g bash"><pre tabindex="0" class="prism-code language-bash codeBlock_K2FC thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_dntm"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">pnpm</span><span class="token plain"> run --filter </span><span class="token string" style="color:rgb(195, 232, 141)">"./packages/**"</span><span class="token plain"> prepare</span><br></span></code></pre><button type="button" aria-label="复制代码到剪切板" class="copyButton_uK8J clean-btn">复制</button></div></div><p>如果需要传递参数至命令，需要将参数放到命令后。</p><p>例如，在如下 <code>package.json</code> 配置中：</p><div class="codeBlockContainer_g4Ai language-json theme-code-block"><div class="codeBlockContent_Wf5g json"><pre tabindex="0" class="prism-code language-json codeBlock_K2FC thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_dntm"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">"scripts"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"command"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"modern command"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><button type="button" aria-label="复制代码到剪切板" class="copyButton_uK8J clean-btn">复制</button></div></div><p>执行 command 命令时携带参数方式为：</p><div class="codeBlockContainer_g4Ai language-bash theme-code-block"><div class="codeBlockContent_Wf5g bash"><pre tabindex="0" class="prism-code language-bash codeBlock_K2FC thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_dntm"><span class="token-line" style="color:#bfc7d5"><span class="token function" style="color:rgb(130, 170, 255)">pnpm</span><span class="token plain"> run </span><span class="token builtin class-name" style="color:rgb(255, 203, 107)">command</span><span class="token plain"> --options</span><br></span></code></pre><button type="button" aria-label="复制代码到剪切板" class="copyButton_uK8J clean-btn">复制</button></div></div><h2 class="anchor anchorWithStickyNavbar_pWUz" id="服务端增加-typescript-作为-ts-文件编译器">服务端增加 Typescript 作为 ts 文件编译器<a class="hash-link" href="#服务端增加-typescript-作为-ts-文件编译器" title="Direct link to heading">​</a></h2><p>在 Modernjs 之前的版本中，我们为了保证前后端编译器的统一，使用了 Babel 作为前后端默认的编译器，并保持相同的编译逻辑，但随着使用的项目增多，我们发现在一些服务端常用的语法场景下，Babel 编译 ts 有一些问题。</p><p>因此，我们将服务端编译 ts 的编译器由 Babel 改为了 Typescript，在别名解析逻辑上与 Babel 版本保持一致，同样支持使用 <code>tsconfig.json</code> 或者插件设置别名。</p><p>在执行 build 命令时，已默认使用 Typescript 编译，并默认开启了类型校验，很多项目在9、10双月已经在使用。</p><p>执行 dev 命令时，如果希望使用 Typescript 编译，需要安装 <code>ts-node</code>，<code>tsconfig-paths</code> 到 <code>devDependencies</code>，否则默认仍然使用 Babel 编译。在 Modern.js 2.0 中，我们将使用 ts-node 作为默认的编译器。</p><h2 class="anchor anchorWithStickyNavbar_pWUz" id="其他更新">其他更新<a class="hash-link" href="#其他更新" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_pWUz" id="配置更新">配置更新<a class="hash-link" href="#配置更新" title="Direct link to heading">​</a></h3><ul><li>支持在 <code>tools.webpackChain</code> 中获取 <code>HtmlWebpackPlugin</code> 对象，使用方式请参考<a href="https://modernjs.dev/v1/docs/apis/app/config/tools/webpack-chain#htmlwebpackplugin" target="_blank" rel="noopener noreferrer">文档</a>。</li></ul><h3 class="anchor anchorWithStickyNavbar_pWUz" id="底层依赖升级">底层依赖升级<a class="hash-link" href="#底层依赖升级" title="Direct link to heading">​</a></h3><ul><li>husky 升级至 v8</li></ul><p>使用 <code>npx @modern-js/create@modern-1</code> 创建项目时，husky 会默认安装 v8 版本，并移除 <code>package.json</code> 中 husky 的配置，使用 <code>.husky</code> 文件夹的形式管理 husky 配置。</p><p>在初次安装依赖时需要执行 <code>npx husky install</code> 进行 husky 初始化，默认项目会在 prepare 命令中完成，如果 husky 配置未生效，可通过手动执行完成 husky 配置。</p><h2 class="anchor anchorWithStickyNavbar_pWUz" id="功能预告">功能预告<a class="hash-link" href="#功能预告" title="Direct link to heading">​</a></h2><p>Modern.js 团队目前除了正常开发维护 Modern 1.0 外，正在全力打造 Modern.js 2.0。</p><p>Modern.js 2.0 将带来新的构建体系，除了支持使用稳定的 webpack 进行构建，还即将支持将底层构建工具切换为自研的 Rust bundler，提供更流畅的编译速度。</p><p>Modern.js 2.0 将基于 <a href="https://reactrouter.com" target="_blank" rel="noopener noreferrer">React-Router v6</a> 推荐嵌套路由作为新的路由方式；将默认支持 React 18 并提供 Streaming SSR 的支持，使用户体验更加流畅。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2022-07 ~ 2022-08 主要更新]]></title>
            <link>https://modernjs.dev/v1/blog/2022-07~2022-08</link>
            <guid>2022-07~2022-08</guid>
            <pubDate>Mon, 05 Sep 2022 10:00:00 GMT</pubDate>
            <description><![CDATA[Modern.js 7-8 月最新版本为 v1.17.0，本双月的主要更新有：]]></description>
            <content:encoded><![CDATA[<p>Modern.js 7-8 月最新版本为 v1.17.0，本双月的主要更新有：</p><ul><li><strong>支持 React 18</strong>：完成框架和插件对 React 18 的适配。</li><li><strong>包版本统一</strong>：Modern.js 所有组成包的版本号进行统一，提供升级命令。</li><li><strong>模块工程支持 bundle 构建</strong>：模块工程类型的项目，支持对产物做 bundle 构建。</li><li><strong>Reduck v1.1</strong>：发布 Reduck v1.1，使用文档全面更新。</li></ul><h2 class="anchor anchorWithStickyNavbar_pWUz" id="支持-react-18">支持 React 18<a class="hash-link" href="#支持-react-18" title="Direct link to heading">​</a></h2><p>Modern.js 框架和相关插件完成对 React 18 的适配。现在，只需要将项目中的 <code>react</code>、<code>react-dom</code> 两个包的版本，升级到最新的 React 18 大版本，就可以使用 React 18 的新功能。</p><p>注意，使用 <code>@modern-js/create</code> 命令默认创建的项目，安装的依赖 <code>react</code>、<code>react-dom</code> 的版本仍然为 17，如果希望使用 React 18，请手动升级这两个包的版本。</p><p>另外，SSR 流式渲染功能，目前尚在开发中，暂不支持。</p><h2 class="anchor anchorWithStickyNavbar_pWUz" id="modernjs-包版本统一">Modern.js 包版本统一<a class="hash-link" href="#modernjs-包版本统一" title="Direct link to heading">​</a></h2><p>之前，组成 Modern.js 的各个包的版本号并不统一，Modern.js 自身的版本和这些包的版本缺少明确的对应关系。这不仅增加了我们的维护成本，而且给用户的使用和升级带来了很多困扰。</p><p>从 v1.15.0 版本开始，Modern.js 自身的版本号和所有组成包的版本号，进行了统一。例如，Modern.js v1.15.0，意味着所有组成包的版本号也是 v1.15.0。 每次发布新版本，Modern.js 所有包都会使用统一的版本号执行发布。 Github 上仓库的 <a href="https://github.com/modern-js-dev/modern.js/tags" target="_blank" rel="noopener noreferrer">tag</a> 编号和 Modern.js 所有组成包的版本号是一一对应的。</p><p>我们提供了专门的升级工具： <code>@modern-js/upgrade</code>，可以自动升级 Modern.js 到当前的最新版本。使用方式为，在项目根路径下执行：</p><div class="codeBlockContainer_g4Ai language-bash theme-code-block"><div class="codeBlockContent_Wf5g bash"><pre tabindex="0" class="prism-code language-bash codeBlock_K2FC thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_dntm"><span class="token-line" style="color:#bfc7d5"><span class="token plain">npx @modern-js/upgrade</span><br></span></code></pre><button type="button" aria-label="复制代码到剪切板" class="copyButton_uK8J clean-btn">复制</button></div></div><h2 class="anchor anchorWithStickyNavbar_pWUz" id="模块工程支持-bundle-构建">模块工程支持 bundle 构建<a class="hash-link" href="#模块工程支持-bundle-构建" title="Direct link to heading">​</a></h2><p>模块工程（ <code>@modern-js/module-tools</code> ）对底层实现进行重构，新增 <a href="/v1/docs/apis/module/config/output/build-config/"><code>output.buildConfig</code></a> 配置，用于提供更加丰富的构建功能。</p><p>新的模块工程项目，不仅支持对产物做 bundless 构建，也支持 bundle 构建。通过配置 <code>buildConfig</code> 下的 <a href="/v1/docs/apis/module/config/output/build-config/build-type"><code>buildType</code></a> ，即可进行 bundle 构建：</p><div class="codeBlockContainer_g4Ai language-ts theme-code-block"><div class="codeBlockContent_Wf5g ts"><pre tabindex="0" class="prism-code language-ts codeBlock_K2FC thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_dntm"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// modern.config.ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> defineConfig </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@modern-js/module-tools'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">defineConfig</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  output</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    buildConfig</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      buildType</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'bundle'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// 采用 bundle 构建</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><br></span></code></pre><button type="button" aria-label="复制代码到剪切板" class="copyButton_uK8J clean-btn">复制</button></div></div><p><code>buildConfig</code> 下还支持 <a href="/v1/docs/apis/module/config/output/build-config/bundle-options"><code>bundleOptions</code></a> 配置，可以对构建行为做更多的自定义：如设置产物文件名、是否进行代码分片、设置代码压缩方式等。</p><h2 class="anchor anchorWithStickyNavbar_pWUz" id="reduck-v11">Reduck v1.1<a class="hash-link" href="#reduck-v11" title="Direct link to heading">​</a></h2><p>Reduck 作为 Modern.js 的第一方状态管理方案，发布 v1.1 版本，增加对 React 18  Concurrent Rendering 的支持，并对开发体验和功能稳定性做了大量优化。</p><p>新增 API：</p><ul><li><a href="/v1/docs/apis/app/runtime/model/use-store"><code>useStore</code></a> ：可以在组件内获取当前组件树共享的 Store，满足在组件外访问 Model 的场景需求。</li><li><a href="/v1/docs/apis/app/runtime/model/handle-effect"><code>handleEffect</code></a>：一个工具函数，可以极大地简化异步数据获取的逻辑代码。</li><li><a href="/v1/docs/apis/app/runtime/model/connect"><code>connect</code></a>： HOC 风格的 API，用于访问 Model。</li></ul><p>开发体验方面，优化 Reduck 组成包的组织结构，减少用户侧依赖数量，现在只需要引入 <code>@modern-js-reduck/react</code> 一个包（Modern.js 中 Reduck 功能已内置，无需手动引入包）；优化 API 的 TS 类型定义，改进类型信息的自动推导，整体达到 TS 支持开箱即用。</p><p>此外，对 Reduck <a href="/v1/docs/guides/features/model/quick-start">使用文档</a> 和 <a href="/v1/docs/apis/app/runtime/model/model_">API 文档</a> 做了全面更新，提供了更加丰富和详尽的内容。</p><h2 class="anchor anchorWithStickyNavbar_pWUz" id="其他更新">其他更新<a class="hash-link" href="#其他更新" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_pWUz" id="命令和配置">命令和配置<a class="hash-link" href="#命令和配置" title="Direct link to heading">​</a></h3><p><strong>新增命令</strong></p><ul><li><a href="/v1/docs/apis/app/commands/upgrade"><code>upgrade</code></a>：自动升级 Modern.js 版本。功能同执行 <code>npx @modern-js/upgrade</code> 命令。</li><li><a href="/v1/docs/apis/app/commands/inspect"><code>inspect</code></a>：通过该命令可以输出当前项目使用的完整 webpack 配置。</li><li><a href="/v1/docs/apis/module/commands/gen-release-note"><code>gen-release-note</code></a>：自动根据当前仓库的 <a href="https://github.com/changesets/changesets" target="_blank" rel="noopener noreferrer">changesets</a> 信息生成发布日志。此外，我们提供了<a href="/v1/docs/guides/features/changesets/introduce">包版本管理专题文档</a>，方便大家更好的认识和使用 changesets 及相关功能。</li></ul><p><strong>新增配置</strong></p><ul><li><a href="/v1/docs/apis/app/config/source/pre-entry"><code>source.preEntry</code></a>：用于配置全局脚本，这段脚本会早于页面的代码执行。</li></ul><h3 class="anchor anchorWithStickyNavbar_pWUz" id="bff">BFF<a class="hash-link" href="#bff" title="Direct link to heading">​</a></h3><ul><li>新增 <a href="/v1/docs/apis/app/runtime/bff-server/after-lambda-registed"><code>afterLambdaRegisted</code></a> hook。用于使用 Express 框架时，在 BFF 函数注册路由之后执行。可以用来添加错误处理逻辑，新增路由等。</li><li>优化使用 Express 框架开发场景下的热更新性能。在比较大的项目中，BFF 函数更改，热更新也可以在几十毫秒内完成。</li></ul><h3 class="anchor anchorWithStickyNavbar_pWUz" id="ssr">SSR<a class="hash-link" href="#ssr" title="Direct link to heading">​</a></h3><ul><li>SSR 产物添加 Sourcemap，优化服务端调试 SSR 代码的体验。</li></ul><h3 class="anchor anchorWithStickyNavbar_pWUz" id="web-server">Web Server<a class="hash-link" href="#web-server" title="Direct link to heading">​</a></h3><ul><li>支持按入口设置响应头，使用方式请参考<a href="/v1/docs/apis/app/config/server/routes#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E5%A4%B4">文档</a>。</li></ul>]]></content:encoded>
        </item>
    </channel>
</rss>