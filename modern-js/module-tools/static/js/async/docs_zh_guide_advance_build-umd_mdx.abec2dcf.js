(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_advance_build-umd_mdx"],{63970:function(e,n,l){"use strict";l.r(n),l.d(n,{default:function(){return t}});var i,d=l("15169"),s=l("43932"),r=l("9880"),o=l("23169");function c(e){var n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",pre:"pre",code:"code",h2:"h2",h3:"h3"},(0,o.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"构建-umd-产物",children:["构建 umd 产物",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建-umd-产物",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["umd 全称为 ",(0,r.jsx)(n.strong,{children:"Universal Module Definition"}),"，这种格式的 JS 文件可以运行在多个运行环境："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"浏览器环境：基于 AMD 规范进行模块加载"}),"\n",(0,r.jsx)(n.li,{children:"Node.js 环境：基于 CommonJS 进行模块加载"}),"\n",(0,r.jsx)(n.li,{children:"其他情况：将模块挂载在全局对象上。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"因此我们可以通过下面的方式，将项目的构建产物指定为 umd 产物："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"umd-产物的第三方依赖处理",children:["umd 产物的第三方依赖处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#umd-产物的第三方依赖处理",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在 ",(0,r.jsx)(n.a,{href:"/guide/advance/external-dependency",children:"「如何处理第三方依赖」"})," 章节中，我们知道可以通过 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#autoexternal",children:(0,r.jsx)(n.code,{children:"autoExternals"})})," 和 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#externals",children:(0,r.jsx)(n.code,{children:"externals"})})," API 来控制项目是否对第三方依赖打包。\n因此在构建 umd 产物的过程中，我们也可以这样使用："]}),"\n",(0,r.jsxs)(n.h3,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["如果项目依赖了 ",(0,r.jsx)(n.code,{children:"react"}),"："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "dependencies": {\n    "react": "^17"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modern.config.ts"})," 配置："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n    autoExternal: false,\n    externals: ['react'],\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当源码中使用了 ",(0,r.jsx)(n.code,{children:"react"})," 依赖："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'title="src/index.ts"',children:"import React from 'react';\nconsole.info(React);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["此时产物中不会将 ",(0,r.jsx)(n.code,{children:"react"})," 代码打包到产物中："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="dist/index.js"',children:"(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object')\n    factory(exports, require('react'));\n  else if (typeof define === 'function' && define.amd)\n    define(['exports', 'react'], factory);\n  else if (\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self)\n  )\n    factory((global.index = {}), global.react);\n})(this, function (exports, _react) {\n  'use strict';\n  Object.defineProperty(exports, '__esModule', {\n    value: true,\n  });\n  _react = /*#__PURE__*/ _interopRequireDefault(_react);\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule\n      ? obj\n      : {\n          default: obj,\n        };\n  }\n  console.info(_react.default);\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["通过上面的例子我们知道，当使用 ",(0,r.jsx)(n.code,{children:"autoExternal"})," 和 ",(0,r.jsx)(n.code,{children:"externals"})," API 后："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["在 Node.js 环境下，可以通过 ",(0,r.jsx)(n.code,{children:"require('react')"})," 获取 react 依赖。"]}),"\n",(0,r.jsxs)(n.li,{children:["在 浏览器环境下，可以通过 ",(0,r.jsx)(n.code,{children:"global.react"})," 获取 react 依赖。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"三方依赖的全局变量名称",children:["三方依赖的全局变量名称",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#三方依赖的全局变量名称",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["然而在浏览器环境下，获取第三方依赖的时候，",(0,r.jsx)(n.strong,{children:"全局变量名称不一定与依赖名称完全相同"}),"，此时就要使用 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#umdglobals",children:(0,r.jsx)(n.code,{children:"buildConfig.umdGlobals"})})," API。"]}),"\n",(0,r.jsxs)(n.p,{children:["还是使用之前的例子，当 ",(0,r.jsx)(n.code,{children:"react"})," 依赖以 ",(0,r.jsx)(n.code,{children:"windows.React"})," 或者 ",(0,r.jsx)(n.code,{children:"global.React"})," 全局变量的形式存在于浏览器环境下，那么此时："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"modern.config.ts"})," 配置："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n    umdGlobals: {\n      react: 'React',\n    },\n  },\n});\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当源码中使用了 ",(0,r.jsx)(n.code,{children:"react"})," 依赖："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'title="src/index.ts"',children:"import React from 'react';\nconsole.info(React);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"此时我们会看到这样的产物代码："}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="dist/index.js"',children:"(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object')\n    factory();\n  else if (typeof define === 'function' && define.amd) define([], factory);\n  else if (\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self)\n  )\n    factory();\n})(this, function () {\n  // ...\n  // libuild:globals:react\n  var require_react = __commonJS({\n    'libuild:globals:react'(exports, module1) {\n      module1.exports = Function('return this')()['React'];\n    },\n  });\n  // src/index.ts\n  var import_react = __toESM(require_react());\n  console.info(import_react.default);\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时项目就可以运行在浏览器中，并使用存在于全局对象上的 ",(0,r.jsx)(n.code,{children:"React"})," 变量了。"]}),"\n",(0,r.jsxs)(n.h2,{id:"更改项目的全局变量名称",children:["更改项目的全局变量名称",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更改项目的全局变量名称",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当我们将下面的代码打包成 umd 产物并运行在浏览器的时候，我们可以通过 ",(0,r.jsx)(n.code,{children:"window.index"})," 来使用该模块。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="./src/index.ts"',children:"export default () => {\n  console.info('hello world');\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"默认情况下，以源码文件名称作为该模块在浏览器里全局变量的名称"}),"。对于上面的例子，其产物内容如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="./dist/index.js"',children:"(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object')\n    factory(exports);\n  else if (typeof define === 'function' && define.amd)\n    define(['exports'], factory);\n  else if (\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self)\n  )\n    factory((global.index = {}));\n})(this, function (exports) {\n  //...\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["如果需要修改它，则需要使用 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#umdmodulename",children:(0,r.jsx)(n.code,{children:"buildConfig.umdModuleName"})})," API。"]}),"\n",(0,r.jsx)(n.p,{children:"当使用该 API 后："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n    umdModuleName: 'myLib',\n  },\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"此时构建产物的内容为："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="./dist/index.js"',children:"(function (global, factory) {\n  if (typeof module === 'object' && typeof module.exports === 'object')\n    factory(exports);\n  else if (typeof define === 'function' && define.amd)\n    define(['exports'], factory);\n  else if (\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self)\n  )\n    factory((global.myLib = {}));\n})(this, function (exports) {\n  //...\n});\n"})})]})}(i=globalThis).__RSPRESS_PAGE_META||(i.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvance%2Fbuild-umd.mdx"]={toc:[{text:"umd 产物的第三方依赖处理",id:"umd-产物的第三方依赖处理",depth:2},{text:"示例",id:"示例",depth:3},{text:"三方依赖的全局变量名称",id:"三方依赖的全局变量名称",depth:3},{text:"更改项目的全局变量名称",id:"更改项目的全局变量名称",depth:2}],title:"构建 umd 产物",frontmatter:{sidebar_position:5}};var t=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,o.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,(0,s._)((0,d._)({},e),{children:(0,r.jsx)(c,(0,d._)({},e))})):c(e)}}}]);