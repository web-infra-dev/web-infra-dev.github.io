(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_plugins_guide_setup-function_mdx"],{98566:function(e,n,i){"use strict";i.r(n),i.d(n,{default:function(){return c}});var s,r=i("15169"),d=i("43932"),o=i("9880"),t=i("23169");function l(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",h3:"h3",div:"div",ul:"ul",li:"li"},(0,t.useMDXComponents)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"setup-函数",children:["Setup 函数",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setup-函数",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["在",(0,o.jsx)(n.a,{href:"/plugins/guide/plugin-object",children:"「插件对象」"})," 部分我们知道插件对象包含了一个 ",(0,o.jsx)(n.code,{children:"setup"})," 函数，该函数不仅包含了一个 ",(0,o.jsx)(n.code,{children:"api"})," 对象参数，同时还可以返回一个 Hooks 对象。"]}),"\n",(0,o.jsxs)(n.h2,{id:"插件-api-对象",children:["插件 API 对象",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件-api-对象",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["插件的 ",(0,o.jsx)(n.code,{children:"setup"})," 函数会提供一个 ",(0,o.jsx)(n.code,{children:"api"})," 对象参数，你可以调用该对象上提供的一些方法来获取到配置、项目上下文等信息。"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup(api) {\n    // 获取应用原始配置\n    const config = api.useConfigContext();\n    // 获取应用运行上下文\n    const appContext = api.useAppContext();\n    // 获取解析之后的最终配置\n    const resolvedConfig = api.useResolvedConfigContext();\n  },\n});\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"apiuseappcontext",children:[(0,o.jsx)(n.code,{children:"api.useAppContext"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiuseappcontext",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"用于获取项目上下文信息。"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const useAppContext: () => IAppContext;\n\ninterface IAppContext {\n  appDirectory: string;\n  configFile: string | false;\n  packageName: string;\n  nodeModulesDirectory: string;\n  internalDirectory: string;\n  plugins: {\n    cli?: any;\n    server?: any;\n  }[];\n}\n"})}),"\n",(0,o.jsxs)(n.div,{className:"modern-directive info",children:[(0,o.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,o.jsx)(n.div,{className:"modern-directive-content",children:(0,o.jsx)(n.p,{children:"通过实际的类型文件我们可以看到还存在着其他的字段，不过目前对于模块工程有意义的字段只有以上内容。api 对象其他的方法也是如此。"})})]}),"\n",(0,o.jsxs)(n.h3,{id:"apiuseresolvedconfigcontext",children:[(0,o.jsx)(n.code,{children:"api.useResolvedConfigContext"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiuseresolvedconfigcontext",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"用于获取解析之后的最终配置。"}),"\n",(0,o.jsxs)(n.div,{className:"modern-directive info",children:[(0,o.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,o.jsx)(n.div,{className:"modern-directive-content",children:(0,o.jsxs)(n.p,{children:["如果需要获取构建相关的最终配置，需要使用 ",(0,o.jsx)(n.a,{href:"/",children:(0,o.jsx)(n.code,{children:"beforeBuild"})})," Hook。\n"]})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const useResolvedConfigContext: () => NormalizedConfig;\n\ninterface NormalizedConfig {\n  buildConfig: PartialBuildConfig;\n  buildPreset: BuildPreset;\n  dev: Dev;\n  plugins: PluginConfig;\n  runtime: RuntimeConfig;\n  runtimeByEntries?: RuntimeByEntriesConfig;\n  _raw: UserConfig;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"apiusehookrunners",children:[(0,o.jsx)(n.code,{children:"api.useHookRunners"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#apiusehookrunners",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"用于获取 Hooks 的执行器，并触发特定的 Hook 执行。"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import type { CliPlugin } from '@modern-js/core';\n\nexport const myPlugin = (): CliPlugin => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    const hookRunners = api.useHookRunners();\n    // 触发 afterBuild Hook\n    await hookRunners.afterBuild();\n  },\n});\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"异步-setup",children:["异步 setup",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异步-setup",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"CLI 插件的 setup 可以是一个异步函数，在初始化过程中执行异步逻辑。"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  async setup(api) {\n    await doSomething();\n  },\n});\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"生命周期钩子",children:["生命周期钩子",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生命周期钩子",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["我们知道 ",(0,o.jsx)(n.code,{children:"setup"})," 函数会返回一个 Hooks 对象，所谓 Hooks 对象也可以理解是具有 Module Tools 生命周期钩子的对象。"]}),"\n",(0,o.jsx)(n.p,{children:"目前主要包含两类钩子："}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["构建钩子：仅在执行 ",(0,o.jsx)(n.code,{children:"build"})," 命令构建源码产物时触发。"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"buildPlatform"})," 钩子：仅在执行 ",(0,o.jsx)(n.code,{children:"build --platform"})," 命令生成其他构建产物时触发。"]}),"\n",(0,o.jsxs)(n.li,{children:["调试钩子：运行 ",(0,o.jsx)(n.code,{children:"dev"})," 命令时会触发的钩子。"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["关于生命周期钩子的完整列表参考 ",(0,o.jsx)(n.a,{href:"/api/plugin-api/plugin-hooks",children:"API 文档"}),"。"]})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fplugins%2Fguide%2Fsetup-function.mdx"]={toc:[{text:"插件 API 对象",id:"插件-api-对象",depth:2},{text:"api.useAppContext",id:"apiuseappcontext",depth:3},{text:"api.useResolvedConfigContext",id:"apiuseresolvedconfigcontext",depth:3},{text:"api.useHookRunners",id:"apiusehookrunners",depth:3},{text:"异步 setup",id:"异步-setup",depth:2},{text:"生命周期钩子",id:"生命周期钩子",depth:2}],title:"Setup 函数",frontmatter:{sidebar_position:3}};var c=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return n?(0,o.jsx)(n,(0,d._)((0,r._)({},e),{children:(0,o.jsx)(l,(0,r._)({},e))})):l(e)}}}]);