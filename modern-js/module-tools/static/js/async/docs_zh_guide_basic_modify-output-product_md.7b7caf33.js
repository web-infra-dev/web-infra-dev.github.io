(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_basic_modify-output-product_md"],{76966:function(e,n,i){"use strict";i.r(n),i.d(n,{default:function(){return h}});var d,l=i("15169"),s=i("43932"),r=i("9880"),c=i("23169");function o(e){var n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",strong:"strong",ul:"ul",li:"li",ol:"ol",em:"em"},(0,c.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"修改输出产物",children:["修改输出产物",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改输出产物",children:"#"})]}),"\n",(0,r.jsxs)(n.h2,{id:"默认输出产物",children:["默认输出产物",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认输出产物",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["当你在初始化的项目里使用 ",(0,r.jsx)(n.code,{children:"modern build"})," 命令的时候，Module Tools 会根据当前配置内容，生成相应的构建产物。"]}),"\n",(0,r.jsx)(n.p,{children:"模板创建的默认配置内容如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import { moduleTools, defineConfig } from '@modern-js/module-tools';\n\nexport default defineConfig({\n  // 注册 Module Tools 的 CLI 工具\n  plugins: [moduleTools()],\n  // 指定构建预设配置\n  buildPreset: 'npm-library',\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"默认生成产物具有以下特点"}),"："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["会生成 ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/modules.html#modules-commonjs-modules",target:"_blank",rel:"noopener noreferrer",children:"CommonJS"})," 和 ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/esm.html#modules-ecmascript-modules",target:"_blank",rel:"noopener noreferrer",children:"ESM"})," 两份产物。"]}),"\n",(0,r.jsxs)(n.li,{children:["代码语法支持到 ",(0,r.jsx)(n.code,{children:"ES6"})," ,更高级的语法将会被转换。"]}),"\n",(0,r.jsxs)(n.li,{children:["所有的代码经过打包变成了一个文件，即进行了 ",(0,r.jsx)(n.strong,{children:"bundle"})," 处理。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物输出根目录为项目下的 ",(0,r.jsx)(n.code,{children:"dist"})," 目录，类型文件输出的目录为 ",(0,r.jsx)(n.code,{children:"dist/types"}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"看到这里你可能会有以下疑问："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"buildPreset"})," 是什么？"]}),"\n",(0,r.jsx)(n.li,{children:"产物的这些特点是由什么决定的？"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["接下来，我们首先来了解一下 ",(0,r.jsx)(n.code,{children:"buildPreset"}),"。"]}),"\n",(0,r.jsxs)(n.h2,{id:"构建预设",children:["构建预设",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建预设",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"buildPreset"})," 代表着提前准备好的一组或者多组构建相关的配置，只需要使用 ",(0,r.jsx)(n.code,{children:"buildPreset"})," 对应的预设值，就可以省去麻烦且复杂的配置工作，得到符合预期的产物。"]}),"\n",(0,r.jsx)(n.p,{children:"Module Tools 主要内置了两套构建预设,包括:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm-component"}),": 用于构建组件库。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"npm-library"}),": 用于打包其他库类型的项目,如工具库。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["同时，还提供一些变体，例如 ",(0,r.jsx)(n.code,{children:"npm-library-with-umd"})," 和 ",(0,r.jsx)(n.code,{children:"npm-library-es5"}),"，顾名思义，分别对应带有 umd 产物和支持到 es5 语法的库预设。\n详细配置可以查看其",(0,r.jsx)(n.a,{href:"/api/config/build-preset",children:"API"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:"除此之外,我们也可以完全自定义构建配置:"}),"\n",(0,r.jsxs)(n.h2,{id:"构建配置",children:["构建配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"buildConfig"})," 是一个用来描述如何编译、生成构建产物的配置项"]}),"。在最开始提到的关于“",(0,r.jsx)(n.em,{children:"构建产物的特点"}),"”，其实都是 ",(0,r.jsx)(n.code,{children:"buildConfig"})," 所支持的属性。目前所支持的属性覆盖了大部分模块类型项目在构建产物时的需求，",(0,r.jsx)(n.code,{children:"buildConfig"})," 不仅包含一些产物所具备的属性，也包含了构建产物所需要的一些特性功能。接下来从分类的角度简单罗列一下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"构建产物的基本属性包括："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["产物是否被打包：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#buildtype",children:(0,r.jsx)(n.code,{children:"buildConfig.buildType"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物对于语法的支持：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#target",children:(0,r.jsx)(n.code,{children:"buildConfig.target"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物格式：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#format",children:(0,r.jsx)(n.code,{children:"buildConfig.format"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物类型文件如何处理，对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#dts",children:(0,r.jsx)(n.code,{children:"buildConfig.dts"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物的 sourceMap 如何处理：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#sourcemap",children:(0,r.jsx)(n.code,{children:"buildConfig.sourceMap"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物对应的输入（或者是源文件）：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#input",children:(0,r.jsx)(n.code,{children:"buildConfig.input"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["产物输出的目录：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#outDir",children:(0,r.jsx)(n.code,{children:"buildConfig.outDir"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["构建的源码目录：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#sourcedir",children:(0,r.jsx)(n.code,{children:"buildConfig.sourceDir"})}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"构建产物所需的常用功能包括："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["别名：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#alias",children:(0,r.jsx)(n.code,{children:"buildConfig.alias"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["静态资源处理：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#asset",children:(0,r.jsx)(n.code,{children:"buildConfig.asset"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["第三方依赖处理：对应的 API 有：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/api/config/build-config#autoexternal",children:(0,r.jsx)(n.code,{children:"buildConfig.autoExternal"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/api/config/build-config#externals",children:(0,r.jsx)(n.code,{children:"buildConfig.externals"})}),"。"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["拷贝：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#copy",children:(0,r.jsx)(n.code,{children:"buildConfig.copy"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["全局变量替换：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#define",children:(0,r.jsx)(n.code,{children:"buildConfig.define"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["指定 ",(0,r.jsx)(n.a,{href:"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",target:"_blank",rel:"noopener noreferrer",children:"JSX"})," 编译方式，对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#jsx",children:(0,r.jsx)(n.code,{children:"buildConfig.jsx"})}),"。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"一些高级属性或者使用频率不高的功能："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["产物代码压缩：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#minify",children:(0,r.jsx)(n.code,{children:"buildConfig.minify"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["代码分割：",(0,r.jsx)(n.a,{href:"/api/config/build-config#splitting",children:(0,r.jsx)(n.code,{children:"buildConfig.spitting"})})]}),"\n",(0,r.jsxs)(n.li,{children:["指定构建产物用于 NodeJS 环境还是浏览器环境：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#platform",children:(0,r.jsx)(n.code,{children:"buildConfig.platform"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["umd 产物相关：","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["指定 umd 产物外部导入的全局变量：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#umdglobals",children:(0,r.jsx)(n.code,{children:"buildConfig.umdGlobals"})}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:["指定 umd 产物的模块名：对应的 API 是 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#umdmodulename",children:(0,r.jsx)(n.code,{children:"buildConfig.umdModuleName"})}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"除了以上分类以外，关于这些 API 的常见问题和最佳实践可以通过下面的链接来了解："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"/guide/advance/in-depth-about-build#bundle--bundleless",children:["关于 ",(0,r.jsx)(n.code,{children:"bundle"})," 和 ",(0,r.jsx)(n.code,{children:"bundleless"})]})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"/guide/advance/in-depth-about-build#input--sourcedir",children:["关于 ",(0,r.jsx)(n.code,{children:"input"})," 和 ",(0,r.jsx)(n.code,{children:"sourceDir"})]}),"。"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/guide/advance/in-depth-about-build#dts",children:"关于类型描述文件"}),"。"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/guide/advance/in-depth-about-build#define",children:"如何使用 define"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/guide/advance/external-dependency",children:"如何处理第三方依赖"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/guide/advance/copy",children:"如何使用拷贝"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/guide/advance/build-umd",children:"如何构建 umd 产物"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/guide/advance/asset",children:"如何使用静态资源"})}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"结合配置与预设",children:["结合配置与预设",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合配置与预设",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["了解 ",(0,r.jsx)(n.code,{children:"buildPreset"})," 和 ",(0,r.jsx)(n.code,{children:"buildConfig"})," 之后，我们可以将二者进行结合使用。"]}),"\n",(0,r.jsxs)(n.p,{children:["在实际项目中,我们可以先使用 ",(0,r.jsx)(n.code,{children:"buildPreset"})," 来快速获取一套默认构建配置。如果需要自定义,可以使用 ",(0,r.jsx)(n.code,{children:"buildConfig"})," 进行覆盖和扩展。"]}),"\n",(0,r.jsx)(n.p,{children:"扩展的逻辑如下:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当 ",(0,r.jsx)(n.code,{children:"buildConfig"})," 是数组时，会在原来的预设基础上添加新的配置项。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import { moduleTools, defineConfig } from '@modern-js/module-tools';\n\nexport default defineConfig({\n  plugins: [moduleTools()],\n  buildPreset: 'npm-library',\n  buildConfig: [\n    {\n      format: 'iife',\n      target: 'es2020',\n      outDir: './dist/global'\n    }\n  ]\n});\n"})}),"\n",(0,r.jsxs)(n.p,{children:["这会在原本预设的基础上，额外生成一份 IIFE 格式、支持到 ES2020 语法的产物，输出目录为项目下的 ",(0,r.jsx)(n.code,{children:"dist/global"})," 目录。"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当 ",(0,r.jsx)(n.code,{children:"buildConfig"})," 是对象时,会将对象中的配置项覆盖到预设中。"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import { moduleTools, defineConfig } from '@modern-js/module-tools';\nexport default defineConfig({\n  plugins: [moduleTools()],\n  buildPreset: 'npm-library',\n  buildConfig: {\n    sourceMap: true,\n  }\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"这会使得每一项构建任务都会生成 sourceMap 文件。"})]})}(d=globalThis).__RSPRESS_PAGE_META||(d.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fmodify-output-product.md"]={toc:[{text:"默认输出产物",id:"默认输出产物",depth:2},{text:"构建预设",id:"构建预设",depth:2},{text:"构建配置",id:"构建配置",depth:2},{text:"结合配置与预设",id:"结合配置与预设",depth:2}],title:"修改输出产物",frontmatter:{sidebar_position:3}};var h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,(0,s._)((0,l._)({},e),{children:(0,r.jsx)(o,(0,l._)({},e))})):o(e)}}}]);