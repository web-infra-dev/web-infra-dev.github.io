(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_basic_command-preview_md"],{67121:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return c}});var d,s=r("15169"),o=r("43932"),i=r("9880"),l=r("23169");function a(e){var n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",pre:"pre",ul:"ul",li:"li",strong:"strong",div:"div",em:"em"},(0,l.useMDXComponents)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"cli-命令",children:["CLI 命令",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cli-命令",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Module Tools 项目可以使用的 CLI 命令如下："}),"\n",(0,i.jsxs)(n.h2,{id:"modern-build",children:[(0,i.jsx)(n.code,{children:"modern build"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-build",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Usage: modern build [options]\n\n构建生产环境产物\n\nOptions:\n  -w, --watch            使用监听模式构建代码\n  --tsconfig [tsconfig]  指定 tsconfig.json 文件的路径 (default:\n                         "./tsconfig.json")\n  --platform [platform]  构建所有或者指定平台的产物\n  --no-dts               关闭 DTS 类型文件生成和类型检查\n  --no-clear             关闭自动清除产物输出目录的行为\n  -h, --help             展示当前命令的信息\n'})}),"\n",(0,i.jsxs)(n.p,{children:["当想要启动项目构建的时候，可以执行 ",(0,i.jsx)(n.code,{children:"modern build"})," 命令。在使用这个命令的时候，我们可以："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["当想要以观察模式启动构建时，使用 ",(0,i.jsx)(n.code,{children:"--watch"})," 选项。"]}),"\n",(0,i.jsxs)(n.li,{children:["当想要指定项目编译读取的 TypeScript 配置文件的路径时，使用 ",(0,i.jsx)(n.code,{children:"build --tsconfig ./path/config.json"})," 选项。使用该选项后，会覆盖所有 ",(0,i.jsx)(n.a,{href:"/api/config/build-config",children:(0,i.jsx)(n.code,{children:"buildConfig"})})," 里 ",(0,i.jsx)(n.a,{href:"/api/config/build-config",children:(0,i.jsx)(n.code,{children:"dts.tsconfigPath"})})," 配置。"]}),"\n",(0,i.jsxs)(n.li,{children:["当需要关闭项目的 DTS 类型文件生成和类型检查行为时，可以使用 ",(0,i.jsx)(n.code,{children:"--no-dts"})," 选项。",(0,i.jsx)(n.strong,{children:"注意：类型文件的生成依赖类型检查的结果。如果关闭了类型检查，那么类型文件也不会生成"}),"。"]}),"\n",(0,i.jsxs)(n.li,{children:["当需要关闭自动清除产物输出目录的行为时，可以使用 ",(0,i.jsx)(n.code,{children:"--no-clear"})," 选项。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["除了以上，模块工程还支持 ",(0,i.jsx)(n.code,{children:"platform"})," 构建模式，可以用于执行其他工具的构建任务。例如，目前官方支持在安装了 ",(0,i.jsx)(n.code,{children:"@modern-js/plugin-storybook"})," 插件后，可以通过执行 ",(0,i.jsx)(n.code,{children:"modern build --platform"})," 或者 ",(0,i.jsx)(n.code,{children:"modern build --platform storybook"})," 命令启动 Storybook 构建任务生成 Storybook 产物。"]}),"\n",(0,i.jsxs)(n.div,{className:"modern-directive tip",children:[(0,i.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"modern-directive-content",children:(0,i.jsxs)(n.p,{children:["在执行 Storybook 构建的时候，如果需要读取项目的构建产物。那么",(0,i.jsxs)(n.strong,{children:["在执行 ",(0,i.jsx)(n.code,{children:"modern build --platform"})," 命令启动 Storybook 构建之前，不要忘记先执行 ",(0,i.jsx)(n.code,{children:"modern build"})," 命令确保项目构建产物的存在"]}),"。\n"]})})]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-new",children:[(0,i.jsx)(n.code,{children:"modern new"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-new",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern new [options]\n\n启用可选功能\n\nOptions:\n  -d, --debug            开启 Debug 模式，打印调试日志信息 (default: false)\n  -c, --config <config>  生成器运行默认配置(JSON 字符串)\n  --dist-tag <tag>       生成器使用特殊的 npm Tag 版本\n  --registry             生成器运行过程中定制 npm Registry\n  -h, --help             display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modern new"})," 命令用于启动微生成器功能，它可以为项目启用默认没有提供的功能。"]}),"\n",(0,i.jsx)(n.p,{children:"目前可以开启的功能有："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test 测试"}),"\n",(0,i.jsx)(n.li,{children:"Storybook 调试"}),"\n",(0,i.jsx)(n.li,{children:"Tailwind CSS 支持"}),"\n",(0,i.jsx)(n.li,{children:"Modern.js Runtime API"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["关于这些功能，可以通过",(0,i.jsx)(n.a,{href:"/guide/basic/use-micro-generator",children:"「使用微生成器」"})," 章节了解更多。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-dev",children:[(0,i.jsx)(n.code,{children:"modern dev"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-dev",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern dev [options]\n\n运行和调试模块\n\nOptions:\n  -h, --help             display help for command\n\nCommands:\n[dev-tools-subCommand]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["模块工程解决方案提供了使用调试工具的能力，可以通过 ",(0,i.jsx)(n.code,{children:"modern dev"})," 命令来启动。不过要注意的是，默认情况下是没有提供调试相关的插件，因此此时执行 ",(0,i.jsx)(n.code,{children:"modern dev"})," 会提示： ",(0,i.jsx)(n.em,{children:'"No dev tools found available"'}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["目前官方支持的调试工具有 ",(0,i.jsx)(n.a,{href:"https://storybook.js.org/",target:"_blank",rel:"noopener noreferrer",children:"Storybook"}),"，因此在你执行 ",(0,i.jsx)(n.code,{children:"modern new"})," 命令开启它后，就可以执行 ",(0,i.jsx)(n.code,{children:"modern dev"})," 或者 ",(0,i.jsx)(n.code,{children:"modern dev storybook"})," 执行它。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-test",children:[(0,i.jsx)(n.code,{children:"modern test"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-test",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern test [options]\n\nOptions:\n  -h, --help  display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:["需要先执行 ",(0,i.jsx)(n.code,{children:"modern new"})," 开启测试功能，然后才可以执行 ",(0,i.jsx)(n.code,{children:"modern test"})," 命令。\n",(0,i.jsx)(n.code,{children:"modern test"})," 命令会自动将 ",(0,i.jsx)(n.code,{children:"tests/*.test.(js|ts|jsx|tsx)"})," 文件当做测试用例运行。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-lint",children:[(0,i.jsx)(n.code,{children:"modern lint"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-lint",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern lint [options] [...files]\n\nlint and fix source files\n\nOptions:\n  --no-fix    disable auto fix source file\n  -h, --help  display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:["运行 ",(0,i.jsx)(n.a,{href:"https://eslint.org/",target:"_blank",rel:"noopener noreferrer",children:"ESLint"})," 检查代码语法情况。通常情况下，我们只需要在 ",(0,i.jsx)(n.code,{children:"git commit"})," 阶段通过 ",(0,i.jsx)(n.a,{href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer",children:"lint-staged"})," 检查本次提交修改的部分代码。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--no-fix"})," 参数设置后可以关闭自动修复 lint 错误代码的能力。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-change",children:[(0,i.jsx)(n.code,{children:"modern change"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-change",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern change [options]\n\n创建变更集\n\nOptions:\n  --empty     创建空变更集 (default: false)\n  --open      使用编辑器中打开创建的变更集 (default: false)\n  -h, --help  display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modern change"})," 命令用于生成 ",(0,i.jsx)(n.a,{href:"https://github.com/changesets/changesets",target:"_blank",rel:"noopener noreferrer",children:"changesets"})," 需要的 Markdown 文件。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-pre",children:[(0,i.jsx)(n.code,{children:"modern pre"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-pre",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern pre [options] <enter|exit> [tag]\n\n进入和退出预发布模式\n\nOptions:\n  -h, --help  display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:["可以使用 ",(0,i.jsx)(n.code,{children:"modern pre"})," 命令在正式发布前",(0,i.jsx)(n.a,{href:"https://github.com/atlassian/changesets/blob/main/docs/prereleases.md",target:"_blank",rel:"noopener noreferrer",children:"预发布"}),"一个版本。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-bump",children:[(0,i.jsx)(n.code,{children:"modern bump"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-bump",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Usage: modern bump [options]\n\n使用变更集自动更新发布版本和变更日志\n\nOptions:\n  --canary       创建一个预发布版本进行测试 (default: false)\n  --preid <tag>  在对预发布版本进行版本控制时指定标识符 (default: "next")\n  --snapshot     创建一个特殊版本进行测试 (default: false)\n  -h, --help     display help for command\n'})}),"\n",(0,i.jsxs)(n.p,{children:["按照 ",(0,i.jsx)(n.a,{href:"https://github.com/changesets/changesets",target:"_blank",rel:"noopener noreferrer",children:"changesets"})," 生成的变更记录的 Markdown 文件修改 ",(0,i.jsx)(n.code,{children:"package.json"})," 中的版本号， 同时生成 ",(0,i.jsx)(n.code,{children:"CHANGELOG.md"})," 文件。"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-release",children:[(0,i.jsx)(n.code,{children:"modern release"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-release",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Usage: modern release [options]\n\n发布 npm 包\n\nOptions:\n  --tag <tag>       发布 npm 包使用特定的 tag (default: "")\n  --ignore-scripts  发布时忽略 package.json 中的 scripts 命令，仅支持在 pnpm monorepo\n                    中使用 (default: "")\n  -h, --help        display help for command\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modern release"})," 命令可以将模块发布到 ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer",children:"npm Registry"})," 上。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--tag"})," 参数可以指定发布时具体的 ",(0,i.jsx)(n.a,{href:"https://docs.npmjs.com/adding-dist-tags-to-packages",target:"_blank",rel:"noopener noreferrer",children:"dist tags"}),"。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-gen-release-note",children:[(0,i.jsx)(n.code,{children:"modern gen-release-note"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-gen-release-note",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Usage: modern gen-release-note [options]\n\n根据当前仓库 changeset 信息生成 Release Note\n\nOptions:\n  --repo <repo>      仓库名称，用于生成 Pull Request 链接， 例如： web-infra-dev/modern.js\n  --custom <cumtom>  自定义 Release Note 生成函数\n  -h, --help         display help for command\n"})}),"\n",(0,i.jsxs)(n.p,{children:["根据当前仓库的 changeset 信息自动生成 ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Release_notes",target:"_blank",rel:"noopener noreferrer",children:"Release Note"}),"。"]}),"\n",(0,i.jsxs)(n.div,{className:"modern-directive tip",children:[(0,i.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,i.jsx)(n.div,{className:"modern-directive-content",children:(0,i.jsxs)(n.p,{children:["需要在 ",(0,i.jsx)(n.code,{children:"bump"})," 命令之前执行。\n"]})})]}),"\n",(0,i.jsxs)(n.h2,{id:"modern-upgrade",children:[(0,i.jsx)(n.code,{children:"modern upgrade"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#modern-upgrade",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Usage: modern upgrade [options]\n\n升级 Modern.js 到最新版本\n\nOptions:\n  --registry <registry>  定制 npm registry (default: "")\n  -d,--debug             开启 Debug 模式，打印调试日志信息 (default: false)\n  --cwd <cwd>            项目路径 (default: "")\n  -h, --help             display help for command\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"modern upgrade"})," 命令，用于升级项目 Modern.js 相关依赖至最新版本。"]}),"\n",(0,i.jsxs)(n.p,{children:["在项目根目录下执行命令 ",(0,i.jsx)(n.code,{children:"npx modern upgrade"}),"，会默认将当前执行命令项目的 ",(0,i.jsx)(n.code,{children:"package.json"})," 中的 Modern.js 相关依赖更新至最新版本。"]})]})}(d=globalThis).__RSPRESS_PAGE_META||(d.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fcommand-preview.md"]={toc:[{text:"modern build",id:"modern-build",depth:2},{text:"modern new",id:"modern-new",depth:2},{text:"modern dev",id:"modern-dev",depth:2},{text:"modern test",id:"modern-test",depth:2},{text:"modern lint",id:"modern-lint",depth:2},{text:"modern change",id:"modern-change",depth:2},{text:"modern pre",id:"modern-pre",depth:2},{text:"modern bump",id:"modern-bump",depth:2},{text:"modern release",id:"modern-release",depth:2},{text:"modern gen-release-note",id:"modern-gen-release-note",depth:2},{text:"modern upgrade",id:"modern-upgrade",depth:2}],title:"CLI 命令",frontmatter:{sidebar_position:2}};var c=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.useMDXComponents)(),e.components).wrapper;return n?(0,i.jsx)(n,(0,o._)((0,s._)({},e),{children:(0,i.jsx)(a,(0,s._)({},e))})):a(e)}}}]);