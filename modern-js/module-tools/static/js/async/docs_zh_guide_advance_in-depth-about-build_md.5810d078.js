(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_advance_in-depth-about-build_md"],{32538:function(e,n,d){"use strict";d.r(n),d.d(n,{default:function(){return o}});var s,i=d("15169"),r=d("43932"),l=d("9880"),c=d("23169");function h(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",div:"div",h2:"h2",h3:"h3",strong:"strong",ul:"ul",li:"li",h4:"h4",pre:"pre",blockquote:"blockquote"},(0,c.useMDXComponents)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"深入理解构建",children:["深入理解构建",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#深入理解构建",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:['在 "基础使用" 的部分，我们已经知道可以通过 ',(0,l.jsx)(n.code,{children:"buildConfig"})," 配置对项目的输出产物进行修改。",(0,l.jsx)(n.code,{children:"buildConfig"})," 不仅描述了产物的一些特性，同时还为构建产物提供了一些功能。"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsxs)(n.p,{children:["如果你还不了解 ",(0,l.jsx)(n.code,{children:"buildConfig"})," 的作用，请先阅读 ",(0,l.jsx)(n.a,{href:"/guide/basic/modify-output-product",children:"修改输出产物"}),"。\n"]})})]}),"\n",(0,l.jsxs)(n.p,{children:["而在本章里我们将要深入理解某些构建配置的作用以及了解执行 ",(0,l.jsx)(n.code,{children:"modern build"})," 命令的时候发生了什么。"]}),"\n",(0,l.jsxs)(n.h2,{id:"buildconfig",children:["buildConfig",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#buildconfig",children:"#"})]}),"\n",(0,l.jsxs)(n.h3,{id:"bundle--bundleless",children:[(0,l.jsx)(n.code,{children:"bundle"})," / ",(0,l.jsx)(n.code,{children:"bundleless"}),(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#bundle--bundleless",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"那么首先我们来了解一下 bundle 和 bundleless。"}),"\n",(0,l.jsxs)(n.p,{children:["所谓 bundle 是指对构建产物进行打包，构建产物可能是一个文件，也有可能是基于一定的",(0,l.jsx)(n.a,{href:"https://esbuild.github.io/api/#splitting",target:"_blank",rel:"noopener noreferrer",children:"代码拆分策略"}),"得到的多个文件。"]}),"\n",(0,l.jsxs)(n.p,{children:["而 bundleless 则是指对每个源文件单独进行编译构建，但是并不将它们打包在一起。每一个产物文件都可以找到与之相对应的源码文件。",(0,l.jsx)(n.strong,{children:"bundleless 构建的过程，也可以理解为仅对源文件进行代码转换的过程"}),"。"]}),"\n",(0,l.jsx)(n.p,{children:"它们有各自的好处："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"bundle 可以减少构建产物的体积，也可以对依赖预打包，减小安装依赖的体积。提前对库进行打包，可以加快应用项目构建的速度。"}),"\n",(0,l.jsx)(n.li,{children:"bundleless 则是可以保持原有的文件结构，更有利于调试和 tree shaking。"}),"\n"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive warning",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"WARNING"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsxs)(n.p,{children:["bundleless 是单文件编译模式，因此对于类型的引用和导出你需要加上 ",(0,l.jsx)(n.code,{children:"type"})," 字段， 例如 ",(0,l.jsx)(n.code,{children:"import type { A } from './types"}),"\n"]})})]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"buildConfig"})," 中可以通过 ",(0,l.jsx)(n.a,{href:"/api/config/build-config#buildtype",children:(0,l.jsx)(n.code,{children:"buildConfig.buildType"})})," 来指定当前构建任务是 bundle 还是 bundleless。"]}),"\n",(0,l.jsxs)(n.h3,{id:"input--sourcedir",children:[(0,l.jsx)(n.code,{children:"input"})," / ",(0,l.jsx)(n.code,{children:"sourceDir"}),(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#input--sourcedir",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/api/config/build-config#input",children:(0,l.jsx)(n.code,{children:"buildConfig.input"})})," 用于指定读取源码的文件路径或者目录路径，其默认值在 bundle 和 bundleless 构建过程中有所不同："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["当 ",(0,l.jsx)(n.code,{children:"buildType: 'bundle'"})," 的时候，",(0,l.jsx)(n.code,{children:"input"})," 默认值为 ",(0,l.jsx)(n.code,{children:"src/index.(j|t)sx?"})]}),"\n",(0,l.jsxs)(n.li,{children:["当 ",(0,l.jsx)(n.code,{children:"buildType: 'bundleless'"})," 的时候，",(0,l.jsx)(n.code,{children:"input"})," 默认值为 ",(0,l.jsx)(n.code,{children:"['src']"})]}),"\n"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive warning",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"WARNING"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsx)(n.p,{children:"建议不要在 bundleless 构建过程中指定多个源码文件目录，这可能会导致产物里的相对路径不正确。"})})]}),"\n",(0,l.jsxs)(n.p,{children:["从默认值上我们可以知道：",(0,l.jsx)(n.strong,{children:"bundle 构建一般可以指定文件路径作为构建的入口，而 bundleless 构建则更期望使用目录路径寻找源文件"}),"。"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/api/config/build-config#sourcedir",children:(0,l.jsx)(n.code,{children:"sourceDir"})})," 用于指定源码目录，它主要与以下两个内容有关系："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型文件生成"}),"\n",(0,l.jsxs)(n.li,{children:["指定构建过程中的 ",(0,l.jsx)(n.a,{href:"https://esbuild.github.io/api/#outbase",target:"_blank",rel:"noopener noreferrer",children:(0,l.jsx)(n.code,{children:"outbase"})})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"一般来说："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["在 bundleless 构建过程中，",(0,l.jsx)(n.code,{children:"sourceDir"})," 与 ",(0,l.jsx)(n.code,{children:"input"})," 的值要保持一致，它们的默认值都是 ",(0,l.jsx)(n.code,{children:"src"})]}),"。"]}),"\n",(0,l.jsxs)(n.li,{children:["在 bundle 构建过程中，无需使用 ",(0,l.jsx)(n.code,{children:"sourceDir"}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"dts",children:["dts",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dts",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/api/config/build-config#dts",children:(0,l.jsx)(n.code,{children:"buildConfig.dts"})})," 配置主要用于类型文件的生成。"]}),"\n",(0,l.jsxs)(n.h4,{id:"关闭类型生成",children:["关闭类型生成",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关闭类型生成",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"默认情况下类型生成功能是开启的，如果需要关闭的话，可以按照如下配置："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"import { defineConfig } from '@modern-js/module-tools';\n\nexport default defineConfig({\n  buildConfig: {\n    dts: false,\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsx)(n.p,{children:"关闭类型文件后，一般来说构建速度会有所提升。"})})]}),"\n",(0,l.jsxs)(n.h4,{id:"打包类型文件",children:["打包类型文件",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包类型文件",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"buildType: 'bundleless'"})," 的时候，类型文件的生成是使用项目的 ",(0,l.jsx)(n.code,{children:"tsc"})," 命令来完成生产。"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"模块工程解决方案同时还支持对类型文件进行打包"}),"，不过使用该功能的时候需要注意："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["一些第三方依赖存在错误的语法会导致打包过程失败。因此对于这种情况，需要手动通过 ",(0,l.jsx)(n.a,{href:"/api/config/build-config#externals",children:(0,l.jsx)(n.code,{children:"buildConfig.externals"})})," 将这类第三方包排除。"]}),"\n",(0,l.jsxs)(n.li,{children:["对于第三方依赖的类型文件指向的是一个 ",(0,l.jsx)(n.code,{children:".ts"})," 文件的情况，目前无法处理。比如第三方依赖的 ",(0,l.jsx)(n.code,{children:"package.json"})," 中存在这样的内容： ",(0,l.jsx)(n.code,{children:'{"types": "./src/index.ts"}'}),"。"]}),"\n"]}),"\n",(0,l.jsxs)(n.h4,{id:"别名转换",children:["别名转换",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#别名转换",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"在 bundleless 构建过程中，如果源代码中出现了别名，例如："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="./src/index.ts"',children:"import utils from '@common/utils';\n"})}),"\n",(0,l.jsxs)(n.p,{children:["正常来说，使用 ",(0,l.jsx)(n.code,{children:"tsc"})," 生成的产物类型文件也会包含这些别名。不过 Module Tools 会对 ",(0,l.jsx)(n.code,{children:"tsc"})," 生成的类型文件里的别名进行转换处理："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["对于类似 ",(0,l.jsx)(n.code,{children:"import '@common/utils'"})," 或者 ",(0,l.jsx)(n.code,{children:"import utils from '@common/utils'"})," 这样形式的代码可以进行别名转换。"]}),"\n",(0,l.jsxs)(n.li,{children:["对于类似 ",(0,l.jsx)(n.code,{children:"export { utils } from '@common/utils'"})," 这样形式的代码可以进行别名转换。"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["然而也存在一些情况，目前还无法处理，例如 ",(0,l.jsx)(n.code,{children:"Promise<import('@common/utils')>"})," 这样形式的输出类型目前无法进行转换。\n对于这种情况的解决办法，可以参与",(0,l.jsx)(n.a,{href:"https://github.com/web-infra-dev/modern.js/discussions/4511",target:"_blank",rel:"noopener noreferrer",children:"讨论"}),"。"]}),"\n",(0,l.jsxs)(n.h4,{id:"一些示例",children:["一些示例",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一些示例",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from '@modern-js/module-tools';\n\nexport default defineConfig({\n  // 此时打包的类型文件输出路径为 `./dist/types`，并且将会读取项目下的 other-tsconfig.json 文件\n  buildConfig: {\n    buildType: 'bundle',\n    dts: {\n      tsconfigPath: './other-tsconfig.json',\n      distPath: './types',\n    },\n    outDir: './dist',\n  },\n});\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from '@modern-js/module-tools';\n\nexport default defineConfig({\n  // 此时类型文件没有进行打包，输出路径为 `./dist/types`\n  buildConfig: [\n    {\n      buildType: 'bundle',\n      dts: false,\n      outDir: './dist',\n    },\n    {\n      buildType: 'bundleless',\n      dts: {\n        only: true,\n      },\n      outDir: './dist/types',\n    },\n  ],\n});\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"define",children:[(0,l.jsx)(n.code,{children:"define"}),(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#define",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/api/config/build-config#define",children:(0,l.jsx)(n.code,{children:"buildConfig.define"})})," 功能有些类似 ",(0,l.jsx)(n.a,{href:"https://webpack.js.org/plugins/define-plugin/",target:"_blank",rel:"noopener noreferrer",children:(0,l.jsx)(n.code,{children:"webpack.DefinePlugin"})}),"。这里介绍几个使用场景："]}),"\n",(0,l.jsxs)(n.h4,{id:"环境变量替换",children:["环境变量替换",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#环境变量替换",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from '@modern-js/module-tools';\nexport default defineConfig({\n  buildConfig: {\n    define: {\n      'process.env.VERSION': JSON.stringify(process.env.VERSION || '0.0.0'),\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"通过上面的配置，我们就可以将下面这段代码："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// 编译前代码\nconsole.log(process.env.VERSION);\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在执行 ",(0,l.jsx)(n.code,{children:"VERSION=1.0.0 modern build"})," 的时候，转换为："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// 编译后代码\nconsole.log('1.0.0');\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"全局变量替换",children:["全局变量替换",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#全局变量替换",children:"#"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import { defineConfig } from '@modern-js/module-tools';\nexport default defineConfig({\n  buildConfig: {\n    define: {\n      VERSION: JSON.stringify(require('./package.json').version || '0.0.0'),\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"通过上面的配置，我们就可以将下面这段代码："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// 编译前代码\nconsole.log(VERSION);\n"})}),"\n",(0,l.jsx)(n.p,{children:"转换为："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// 编译后代码\nconsole.log('1.0.0');\n"})}),"\n",(0,l.jsxs)(n.p,{children:["不过要注意：如果项目是一个 TypeScript 项目，那么你可能需要在项目源代码目录下的 ",(0,l.jsx)(n.code,{children:".d.ts"})," 文件里增加以下内容："]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["如果不存在 ",(0,l.jsx)(n.code,{children:"d.ts"})," 文件，则可以手动创建。"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="env.d.ts"',children:"declare const YOUR_ADD_GLOBAL_VAR;\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"构建过程",children:["构建过程",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建过程",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["当执行 ",(0,l.jsx)(n.code,{children:"modern build"})," 命令的时候，会发生"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["根据 ",(0,l.jsx)(n.code,{children:"buildConfig.outDir"})," 清理产物目录。"]}),"\n",(0,l.jsxs)(n.li,{children:["编译 ",(0,l.jsx)(n.code,{children:"js/ts"})," 源代码生成 bundle / bundleless 的 JS 构建产物。"]}),"\n",(0,l.jsxs)(n.li,{children:["使用 ",(0,l.jsx)(n.code,{children:"tsc"})," 生成 bundle / bundleless 的类型文件。"]}),"\n",(0,l.jsxs)(n.li,{children:["处理 ",(0,l.jsx)(n.code,{children:"copy"})," 任务。"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"构建报错",children:["构建报错",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建报错",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"当发生构建报错的时候，基于以上了解到的信息，可以很容易的明白在终端出现的报错内容："}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"js 或者 ts 构建的报错："})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'error  ModuleBuildError:\n\n╭───────────────────────╮\n│ bundle failed:        │\n│  - format is "cjs"    │\n│  - target is "esnext" │\n╰───────────────────────╯\n\nDetailed Information:\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"类型文件生成过程的报错："})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"error   ModuleBuildError:\n\nbundle DTS failed:\n"})}),"\n",(0,l.jsxs)(n.p,{children:["对于 ",(0,l.jsx)(n.code,{children:"js/ts"})," 构建错误，我们可以从报错信息中知道："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["报错的 ",(0,l.jsx)(n.code,{children:"buildType"})]}),"\n",(0,l.jsxs)(n.li,{children:["报错的 ",(0,l.jsx)(n.code,{children:"format"})]}),"\n",(0,l.jsxs)(n.li,{children:["报错的 ",(0,l.jsx)(n.code,{children:"target"})]}),"\n",(0,l.jsx)(n.li,{children:"其他具体报错信息"}),"\n"]})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvance%2Fin-depth-about-build.md"]={toc:[{text:"buildConfig",id:"buildconfig",depth:2},{text:"bundle / bundleless",id:"bundle--bundleless",depth:3},{text:"input / sourceDir",id:"input--sourcedir",depth:3},{text:"dts",id:"dts",depth:3},{text:"关闭类型生成",id:"关闭类型生成",depth:4},{text:"打包类型文件",id:"打包类型文件",depth:4},{text:"别名转换",id:"别名转换",depth:4},{text:"一些示例",id:"一些示例",depth:4},{text:"define",id:"define",depth:3},{text:"环境变量替换",id:"环境变量替换",depth:4},{text:"全局变量替换",id:"全局变量替换",depth:4},{text:"构建过程",id:"构建过程",depth:2},{text:"构建报错",id:"构建报错",depth:2}],title:"深入理解构建",frontmatter:{sidebar_position:1}};var o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,l.jsx)(n,(0,r._)((0,i._)({},e),{children:(0,l.jsx)(h,(0,i._)({},e))})):h(e)}}}]);