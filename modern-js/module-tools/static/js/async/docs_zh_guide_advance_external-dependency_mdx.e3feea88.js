(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_advance_external-dependency_mdx"],{11842:function(e,n,d){"use strict";d.r(n),d.d(n,{default:function(){return o}});var s,c=d("15169"),i=d("43932"),r=d("9880"),l=d("23169");function a(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",pre:"pre",h2:"h2",strong:"strong",h3:"h3",ul:"ul",li:"li",blockquote:"blockquote"},(0,l.useMDXComponents)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"处理三方依赖",children:["处理三方依赖",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#处理三方依赖",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["一般来说，项目所需要的第三方依赖可以通过包管理器的 ",(0,r.jsx)(n.code,{children:"install"})," 命令安装，在安装第三方依赖成功后，这些第三方依赖一般会出现在项目 ",(0,r.jsx)(n.code,{children:"package.json"})," 的 ",(0,r.jsx)(n.code,{children:"dependencies"})," 和 ",(0,r.jsx)(n.code,{children:"devDependencies"})," 下。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="pacakge.json"',children:'{\n  "dependencies": {},\n  "devDependencies": {}\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:'"dependencies"'})," 下的依赖通常来说是这个包运行所需的依赖， ",(0,r.jsx)(n.code,{children:'"devDependencies"'})," 则代表着开发依赖。"]}),"\n",(0,r.jsxs)(n.p,{children:["除了 ",(0,r.jsx)(n.code,{children:'"dependencies"'})," 以外，",(0,r.jsx)(n.a,{href:"/guide/basic/before-getting-started#peerdependencies",children:(0,r.jsx)(n.code,{children:'"peerDependencies"'})})," 也可以声明在生产环境下运行所需要的依赖，此时会和它的宿主共享一份依赖。"]}),"\n",(0,r.jsxs)(n.h2,{id:"第三方依赖的默认处理",children:["第三方依赖的默认处理",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第三方依赖的默认处理",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在模块工程里，",(0,r.jsxs)(n.strong,{children:["默认情况下不会对 ",(0,r.jsx)(n.code,{children:'"dependencies"'})," 以及 ",(0,r.jsx)(n.code,{children:'"peerDependencies"'})," 下的第三方依赖进行打包处理"]}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:["这是因为在安装 npm 包时，其 ",(0,r.jsx)(n.code,{children:'"dependencies"'})," 也会被安装。不打包 ",(0,r.jsx)(n.code,{children:'"dependencies"'}),"，可以减小包产物的体积。"]}),"\n",(0,r.jsxs)(n.p,{children:["如果需要打包某些依赖，建议将它们从 ",(0,r.jsx)(n.code,{children:'"dependencies"'})," 挪到 ",(0,r.jsx)(n.code,{children:'"devDependencies"'})," ，这相当于对依赖进行 ",(0,r.jsx)(n.strong,{children:"prebundle"})," ，可以减小依赖安装的体积。"]}),"\n",(0,r.jsxs)(n.h3,{id:"示例",children:["示例",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["如果项目依赖了 ",(0,r.jsx)(n.code,{children:"react"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "dependencies": {\n    "react": "^17"\n  },\n  // or\n  "peerDependencies": {\n    "react": "^17"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["当源码中使用了 ",(0,r.jsx)(n.code,{children:"react"})," 依赖:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",meta:'title="src/index.ts"',children:"import React from 'react';\nconsole.info(React);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["此时产物中不会包含 ",(0,r.jsx)(n.code,{children:"react"})," 的代码:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",meta:'title="dist/index.js"',children:"import React from 'react';\nconsole.info(React);\n"})}),"\n",(0,r.jsx)(n.p,{children:"如果想要修改默认的处理方式，可以通过下面的 API 进行修改："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/config/build-config#autoexternal",children:(0,r.jsx)(n.code,{children:"buildConfig.autoExternal"})})}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"排除指定第三方依赖",children:["排除指定第三方依赖",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#排除指定第三方依赖",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在上面我们提到了 ",(0,r.jsx)(n.code,{children:"buildConfig.autoExternal"})," API 的用途，同时 ",(0,r.jsx)(n.a,{href:"/api/config/build-config#externals",children:(0,r.jsx)(n.code,{children:"buildConfig.externals"})})," 可以实现对三方依赖更细微的处理。"]}),"\n",(0,r.jsx)(n.p,{children:"例如当我们需要仅对某些依赖不进行打包处理的时候，可以按照如下方式进行配置："}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"一般这种情况，可能是某些依赖不适合进行打包处理。如果遇到这种情况，则可以按照下面的方式进行处理。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"epxort default defineConfig({\n  buildConfig: {\n    autoExternal: false,\n    externals: ['pkg-1', /pkg-2/],\n  }\n});\n"})})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fadvance%2Fexternal-dependency.mdx"]={toc:[{text:"第三方依赖的默认处理",id:"第三方依赖的默认处理",depth:2},{text:"示例",id:"示例",depth:3},{text:"排除指定第三方依赖",id:"排除指定第三方依赖",depth:2}],title:"处理三方依赖",frontmatter:{sidebar_position:4}};var o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,l.useMDXComponents)(),e.components).wrapper;return n?(0,r.jsx)(n,(0,i._)((0,c._)({},e),{children:(0,r.jsx)(a,(0,c._)({},e))})):a(e)}}}]);