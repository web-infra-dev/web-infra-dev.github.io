(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_en_api_plugin-api_plugin-hooks_md"],{87932:function(e,n,r){"use strict";r.r(n),r.d(n,{default:function(){return a}});var s,i=r("15169"),l=r("43932"),o=r("9880"),t=r("23169");function d(e){var n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",h3:"h3",pre:"pre",blockquote:"blockquote"},(0,t.useMDXComponents)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{id:"plugin-hooks",children:["Plugin Hooks",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#plugin-hooks",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"This chapter describes the lifecycle hooks supported by module-tools."}),"\n",(0,o.jsx)(n.p,{children:"Currently there are two main types of lifecycle hooks."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Build hooks: triggered only when the ",(0,o.jsx)(n.code,{children:"build"})," command is executed to build the source code product."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"buildPlatform"})," hook: triggered only when the ",(0,o.jsx)(n.code,{children:"build --platform"})," command is executed to generate other build products."]}),"\n",(0,o.jsxs)(n.li,{children:["dev hooks: hooks that are triggered when running the ",(0,o.jsx)(n.code,{children:"dev"})," command."]}),"\n"]}),"\n",(0,o.jsxs)(n.h2,{id:"build-hooks",children:["build hooks",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build-hooks",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["The following Hooks are triggered in order when the ",(0,o.jsx)(n.code,{children:"build"})," command is executed."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"beforeBuild"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"beforeBuildTask"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"afterBuildTask"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"afterBuild"})}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"beforebuild",children:[(0,o.jsx)(n.code,{children:"beforeBuild"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforebuild",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered before the execution of the overall build process."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeBuild(options: Options): Return {\n        return options.config;\n      }\n    }\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Parameters and return value types."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"type Options = { options: { config: BuildConfig; cliOptions: BuildCommandOptions } }\n\nexport interface BuildCommandOptions {\n  config: string;\n  clear?: boolean;\n  dts?: boolean;\n  platform?: boolean | string[];\n  tsconfig: string;\n  watch?: boolean;\n}\n\ntype Return = BuildConfig;\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"BuildConfig"})," type reference ",(0,o.jsx)(n.a,{href:"/en/api/",children:"API configuration"})]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"beforebuildtask",children:[(0,o.jsx)(n.code,{children:"beforeBuildTask"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforebuildtask",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Based on the build configuration, Module Tools will split the overall build into multiple sub-build tasks. The Hook will be triggered before each build subtask."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeBuildTask(config: BaseBuildConfig): BaseBuildConfig {\n        return config;\n      }\n    }\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Parameters and return value types."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"BaseBuildConfig"})," type reference ",(0,o.jsx)(n.a,{href:"/en/api/",children:"API configuration"})]}),"\n",(0,o.jsxs)(n.h3,{id:"afterbuildtask",children:[(0,o.jsx)(n.code,{children:"afterBuildTask"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterbuildtask",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered after the end of each build subtask."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      afterBuildTask(options: BuildTaskResult): void {\n        // ...\n      }\n    }\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Parameters and return value types."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface BuildTaskResult {\n  status: 'success' | 'fail';\n  message?: string;\n  config: BaseBuildConfig;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"afterbuild",children:[(0,o.jsx)(n.code,{children:"afterBuild"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterbuild",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered after the end of the overall build process."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      afterBuild(options: BuildResult): void {\n        // ...\n      }\n    }\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Parameters and return value types."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface BuildResult {\n  status: 'success' | 'fail';\n  message?: string;\n  config: BuildConfig;\n  commandOptions: BuildCommandOptions;\n  totalDuration: number;\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"buildplatform-hooks",children:["buildPlatform hooks",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#buildplatform-hooks",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["module-tools also provides the ",(0,o.jsx)(n.code,{children:"build --platform"})," command to perform specific build tasks."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, after installing the Storybook plugin, you can run ",(0,o.jsx)(n.code,{children:"build --platform"})," or ",(0,o.jsx)(n.code,{children:"build --platform storybook"})," to perform Storybook build tasks. This is because the Storybook plugin is based on the buildPlatform Hooks."]}),"\n",(0,o.jsxs)(n.p,{children:["Hooks are triggered in the following order after executing ",(0,o.jsx)(n.code,{children:"build --platform"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"registerBuildPlatform"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"beforeBuildPlatform"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"buildPlatform"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"afterBuildPlatform"})}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"registerbuildplatform",children:[(0,o.jsx)(n.code,{children:"registerBuildPlatform"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#registerbuildplatform",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["Gets information about the tasks that need to be run when executing the ",(0,o.jsx)(n.code,{children:"build --platform"})," command."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      registerBuildPlatform(): RegisterBuildPlatformResult {\n        // ...\n        return {\n          platform: 'stroybook',\n          build() {\n            // run storybook logic\n          },\n        }, };\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface RegisterBuildPlatformResult {\n  platform: string | string[];\n  build: (\n    currentPlatform: string, // the currently running platform build task\n    context: { isTsProject: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"beforebuildplatform",children:[(0,o.jsx)(n.code,{children:"beforeBuildPlatform"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforebuildplatform",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["Triggers all registered build tasks when the ",(0,o.jsx)(n.code,{children:"build --platform"})," command is executed. ",(0,o.jsx)(n.code,{children:"beforeBuildPlatform"})," will be triggered before the execution of the overall build task."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeBuildPlatform(platforms: RegisterBuildPlatformResult[]): void {\n        console.info(`have ${platforms.length} platform tasks`);\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface RegisterBuildPlatformResult {\n  platform: string | string[];\n  build: (\n    currentPlatform: string, // the currently running platform build task\n    context: { isTsProject: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"buildplatform",children:[(0,o.jsx)(n.code,{children:"buildPlatform"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#buildplatform",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["When the ",(0,o.jsx)(n.code,{children:"build --platform"})," command is executed, all registered build tasks will be triggered. ",(0,o.jsx)(n.code,{children:"buildPlatform"})," will be triggered before each build task is executed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      buildPlatform({ platform }: Options): void {\n        console.info(`current task is ${platform}`);\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface Options {\n  platform: string;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"afterbuildplatform",children:[(0,o.jsx)(n.code,{children:"afterBuildPlatform"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterbuildplatform",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["When the ",(0,o.jsx)(n.code,{children:"build --platform"})," command is executed, all registered build tasks will be triggered. ",(0,o.jsx)(n.code,{children:"afterBuildPlatform"})," will be triggered after the overall platform build task is finished."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      afterBuildPlatform(result: BuildPlatformResult): void {\n        if (result.status === 'success') {\n          console.info(`all platform build task success`);\n        } else {\n          console.error(result.message);\n        }\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface BuildPlatformResult {\n  status: 'success' | 'fail';\n  message: string | Error | null;\n}\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"dev-hooks",children:["Dev Hooks",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dev-hooks",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:["The following Hooks are triggered in order when the ",(0,o.jsx)(n.code,{children:"dev"})," command is executed."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"registerDev"}),": triggered when getting dev function information."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"beforeDev"}),": Triggered before starting the dev process as a whole."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"beforeDevMenu"}),": triggered before the dev list/menu appears."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"afterDevMenu"}),": triggered after dev list/menu option is selected."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"beforeDevTask"}),": Triggered before executing the dev task."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"afterDev"}),": Triggered at the end of the overall dev process."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"registerdev",children:[(0,o.jsx)(n.code,{children:"registerDev"}),".",(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#registerdev",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Register dev tool related data. Mainly contains."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"the name of the dev tool"}),"\n",(0,o.jsx)(n.li,{children:"The name of the item displayed in the menu list and the corresponding value."}),"\n",(0,o.jsxs)(n.li,{children:["The definition of the ",(0,o.jsx)(n.code,{children:"dev"})," subcommand."]}),"\n",(0,o.jsx)(n.li,{children:"Whether to execute the source code build before running the dev task"}),"\n",(0,o.jsx)(n.li,{children:"The function to execute the dev task."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      registerDev() {\n        return {\n          // Dev tool name\n          name: 'storybook',\n          // Menu content\n          menuItem: {\n            name: 'Storybook',\n            value: 'storybook',\n          },\n          // Defined dev subcommands\n          subCommands: ['storybook', 'story'],\n          async action() {\n            // dev logic\n          },\n        };\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface DevToolData {\n  name: string;\n  subCommands?: string[];\n  menuItem?: {\n    name: string;\n    value: string;\n  };\n  action: (\n    options: { port?: string },\n    context: { isTsProject?: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"beforedev",children:[(0,o.jsx)(n.code,{children:"beforeDev"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforedev",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered before the dev task is executed after all dev tool metadata has been collected."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeDev(metas: DevToolData[]) {\n        console.info(`have ${metas.length} dev tools`);\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface DevToolData {\n  name: string;\n  subCommands?: string[];\n  menuItem?: {\n    name: string;\n    value: string;\n  };\n  action: (\n    options: { port?: string },\n    context: { isTsProject?: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"beforeafterdevmenu",children:[(0,o.jsx)(n.code,{children:"(before|after)DevMenu"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforeafterdevmenu",children:"#"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"beforeDevMenu"})," is triggered before the dev list/menu appears. Receives ",(0,o.jsx)(n.a,{href:"https://github.com/SBoudrias/Inquirer.js#question",target:"_blank",rel:"noopener noreferrer",children:"inquirer question"})," as argument. Default value is."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const question = [\n  {\n    name: 'choiceDevTool',\n    message: 'Select dev tool',\n    type: 'list',\n    // Registered dev messages\n    choices,\n  },\n];\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"afterDevMenu"})," Triggered after selecting dev list/menu options."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeDevMenu(questions) {\n        questions[0].message += '!' ;\n        return questions; // required\n      },\n      afterDevMenu(options: Options) {\n        console.info(`choise ${options.result.choiceDevTool} dev tools`);\n      }\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export type { QuestionCollection } from 'inquirer';\n\nexport interface Options {\n  result: PromptResult;\n  devTools: DevToolData[];\n}\n\nexport type PromptResult = { choiceDevTool: string }\nexport interface DevToolData {\n  name: string;\n  subCommands?: string[];\n  menuItem?: {\n    name: string;\n    value: string;\n  };\n  action: (\n    options: { port?: string },\n    context: { isTsProject?: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"beforedevtask",children:[(0,o.jsx)(n.code,{children:"beforeDevTask"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#beforedevtask",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered before the dev task is executed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      beforeDevTask(currentDevData: DevToolData) {\n        console.info(`${currentDevData.name} running`);\n      },\n    };\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Types of parameters entered and returned."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export interface DevToolData {\n  name: string;\n  subCommands?: string[];\n  menuItem?: {\n    name: string;\n    value: string;\n  };\n  action: (\n    options: { port?: string },\n    context: { isTsProject?: boolean },\n  ) => void | Promise<void>;\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"afterdev",children:[(0,o.jsx)(n.code,{children:"afterDev"}),(0,o.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#afterdev",children:"#"})]}),"\n",(0,o.jsx)(n.p,{children:"Triggered when the dev task process is interrupted."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export const myPlugin = (): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      afterDev() {\n        console.info(`exit!`);\n      },\n    };\n  },\n});\n"})})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["en%2Fapi%2Fplugin-api%2Fplugin-hooks.md"]={toc:[{text:"build hooks",id:"build-hooks",depth:2},{text:"beforeBuild",id:"beforebuild",depth:3},{text:"beforeBuildTask",id:"beforebuildtask",depth:3},{text:"afterBuildTask",id:"afterbuildtask",depth:3},{text:"afterBuild",id:"afterbuild",depth:3},{text:"buildPlatform hooks",id:"buildplatform-hooks",depth:2},{text:"registerBuildPlatform",id:"registerbuildplatform",depth:3},{text:"beforeBuildPlatform",id:"beforebuildplatform",depth:3},{text:"buildPlatform",id:"buildplatform",depth:3},{text:"afterBuildPlatform",id:"afterbuildplatform",depth:3},{text:"Dev Hooks",id:"dev-hooks",depth:2},{text:"registerDev.",id:"registerdev",depth:3},{text:"beforeDev",id:"beforedev",depth:3},{text:"(before|after)DevMenu",id:"beforeafterdevmenu",depth:3},{text:"beforeDevTask",id:"beforedevtask",depth:3},{text:"afterDev",id:"afterdev",depth:3}],title:"Plugin Hooks",frontmatter:{}};var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,t.useMDXComponents)(),e.components).wrapper;return n?(0,o.jsx)(n,(0,l._)((0,i._)({},e),{children:(0,o.jsx)(d,(0,i._)({},e))})):d(e)}}}]);