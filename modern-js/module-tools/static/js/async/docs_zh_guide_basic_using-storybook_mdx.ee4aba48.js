(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_guide_basic_using-storybook_mdx"],{39879:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return t}});var o,r=s("15169"),i=s("43932"),d=s("9880"),c=s("23169");function l(e){var n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",h2:"h2",strong:"strong",h3:"h3",pre:"pre",div:"div",blockquote:"blockquote",ol:"ol"},(0,c.useMDXComponents)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"使用-storybook",children:["使用 Storybook",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用-storybook",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"首先如果没有看过以下内容的话，可以先花几分钟先了解一下："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/guide/basic/use-micro-generator#storybook-%E8%B0%83%E8%AF%95",children:"使用微生成器开启 Storybook 调试"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/guide/basic/command-preview#modern-dev",children:(0,d.jsx)(n.code,{children:"modern dev"})})}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.a,{href:"https://storybook.js.org/",target:"_blank",rel:"noopener noreferrer",children:"Storybook"})," 是一个专门用于组件调试的工具，它围绕着组件开发提供了："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"丰富多样的调试能力"}),"\n",(0,d.jsx)(n.li,{children:"可与一些测试工具结合使用"}),"\n",(0,d.jsx)(n.li,{children:"可重复使用的文档内容"}),"\n",(0,d.jsx)(n.li,{children:"可分享能力"}),"\n",(0,d.jsx)(n.li,{children:"工作流程自动化"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"因此 Storybook 是一个复杂且功能强大的工具。"}),"\n",(0,d.jsx)(n.p,{children:"Module Tools 集成了 Storybook，因此你几乎可以按照 Storybook 官方文档的内容进行使用。不过依然有一些地方需要注意，接下来讲解一下。"}),"\n",(0,d.jsxs)(n.h2,{id:"调试代码",children:["调试代码",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调试代码",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"在调试代码过程中需要引入项目代码，目前可以通过两种方式引入项目代码："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"引用项目产物"}),"\n",(0,d.jsx)(n.li,{children:"引用项目源码"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["我们推荐使用第一种“",(0,d.jsx)(n.strong,{children:"引用项目产物"}),"”的方式。因为它更接近真实的使用场景，不仅可以对组件功能进行调试，同时也对构建产物的正确性进行了验证。不过我们也可以在测试项目功能的时候引用源码，在验证项目产物的时候引用项目的包名。"]}),"\n",(0,d.jsx)(n.p,{children:"接下来我们分别讲一下这两种方式具体如何使用。"}),"\n",(0,d.jsxs)(n.h3,{id:"引用组件产物",children:["引用组件产物",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#引用组件产物",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["假如存在 TypeScript 项目 ",(0,d.jsx)(n.code,{children:"foo"}),"，首先要确保 ",(0,d.jsx)(n.code,{children:"package.json"})," 的 ",(0,d.jsx)(n.code,{children:"main"})," 和 ",(0,d.jsx)(n.code,{children:"types"})," 的值为正确的产物路径。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-json",meta:'title="package.json"',children:'{\n  "name": "foo",\n  "main": "./dist/index.js",\n  "types": "./dist/types/index.d.ts"\n}\n'})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"foo"})," 项目的源码："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",meta:'title="src/index.ts"',children:"export const content = 'hello world';\n"})}),"\n",(0,d.jsxs)(n.p,{children:["请确保在 ",(0,d.jsx)(n.code,{children:"stories/tsconfig.json"})," 中设置了指向项目根目录的 ",(0,d.jsx)(n.code,{children:"paths"})," 配置。",(0,d.jsx)(n.code,{children:"paths"})," 的 ",(0,d.jsx)(n.code,{children:"key"})," 与项目名称相同，这样在编译过程中以及在代码中不会出现问题。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-json",meta:'title="stories/tsconfig.json"',children:'{\n  "extends": "../tsconfig.json",\n  "compilerOptions": {\n    "baseUrl": "../",\n    "paths": {\n      "foo": ["."],\n      "foo/*": ["./*"]\n    }\n  },\n  "include": ["**/*"]\n}\n'})}),"\n",(0,d.jsx)(n.p,{children:"在 Story 代码中直接以项目名称的方式引用："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-tsx",meta:'title="stories/index.stories.tsx"',children:"import { content } from 'foo';\n\nconst Component = () => <div>this is a Story Component {content}</div>;\n\nexport const YourStory = () => <Component />;\n\nexport default {\n  title: 'Your Stories',\n};\n"})}),"\n",(0,d.jsx)(n.p,{children:"最后在执行命令的时候，先启动监听模式的源码构建，然后启动 Storybook 调试即可："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",meta:'title="terminal-1"',children:"## 源码构建\nmodern build --watch\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",meta:'title="terminal-2"',children:"## Storybook 调试\nmodern dev storybook\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive info",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"INFO"}),(0,d.jsxs)(n.div,{className:"modern-directive-content",children:[(0,d.jsx)(n.p,{children:"在开发过程中，可能会遇到无法实时获得类型定义的情况。因为只有当保存代码后，产物目录下的类型文件才会更新。此时："}),"\n",(0,d.jsxs)(n.p,{children:["对于 ",(0,d.jsx)(n.code,{children:"pnpm"})," 的项目，可以按照下面的内容对 ",(0,d.jsx)(n.code,{children:"package.json"})," 进行修改："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",children:'{\n    "name": "foo",\n    "main": "./dist/index.js",\n    "types": "./src/index.ts",\n    "publishConfig": {\n      "types": "./dist/index.d.ts",\n    }\n}\n'})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsxs)(n.p,{children:["关于 pnpm 的 ",(0,d.jsx)(n.code,{children:"publishConfig"})," 的使用，可以阅读下面这个",(0,d.jsx)(n.a,{href:"https://pnpm.io/package_json#publishconfig",target:"_blank",rel:"noopener noreferrer",children:"链接"}),"。"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["而对于 npm 和 Yarn 的项目，则只能通过手动的方式在",(0,d.jsx)(n.strong,{children:"开发阶段"}),"和",(0,d.jsx)(n.strong,{children:"发布阶段"}),"对 ",(0,d.jsx)(n.code,{children:"package.json"})," 的 ",(0,d.jsx)(n.code,{children:"types"})," 的值进行修改。\n"]})]})]}),"\n",(0,d.jsx)(n.p,{children:"那么为什么可以直接引用产物呢？"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:["在执行 ",(0,d.jsx)(n.code,{children:"modern dev storybook"})," 命令之前，执行 ",(0,d.jsx)(n.code,{children:"modern build --watch"})," 命令，保证项目构建产物的存在。"]}),"\n",(0,d.jsxs)(n.li,{children:["在 Storybook 内部增加了根据 ",(0,d.jsx)(n.code,{children:"tsconfig.json"})," 文件的 ",(0,d.jsx)(n.code,{children:"compilerOptions.paths"})," 配置或者（在 JS 项目中）直接以项目名称作为别名的处理逻辑，保证能够",(0,d.jsxs)(n.strong,{children:["根据 ",(0,d.jsx)(n.code,{children:"package.json"})," 解析出项目的产物路径"]}),"。"]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"引用组件源码",children:["引用组件源码",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#引用组件源码",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"引用组件的源码可以通过相对路径的方式："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ts",meta:'title="./stories/index.tsx"',children:"import { content } from '../src';\n\nconst Component = () => <div>this is a Story Component {content}</div>;\n\nexport const YourStory = () => <Component />;\n\nexport default {\n  title: 'Your Stories',\n};\n"})}),"\n",(0,d.jsxs)(n.div,{className:"modern-directive tip",children:[(0,d.jsx)(n.div,{className:"modern-directive-title",children:"为什么不推荐使用源码的方式?"}),(0,d.jsxs)(n.div,{className:"modern-directive-content",children:[(0,d.jsxs)(n.p,{children:["不仅仅是因为使用组件源码无法验证组件产物是否正确，",(0,d.jsx)(n.strong,{children:"同时模块工程对于构建产物支持的一些配置无法完全转换为 Storybook\n内部的配置"}),"。如果某些配置无法进行相互转换的话，就会在 Storybook 调试过程中出现不符合预期的结果。"]}),"\n",(0,d.jsx)(n.p,{children:"Module Tools 是基于 esbuild 实现的，而 Storybook 是基于 Webpack 实现的。esbuild 的配置无法与 Webpack 完全兼容。\n"})]})]}),"\n",(0,d.jsxs)(n.h2,{id:"配置-storybook",children:["配置 Storybook",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置-storybook",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["Storybook 官方通过一个名为 ",(0,d.jsx)(n.code,{children:".storybook"})," 的文件夹来进行项目配置，其中包含各种配置文件。",(0,d.jsxs)(n.strong,{children:["在模块工程方案中，可以在项目的 ",(0,d.jsx)(n.code,{children:"config/storybook"})," 目录下增加 Storybook 配置文件。"]})]}),"\n",(0,d.jsx)(n.p,{children:"关于 Storybook 各种配置文件的使用方式，可以查看下面的链接："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"https://storybook.js.org/docs/react/configure/overview",target:"_blank",rel:"noopener noreferrer",children:"Configure Storybook"})}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"不过在模块项目里进行 Storybook 存在一些限制"}),"："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["目前不能修改 Story 文件存放的位置，即无法在 ",(0,d.jsx)(n.code,{children:"main.js"})," 文件里修改 ",(0,d.jsx)(n.code,{children:"stories"})," 配置。"]}),"\n",(0,d.jsxs)(n.li,{children:["目前不能修改 Webpack 和 Babel 相关的配置，即无法在 ",(0,d.jsx)(n.code,{children:"main.js"})," 文件里修改 ",(0,d.jsx)(n.code,{children:"webpackFinal"})," 和 ",(0,d.jsx)(n.code,{children:"babel"})," 配置。"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"在未来我们会考虑这些配置是否可以允许修改，不过目前为了减少不可预知的问题暂时限制使用这些配置。"}),"\n",(0,d.jsxs)(n.h2,{id:"构建-storybook-产物",children:["构建 Storybook 产物",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#构建-storybook-产物",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"除了可以对组件或者普通的模块进行 Storybook 调试，还可以通过下面的命令来执行 Storybook 的构建任务。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-bash",children:"modern build --platform storybook\n"})}),"\n",(0,d.jsxs)(n.p,{children:["关于 ",(0,d.jsx)(n.code,{children:"modern build --platform"})," 命令可以查看："]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/guide/basic/command-preview#modern-build",children:(0,d.jsx)(n.code,{children:"modern build"})})}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["构建完成后，可以在 ",(0,d.jsx)(n.code,{children:"dist/storybook-static"})," 目录看到构建产物文件。"]}),"\n",(0,d.jsxs)(n.h2,{id:"结合-tailwind-css-使用",children:["结合 Tailwind CSS 使用",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合-tailwind-css-使用",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["如果你需要在 ",(0,d.jsx)(n.code,{children:"stories"})," 目录下使用 Tailwind CSS，请确保当前项目的 Tailwind CSS 配置中包含了 ",(0,d.jsx)(n.code,{children:"stories"})," 目录。"]}),"\n",(0,d.jsxs)(n.p,{children:["以 ",(0,d.jsx)(n.code,{children:"tailwind.config.ts"})," 文件为例，你需要配置以下内容："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-diff",meta:'title="tailwind.config.ts"',children:"export default {\n  content: [\n    './src/**/*.{js,jsx,ts,tsx}',\n+   './stories/**/*.{js,jsx,ts,tsx}',\n  ],\n};\n"})})]})}(o=globalThis).__RSPRESS_PAGE_META||(o.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fguide%2Fbasic%2Fusing-storybook.mdx"]={toc:[{text:"调试代码",id:"调试代码",depth:2},{text:"引用组件产物",id:"引用组件产物",depth:3},{text:"引用组件源码",id:"引用组件源码",depth:3},{text:"配置 Storybook",id:"配置-storybook",depth:2},{text:"构建 Storybook 产物",id:"构建-storybook-产物",depth:2},{text:"结合 Tailwind CSS 使用",id:"结合-tailwind-css-使用",depth:2}],title:"使用 Storybook",frontmatter:{sidebar_position:5}};var t=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,d.jsx)(n,(0,i._)((0,r._)({},e),{children:(0,d.jsx)(l,(0,r._)({},e))})):l(e)}}}]);