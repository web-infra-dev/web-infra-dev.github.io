(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_api_config_build-config_mdx"],{19905:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return o}});var i,d=s("15169"),r=s("43932"),l=s("9880"),c=s("23169"),t=s("95230");function a(e){var n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",ul:"ul",li:"li",div:"div",h2:"h2",pre:"pre",strong:"strong",ol:"ol",h3:"h3"},(0,c.useMDXComponents)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"buildconfig",children:["buildConfig",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#buildconfig",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"buildConfig"})," 是一个用来描述如何编译、生成构建产物的配置项，它包含了构建的所有配置。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"object | object[]"})]}),"\n"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:[(0,l.jsxs)(n.p,{children:["在开始使用 ",(0,l.jsx)(n.code,{children:"buildConfig"})," 之前，请先阅读以下文档来了解其作用："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/guide/basic/modify-output-product",children:"修改输出产物"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/guide/advance/in-depth-about-build",children:"深入理解构建"})}),"\n"]}),"\n"]})]}),"\n",(0,l.jsxs)(n.h2,{id:"alias",children:["alias",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#alias",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"Record<string, string> | Function"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"{'@': 'src',}"})]}),"\n"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsxs)(n.p,{children:["对于 TypeScript 项目，只需要在 ",(0,l.jsx)(n.code,{children:"tsconfig.json"})," 中配置 ",(0,l.jsx)(n.a,{href:"https://www.typescriptlang.org/tsconfig#paths",target:"_blank",rel:"noopener noreferrer",children:"compilerOptions.paths"}),", Module Tools 会自动识别 ",(0,l.jsx)(n.code,{children:"tsconfig.json"})," 里的别名，因此不需要额外配置 ",(0,l.jsx)(n.code,{children:"alias"})," 字段。\n"]})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    alias: {\n      '@common': './src/common',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["以上配置完成后，如果在代码中引用 ",(0,l.jsx)(n.code,{children:"@common/Foo.tsx"}),", 则会映射到 ",(0,l.jsx)(n.code,{children:"<project>/src/common/Foo.tsx"})," 路径上。"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"alias"})," 的值定义为函数时，可以接受预设的 alias 对象，并对其进行修改。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    alias: alias => {\n      alias['@common'] = './src/common';\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"也可以在函数中返回一个新对象作为最终结果，新对象会覆盖预设的 alias 对象。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    alias: alias => {\n      return {\n        '@common': './src/common',\n      };\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"asset",children:["asset",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#asset",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"包含静态资源相关的配置。"}),"\n",(0,l.jsxs)(n.h2,{id:"assetpath",children:["asset.path",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetpath",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["静态资源输出路径，会基于 ",(0,l.jsx)(n.a,{href:"/api/config/build-config#outDir",children:"outDir"})," 进行输出。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"assets"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"assetlimit",children:["asset.limit",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetlimit",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"用于设置静态资源被自动内联为 base64 的体积阈值。"}),"\n",(0,l.jsx)(n.p,{children:"Module Tools 在进行打包时，默认会内联体积小于 10KB 的图片、字体、媒体等资源，将它们通过 Base64 编码，并内联到产物中，不再会发送独立的 HTTP 请求。"}),"\n",(0,l.jsxs)(n.p,{children:["你可以通过修改 ",(0,l.jsx)(n.code,{children:"limit"})," 参数来调整这个阈值。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"number"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"10 * 1024"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["例如，将 ",(0,l.jsx)(n.code,{children:"limit"})," 设置为 ",(0,l.jsx)(n.code,{children:"0"})," 来避免资源内联："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    asset: {\n      limit: 0,\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"assetpublicpath",children:["asset.publicPath",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetpublicpath",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"打包时给未内联资源的 CDN 前缀。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    asset: {\n      publicPath: 'https://xxx/',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["此时，所有静态资源都会添加 ",(0,l.jsx)(n.code,{children:"https://xxx/"})," 前缀。"]}),"\n",(0,l.jsxs)(n.h2,{id:"assetsvgr",children:["asset.svgr",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetsvgr",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["打包时将 SVG 作为一个 React 组件处理，options 参考 ",(0,l.jsx)(n.a,{href:"https://react-svgr.com/docs/options/",target:"_blank",rel:"noopener noreferrer",children:"svgr"}),"，另外还支持了 ",(0,l.jsx)(n.code,{children:"include"})," 和 ",(0,l.jsx)(n.code,{children:"exclude"})," 两个配置项，用于匹配需要处理的 SVG 文件。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean | object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"开启 svgr 功能后，可以使用默认导出的方式将 SVG 当做组件使用。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="index.ts"',children:"// true\nimport Logo from './logo.svg';\n\nexport default () => <Logo />;\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive warning",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"WARNING"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,l.jsx)(n.p,{children:"目前不支持下面的用法："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="index.ts"',children:"import { ReactComponent } from './logo.svg';\n"})}),"\n"]})]}),"\n",(0,l.jsxs)(n.p,{children:["当开启功能后，可以通过在 ",(0,l.jsx)(n.code,{children:"modern-app-env.d.ts"})," 文件中增加类型定义，修改使用 SVG 的类型："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="modern-app-env.d.ts"',children:"declare module '*.svg' {\n  const src: React.FunctionComponent<React.SVGProps<SVGSVGElement>>;\n  export default src;\n}\n\n/// <reference types='@modern-js/module-tools/types' />\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"assetsvgrinclude",children:["asset.svgr.include",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetsvgrinclude",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"设定匹配的 SVG 文件"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | RegExp | (string | RegExp)[]"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"/\\.svg$/"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"assetsvgrexclude",children:["asset.svgr.exclude",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#assetsvgrexclude",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"设定不匹配的 SVG 文件"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | RegExp | (string | RegExp)[]"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"autoexternal",children:["autoExternal",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#autoexternal",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["自动外置项目的 ",(0,l.jsx)(n.code,{children:'"dependencies"'})," 和 ",(0,l.jsx)(n.code,{children:'"peerDependencies"'}),"，不会将其打包到最终的 bundle 产物中。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean | object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"当我们希望关闭对于第三方依赖的默认处理行为时候，可以通过以下方式来实现："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    autoExternal: false,\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["这样对于 ",(0,l.jsx)(n.code,{children:'"dependencies"'})," 和 ",(0,l.jsx)(n.code,{children:'"peerDependencies"'})," 下面的依赖都会进行打包处理。如果只想要关闭其中某个下面的依赖处理，则可以使用\n",(0,l.jsx)(n.code,{children:"buildConfig.autoExternal"})," 的对象形式："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    autoExternal: {\n      dependencies: false,\n      peerDependencies: false,\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"autoexternaldependencies",children:["autoExternal.dependencies",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#autoexternaldependencies",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["是否需要外置项目的 ",(0,l.jsx)(n.code,{children:'"dependencies"'})," 依赖。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"autoexternalpeerdependencies",children:["autoExternal.peerDependencies",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#autoexternalpeerdependencies",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["是否需要外置项目的 ",(0,l.jsx)(n.code,{children:'"peerDependencies"'})," 依赖。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"buildtype",children:["buildType",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#buildtype",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["构建类型，",(0,l.jsx)(n.code,{children:"bundle"})," 会打包你的代码，",(0,l.jsx)(n.code,{children:"bundleless"})," 只做代码的转换。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"'bundle' | 'bundleless'"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"'bundle'"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"copy",children:["copy",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#copy",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"将文件或目录拷贝到指定位置。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    copy: {\n      patterns: [{ from: './src/assets', to: '' }],\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"copypatterns",children:["copy.patterns",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#copypatterns",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"CopyPattern[]"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"interface CopyPattern {\n  from: string;\n  to?: string;\n  context?: string;\n  globOptions?: globby.GlobbyOptions;\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"copyoptions",children:["copy.options",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#copyoptions",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Options = {\n  concurrency?: number;\n  enableCopySync?: boolean;\n};\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{ concurrency: 100, enableCopySync: false }"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"concurrency"}),": 指定并行执行多少个复制任务。"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"enableCopySync"}),": 使用 ",(0,l.jsx)(n.a,{href:"https://github.com/jprichardson/node-fs-extra/blob/master/lib/copy/copy-sync.js",target:"_blank",rel:"noopener noreferrer",children:(0,l.jsx)(n.code,{children:"fs.copySync"})}),"，默认情况下 ",(0,l.jsx)(n.a,{href:"https://github.com/jprichardson/node-fs-extra/blob/master/lib/copy/copy.js",target:"_blank",rel:"noopener noreferrer",children:(0,l.jsx)(n.code,{children:"fs.copy"})}),"。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"define",children:["define",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#define",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"定义全局变量，会被注入到代码中"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"Record<string, string>"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["由于 ",(0,l.jsx)(n.code,{children:"define"})," 功能是由全局文本替换实现的，所以需要保证全局变量值为字符串，更为安全的做法是将每个全局变量的值转化为字符串，使用 ",(0,l.jsx)(n.code,{children:"JSON.stringify"})," 进行转换，如下所示："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    define: {\n      VERSION: JSON.stringify('1.0'),\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:[(0,l.jsx)(n.p,{children:"为了防止全局替换替换过度，建议使用时遵循以下两个原则："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"全局常量使用大写"}),"\n",(0,l.jsx)(n.li,{children:"自定义全局常量前缀后缀，确保独一无二"}),"\n"]}),"\n"]})]}),"\n","\n",(0,l.jsxs)(n.h2,{id:"dts",children:["dts",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dts",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"类型文件生成的相关配置，默认情况会生成。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"false | object"})]}),"\n",(0,l.jsx)(n.li,{children:"默认值："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"{\n  abortOnError: true,\n  distPath: './',\n  only: false,\n  tsconfigPath: './tsconfig.json',\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"dtsabortonerror",children:["dts.abortOnError",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dtsabortonerror",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"用于控制在出现类型错误的时候，是否允许构建成功。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"默认情况下，在出现类型错误的时候会导致构建失败"}),"。将 ",(0,l.jsx)(n.code,{children:"abortOnError"})," 设置为 ",(0,l.jsx)(n.code,{children:"false"})," 后，即使代码中出现了类型问题，构建依然会成功："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    dts: {\n      abortOnError: false,\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive warning",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"WARNING"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsxs)(n.p,{children:["当关闭该配置后，无法保证类型文件能正常生成，且不保证内容正确。在 ",(0,l.jsx)(n.code,{children:"buildType: 'bundle'"})," 时，即打包模式下，类型文件一定不会生成。\n"]})})]}),"\n",(0,l.jsxs)(n.h2,{id:"dtsdistpath",children:["dts.distPath",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dtsdistpath",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["类型文件的输出路径，基于 ",(0,l.jsx)(n.a,{href:"/api/config/build-config#outDir",children:"outDir"})," 进行输出。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"./"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["比如输出到 ",(0,l.jsx)(n.code,{children:"outDir"})," 下面的 ",(0,l.jsx)(n.code,{children:"types"})," 目录："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    dts: {\n      distPath: './types',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"dtsonly",children:["dts.only",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dtsonly",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"是否在构建时只生成类型文件，不生成 JavaScript 产物文件。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    dts: {\n      only: true,\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"dtsrespectexternal",children:["dts.respectExternal",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dtsrespectexternal",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["当设为 ",(0,l.jsx)(n.code,{children:"false"})," 时，不会打包任何三方包类型，设为 ",(0,l.jsx)(n.code,{children:"true"})," 时，会根据 ",(0,l.jsx)(n.a,{href:"#externals",children:"externals"})," 来决定是否需要打包三方类型。"]}),"\n",(0,l.jsx)(n.p,{children:"在对类型文件进行打包时，构建工具还未对 export 进行分析，因此当你引用的任何一个三方包出现类型错误时，都可能会中断当前的构建流程，这会导致构建流程不可控，因此我们可以通过这个配置来避免该问题。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    dts: {\n      respectExternal: false,\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"dtstsconfigpath",children:["dts.tsconfigPath",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dtstsconfigpath",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"TypeScript 配置文件的路径。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"./tsconfig.json"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    dts: {\n      tsconfigPath: './other-tsconfig.json',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"esbuildoptions",children:["esbuildOptions",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#esbuildoptions",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["用于修改底层的 ",(0,l.jsx)(n.a,{href:"https://esbuild.github.io/api/",target:"_blank",rel:"noopener noreferrer",children:"esbuild 配置"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"Function"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"c => c"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"例如，我们需要修改生成文件的后缀："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    esbuildOptions: options => {\n      options.outExtension = { '.js': '.mjs' };\n      return options;\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"例如，注册一个 esbuild 插件："}),"\n","\n",(0,l.jsx)(t.default,{}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:[(0,l.jsx)(n.p,{children:"我们在原本 esbuild 构建的基础上做了许多扩展，因此使用此配置需要注意以下几点："}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["优先使用 Modern.js Module 提供的配置，例如 esbuild 并不支持 ",(0,l.jsx)(n.code,{children:"target: 'es5'"}),"，但我们内部使用 SWC 支持了此场景，此时通过 ",(0,l.jsx)(n.code,{children:"esbuildOptions"})," 设置",(0,l.jsx)(n.code,{children:"target: 'es5'"}),"会报错。"]}),"\n",(0,l.jsxs)(n.li,{children:["目前我们内部使用 ",(0,l.jsx)(n.code,{children:"enhanced-resolve"})," 替代了 esbuild 的 resolve 解析算法，所以修改 esbuild resolve 相关配置无效，计划在未来会切换回来。"]}),"\n"]}),"\n"]})]}),"\n",(0,l.jsxs)(n.h2,{id:"externalhelpers",children:["externalHelpers",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#externalhelpers",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"默认情况下，输出的 JS 代码可能会依赖一些辅助函数来支持目标环境或者输出格式，这些辅助函数会被内联在需要它的文件中。"}),"\n",(0,l.jsxs)(n.p,{children:["当在使用 SWC Transform 进行代码转换的时候，可以启动 ",(0,l.jsx)(n.code,{children:"externalHelpers"})," 配置，将内联的辅助函数转换为从外部模块 ",(0,l.jsx)(n.code,{children:"@swc/helpers"})," 导入这些辅助函数。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"下面是使用该配置前后的产物变化比较。"}),"\n",(0,l.jsx)(n.p,{children:"开启前："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="./dist/index.js"',children:"// 辅助函数\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  // ...\n}\n// 辅助函数\nfunction _async_to_generator(fn) {\n  return function () {\n    // use asyncGeneratorStep\n    // ...\n  };\n}\n\n// 你的代码\nexport var yourCode = function () {\n  // use _async_to_generator\n};\n"})}),"\n",(0,l.jsx)(n.p,{children:"开启后："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="./dist/index.js"',children:"// 从 @swc/helpers 导入的辅助函数\nimport { _ as _async_to_generator } from '@swc/helpers/_/_async_to_generator';\n\n// 你的代码\nexport var yourCode = function () {\n  // use _async_to_generator\n};\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"externals",children:["externals",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#externals",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"用于在打包时排除一些外部依赖，避免将这些依赖打包到最终的 bundle 中。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Externals = (string | RegExp)[];\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"[]"})]}),"\n",(0,l.jsxs)(n.li,{children:["构建类型：",(0,l.jsx)(n.code,{children:"仅支持 buildType: 'bundle'"})]}),"\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    // 避免打包 React\n    externals: ['react'],\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"format",children:["format",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["用于设置 JavaScript 产物输出的格式，其中 ",(0,l.jsx)(n.code,{children:"iife"})," 和 ",(0,l.jsx)(n.code,{children:"umd"})," 只在 ",(0,l.jsx)(n.code,{children:"buildType"})," 为 ",(0,l.jsx)(n.code,{children:"bundle"})," 时生效。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"'esm' | 'cjs' | 'iife' | 'umd'"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"cjs"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"format-esm",children:["format: esm",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format-esm",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:'esm 代表 "ECMAScript 模块"，它需要运行环境支持 import 和 export 语法。'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'esm',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"format-cjs",children:["format: cjs",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format-cjs",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:'cjs 代表 "CommonJS"，它需要运行环境支持 exports、require 和 module 语法，通常为 Node.js 环境。'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'cjs',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"format-iife",children:["format: iife",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format-iife",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:'iife 代表 "立即调用函数表达式"，它将代码包裹在函数表达式中，确保代码中的任何变量不会意外地与全局范围中的变量冲突，通常在浏览器环境中运行。'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'iife',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"format-umd",children:["format: umd",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format-umd",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:'umd 代表 "Universal Module Definition"，用于在不同环境（浏览器、Node.js 等）中运行。umd 格式的模块可以在多种环境下使用，既可以作为全局变量访问，也可以通过模块加载器（如 RequireJS）进行模块化加载。'}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"input",children:["input",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#input",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"指定构建的入口文件，数组形式可以指定目录。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Input =\n  | string[];\n  | {\n      [name: string]: string;\n    }\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"bundle"})," 模式下默认为 ",(0,l.jsx)(n.code,{children:"['src/index.ts']"}),"，",(0,l.jsx)(n.code,{children:"bundleless"})," 模式下默认为 ",(0,l.jsx)(n.code,{children:"['src']"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"数组用法："})}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"bundle"})," 模式下，下面的配置会以 ",(0,l.jsx)(n.code,{children:"src/index.ts"})," 和 ",(0,l.jsx)(n.code,{children:"src/index2.ts"})," 为入口分别进行构建。",(0,l.jsx)(n.code,{children:"bundle"})," 模式不支持配置 ",(0,l.jsx)(n.code,{children:"input"})," 为目录。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    buildType: 'bundle',\n    input: ['src/index.ts', 'src/index2.ts'],\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"bundleless"})," 模式下，下面的配置会同时处理 ",(0,l.jsx)(n.code,{children:"src/a"})," 目录下的文件和 ",(0,l.jsx)(n.code,{children:"src/index.ts"})," 文件。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    buildType: 'bundleless',\n    input: ['src/a', 'src/index.ts'],\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"bundleless"})," 模式下，数组模式还支持使用 ",(0,l.jsx)(n.code,{children:"!"})," 来过滤部分文件："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    buildType: 'bundleless',\n    input: ['src', '!src/*.spec.ts'],\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["上面的配置将打包 ",(0,l.jsx)(n.code,{children:"src"})," 目录下的文件，同时会过滤以 ",(0,l.jsx)(n.code,{children:"spec.ts"})," 为后缀的文件。这在测试文件与源码文件在同一个根目录下的情况会很有用。"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"对象用法："})}),"\n",(0,l.jsx)(n.p,{children:"当在 bundle 模式下需要修改产物的输出文件名称的时候，可以使用对象形式进行配置。"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"对象的 Key 是产物的文件名称，Value 是源码的文件路径。"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'esm',\n    input: {\n      'index.esm': './src/index.ts',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"jsx",children:["jsx",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsx",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"指定 JSX 的编译方式，默认支持 React 17 及更高版本，自动注入 JSX 运行时代码。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"automatic | transform"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"automatic"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["如果你需要支持 React 16，则可以设置 ",(0,l.jsx)(n.code,{children:"jsx"})," 为 ",(0,l.jsx)(n.code,{children:"transform"}),"："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    jsx: 'transform',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:[(0,l.jsx)(n.p,{children:"关于 JSX Transform 的更多说明，可以参考以下链接："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html",target:"_blank",rel:"noopener noreferrer",children:"React Blog - Introducing the New JSX Transform"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.a,{href:"https://esbuild.github.io/api/#jsx",target:"_blank",rel:"noopener noreferrer",children:"esbuild - JSX"}),"."]}),"\n"]}),"\n"]})]}),"\n",(0,l.jsxs)(n.h2,{id:"metafile",children:["metafile",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#metafile",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"这个选项用于构建分析，开启该选项后，esbuild 会以 JSON 格式生成有关构建的一些元数据。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"false"})]}),"\n",(0,l.jsxs)(n.li,{children:["构建类型：",(0,l.jsx)(n.code,{children:"仅支持 buildType: 'bundle'"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["开启 ",(0,l.jsx)(n.code,{children:"metafile"})," 生成："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    buildType: 'bundle',\n    metafile: true,\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["在执行 build 构建后，产物目录下会生成 ",(0,l.jsx)(n.code,{children:"metafile-[xxx].json"})," 文件，你可以通过 ",(0,l.jsx)(n.a,{href:"https://esbuild.github.io/analyze/",target:"_blank",rel:"noopener noreferrer",children:"esbuild analyze"})," 和 ",(0,l.jsx)(n.a,{href:"https://bundle-buddy.com/esbuild",target:"_blank",rel:"noopener noreferrer",children:"bundle-buddy"})," 等工具进行可视化分析。"]}),"\n",(0,l.jsxs)(n.h2,{id:"minify",children:["minify",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#minify",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["使用 esbuild 或者 terser 压缩代码，也可以传入 ",(0,l.jsx)(n.a,{href:"https://github.com/terser/terser#minify-options",target:"_blank",rel:"noopener noreferrer",children:"terserOptions"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"'terser' | 'esbuild' | false | object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    minify: {\n      compress: {\n        drop_console: true,\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"outdir",children:["outDir",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#outdir",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"指定构建的输出目录。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"./dist"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    outDir: './dist/esm',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"platform",children:["platform",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#platform",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["默认生成用于 Node.js 环境下的代码，你也可以指定为 ",(0,l.jsx)(n.code,{children:"browser"}),"，会生成用于浏览器环境的代码。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"'browser' | 'node'"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"'node'"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    platform: 'browser',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"redirect",children:["redirect",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#redirect",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在 ",(0,l.jsx)(n.code,{children:"buildType: 'bundleless'"})," 构建模式下，会对引用路径进行重定向，确保指向了正确的产物，例如："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"import './index.less'"})," 会被改写成 ",(0,l.jsx)(n.code,{children:"import './index.css'"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"import icon from './close.svg'"})," 会被改写成 ",(0,l.jsx)(n.code,{children:"import icon from '../asset/close.svg'"}),"（依实际情况而定）"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"在某些场景下，你可能不需要这些功能，那么可以通过此配置关闭它，关闭后，其引用路径将不会发生改变。"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default {\n  buildConfig: {\n    redirect: {\n      alias: false, // 关闭对别名路径的修改\n      style: false, // 关闭对样式文件路径的修改\n      asset: false, // 关闭对资源文件路径的修改\n    },\n  },\n};\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"sideeffects",children:["sideEffects",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sideeffects",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"配置模块的副作用"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"RegExg[] | (filePath: string, isExternal: boolean) => boolean | boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["通常情况下，我们通过 package.json 的 ",(0,l.jsx)(n.code,{children:'"sideEffects"'})," 字段来配置模块的副作用，但是在某些情况下，三方包的 package.json 是不可靠的。\n例如我们引用了一个三方包的样式文件。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"import 'other-package/dist/index.css';\n"})}),"\n",(0,l.jsxs)(n.p,{children:["但是这个三方包的 package.json 里并没有将样式文件配置到 ",(0,l.jsx)(n.code,{children:'"sideEffects"'})," 里。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",meta:'title="other-package/package.json"',children:'{\n  "sideEffects": ["dist/index.js"]\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["同时你又设置了 ",(0,l.jsx)(n.a,{href:"#styleinject",children:"style.inject"})," 为 ",(0,l.jsx)(n.code,{children:"true"}),"，在控制台可以看到类似的警告信息："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'[LIBUILD:ESBUILD_WARN] Ignoring this import because "other-package/dist/index.css" was marked as having no side effects\n'})}),"\n",(0,l.jsxs)(n.p,{children:["这时候就可以使用这个配置项，手动配置模块的",(0,l.jsx)(n.code,{children:'"sideEffects"'}),"，配置支持正则和函数形式。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    sideEffects: [/\\.css$/],\n    // or\n    // sideEffects: (filePath, isExternal) => /\\.css$/.test(filePath),\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsx)(n.div,{className:"modern-directive-content",children:(0,l.jsxs)(n.p,{children:["添加此配置后，打包时将不会再读取 package.json 里的 ",(0,l.jsx)(n.code,{children:'"sideEffects"'})," 字段。\n"]})})]}),"\n",(0,l.jsxs)(n.h2,{id:"sourcedir",children:["sourceDir",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcedir",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["指定构建的源码目录,默认为 ",(0,l.jsx)(n.code,{children:"src"}),"，用于在 ",(0,l.jsx)(n.code,{children:"bundleless"})," 构建时基于源码目录结构生成对应的产物目录。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"src"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"sourcemap",children:["sourceMap",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemap",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"控制 sourceMap 如何生成。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean | 'inline' | 'external'"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"sourcetype",children:["sourceType",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcetype",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["设置源码的格式。默认情况下，会将源码作为 EsModule 进行处理。当源码使用的是 CommonJS 的时候，需要设置 ",(0,l.jsx)(n.code,{children:"commonjs"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"'commonjs' | 'module'"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"'module'"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"splitting",children:["splitting",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#splitting",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"是否开启代码分割。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"style",children:["style",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#style",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"配置样式相关的配置。"}),"\n",(0,l.jsxs)(n.h2,{id:"styleless",children:["style.less",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#styleless",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"less 相关配置。"}),"\n",(0,l.jsxs)(n.h2,{id:"stylelesslessoptions",children:["style.less.lessOptions",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylelesslessoptions",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["详细配置参考 ",(0,l.jsx)(n.a,{href:"https://less.bootcss.com/usage/#less-options",target:"_blank",rel:"noopener noreferrer",children:"less"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{ javascriptEnabled: true }"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"stylelessadditionaldata",children:["style.less.additionalData",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylelessadditionaldata",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在入口文件起始添加 ",(0,l.jsx)(n.code,{children:"Less"})," 代码。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      less: {\n        additionalData: `@base-color: #c6538c;`,\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"stylelessimplementation",children:["style.less.implementation",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylelessimplementation",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["配置 ",(0,l.jsx)(n.code,{children:"Less"})," 使用的实现库，在不指定的情况下，使用的内置版本是 ",(0,l.jsx)(n.code,{children:"4.1.3"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["设置 ",(0,l.jsx)(n.code,{children:"object"})," 类型时，可以指定 ",(0,l.jsx)(n.code,{children:"Less"})," 的实现库。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      less: {\n        implementation: require('less'),\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," 类型时，指定 ",(0,l.jsx)(n.code,{children:"Less"})," 的实现库的路径"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      less: {\n        implementation: require.resolve('less'),\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"sass",children:["sass",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sass",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"Sass 相关配置。"}),"\n",(0,l.jsxs)(n.h2,{id:"stylesasssassoptions",children:["style.sass.sassOptions",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylesasssassoptions",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["详细配置参考 ",(0,l.jsx)(n.a,{href:"https://github.com/sass/node-sass#options",target:"_blank",rel:"noopener noreferrer",children:"node-sass"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"stylesassadditionaldata",children:["style.sass.additionalData",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylesassadditionaldata",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在入口文件起始添加 ",(0,l.jsx)(n.code,{children:"Sass"})," 代码。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | Function"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      sass: {\n        additionalData: `$base-color: #c6538c;\n          $border-dark: rgba($base-color, 0.88);`,\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"stylesassimplementation",children:["style.sass.implementation",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylesassimplementation",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["配置 ",(0,l.jsx)(n.code,{children:"Sass"})," 使用的实现库，在不指定的情况下，使用的内置版本是 ",(0,l.jsx)(n.code,{children:"1.5.4"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"undefined"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["设置为 ",(0,l.jsx)(n.code,{children:"object"})," 类型时，可以指定 ",(0,l.jsx)(n.code,{children:"Sass"})," 的实现库。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      sass: {\n        implementation: require('sass'),\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"string"})," 类型时，指定 ",(0,l.jsx)(n.code,{children:"Sass"})," 的实现库的路径"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      sass: {\n        implementation: require.resolve('sass'),\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"stylepostcss",children:["style.postcss",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylepostcss",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["用于配置 PostCSS 的选项，传入的值会与默认配置通过 ",(0,l.jsx)(n.code,{children:"Object.assign"})," 合并。注意 ",(0,l.jsx)(n.code,{children:"Object.assign"})," 是浅拷贝，因此会完全覆盖内置的 plugins 数组。"]}),"\n",(0,l.jsxs)(n.p,{children:["详细配置请查看 ",(0,l.jsx)(n.a,{href:"https://github.com/postcss/postcss#options",target:"_blank",rel:"noopener noreferrer",children:"PostCSS"}),"。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type PostcssOptions = {\n  processOptions?: ProcessOptions;\n  plugins?: AcceptedPlugin[];\n};\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"默认值："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"const defaultConfig = {\n  plugins: [\n    // 以下插件默认启用\n    require('postcss-flexbugs-fixes'),\n    require('postcss-media-minmax'),\n    require('postcss-nesting'),\n    // 以下插件仅在 target 为 `es5` 时启用\n    require('postcss-custom-properties'),\n    require('postcss-initial'),\n    require('postcss-page-break'),\n    require('postcss-font-variant'),\n  ],\n};\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"示例："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      postcss: {\n        plugins: [yourPostCSSPlugin],\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"styleinject",children:["style.inject",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#styleinject",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"配置打包模式下是否将 CSS 样式插入到 JavaScript 代码中。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["将 ",(0,l.jsx)(n.code,{children:"inject"})," 设置为 ",(0,l.jsx)(n.code,{children:"true"})," 来开启此功能："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    inject: true,\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"开启后，你会看到源码中引用的 CSS 代码被包含在了打包后的 JS 产物中。"}),"\n",(0,l.jsxs)(n.p,{children:["例如，你在源码里写了 ",(0,l.jsx)(n.code,{children:"import './index.scss'"}),"，那么在产物中你会看到以下代码："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="dist/index.js"',children:"// node_modules/style-inject/dist/style-inject.es.js\nfunction styleInject(css, ref) {\n  // ...\n}\nvar style_inject_es_default = styleInject;\n\n// src/index.scss\nvar css_248z = '.body {\\n  color: black;\\n}';\nstyle_inject_es_default(css_248z);\n"})}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,l.jsxs)(n.p,{children:["开启 ",(0,l.jsx)(n.code,{children:"inject"})," 后，你需要注意以下几点："]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["CSS 文件中的 ",(0,l.jsx)(n.code,{children:"@import"})," 不会被处理。如果你的 CSS 文件中有 ",(0,l.jsx)(n.code,{children:"@import"})," ，那么你需要在 JS 文件中手动引入 CSS 文件（less,scss 文件不需要，因为它们会有预处理）。"]}),"\n",(0,l.jsxs)(n.li,{children:["需要考虑 ",(0,l.jsx)(n.code,{children:"sideEffects"})," 的影响。默认情况下，我们的构建器会认为 CSS 是有副作用的，如果你的项目中或者三方包的 package.json 设置了 ",(0,l.jsx)(n.code,{children:"sideEffects"})," 字段并且没有包含此 CSS 文件，那么你将会得到一个警告："]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'[LIBUILD:ESBUILD_WARN] Ignoring this import because "src/index.scss" was marked as having no side effects by plugin "libuild:adapter"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["此时可以通过配置 ",(0,l.jsx)(n.a,{href:"#sideeffects",children:"sideEffects"})," 来解决。"]}),"\n"]})]}),"\n",(0,l.jsxs)(n.h2,{id:"styleautomodules",children:["style.autoModules",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#styleautomodules",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"根据文件名自动启用 CSS Modules。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"boolean | RegExp"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"true"})," : 为以 ",(0,l.jsx)(n.code,{children:".module.css"})," ",(0,l.jsx)(n.code,{children:".module.less"})," ",(0,l.jsx)(n.code,{children:".module.scss"})," ",(0,l.jsx)(n.code,{children:".module.sass"})," 文件名结尾的样式文件启用 CSS Modules。"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"false"})," : 禁用 CSS Modules."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"RegExp"})," : 为匹配正则条件的所有文件启用 CSS Modules."]}),"\n",(0,l.jsxs)(n.h2,{id:"stylemodules",children:["style.modules",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stylemodules",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"CSS Modules 配置。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"object"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["一个常用的配置是 ",(0,l.jsx)(n.code,{children:"localsConvention"}),"，它可以改变 CSS Modules 的类名生成规则。"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    style: {\n      modules: {\n        localsConvention: 'camelCaseOnly',\n      },\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"对于以下样式："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-css",children:".box-title {\n  color: red;\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["你可以使用 ",(0,l.jsx)(n.code,{children:"styles.boxTitle"})," 来访问。"]}),"\n",(0,l.jsxs)(n.p,{children:["详细配置查看 ",(0,l.jsx)(n.a,{href:"https://github.com/madyankin/postcss-modules#usage",target:"_blank",rel:"noopener noreferrer",children:"postcss-modules"})]}),"\n",(0,l.jsxs)(n.h2,{id:"styletailwindcss",children:["style.tailwindcss",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#styletailwindcss",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["用于修改 ",(0,l.jsx)(n.a,{href:"https://tailwindcss.com/docs/configuration",target:"_blank",rel:"noopener noreferrer",children:"Tailwind CSS"})," 的配置项。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"object | Function"})]}),"\n",(0,l.jsx)(n.li,{children:"默认值："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"const tailwind = {\n  content: [\n    './src/**/*.{js,jsx,ts,tsx}',\n    './config/html/**/*.{html,ejs,hbs}',\n    './storybook/**/*',\n  ],\n};\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"启用-tailwind-css",children:["启用 Tailwind CSS",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#启用-tailwind-css",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["在使用 ",(0,l.jsx)(n.code,{children:"style.tailwindcss"})," 之前，你需要启用 Module Tools 的 Tailwind CSS 插件。"]}),"\n",(0,l.jsxs)(n.p,{children:["请阅读",(0,l.jsx)(n.a,{href:"/guide/best-practices/use-tailwindcss",children:"「使用 Tailwind CSS」"})," 章节来了解开启方式。"]}),"\n",(0,l.jsxs)(n.h3,{id:"类型",children:["类型",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["值为 ",(0,l.jsx)(n.code,{children:"object"})," 类型时，与默认配置通过 ",(0,l.jsx)(n.code,{children:"Object.assign"})," 合并。"]}),"\n",(0,l.jsxs)(n.p,{children:["值为 ",(0,l.jsx)(n.code,{children:"Function"})," 类型时，函数返回的对象与默认配置通过 ",(0,l.jsx)(n.code,{children:"Object.assign"})," 合并。"]}),"\n",(0,l.jsxs)(n.p,{children:["其他的使用方式和 Tailwind CSS 一致: ",(0,l.jsx)(n.a,{href:"https://tailwindcss.com/docs/configuration",target:"_blank",rel:"noopener noreferrer",children:"快速传送门"}),"。"]}),"\n",(0,l.jsxs)(n.h3,{id:"注意事项",children:["注意事项",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"注意："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["如果你同时使用了 ",(0,l.jsx)(n.code,{children:"tailwind.config.{ts,js}"})," 文件和 ",(0,l.jsx)(n.code,{children:"tools.tailwindcss"})," 选项，那么 ",(0,l.jsx)(n.code,{children:"tools.tailwindcss"})," 定义的配置会优先生效，并覆盖 ",(0,l.jsx)(n.code,{children:"tailwind.config.{ts,js}"})," 中定义的内容。"]}),"\n",(0,l.jsxs)(n.li,{children:["如果你同时使用了 ",(0,l.jsx)(n.code,{children:"designSystem"})," 配置项，那么 Tailwind CSS 的 ",(0,l.jsx)(n.code,{children:"theme"})," 配置将会被 ",(0,l.jsx)(n.code,{children:"designSystem"})," 的值所覆盖。"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["其他配置的使用方式与 Tailwind CSS 官方用法一致，请参考 ",(0,l.jsx)(n.a,{href:"https://tailwindcss.com/docs/configuration",target:"_blank",rel:"noopener noreferrer",children:"tailwindcss - Configuration"}),"。"]}),"\n",(0,l.jsxs)(n.h2,{id:"target",children:["target",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#target",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"target"})," 用于为生成的 JavaScript 代码设置目标环境。它让 Module Tools 将目标环境无法识别的 JavaScript 语法转换为在这些环境中可用的低版本 JavaScript 语法。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"类型："}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"type Target =\n  | 'es5'\n  | 'es6'\n  | 'es2015'\n  | 'es2016'\n  | 'es2017'\n  | 'es2018'\n  | 'es2019'\n  | 'es2020'\n  | 'es2021'\n  | 'es2022'\n  | 'esnext';\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"'es6'"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["例如，将代码编译到 ",(0,l.jsx)(n.code,{children:"es5"})," 语法："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    target: 'es5',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"transformimport",children:["transformImport",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#transformimport",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"提供与 babel-plugin-import 等价的能力和配置，基于 SWC 实现。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"object[]"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["数组元素为一个 babel-plugin-import 的配置对象。配置对象可以参考 ",(0,l.jsx)(n.a,{href:"https://github.com/umijs/babel-plugin-import#options",target:"_blank",rel:"noopener noreferrer",children:"options"}),"。"]}),"\n",(0,l.jsx)(n.p,{children:"使用示例："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    transformImport: [\n      // babel-plugin-import 的 options 配置\n      {\n        libraryName: 'foo',\n        style: true,\n      },\n    ],\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["参考",(0,l.jsx)(n.a,{href:"/plugins/official-list/plugin-import#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9",children:"「Import 插件——注意事项」"})]}),"\n",(0,l.jsxs)(n.h2,{id:"transformlodash",children:["transformLodash",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#transformlodash",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["是否模块化 ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/lodash",target:"_blank",rel:"noopener noreferrer",children:"lodash"})," 的导入，删除未使用的 lodash 模块，从而减少 lodash 代码体积。这项优化基于 ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/babel-plugin-lodash",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-lodash"})," 和 ",(0,l.jsx)(n.a,{href:"https://github.com/web-infra-dev/swc-plugins/tree/main/crates/plugin_lodash",target:"_blank",rel:"noopener noreferrer",children:"swc-plugin-lodash"})," 实现。"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型：",(0,l.jsx)(n.code,{children:"boolean"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值：",(0,l.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"该选项默认开启，Module Tools 会自动将 lodash 的代码引用指向子路径。"}),"\n",(0,l.jsx)(n.p,{children:"比如："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="input.js"',children:"import _ from 'lodash';\nimport { add } from 'lodash/fp';\n\nconst addOne = add(1);\n_.map([1, 2, 3], addOne);\n"})}),"\n",(0,l.jsx)(n.p,{children:"转换后的代码："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="output.js"',children:"import _add from 'lodash/fp/add';\nimport _map from 'lodash/map';\n\nconst addOne = _add(1);\n_map([1, 2, 3], addOne);\n"})}),"\n",(0,l.jsx)(n.p,{children:"然而有时候 lodash 的 import 转换可能会生成不符合预期的代码，此时你可以手动关闭这项优化："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    transformLodash: false,\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"umdglobals",children:["umdGlobals",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#umdglobals",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"指定 UMD 产物外部导入的全局变量。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"Record<string, string>"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    umdGlobals: {\n      react: 'React',\n      'react-dom': 'ReactDOM',\n    },\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["此时，",(0,l.jsx)(n.code,{children:"react"})," 和 ",(0,l.jsx)(n.code,{children:"react-dom"})," 会被看做是外部导入的全局变量，不会被打包进 UMD 产物中，而是通过 ",(0,l.jsx)(n.code,{children:"global.React"})," 和 ",(0,l.jsx)(n.code,{children:"global.ReactDOM"})," 的方式进行访问。"]}),"\n",(0,l.jsxs)(n.h2,{id:"umdmodulename",children:["umdModuleName",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#umdmodulename",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"指定 UMD 产物的模块名。"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["类型： ",(0,l.jsx)(n.code,{children:"string | Function"})]}),"\n",(0,l.jsxs)(n.li,{children:["默认值： ",(0,l.jsx)(n.code,{children:"name => name"})]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n    umdModuleName: 'myLib',\n  },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["此时 UMD 产物会去挂载到 ",(0,l.jsx)(n.code,{children:"global.myLib"})," 上。"]}),"\n",(0,l.jsxs)(n.div,{className:"modern-directive tip",children:[(0,l.jsx)(n.div,{className:"modern-directive-title",children:"TIP"}),(0,l.jsxs)(n.div,{className:"modern-directive-content",children:["\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"需要遵守 UMD 规范，UMD 产物的模块名不能和全局变量名冲突。"}),"\n",(0,l.jsxs)(n.li,{children:["模块名会被转换为驼峰命名，如 ",(0,l.jsx)(n.code,{children:"my-lib"})," 会被转换为 ",(0,l.jsx)(n.code,{children:"myLib"}),"，可参考",(0,l.jsx)(n.a,{href:"https://github.com/babel/babel/blob/main/packages/babel-types/src/converters/toIdentifier.ts",target:"_blank",rel:"noopener noreferrer",children:"toIdentifier"}),"。"]}),"\n"]}),"\n"]})]}),"\n",(0,l.jsx)(n.p,{children:"同时函数形式可以接收一个参数，为当前打包文件的输出路径"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"export default defineConfig({\n  buildConfig: {\n    format: 'umd',\n    umdModuleName: path => {\n      if (path.includes('index')) {\n        return 'myLib';\n      } else {\n        return 'myLib2';\n      }\n    },\n  },\n});\n"})})]})}(i=globalThis).__RSPRESS_PAGE_META||(i.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fapi%2Fconfig%2Fbuild-config.mdx"]={toc:[{text:"alias",id:"alias",depth:2},{text:"asset",id:"asset",depth:2},{text:"asset.path",id:"assetpath",depth:2},{text:"asset.limit",id:"assetlimit",depth:2},{text:"asset.publicPath",id:"assetpublicpath",depth:2},{text:"asset.svgr",id:"assetsvgr",depth:2},{text:"asset.svgr.include",id:"assetsvgrinclude",depth:2},{text:"asset.svgr.exclude",id:"assetsvgrexclude",depth:2},{text:"autoExternal",id:"autoexternal",depth:2},{text:"autoExternal.dependencies",id:"autoexternaldependencies",depth:2},{text:"autoExternal.peerDependencies",id:"autoexternalpeerdependencies",depth:2},{text:"buildType",id:"buildtype",depth:2},{text:"copy",id:"copy",depth:2},{text:"copy.patterns",id:"copypatterns",depth:2},{text:"copy.options",id:"copyoptions",depth:2},{text:"define",id:"define",depth:2},{text:"dts",id:"dts",depth:2},{text:"dts.abortOnError",id:"dtsabortonerror",depth:2},{text:"dts.distPath",id:"dtsdistpath",depth:2},{text:"dts.only",id:"dtsonly",depth:2},{text:"dts.respectExternal",id:"dtsrespectexternal",depth:2},{text:"dts.tsconfigPath",id:"dtstsconfigpath",depth:2},{text:"esbuildOptions",id:"esbuildoptions",depth:2},{text:"externalHelpers",id:"externalhelpers",depth:2},{text:"externals",id:"externals",depth:2},{text:"format",id:"format",depth:2},{text:"format: esm",id:"format-esm",depth:3},{text:"format: cjs",id:"format-cjs",depth:3},{text:"format: iife",id:"format-iife",depth:3},{text:"format: umd",id:"format-umd",depth:3},{text:"input",id:"input",depth:2},{text:"jsx",id:"jsx",depth:2},{text:"metafile",id:"metafile",depth:2},{text:"minify",id:"minify",depth:2},{text:"outDir",id:"outdir",depth:2},{text:"platform",id:"platform",depth:2},{text:"redirect",id:"redirect",depth:2},{text:"sideEffects",id:"sideeffects",depth:2},{text:"sourceDir",id:"sourcedir",depth:2},{text:"sourceMap",id:"sourcemap",depth:2},{text:"sourceType",id:"sourcetype",depth:2},{text:"splitting",id:"splitting",depth:2},{text:"style",id:"style",depth:2},{text:"style.less",id:"styleless",depth:2},{text:"style.less.lessOptions",id:"stylelesslessoptions",depth:2},{text:"style.less.additionalData",id:"stylelessadditionaldata",depth:2},{text:"style.less.implementation",id:"stylelessimplementation",depth:2},{text:"sass",id:"sass",depth:2},{text:"style.sass.sassOptions",id:"stylesasssassoptions",depth:2},{text:"style.sass.additionalData",id:"stylesassadditionaldata",depth:2},{text:"style.sass.implementation",id:"stylesassimplementation",depth:2},{text:"style.postcss",id:"stylepostcss",depth:2},{text:"style.inject",id:"styleinject",depth:2},{text:"style.autoModules",id:"styleautomodules",depth:2},{text:"style.modules",id:"stylemodules",depth:2},{text:"style.tailwindcss",id:"styletailwindcss",depth:2},{text:"启用 Tailwind CSS",id:"启用-tailwind-css",depth:3},{text:"类型",id:"类型",depth:3},{text:"注意事项",id:"注意事项",depth:3},{text:"target",id:"target",depth:2},{text:"transformImport",id:"transformimport",depth:2},{text:"transformLodash",id:"transformlodash",depth:2},{text:"umdGlobals",id:"umdglobals",depth:2},{text:"umdModuleName",id:"umdmodulename",depth:2}],title:"buildConfig",frontmatter:{sidebar_position:1}};var o=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,l.jsx)(n,(0,r._)((0,d._)({},e),{children:(0,l.jsx)(a,(0,d._)({},e))})):a(e)}},95230:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return a}});var i,d=s("15169"),r=s("43932"),l=s("9880"),c=s("23169");function t(e){var n=Object.assign({pre:"pre",code:"code",p:"p"},(0,c.useMDXComponents)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",meta:'title="modern.config.ts"',children:"import { myEsbuildPlugin } from './myEsbuildPlugin';\n\nexport default defineConfig({\n  buildConfig: {\n    esbuildOptions: options => {\n      options.plugins = [myEsbuildPlugin, ...options.plugins];\n      return options;\n    },\n  },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"在增加 esbuild 插件时，请注意你需要将插件加在 plugins 数组的头部，因为 Modern.js Module 内部也是通过一个 esbuild 插件介入到整个构建流程中去的，因此需要将自定义插件优先注册。"})]})}(i=globalThis).__RSPRESS_PAGE_META||(i.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fcomponents%2Fregister-esbuild-plugin.mdx"]={toc:[],title:"",frontmatter:{}};var a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,c.useMDXComponents)(),e.components).wrapper;return n?(0,l.jsx)(n,(0,r._)((0,d._)({},e),{children:(0,l.jsx)(t,(0,d._)({},e))})):t(e)}}}]);