(self.webpackChunk_modern_js_module_tools_docs=self.webpackChunk_modern_js_module_tools_docs||[]).push([["docs_zh_plugins_guide_plugin-object_mdx"],{33633:function(n,e,o){"use strict";o.r(e),o.d(e,{default:function(){return c}});var s,l=o("15169"),i=o("43932"),r=o("9880"),d=o("23169");function t(n){var e=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",code:"code",pre:"pre",h2:"h2",strong:"strong"},(0,d.useMDXComponents)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"插件对象",children:["插件对象",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件对象",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"Module-tools 插件是一个对象，对象包含以下属性："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"name"}),"：插件的名称，唯一标识符。"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"setup"}),"：插件初始化函数，只会执行一次。setup 函数可以返回一个 ",(0,r.jsx)(e.a,{href:"/",children:"Hooks 对象"}),"，module-tools 会在特定的时机执行 Hooks 对象上定义的 Hook 对应的函数。"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["例如在下面的插件代码示例中，在项目开始执行构建任务之前会触发 ",(0,r.jsx)(e.code,{children:"beforeBuild"})," 函数的执行，并打印 ",(0,r.jsx)(e.code,{children:"build start"})," 的 log 内容。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",meta:'title="./plugins/demo.tsx"',children:"import type { CliPlugin, ModuleTools } from '@modern-js/module-tools';\n\nconst myPlugin: CliPlugin<ModuleTools> = {\n  name: 'my-plugin',\n\n  setup() {\n    return {\n      // this is hook\n      beforeBuild: () => {\n        console.info('build start');\n      },\n    };\n  },\n};\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",meta:'title="modern.config.ts"',children:"import { myPlugin } from './plugins/demo';\nexport default {\n  plugins: [myPlugin()],\n};\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"插件类型定义",children:["插件类型定义",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件类型定义",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["使用 TypeScript 时，可以引入内置的 ",(0,r.jsx)(e.code,{children:"CliPlugin"})," 和 ",(0,r.jsx)(e.code,{children:"ModuleTools"})," 类型，为插件提供正确的类型推导："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import type { CliPlugin, ModuleTools } from '@modern-js/module-tools';\n\nconst myPlugin: CliPlugin<ModuleTools> = {\n  name: 'my-plugin',\n\n  setup() {\n    const foo = '1';\n\n    return {\n      // this is hook\n      afterBuild: () => {\n        //...\n      },\n    };\n  },\n};\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"插件配置项",children:["插件配置项",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#插件配置项",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"建议将插件写成函数的形式"}),"，使插件能通过函数入参来接收配置项："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import type { CliPlugin, ModuleTools } from '@modern-js/module-tools';\n\ntype MyPluginOptions = {\n  foo: string;\n};\n\nconst myPlugin = (options: MyPluginOptions): CliPlugin<ModuleTools> => ({\n  name: 'my-plugin',\n\n  setup() {\n    console.log(options.foo);\n  },\n});\n"})})]})}(s=globalThis).__RSPRESS_PAGE_META||(s.__RSPRESS_PAGE_META={}),globalThis.__RSPRESS_PAGE_META["zh%2Fplugins%2Fguide%2Fplugin-object.mdx"]={toc:[{text:"插件类型定义",id:"插件类型定义",depth:2},{text:"插件配置项",id:"插件配置项",depth:2}],title:"插件对象",frontmatter:{sidebar_position:2}};var c=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=Object.assign({},(0,d.useMDXComponents)(),n.components).wrapper;return e?(0,r.jsx)(e,(0,i._)((0,l._)({},n),{children:(0,r.jsx)(t,(0,l._)({},n))})):t(n)}}}]);